{
    "version": "https://jsonfeed.org/version/1",
    "title": "唐仔橙 • All posts by \"编程基础\" category",
    "description": "喜欢探索世界,在读研究生,计算机爱好者的成长记录",
    "home_page_url": "https://tangzichengcc.github.io",
    "items": [
        {
            "id": "https://tangzichengcc.github.io/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-unix%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3/",
            "url": "https://tangzichengcc.github.io/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-unix%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3/",
            "title": "c语言回炉重造-unix系统接口",
            "date_published": "2023-11-12T07:29:52.000Z",
            "content_html": "<h2 id=\"8-2-低级IO-read-x2F-write\"><a href=\"#8-2-低级IO-read-x2F-write\" class=\"headerlink\" title=\"8.2 低级IO read&#x2F;write\"></a>8.2 低级IO read&#x2F;write</h2><p>​\t利用这个系统调用来构造高级一点的函数, 库函数之类的</p>\n<p>​\t系统调用的函数原型集中放在一个头文件syscalls.h中( 事实上目前的系统里只有syscall.h,最后也会调用unistd.h)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将输入复制到输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#include &quot;syscalls.h&quot;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[BUFSIZ];</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>((n = read(<span class=\"number\">0</span>, buf, BUFSIZ)) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">        write(<span class=\"number\">1</span>, buf,n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io.c:<span class=\"number\">3</span>:<span class=\"number\">10</span>: fatal error: syscalls.h: No such file or directory</span><br><span class=\"line\">    <span class=\"number\">3</span> | <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;syscalls.h&quot;</span></span></span><br><span class=\"line\">      |          ^~~~~~~~~~~~</span><br><span class=\"line\">compilation terminated.</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/sesiria/article/details/52337114\">https://blog.csdn.net/sesiria/article/details/52337114</a></p>\n<p>​\tPS: &#x2F;usr&#x2F;include&#x2F;目录下存着c的各种头文件,可以从这里寻找</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /usr/include/syscall.h</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">include &lt;sys/syscall.h&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t确实是存在这个目录的,但是为什么没找到呢? <font color=\"red\"> syscall.h, 没有s</font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;syscall.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span> <span class=\"comment\">//stdio.h里面有BUFSIZ, 或者自己定义一下</span></span></span><br></pre></td></tr></table></figure>\n\n<p>​\t</p>\n<p>​\t实现getchar(无缓冲区)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;syscalls.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getchar</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (read(<span class=\"number\">0</span>,&amp;c,<span class=\"number\">1</span>) == <span class=\"number\">1</span>) ? (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>) c: EOF;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t</p>\n<p>​\t第二版 一次读入一组字符,但每次只输出一个字符(简单的带<strong>缓冲区</strong>的版本)</p>\n<p>​\t但是这个函数调用完了,缓冲区什么的也都没了吧?? 不是的, static的生命周期,在整个程序的运行期间都存在</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#include &quot;syscalls.h&quot;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getchar</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((s = getchar())!=EOF)&#123;</span><br><span class=\"line\">    \twrite(<span class=\"number\">1</span>,&amp;s,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getchar</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">char</span> buf[BUFSIZ];</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">char</span> *bufp = buf;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//缓冲区为空</span></span><br><span class=\"line\">        n = read(<span class=\"number\">0</span>,buf, <span class=\"keyword\">sizeof</span> buf);</span><br><span class=\"line\">        bufp = buf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (--n&gt;<span class=\"number\">0</span>) ? (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>) *bufp++ : EOF;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-3-open、creat、close和unlink\"><a href=\"#8-3-open、creat、close和unlink\" class=\"headerlink\" title=\"8.3 open、creat、close和unlink\"></a>8.3 open、creat、close和unlink</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> fd;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">open</span><span class=\"params\">(<span class=\"type\">char</span> *name,<span class=\"type\">int</span> flags,<span class=\"type\">int</span> perms)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fd = open(name, flags, perms)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PERMS 0666</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">error</span><span class=\"params\">(<span class=\"type\">char</span> *,...)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f1,f2,n;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[BUFSIZ];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</span><br><span class=\"line\">        error(<span class=\"string\">&quot;Usage: cp from to&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((f1 = open(argv[<span class=\"number\">1</span>],O_RDONLY,<span class=\"number\">0</span>)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        error(<span class=\"string\">&quot;cp: can&#x27;t open %s&quot;</span>,argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((f2 = creat(argv[<span class=\"number\">2</span>],PERMS)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        error(<span class=\"string\">&quot;cp: can&#x27;t create %s,mode %03o&quot;</span>,argv[<span class=\"number\">2</span>],PERMS);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((n = read(f1,buf,BUFSIZ)) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(write(f2,buf,n) !=n)</span><br><span class=\"line\">            error(<span class=\"string\">&quot;cp: write error on file %s&quot;</span>,argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">error</span><span class=\"params\">(<span class=\"type\">char</span> *fmt,...)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    va_list args;</span><br><span class=\"line\">    </span><br><span class=\"line\">    va_start(args,fmt);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;error: &quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">vfprintf</span>(<span class=\"built_in\">stderr</span>,fmt,args);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    va_end(args);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8-5-fopen与getc函数的实现\"><a href=\"#8-5-fopen与getc函数的实现\" class=\"headerlink\" title=\"8.5 fopen与getc函数的实现\"></a>8.5 fopen与getc函数的实现</h2><p>给的iobuf应该是dos的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;syscalls.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PERMS 0666</span></span><br><span class=\"line\"></span><br><span class=\"line\">FILE *<span class=\"title function_\">fopen</span><span class=\"params\">(<span class=\"type\">char</span> *name, <span class=\"type\">char</span> *mode)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*mode != <span class=\"string\">&#x27;r&#x27;</span> &amp;&amp; *mode !=<span class=\"string\">&#x27;w&#x27;</span> &amp;&amp; *mode!=<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (fp= _iob; fp &lt; _iob + OPEN_MAX; fp++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((fp-&gt;flag &amp; (_READ | _WRITE)) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp &gt; _iob+OPEN_MAX)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*mode == <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">        fd = creat(name,PERMS);</span><br><span class=\"line\">   \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*mode == <span class=\"string\">&#x27;a&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((fd = open(name,O_WRONLY,<span class=\"number\">0</span>)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            fd = creat(name,PERMS);</span><br><span class=\"line\">        lseek(fd,<span class=\"number\">0L</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">        fd = open(name,O_RDONLY,<span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fp-&gt;fd = fd;</span><br><span class=\"line\">    fd-&gt;cnt =<span class=\"number\">0</span>;</span><br><span class=\"line\">    fp-&gt;base = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    fp-&gt;flag = (*mode == <span class=\"string\">&#x27;r&#x27;</span>) ? _READ : _WRITE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _fillbuf(FILE *fp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> bufsize;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((fp-&gt;flag&amp;(_READ|_EOF|_ERR)) != _READ)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EOF:</span><br><span class=\"line\">    bufsize = (fp-&gt;flag &amp; _UNBUF) ? <span class=\"number\">1</span> : BUFSIZE;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp-&gt;base == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((fp-&gt;base = (<span class=\"type\">char</span> *) <span class=\"built_in\">malloc</span>(bufsize)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> EOF;</span><br><span class=\"line\">    fp-&gt;ptr = fp-&gt;base;</span><br><span class=\"line\">    fp-&gt;cnt = read(fp-&gt;fd, fp-&gt;ptr,bufsize);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--fp-&gt;cnt &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fp-&gt;cnt == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            fp-&gt;flag |= _EOF;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            fp-&gt;flag !=_ERR:</span><br><span class=\"line\">        fp-&gt;cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EOF:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>) *fp-&gt;ptr++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"8-6\"><a href=\"#8-6\" class=\"headerlink\" title=\"8.6\"></a>8.6</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NAME_MAX 14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">long</span> ino;</span><br><span class=\"line\">    <span class=\"type\">char</span> name[NAME_MAX+<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125; Dirent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fd;</span><br><span class=\"line\">    Dirent d;</span><br><span class=\"line\">&#125; DIR1;</span><br><span class=\"line\"></span><br><span class=\"line\">DIR1 *<span class=\"title function_\">opendir1</span><span class=\"params\">(<span class=\"type\">char</span> *dirname)</span>;</span><br><span class=\"line\">Dirent *<span class=\"title function_\">readdir1</span><span class=\"params\">(DIR1 *dfd)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">closedir1</span><span class=\"params\">(DIR1 *dfd)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &quot;dirent.h&quot;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">fsize</span><span class=\"params\">(<span class=\"type\">char</span> *)</span>;</span><br><span class=\"line\"><span class=\"comment\">//int stat(char *,struct stat * );</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">dirwalk</span><span class=\"params\">(<span class=\"type\">char</span> *, <span class=\"type\">void</span> (*fcn)(<span class=\"type\">char</span> *))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc == <span class=\"number\">1</span>)</span><br><span class=\"line\">        fsize(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(--argc &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            fsize(*++argv);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">fsize</span><span class=\"params\">(<span class=\"type\">char</span> *name)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">stbuf</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stat(name,&amp;stbuf) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;fsize: can&#x27;t access %s\\n&quot;</span>,name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((stbuf.st_mode &amp; S_IFMT) == S_IFDIR)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;is a dir\\n&quot;</span>);</span><br><span class=\"line\">\t\tdirwalk(name, fsize);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%8ld %s\\n&quot;</span>,stbuf.st_size,name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_PATH 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">dirwalk</span><span class=\"params\">(<span class=\"type\">char</span> *dir,<span class=\"type\">void</span> (*fcn)(<span class=\"type\">char</span> *))</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> name[MAX_PATH];</span><br><span class=\"line\">    Dirent *dp;</span><br><span class=\"line\">    DIR1 *dfd;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((dfd = opendir1(dir)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;dirwalk: can&#x27;t open %s\\n&quot;</span>,dir);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;here\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((dp = readdir1(dfd)) != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;dp-&gt;name:%s&quot;</span>,dp-&gt;name);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(dp-&gt;name,<span class=\"string\">&quot;.&quot;</span>) ==<span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(dp-&gt;name,<span class=\"string\">&quot;..&quot;</span>)==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">//跳过自身和父目录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(dir)+<span class=\"built_in\">strlen</span>(dp-&gt;name)+<span class=\"number\">2</span> &gt; <span class=\"keyword\">sizeof</span>(name))</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;dirwalk: name %s/%s too long\\n&quot;</span>,dir,dp-&gt;name);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(name,<span class=\"string\">&quot;%s/%s&quot;</span>,dir,dp-&gt;name);</span><br><span class=\"line\">            (*fcn)(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    closedir1(dfd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DIR1 *<span class=\"title function_\">opendir1</span><span class=\"params\">(<span class=\"type\">char</span> *dirname)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">stbuf</span>;</span></span><br><span class=\"line\">\tDIR1 *dp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((fd = open(dirname,<span class=\"number\">0</span>,O_RDONLY,<span class=\"number\">0</span>)) == <span class=\"number\">-1</span></span><br><span class=\"line\">\t|| fstat(fd,&amp;stbuf) == <span class=\"number\">-1</span></span><br><span class=\"line\">\t|| (dp = (DIR1 *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(DIR1))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdp-&gt;fd = fd;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/dir.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> DIRSIZ</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DIRSIZ 14</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">direct1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">ino_t</span> d_ino;</span><br><span class=\"line\">\t<span class=\"type\">char</span> d_name[DIRSIZ];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Dirent *<span class=\"title function_\">readdir1</span><span class=\"params\">(DIR1 *dp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">direct1</span> <span class=\"title\">dirbuf</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> Dirent d;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(read(dp-&gt;fd,(<span class=\"type\">char</span> *)&amp;dirbuf,<span class=\"keyword\">sizeof</span>(dirbuf)) == <span class=\"keyword\">sizeof</span>(dirbuf))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dirbuf.d_ino == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\td.ino = dirbuf.d_ino;</span><br><span class=\"line\">\t<span class=\"built_in\">strncpy</span>(d.name, dirbuf.d_name,DIRSIZ);</span><br><span class=\"line\">\td.name[DIRSIZ] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">closedir1</span><span class=\"params\">(DIR1 *dp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dp)&#123;</span><br><span class=\"line\">\tclose(dp-&gt;fd);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(dp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NAME_MAX 14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/dir.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_PATH 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">dirwalk</span><span class=\"params\">(<span class=\"type\">char</span> *dir,<span class=\"type\">void</span> (*fcn)(<span class=\"type\">char</span> *))</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> name[MAX_PATH];</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dirent</span> *<span class=\"title\">dp</span>;</span></span><br><span class=\"line\">    DIR *dfd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((dfd = opendir(dir)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;dirwalk: can&#x27;t open %s\\n&quot;</span>,dir);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;here\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((dp = readdir(dfd)) != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;dp-&gt;name:%s&quot;,dp-&gt;d_name);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(dp-&gt;d_name,<span class=\"string\">&quot;.&quot;</span>) ==<span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(dp-&gt;d_name,<span class=\"string\">&quot;..&quot;</span>)==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">//跳过自身和父目录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(dir)+<span class=\"built_in\">strlen</span>(dp-&gt;d_name)+<span class=\"number\">2</span> &gt; <span class=\"keyword\">sizeof</span>(name))</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;dirwalk: name %s/%s too long\\n&quot;</span>,dir,dp-&gt;d_name);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(name,<span class=\"string\">&quot;%s/%s&quot;</span>,dir,dp-&gt;d_name);</span><br><span class=\"line\">            (*fcn)(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    closedir(dfd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">fsize</span><span class=\"params\">(<span class=\"type\">char</span> *name)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">stbuf</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stat(name,&amp;stbuf) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;fsize: can&#x27;t access %s\\n&quot;</span>,name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((stbuf.st_mode &amp; S_IFMT) == S_IFDIR)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//printf(&quot;is a dir\\n&quot;);</span></span><br><span class=\"line\">\t\tdirwalk(name, fsize);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%8ld %s\\n&quot;</span>,stbuf.st_size,name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc == <span class=\"number\">1</span>)</span><br><span class=\"line\">        fsize(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(--argc &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            fsize(*++argv);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t其实那些opendir函数等都不需要自己实现(不过从练习的角度讲,可以自己实现) , 自己实现的话,记得要根据操作系统的情况, 把对应的结构体都修改了,否则就会出问题</p>\n<p><a href=\"https://github.com/Heatwave/The-C-Programming-Language-2nd-Edition/tree/master/chapter-8-the-unix-system-interface\">https://github.com/Heatwave/The-C-Programming-Language-2nd-Edition/tree/master/chapter-8-the-unix-system-interface</a></p>\n<p><a href=\"https://www.learntosolveit.com/cprogramming/chapter8/ex_8.5_fsize\">https://www.learntosolveit.com/cprogramming/chapter8/ex_8.5_fsize</a></p>\n<p>niubi: <a href=\"https://stackoverflow.com/questions/7381000/what-is-wrong-with-this-example-from-kr\">https://stackoverflow.com/questions/7381000/what-is-wrong-with-this-example-from-kr</a></p>\n<h2 id=\"8-7-存储分配程序实例\"><a href=\"#8-7-存储分配程序实例\" class=\"headerlink\" title=\"8.7 存储分配程序实例\"></a>8.7 存储分配程序实例</h2><p>​\t内存抽象成块的组织形式,以链表的形式进行组织,<strong>每个块都含有一个长度、指向下一个块的指针以及一个指向自身数据存储位置的指针.</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> Align; <span class=\"comment\">//按照long类型的边界对齐</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">header</span>&#123;</span> <span class=\"comment\">//内存块的头部信息</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">header</span> *<span class=\"title\">ptr</span>;</span> <span class=\"comment\">// 空闲块链表中的下一块</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> size; <span class=\"comment\">// 当前块的大小</span></span><br><span class=\"line\">    &#125; s;</span><br><span class=\"line\">    Align x; <span class=\"comment\">//强制块的对齐 (效果就是8字节对齐,计算机中对齐通常取决于包含的最大基本数据类型的大小</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">header</span> <span class=\"title\">Header</span>;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>malloc时,   ,找到的块太大的话,把尾部返回给用户,这样,初始块的头部只需要修改size就可以了</p>\n<img src=\"/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-unix%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3/Snipaste_2023-11-12_11-59-06.jpg\" alt=\"Snipaste_2023-11-12_11-59-06\" style=\"zoom:33%;\">\n\n\n\n<p>free时,寻找的首先是这样的情况,   bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr</p>\n<img src=\"/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-unix%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3/9f55d85647f9035a945ab734b4d376be.png\" alt=\"9f55d85647f9035a945ab734b4d376be\" style=\"zoom: 50%;\">\n\n<p>如果不符合,看是否符合这种情况,即被释放的块在链表的开头或者末尾</p>\n<img src=\"/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-unix%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3/image-20231112121942990.png\" alt=\"image-20231112121942990\" style=\"zoom:50%;\">\n\n\n\n<p>最终代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> Align; <span class=\"comment\">//按照long类型的边界对齐</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">header</span>&#123;</span> <span class=\"comment\">//内存块的头部信息</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">header</span> *<span class=\"title\">ptr</span>;</span> <span class=\"comment\">// 空闲块链表中的下一块</span></span><br><span class=\"line\">        <span class=\"type\">unsigned</span> size; <span class=\"comment\">// 当前块的大小</span></span><br><span class=\"line\">    &#125; s;</span><br><span class=\"line\">    Align x; <span class=\"comment\">//强制块的对齐 (效果就是8字节对齐,计算机中对齐通常取决于包含的最大基本数据类型的大小</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">header</span> <span class=\"title\">Header</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> Header base; <span class=\"comment\">//从空链表开始?</span></span><br><span class=\"line\"><span class=\"type\">static</span> Header *freep  = <span class=\"literal\">NULL</span>; <span class=\"comment\">//空闲链表的初始指针</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">malloc</span><span class=\"params\">(<span class=\"type\">unsigned</span> nbytes)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Header *p,*prevp;</span><br><span class=\"line\">    Header *<span class=\"title function_\">morecore</span><span class=\"params\">(<span class=\"type\">unsigned</span>)</span>;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> nunits;</span><br><span class=\"line\"></span><br><span class=\"line\">    nunits = (nbytes+<span class=\"keyword\">sizeof</span>(Header)<span class=\"number\">-1</span>)/<span class=\"keyword\">sizeof</span>(Header)+<span class=\"number\">1</span>;<span class=\"comment\">// +1是那个Align x?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((prevp=freep) == <span class=\"literal\">NULL</span>)&#123; <span class=\"comment\">//没有空闲链表</span></span><br><span class=\"line\">        base.s.ptr = freep = prevp = &amp;base;</span><br><span class=\"line\">        base.s.size= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p = prevp-&gt;s.ptr; ;prevp=p,p = p-&gt;s.ptr)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;s.size &gt; nunits)&#123;<span class=\"comment\">//足够大</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p-&gt;s.size == nunits) <span class=\"comment\">//正好</span></span><br><span class=\"line\">                    prevp-&gt;s.ptr = p-&gt;s.ptr; <span class=\"comment\">//从链表中卸下p</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;  <span class=\"comment\">//大了,分配剩下的</span></span><br><span class=\"line\">                p-&gt;s.size = p-&gt;s.size - nunits; <span class=\"comment\">//剩下的大小</span></span><br><span class=\"line\">                p += p-&gt;s.size; <span class=\"comment\">//p移动到了分配的那里</span></span><br><span class=\"line\">                p -&gt;s.size = nunits;<span class=\"comment\">//p的大小改成了分配的大小,(那之前的呢?)</span></span><br><span class=\"line\">            <span class=\"comment\">// 逻辑是这样,找到的块太大的话,把尾部返回给用户,</span></span><br><span class=\"line\">            <span class=\"comment\">//这样,初始块的头部只需要修改size就可以了</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            freep = prevp;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"type\">void</span> *)(p+<span class=\"number\">1</span>);<span class=\"comment\">//返回数据部分的指针</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == freep) <span class=\"comment\">//闭环的空闲链表</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((p = morecore(nunits)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; <span class=\"comment\">//没有剩余的存储空间了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">free</span><span class=\"params\">(<span class=\"type\">void</span> *ap)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Header *bp, *p;</span><br><span class=\"line\"></span><br><span class=\"line\">    bp  = (Header *)ap - <span class=\"number\">1</span>; <span class=\"comment\">//指向块头</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.ptr))</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; <span class=\"comment\">//被释放的块在链表的开头或者末尾</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( bp + bp-&gt;s.size == p-&gt;s.ptr)&#123; <span class=\"comment\">//与前面相邻块合并</span></span><br><span class=\"line\">        bp-&gt;s.size += p-&gt;s.ptr-&gt;s.size;</span><br><span class=\"line\">        bp-&gt;s.ptr = p-&gt;s.ptr-&gt;s.ptr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        bp-&gt;s.ptr = p-&gt;s.ptr; <span class=\"comment\">//串进链表里</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p + p-&gt;s.size == bp)&#123; <span class=\"comment\">//与后面的堆块合并</span></span><br><span class=\"line\">        p-&gt;s.size += bp-&gt;s.size;</span><br><span class=\"line\">        p-&gt;s.ptr = bp-&gt;s.ptr; <span class=\"comment\">//这一句是不是没必要呢?? 有必要的,如果上一次和前面的合并了</span></span><br><span class=\"line\">        <span class=\"comment\">//这里也可能出现再次合并, 这里需要修改指针的</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        p-&gt;s.ptr = bp;</span><br><span class=\"line\">    freep = p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NALLOC 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">Header *<span class=\"title function_\">morecore</span><span class=\"params\">(<span class=\"type\">unsigned</span> nu)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *cp, *sbrk(<span class=\"type\">int</span>);</span><br><span class=\"line\">    Header *up;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nu &lt; NALLOC) nu = NALLOC;</span><br><span class=\"line\"></span><br><span class=\"line\">    cp = sbrk(nu * <span class=\"keyword\">sizeof</span>(Header));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cp == (<span class=\"type\">char</span> *) <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    up = (Header *) cp;</span><br><span class=\"line\">    up-&gt;s.size = nu;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>((<span class=\"type\">void</span> * )(up+<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> freep;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> *str1;</span><br><span class=\"line\">        <span class=\"type\">char</span> *str2;</span><br><span class=\"line\">        str1 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x20</span>);</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(str1, <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        str2 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x30</span>);</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(str2, <span class=\"string\">&quot;tang&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n",
            "tags": [
                "C语言"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E7%BB%93%E6%9E%84-%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/",
            "url": "https://tangzichengcc.github.io/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E7%BB%93%E6%9E%84-%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/",
            "title": "c语言回炉重造-结构-输入与输出",
            "date_published": "2023-10-31T10:00:20.000Z",
            "content_html": "<h1 id=\"第六章-结构\"><a href=\"#第六章-结构\" class=\"headerlink\" title=\"第六章 结构\"></a>第六章 结构</h1><p>​\t结构还是很重要的,在编写大型程序的时候,或者平常看源代码,会看到非常多的结构体</p>\n<h2 id=\"6-1-结构的基本知识\"><a href=\"#6-1-结构的基本知识\" class=\"headerlink\" title=\"6.1 结构的基本知识\"></a>6.1 结构的基本知识</h2><p>​\t在写这个程序的时候<font color=\"red\">遇到了很奇怪的问题</font>,dist &#x3D; sqrt(4.0);不会报错,但是dist &#x3D; sqrt(a);就会报错,百思不得其解.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">point</span> &#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> y;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">point</span> <span class=\"title\">maxpt</span> =</span> &#123;<span class=\"number\">320</span>,<span class=\"number\">200</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;length: %d, width: %d\\n&quot;</span>,maxpt.x,maxpt.y);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">double</span> dist;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f\\n&quot;</span>,(<span class=\"type\">double</span>)maxpt.x * maxpt.x + (<span class=\"type\">double</span>)maxpt.y * maxpt.y);</span><br><span class=\"line\">\tdist = <span class=\"built_in\">sqrt</span>(<span class=\"number\">4.0</span>);</span><br><span class=\"line\">\t<span class=\"type\">double</span> test = (<span class=\"type\">double</span>)maxpt.x * maxpt.x + (<span class=\"type\">double</span>)maxpt.y * maxpt.y;</span><br><span class=\"line\">\t<span class=\"type\">double</span> a = <span class=\"number\">4.0</span>;</span><br><span class=\"line\">\tdist = <span class=\"built_in\">sqrt</span>(a);</span><br><span class=\"line\">\t<span class=\"comment\">//dist = sqrt(test);</span></span><br><span class=\"line\">\t<span class=\"comment\">//dist = sqrt( (double)maxpt.x * maxpt.x + (double)maxpt.y * maxpt.y );</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(&quot;%f\\n&quot;,(double)maxpt.x * maxpt.x + (double)maxpt.y * maxpt.y);</span></span><br><span class=\"line\">\t<span class=\"comment\">//dist = sqrt(4.0);</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;duijiaoxian: %f\\n&quot;</span>,dist);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t神奇的gpt,所以是<font color=\"red\">编译优化的事</font>,   优化过后不用这个函数了,所以好像是显得没有问题一样,<strong>可以用gdb调试,会发现这里根本没有调用函数</strong></p>\n<img src=\"/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E7%BB%93%E6%9E%84-%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/Snipaste_2023-10-31_15-34-14.jpg\" alt=\"Snipaste_2023-10-31_15-34-14\" style=\"zoom:50%;\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">► <span class=\"number\">0x5555555551b5</span> &lt;main+<span class=\"number\">108</span>&gt;    movsd  xmm0, qword ptr [rip + <span class=\"number\">0xe7b</span>]</span><br><span class=\"line\">  <span class=\"number\">0x5555555551bd</span> &lt;main+<span class=\"number\">116</span>&gt;    movsd  qword ptr [rbp - <span class=\"number\">0x20</span>], xmm0</span><br><span class=\"line\">  <span class=\"number\">0x5555555551c2</span> &lt;main+<span class=\"number\">121</span>&gt;    mov    eax, dword ptr [rbp - <span class=\"number\">8</span>]</span><br></pre></td></tr></table></figure>\n\n<p>​\t链接上就好了 gcc main.c -lm</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">► <span class=\"number\">0x555555555244</span> &lt;main+<span class=\"number\">219</span>&gt;    call   <span class=\"built_in\">sqrt</span>@plt                &lt;<span class=\"built_in\">sqrt</span>@plt&gt;</span><br><span class=\"line\">       x: <span class=\"number\">0x7ffff7e5f7e0</span> (_IO_stdfile_1_lock) ◂— <span class=\"number\">0x0</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"6-2-结构与函数\"><a href=\"#6-2-结构与函数\" class=\"headerlink\" title=\"6.2 结构与函数\"></a>6.2 结构与函数</h2><p>​\t</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">point</span> &#123;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> y;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 矩形</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rect</span> &#123;</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">point</span> <span class=\"title\">pt1</span>;</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">point</span> <span class=\"title\">pt2</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> point <span class=\"title function_\">makepoint</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">point</span> <span class=\"title\">temp</span>;</span></span><br><span class=\"line\">        temp.x = x;</span><br><span class=\"line\">        temp.y = y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rect</span> <span class=\"title\">screen</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">point</span> <span class=\"title\">middle</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> point <span class=\"title function_\">makepoint</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> XMAX, YMAX;</span><br><span class=\"line\">    XMAX = YMAX = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    screen.pt1 = makepoint(<span class=\"number\">100</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">    screen.pt2 = makepoint(XMAX,YMAX);</span><br><span class=\"line\"></span><br><span class=\"line\">    middle = makepoint((screen.pt1.x + screen.pt2.x)/<span class=\"number\">2</span>, (screen.pt1.y+screen.pt2.y)/<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;middle&#x27;s x=  %d, middle&#x27;s y = %d\\n&quot;</span>,middle.x,middle.y);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"6-3-结构数组\"><a href=\"#6-3-结构数组\" class=\"headerlink\" title=\"6.3 结构数组\"></a>6.3 结构数组</h2><p>​\t\t\t需要注意各种定义的先后顺序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXWORD 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *word;</span><br><span class=\"line\">    <span class=\"type\">int</span> count;</span><br><span class=\"line\">&#125; keytab[] = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;auto&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;break&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;case&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;char&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;const&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;continue&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;default&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;unsigned&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;void&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;volatile&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;while&quot;</span>,<span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如何定义查找的结构体的长度呢?</span></span><br><span class=\"line\"><span class=\"comment\">//#define NKEYS (sizeof keytab / sizeof(struct key))</span></span><br><span class=\"line\"><span class=\"comment\">// 下面这种更好,即使类型改变了,也不需要改动程序</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NKEYS (sizeof keytab / sizeof keytab[0])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getword</span><span class=\"params\">(<span class=\"type\">char</span> *,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">binsearch</span><span class=\"params\">(<span class=\"type\">char</span> *, <span class=\"keyword\">struct</span> key *,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">char</span> word[MAXWORD];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (getword(word,MAXWORD) != EOF)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isalpha</span>(word[<span class=\"number\">0</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((n = binsearch(word, keytab, NKEYS)) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                keytab[n].count++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;test\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,NKEYS);</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(n=<span class=\"number\">0</span>; n &lt; NKEYS;n++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(keytab[n].count &gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d %s\\n&quot;</span>,keytab[n].count, keytab[n].word);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 折半查找函数 、在tab[0]&lt;=tab[1]&lt;=tab[2]&lt;=....tab[n-1]中查找word</span></span><br><span class=\"line\"><span class=\"comment\">// 如果在这里面判断是否到结尾的话,是不是有可能判断是否,比如有脏数据这种?</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">binsearch</span><span class=\"params\">(<span class=\"type\">char</span> *word,<span class=\"keyword\">struct</span> key tab[],<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cond;</span><br><span class=\"line\">    <span class=\"type\">int</span> low,high,mid;</span><br><span class=\"line\">    low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    high = n<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = (low + high)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((cond = <span class=\"built_in\">strcmp</span>(word,tab[mid].word)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cond &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">//没有匹配的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从输入中读取下一个单词或字符</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getword</span><span class=\"params\">(<span class=\"type\">char</span> *word, <span class=\"type\">int</span> lim)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c,getch(<span class=\"type\">void</span>);</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">ungetch</span><span class=\"params\">(<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *w = word;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isspace</span>(c = getch())) ; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c!=EOF)</span><br><span class=\"line\">        *w++ = c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">isalpha</span>(c))&#123; <span class=\"comment\">//说明是单个字符,</span></span><br><span class=\"line\">        *w = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; --lim &gt;<span class=\"number\">0</span>; w++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">isalnum</span>(*w=getch()))&#123;</span><br><span class=\"line\">            ungetch(*w);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    *w = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> word[<span class=\"number\">0</span>];<span class=\"comment\">//为啥要这样呢????, 为什么不是word呢, 看返回值类型,不是返回一个指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUFSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> buf[BUFSIZE];</span><br><span class=\"line\"><span class=\"type\">int</span> bufp = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getch</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (bufp &gt; <span class=\"number\">0</span>)? buf[--bufp] : getchar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ungetch</span><span class=\"params\">(<span class=\"type\">int</span> c)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bufp &gt;= BUFSIZE)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ungetch: too many characters\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        buf[bufp++] = c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>&lt;ctype.h&gt;中</p>\n<p>isspace 判断是否是空白符号, isalpha判断是否是字母,isalnum判断是否是数字或字母</p>\n<p>标准的空白字符</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; &#x27;</span>     (<span class=\"number\">0x20</span>)\tspace (SPC) 空格符</span><br><span class=\"line\"><span class=\"string\">&#x27;\\t&#x27;</span>\t(<span class=\"number\">0x09</span>)\thorizontal <span class=\"title function_\">tab</span> <span class=\"params\">(TAB)</span> 水平制表符\t</span><br><span class=\"line\">&#x27;\\n&#x27;\t<span class=\"params\">(<span class=\"number\">0x0a</span>)</span>\t<span class=\"title function_\">newline</span> <span class=\"params\">(LF)</span> 换行符</span><br><span class=\"line\">&#x27;\\v&#x27;\t<span class=\"params\">(<span class=\"number\">0x0b</span>)</span>\tvertical <span class=\"title function_\">tab</span> <span class=\"params\">(VT)</span> 垂直制表符</span><br><span class=\"line\">&#x27;\\f&#x27;\t<span class=\"params\">(<span class=\"number\">0x0c</span>)</span>\t<span class=\"title function_\">feed</span> <span class=\"params\">(FF)</span> 换页符</span><br><span class=\"line\">&#x27;\\r&#x27;\t<span class=\"params\">(<span class=\"number\">0x0d</span>)</span>\tcarriage <span class=\"title function_\">return</span> <span class=\"params\">(CR)</span> 回车符</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ctrl+d获取EOF结束输入</p>\n<h2 id=\"6-4-指向结构的指针\"><a href=\"#6-4-指向结构的指针\" class=\"headerlink\" title=\"6.4 指向结构的指针\"></a>6.4 指向结构的指针</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXWORD 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *word;</span><br><span class=\"line\">    <span class=\"type\">int</span> count;</span><br><span class=\"line\">&#125; keytab[] = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;auto&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;break&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;case&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;char&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;const&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;continue&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;default&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;unsigned&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;void&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;volatile&quot;</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;while&quot;</span>,<span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如何定义查找的结构体的长度呢?</span></span><br><span class=\"line\"><span class=\"comment\">//#define NKEYS (sizeof keytab / sizeof(struct key))</span></span><br><span class=\"line\"><span class=\"comment\">// 下面这种更好,即使类型改变了,也不需要改动程序</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NKEYS (sizeof keytab / sizeof keytab[0])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getword</span><span class=\"params\">(<span class=\"type\">char</span> *,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> key *<span class=\"title function_\">binsearch</span><span class=\"params\">(<span class=\"type\">char</span> *, <span class=\"keyword\">struct</span> key *,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> word[MAXWORD];</span><br><span class=\"line\"> \t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span> *<span class=\"title\">p</span>;</span>   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (getword(word,MAXWORD) != EOF)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isalpha</span>(word[<span class=\"number\">0</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((p = binsearch(word, keytab, NKEYS)) != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                p-&gt;count++;</span><br><span class=\"line\">   \t<span class=\"keyword\">for</span>(p = keytab; p &lt; keytab + NKEYS;p++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;count &gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d %s\\n&quot;</span>,p-&gt;count, p-&gt;word);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 折半查找函数 、在tab[0]&lt;=tab[1]&lt;=tab[2]&lt;=....tab[n-1]中查找word</span></span><br><span class=\"line\"><span class=\"comment\">//这种函数风格可以较好的看出类型来</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> key *</span><br><span class=\"line\"><span class=\"title function_\">binsearch</span><span class=\"params\">(<span class=\"type\">char</span> *word,<span class=\"keyword\">struct</span> key *tab,<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cond;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span> *<span class=\"title\">low</span> =</span> &amp;tab[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span> *<span class=\"title\">high</span> =</span> &amp;tab[n];</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">key</span> *<span class=\"title\">mid</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt; high)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = low + (high-low)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((cond = <span class=\"built_in\">strcmp</span>(word,mid-&gt;word)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            high = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cond &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; <span class=\"comment\">//没有匹配的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从输入中读取下一个单词或字符</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getword</span><span class=\"params\">(<span class=\"type\">char</span> *word, <span class=\"type\">int</span> lim)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c,getch(<span class=\"type\">void</span>);</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">ungetch</span><span class=\"params\">(<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *w = word;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isspace</span>(c = getch())) ; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c!=EOF)</span><br><span class=\"line\">        *w++ = c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">isalpha</span>(c))&#123; <span class=\"comment\">//说明是单个字符,</span></span><br><span class=\"line\">        *w = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; --lim &gt;<span class=\"number\">0</span>; w++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">isalnum</span>(*w=getch()))&#123;</span><br><span class=\"line\">            ungetch(*w);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    *w = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> word[<span class=\"number\">0</span>];<span class=\"comment\">//为啥要这样呢????, 为什么不是word呢,</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUFSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> buf[BUFSIZE];</span><br><span class=\"line\"><span class=\"type\">int</span> bufp = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getch</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (bufp &gt; <span class=\"number\">0</span>)? buf[--bufp] : getchar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ungetch</span><span class=\"params\">(<span class=\"type\">int</span> c)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bufp &gt;= BUFSIZE)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ungetch: too many characters\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        buf[bufp++] = c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"6-5-自引用结构\"><a href=\"#6-5-自引用结构\" class=\"headerlink\" title=\"6.5 自引用结构\"></a>6.5 自引用结构</h2><p>​\t\t用二叉树来存储</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXWORD 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> tnode *<span class=\"title function_\">addtree</span><span class=\"params\">(<span class=\"keyword\">struct</span> tnode *p, <span class=\"type\">char</span> *w)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">treeprint</span><span class=\"params\">(<span class=\"keyword\">struct</span> tnode *p)</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> tnode *<span class=\"title function_\">talloc</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">strdup1</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getword</span><span class=\"params\">(<span class=\"type\">char</span> *word, <span class=\"type\">int</span> lim)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tnode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *word;</span><br><span class=\"line\">    <span class=\"type\">int</span> count;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tnode</span> *<span class=\"title\">left</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tnode</span> *<span class=\"title\">right</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tnode</span> *<span class=\"title\">root</span>;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> word[MAXWORD];</span><br><span class=\"line\">    </span><br><span class=\"line\">    root = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(getword(word,MAXWORD)!=EOF)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">isalpha</span>(word[<span class=\"number\">0</span>]))</span><br><span class=\"line\">            root = addtree(root,word);</span><br><span class=\"line\">    treeprint(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> tnode *<span class=\"title function_\">talloc</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> tnode *<span class=\"title function_\">addtree</span><span class=\"params\">(<span class=\"keyword\">struct</span> tnode *p, <span class=\"type\">char</span> *w)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cond;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = talloc();<span class=\"comment\">//创建一个新节点</span></span><br><span class=\"line\">        p-&gt;word = strdup1(w);</span><br><span class=\"line\">        p-&gt;count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        p-&gt;left = p-&gt;right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((cond = <span class=\"built_in\">strcmp</span>(w,p-&gt;word)) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        p-&gt;count++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cond &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        p-&gt;left = addtree(p-&gt;left,w);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        p-&gt;right=addtree(p-&gt;right,w);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按顺序打印二叉树p</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">treeprint</span><span class=\"params\">(<span class=\"keyword\">struct</span> tnode *p)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        treeprint(p-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%4d %s\\n&quot;</span>,p-&gt;count,p-&gt;word);</span><br><span class=\"line\">        treeprint(p-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//创建一个tnode</span></span><br><span class=\"line\"><span class=\"comment\">//用sizeof计算大小更准确,考虑到对齐等</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> tnode *<span class=\"title function_\">talloc</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">struct</span> tnode *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> tnode));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">strdup1</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    p = (<span class=\"type\">char</span> *) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(s)+<span class=\"number\">1</span>);<span class=\"comment\">//+1是因为结尾要加\\0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(p,s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从输入中读取下一个单词或字符</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getword</span><span class=\"params\">(<span class=\"type\">char</span> *word, <span class=\"type\">int</span> lim)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c,getch(<span class=\"type\">void</span>);</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">ungetch</span><span class=\"params\">(<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *w = word;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isspace</span>(c = getch())) ; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c!=EOF)</span><br><span class=\"line\">        *w++ = c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">isalpha</span>(c))&#123; <span class=\"comment\">//说明是单个字符,</span></span><br><span class=\"line\">        *w = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; --lim &gt;<span class=\"number\">0</span>; w++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">isalnum</span>(*w=getch()))&#123;</span><br><span class=\"line\">            ungetch(*w);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    *w = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> word[<span class=\"number\">0</span>];<span class=\"comment\">//为啥要这样呢????, 为什么不是word呢,</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUFSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> buf[BUFSIZE];</span><br><span class=\"line\"><span class=\"type\">int</span> bufp = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getch</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (bufp &gt; <span class=\"number\">0</span>)? buf[--bufp] : getchar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ungetch</span><span class=\"params\">(<span class=\"type\">int</span> c)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bufp &gt;= BUFSIZE)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ungetch: too many characters\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        buf[bufp++] = c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-6-表查找\"><a href=\"#6-6-表查找\" class=\"headerlink\" title=\"6.6 表查找\"></a>6.6 表查找</h2><p>​\t\t之前学过的,用散列等方法,进行查表</p>\n<img src=\"/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E7%BB%93%E6%9E%84-%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/image-20231005204531775.png\" alt=\"image-20231005204531775\" style=\"zoom:50%;\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span>&#123;</span> <span class=\"comment\">//链表项</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span> *<span class=\"title\">next</span>;</span> <span class=\"comment\">//链表中下一个表项</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *name;\t\t\t<span class=\"comment\">//定义的名字</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *defn;\t\t\t<span class=\"comment\">//替换文本</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HASHSIZE 101</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span> *<span class=\"title\">hashtab</span>[<span class=\"title\">HASHSIZE</span>];</span> <span class=\"comment\">//指针表</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t散列函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash函数, 为字符串s生成散列值</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"title function_\">hash</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> hashval;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(hashval=<span class=\"number\">0</span>; *s !=<span class=\"string\">&#x27;\\0&#x27;</span>;s++)</span><br><span class=\"line\">        hashval = *s + <span class=\"number\">31</span>* hashval;  <span class=\"comment\">//数字的相加</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashval % HASHSIZE:</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t查找函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> nlist *<span class=\"title function_\">lookup</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span> *<span class=\"title\">np</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (np = hashtab[hash(s)]; np != <span class=\"literal\">NULL</span>; np = np-&gt;next)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(s, np-&gt;name) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> np;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t加入函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> nlist *<span class=\"title function_\">lookup</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">strdup</span><span class=\"params\">(<span class=\"type\">char</span> *)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> nlist *<span class=\"title function_\">install</span><span class=\"params\">(<span class=\"type\">char</span> *name, <span class=\"type\">char</span> *defn)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span> *<span class=\"title\">np</span>;</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> hashval;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>((np = lookup(name)) == <span class=\"literal\">NULL</span>)&#123;<span class=\"comment\">//未找到</span></span><br><span class=\"line\">        np = (<span class=\"keyword\">struct</span> nlist *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(*np));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (np == <span class=\"literal\">NULL</span> || (np-&gt;name = strdup(name)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        hashval = hash(name);</span><br><span class=\"line\">        np-&gt;next = hashtab[hashval]; <span class=\"comment\">//头插,</span></span><br><span class=\"line\">        hashtab[hashval] = np;       </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">free</span>((<span class=\"type\">void</span> *)np-&gt;defn)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((np-&gt;defn = strdup(defn)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t整合</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span>&#123;</span> <span class=\"comment\">//链表项</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span> *<span class=\"title\">next</span>;</span> <span class=\"comment\">//链表中下一个表项</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *name;\t\t\t<span class=\"comment\">//定义的名字</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *defn;\t\t\t<span class=\"comment\">//替换文本</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HASHSIZE 101</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span> *<span class=\"title\">hashtab</span>[<span class=\"title\">HASHSIZE</span>];</span> <span class=\"comment\">//指针表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> nlist *<span class=\"title function_\">lookup</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">strdup1</span><span class=\"params\">(<span class=\"type\">char</span> *)</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"title function_\">hash</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> nlist *<span class=\"title function_\">install</span><span class=\"params\">(<span class=\"type\">char</span> *name, <span class=\"type\">char</span> *defn)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1.add\\n&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">char</span> *name,*defn;</span><br><span class=\"line\">    name = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    defn = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name == <span class=\"literal\">NULL</span> || defn == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;内存分配失败\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入名字和替换的名字&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s %s&quot;</span>,name,defn);<span class=\"comment\">//这直接用是不对的,需要分配内存</span></span><br><span class=\"line\">        install(name,defn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(name);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(defn);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hash函数, 为字符串s生成散列值</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"title function_\">hash</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> hashval;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(hashval=<span class=\"number\">0</span>; *s !=<span class=\"string\">&#x27;\\0&#x27;</span>;s++)</span><br><span class=\"line\">        hashval = *s + <span class=\"number\">31</span>* hashval;  <span class=\"comment\">//数字的相加</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashval % HASHSIZE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> nlist *<span class=\"title function_\">lookup</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span> *<span class=\"title\">np</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (np = hashtab[hash(s)]; np != <span class=\"literal\">NULL</span>; np = np-&gt;next)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(s, np-&gt;name) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> np;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> nlist *<span class=\"title function_\">install</span><span class=\"params\">(<span class=\"type\">char</span> *name, <span class=\"type\">char</span> *defn)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlist</span> *<span class=\"title\">np</span>;</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> hashval;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>((np = lookup(name)) == <span class=\"literal\">NULL</span>)&#123;<span class=\"comment\">//未找到</span></span><br><span class=\"line\">        np = (<span class=\"keyword\">struct</span> nlist *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(*np));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (np == <span class=\"literal\">NULL</span> || (np-&gt;name = strdup(name)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        hashval = hash(name);</span><br><span class=\"line\">        np-&gt;next = hashtab[hashval]; <span class=\"comment\">//头插,</span></span><br><span class=\"line\">        hashtab[hashval] = np;       </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">free</span>((<span class=\"type\">void</span> *) np-&gt;defn);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((np-&gt;defn = strdup1(defn)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> np;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">strdup1</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    p = (<span class=\"type\">char</span> *) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">strlen</span>(s)+<span class=\"number\">1</span>);<span class=\"comment\">//+1是因为结尾要加\\0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(p,s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"6-7-6-8-类型定义-typedef-、位字段\"><a href=\"#6-7-6-8-类型定义-typedef-、位字段\" class=\"headerlink\" title=\"6.7 6.8  类型定义(typedef)、位字段\"></a>6.7 6.8  类型定义(typedef)、位字段</h2><h1 id=\"第七章-输入与输出\"><a href=\"#第七章-输入与输出\" class=\"headerlink\" title=\"第七章 输入与输出\"></a>第七章 输入与输出</h1><h2 id=\"7-1-标准输入输出\"><a href=\"#7-1-标准输入输出\" class=\"headerlink\" title=\"7.1 标准输入输出\"></a>7.1 标准输入输出</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于将输入转换为小写字母的形式</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((c = getchar()) != EOF)</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"built_in\">tolower</span>(c));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7-2-格式化输出-printf函数\"><a href=\"#7-2-格式化输出-printf函数\" class=\"headerlink\" title=\"7.2 格式化输出 printf函数\"></a>7.2 格式化输出 printf函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *s =  <span class=\"string\">&quot;hello,lihua&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(s); <span class=\"comment\">//格式化字符串漏洞不就是这么来的嘛...</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"7-3-变长参数表\"><a href=\"#7-3-变长参数表\" class=\"headerlink\" title=\"7.3 变长参数表\"></a>7.3 变长参数表</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">minprintf</span><span class=\"params\">(<span class=\"type\">char</span> *fmt, ...)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    va_list ap;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p, *sval;</span><br><span class=\"line\">    <span class=\"type\">int</span> ival;</span><br><span class=\"line\">    <span class=\"type\">double</span> dval;</span><br><span class=\"line\">    </span><br><span class=\"line\">    va_start(ap, fmt);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (p= fmt; *p; p++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( *p!=<span class=\"string\">&#x27;%&#x27;</span>)&#123; <span class=\"comment\">//为啥只取一个字符呢</span></span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(*p);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(*++p)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;d&#x27;</span>:</span><br><span class=\"line\">                ival = va_arg(ap,<span class=\"type\">int</span>);</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, ival);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;f&#x27;</span>:</span><br><span class=\"line\">                dval = va_arg(ap, <span class=\"type\">double</span>);</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f&quot;</span>,dval);</span><br><span class=\"line\">             \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;s&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (sval = va_arg(ap, <span class=\"type\">char</span> *); *sval; sval++)</span><br><span class=\"line\">                    <span class=\"built_in\">putchar</span>(*sval);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(*p);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    va_end(ap);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    minprintf(<span class=\"string\">&quot;hello,wolrd:%d,%s\\n&quot;</span>,<span class=\"number\">1</span>,<span class=\"string\">&quot;ooo&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7-4-格式化输入-scanf函数\"><a href=\"#7-4-格式化输入-scanf函数\" class=\"headerlink\" title=\"7.4 格式化输入 scanf函数\"></a>7.4 格式化输入 scanf函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> sum, v;</span><br><span class=\"line\">    </span><br><span class=\"line\">    sum = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf&quot;</span>, &amp;v) == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\t%.2f\\n&quot;</span>,sum+=v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> day,month,year;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d/%d/%d&quot;</span>,&amp;month,&amp;day,&amp;year);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d年%d月%d日\\n&quot;</span>,year,month,day);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"7-5-文件访问\"><a href=\"#7-5-文件访问\" class=\"headerlink\" title=\"7.5 文件访问\"></a>7.5 文件访问</h2><p>​\t这里和pwn的iofile关系很大</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">filecopy</span><span class=\"params\">(FILE *, FILE *)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc == <span class=\"number\">1</span>) filecopy(<span class=\"built_in\">stdin</span>,<span class=\"built_in\">stdout</span>); <span class=\"comment\">//没有命令行参数、复制标准输入</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(--argc &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((fp = fopen(*++argv,<span class=\"string\">&quot;r&quot;</span>)) == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;cat: can&#x27;t open %s\\n&quot;</span>,*argv);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                filecopy(fp,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">                fclose(fp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将文件ifp复制到文件ofp</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">filecopy</span><span class=\"params\">(FILE *ifp,FILE *ofp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( (c = getc(ifp))!=EOF)</span><br><span class=\"line\">        putc(c,ofp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\tgdb调试一下 , 可以结合之前看的open什么的那个链来学习一下\t\t</p>\n<h2 id=\"7-6-错误处理\"><a href=\"#7-6-错误处理\" class=\"headerlink\" title=\"7.6 错误处理\"></a>7.6 错误处理</h2><p>​\t增加了stderr</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span>  <span class=\"comment\">// exit函数</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">filecopy</span><span class=\"params\">(FILE *, FILE *)</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *prog = argv[<span class=\"number\">0</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc == <span class=\"number\">1</span>) filecopy(<span class=\"built_in\">stdin</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(--argc &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((fp = fopen(*++argv,<span class=\"string\">&quot;r&quot;</span>)) == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot; %s:  can&#x27;t open %s\\n&quot;</span>,prog,*argv);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                filecopy(fp,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">                fclose(fp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> (ferror(<span class=\"built_in\">stdout</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;%s: error writing stdout\\n&quot;</span>, prog);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将文件ifp复制到文件ofp</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">filecopy</span><span class=\"params\">(FILE *ifp,FILE *ofp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( (c = getc(ifp))!=EOF)</span><br><span class=\"line\">        putc(c,ofp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"7-7-行输入和行输出\"><a href=\"#7-7-行输入和行输出\" class=\"headerlink\" title=\"7.7 行输入和行输出\"></a>7.7 行输入和行输出</h2><h2 id=\"7-8-特别有用的函数-更详细的在附录b中\"><a href=\"#7-8-特别有用的函数-更详细的在附录b中\" class=\"headerlink\" title=\"7.8 特别有用的函数(更详细的在附录b中)\"></a>7.8 特别有用的函数(更详细的在附录b中)</h2><p>EOF与空白符号的区别</p>\n<p>这是空白符号, EOF是-1</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; &#x27;</span>     (<span class=\"number\">0x20</span>)\tspace (SPC) 空格符</span><br><span class=\"line\"><span class=\"string\">&#x27;\\t&#x27;</span>\t(<span class=\"number\">0x09</span>)\thorizontal <span class=\"title function_\">tab</span> <span class=\"params\">(TAB)</span> 水平制表符\t</span><br><span class=\"line\">&#x27;\\n&#x27;\t<span class=\"params\">(<span class=\"number\">0x0a</span>)</span>\t<span class=\"title function_\">newline</span> <span class=\"params\">(LF)</span> 换行符</span><br><span class=\"line\">&#x27;\\v&#x27;\t<span class=\"params\">(<span class=\"number\">0x0b</span>)</span>\tvertical <span class=\"title function_\">tab</span> <span class=\"params\">(VT)</span> 垂直制表符</span><br><span class=\"line\">&#x27;\\f&#x27;\t<span class=\"params\">(<span class=\"number\">0x0c</span>)</span>\t<span class=\"title function_\">feed</span> <span class=\"params\">(FF)</span> 换页符</span><br><span class=\"line\">&#x27;\\r&#x27;\t<span class=\"params\">(<span class=\"number\">0x0d</span>)</span>\tcarriage <span class=\"title function_\">return</span> <span class=\"params\">(CR)</span> 回车符</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE *fp;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">    fp = fopen(<span class=\"string\">&quot;./flag&quot;</span>,<span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//write(1,fp,20);</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tc = fgetc(fp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(feof(fp)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>,c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "C语言"
            ]
        },
        {
            "id": "https://tangzichengcc.github.io/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/",
            "url": "https://tangzichengcc.github.io/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/",
            "title": "c语言回炉重造-指针与数组",
            "date_published": "2023-09-30T15:39:17.000Z",
            "content_html": "<p>​\t回炉重造, 还是通过gdb调试一下,理解的比较好, 多写代码多调试!</p>\n<h2 id=\"指针与地址初探\"><a href=\"#指针与地址初探\" class=\"headerlink\" title=\"指针与地址初探\"></a>指针与地址初探</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">1</span>,y=<span class=\"number\">2</span>,z[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> *ip;</span><br><span class=\"line\">    ip = &amp;x;</span><br><span class=\"line\">    z[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    z[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    z[<span class=\"number\">8</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">    y = *ip;</span><br><span class=\"line\">    *ip = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ip = &amp;z[<span class=\"number\">0</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>gcc -g main.c</p>\n<p>​\t\tip是一个指针,在第六行,把x的地址赋给了指针,所以ip的值就是x的地址,ip本身就是一个值,也有自己的地址,</p>\n<img src=\"/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/image-20230927170316918.png\" alt=\"image-20230927170316918\" style=\"zoom:50%;\">\n\n<p>​\t\t感觉这种未初始化的数组或许能做信息泄露?</p>\n<img src=\"/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/image-20230927170602436.png\" alt=\"image-20230927170602436\" style=\"zoom:50%;\">\n\n\n\n<h2 id=\"指针与函数参数\"><a href=\"#指针与函数参数\" class=\"headerlink\" title=\"指针与函数参数\"></a>指针与函数参数</h2><p>​\t\t函数传递指针,实现赋值. 主要是getint函数,获取任意值,然后转换成数值,int类型的数值 而不是char类型的数值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getch</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ungetch</span><span class=\"params\">(<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将输入的字符流分解成整数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getint</span><span class=\"params\">(<span class=\"type\">int</span> *pn)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c,sign;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">isspace</span>(c = getch())) ;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">isdigit</span>(c) &amp;&amp; c !=EOF &amp;&amp; c!=<span class=\"string\">&#x27;+&#x27;</span> &amp;&amp; c !=<span class=\"string\">&#x27;-&#x27;</span>)&#123; <span class=\"comment\">//输入不是数字、结束符号,+-符号时返回0</span></span><br><span class=\"line\">\t\tungetch(c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsign = (c == <span class=\"string\">&#x27;-&#x27;</span>) ? <span class=\"number\">-1</span>:<span class=\"number\">1</span>; <span class=\"comment\">//获取符号</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c==<span class=\"string\">&#x27;+&#x27;</span> || c ==<span class=\"string\">&#x27;-&#x27;</span>) </span><br><span class=\"line\">\t\tc = getch();</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">原来设想的数可能是 +1  -2这种,所以要先检测一下符号</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">这个循环的意思是, 假如输入了 12345 这种(不是一位的数值), 一个一个读取,然后前一位 乘10,逐级递增,这个没问题,但 c - 0是什么? </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">c的话,本身是 字符 ,这里是减去0 的ascii码,就 取得了 整数 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (*pn=<span class=\"number\">0</span>; <span class=\"built_in\">isdigit</span>(c); c=getch()) </span><br><span class=\"line\">\t\t*pn = <span class=\"number\">10</span> * *pn + (c - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t*pn *= sign;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c != EOF)   <span class=\"comment\">//先缓存一下</span></span><br><span class=\"line\">\t\tungetch(c);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SIZE 10</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> n, <span class=\"built_in\">array</span>[SIZE],getint(<span class=\"type\">int</span> *);</span><br><span class=\"line\">    <span class=\"comment\">// 实现给一个整形数组 赋值</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (n=<span class=\"number\">0</span>; n &lt; SIZE &amp;&amp; getint(&amp;<span class=\"built_in\">array</span>[n]) != EOF; n++)</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (n=<span class=\"number\">0</span>; n &lt; SIZE; n++) <span class=\"comment\">//打印</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the %d number is %d\\n&quot;</span>,n,<span class=\"built_in\">array</span>[n]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUFSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> buf[BUFSIZE];</span><br><span class=\"line\"><span class=\"type\">int</span> bufp =<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getch</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (bufp &gt; <span class=\"number\">0</span> ) ? buf[--bufp] : getchar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ungetch</span><span class=\"params\">(<span class=\"type\">int</span> c)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (bufp &gt;= BUFSIZE)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ungetch: too many characters\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tbuf[bufp++] = c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t</p>\n<p>关于 c-‘0’的问题  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> (*pn=<span class=\"number\">0</span>; <span class=\"built_in\">isdigit</span>(c); c=getch()) </span><br><span class=\"line\">*pn = <span class=\"number\">10</span> * *pn + (c - <span class=\"string\">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​\t 输入12345, ascii的话就是49 50 51 52 53<br>问题在于, 对于getchar()得到的数值,会是ascii码, 而直接赋值得到的是内存中数值,所以需要这么一个转换</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> c;</span><br><span class=\"line\">\tc = getchar();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> d;</span><br><span class=\"line\">\td = getchar();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t虽然但是,a和b还是不一样的,a占用4个字节,b占用一个字节</p>\n<img src=\"/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/image-20231021170522910.png\" style=\"zoom:50%;\">\n\n<p>​\t\t虽然但是,a和b还是不一样的,a占用4个字节,b占用一个字节<br>​\t\t</p>\n<img src=\"/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0-%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/image-20231021170817470.png\" style=\"zoom: 50%;\">\n\n\n\n\n\n<p>strlen    <font color=\"red\">注意, 参数处的 *s  和 for循环里的 *s 是两个含义,  一个是代表定义指针, 一个是取指针指向的地址的值,差了两层</font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">strlen</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (n=<span class=\"number\">0</span>; *s!=<span class=\"string\">&#x27;\\0&#x27;</span>; s++)</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>版本2, 数组的尾元素+1 (结束\\0) 减头元素就是长度,</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">strlen</span><span class=\"params\">(<span class=\"type\">char</span> *s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p = s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*p != <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">        p++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p-s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"理解地址算数运算-一个简单的存储分配程序\"><a href=\"#理解地址算数运算-一个简单的存储分配程序\" class=\"headerlink\" title=\"理解地址算数运算: 一个简单的存储分配程序\"></a>理解地址算数运算: 一个简单的存储分配程序</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ALLOCSIZE 10000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">char</span> allocbuf[ALLOCSIZE];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">char</span> *allocp = allocbuf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">alloc</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allocbuf + ALLOCSIZE - allocp &gt;= n)&#123; <span class=\"comment\">//有足够的空闲空间</span></span><br><span class=\"line\">        allocp += n;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> allocp - n; <span class=\"comment\">//分配前的指针p</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">afree</span><span class=\"params\">(<span class=\"type\">char</span> *p)</span> <span class=\"comment\">//释放p指向的存储区</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p &gt;= allocbuf &amp;&amp; p &lt; allocbuf + ALLOCSIZE)</span><br><span class=\"line\">        allocp = p;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *data1,*data2;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"type\">char</span> src[<span class=\"number\">50</span>] = <span class=\"string\">&quot;hello wolrd&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> src2[<span class=\"number\">50</span>] = <span class=\"string\">&quot;this is the second mem region&quot;</span>;</span><br><span class=\"line\">    data1 = alloc(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(data1,src,<span class=\"built_in\">strlen</span>(src)+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    data2 = alloc(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(data2,src2,<span class=\"built_in\">strlen</span>(src2)+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    a= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"strcpy的实现\"><a href=\"#strcpy的实现\" class=\"headerlink\" title=\"strcpy的实现\"></a>strcpy的实现</h2><p>实现把指针t指向的字符串复制到指针s指向的位置, 但是不能用s&#x3D;t,因为这个只是拷贝了指针,并没有复制字符串,</p>\n<p>数组方法实现:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">strcpy</span><span class=\"params\">(<span class=\"type\">char</span> *s, <span class=\"type\">char</span> *t)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((s[i] = t[i]) != <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指针方法实现:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">strcpy</span><span class=\"params\">(<span class=\"type\">char</span> *s, <span class=\"type\">char</span> *t)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((*s = *t) != <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s++;</span><br><span class=\"line\">        t++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经验丰富的程序员更喜欢编写成一下形式:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">strcpy</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">char</span> *t)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((*s++ = *t++) != <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">        ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还可以进一步缩写,因为和0比较是多余的,while循环的条件本身就需要非0</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">strcpy</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">char</span> *t)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*s++ = *t++)</span><br><span class=\"line\">        ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"strcmp的实现\"><a href=\"#strcmp的实现\" class=\"headerlink\" title=\"strcmp的实现\"></a>strcmp的实现</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">strcmp</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">char</span> *t)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;s[i] == t[i];i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s[i] - t[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用指针来实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">strcmp</span><span class=\"params\">(<span class=\"type\">char</span> *s,<span class=\"type\">char</span> *t)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;*s == *t;s++,t++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*s == <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *s - *t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"指针数组排序\"><a href=\"#指针数组排序\" class=\"headerlink\" title=\"指针数组排序\"></a>指针数组排序</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLINES 5000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *lineptr[MAXLINES];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">readlines</span><span class=\"params\">(<span class=\"type\">char</span> *lineptr[],<span class=\"type\">int</span> nlines)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writelines</span><span class=\"params\">(<span class=\"type\">char</span> *lineptr[],<span class=\"type\">int</span> nlines)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nlines;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((nlines = readlines(lineptr,MAXLINES)) &gt;=<span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">        qsort(lineptr,<span class=\"number\">0</span>,nlines<span class=\"number\">-1</span>);</span><br><span class=\"line\">        writelines(lineptr,nlines);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;error: input too big to sort\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLEN 1000</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getline</span><span class=\"params\">(<span class=\"type\">char</span> *,<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">alloc</span><span class=\"params\">(<span class=\"type\">int</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">readline</span><span class=\"params\">(<span class=\"type\">char</span> *lineptr[],<span class=\"type\">int</span> maxlines)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> len, nlines;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p,line[MAXLEN];</span><br><span class=\"line\">    nlines = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((len = getline(line,MAXLEN)) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nlines &gt; maxlines || (p = alloc(len)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            line[len<span class=\"number\">-1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;<span class=\"comment\">//删除换行符</span></span><br><span class=\"line\">            <span class=\"built_in\">strcpy</span>(p,line);</span><br><span class=\"line\">            lineptr[nlines++] = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nlines;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writelines</span><span class=\"params\">(<span class=\"type\">char</span> *lineptr[],<span class=\"type\">int</span> nlines)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i&lt;nlines;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,lineptr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">char</span> *v[], <span class=\"type\">int</span> left,<span class=\"type\">int</span> right)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,last;</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">char</span> *v[],<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    swap(v,left,(left+right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    last = left;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = left+<span class=\"number\">1</span>; i&lt;= right; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(v[i],v[left]) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">            swap(v,++last,i);</span><br><span class=\"line\">    swap(v,left,last);</span><br><span class=\"line\">    qsort(v,left,last<span class=\"number\">-1</span>);</span><br><span class=\"line\">    qsort(v,last+<span class=\"number\">1</span>,right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">char</span> *v[],<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *temp;</span><br><span class=\"line\">    temp = v[i];</span><br><span class=\"line\">    v[i] = v[j];</span><br><span class=\"line\">    v[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础快速排序\"><a href=\"#基础快速排序\" class=\"headerlink\" title=\"基础快速排序\"></a>基础快速排序</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> v[],<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">int</span> v[],<span class=\"type\">int</span> left,<span class=\"type\">int</span> right)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">int</span> v[<span class=\"number\">11</span>] = &#123;<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">    qsort(v,<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">11</span>;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,v[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> v[],<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    </span><br><span class=\"line\">    temp = v[i];</span><br><span class=\"line\">    v[i] = v[j];</span><br><span class=\"line\">    v[j] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3,2,9,2,3,7,8,1,6,8,4</span></span><br><span class=\"line\"><span class=\"comment\">// 以递增顺序对v[left]到v[right]进行排序</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">int</span> v[],<span class=\"type\">int</span> left,<span class=\"type\">int</span> right)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,last;</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> v[],<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    swap(v,left, (left+right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    last = left;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = left+<span class=\"number\">1</span>;i&lt;=right;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v[i] &lt; v[left])</span><br><span class=\"line\">            swap(v,++last,i);</span><br><span class=\"line\">    swap(v,left,last);</span><br><span class=\"line\">    <span class=\"comment\">//qsort(v, left, last-1);</span></span><br><span class=\"line\">    <span class=\"comment\">//qsort(v,last+1,right);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">举例</span><br><span class=\"line\">\t<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span></span><br><span class=\"line\">    qsort(v,<span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">第一次排序后</span><br><span class=\"line\">    <span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span></span><br><span class=\"line\">第一次把中间的<span class=\"number\">7</span>放到开头,然后对比,依次把小于它的往前放,放到last+<span class=\"number\">1</span>的位置</span><br><span class=\"line\">    <span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span> <span class=\"comment\">//此时last在4这个位置,肯定也是比它小的,而且是最后一个,此时再swap就可以了</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">day_of_year</span><span class=\"params\">(<span class=\"type\">int</span> year, <span class=\"type\">int</span> month,<span class=\"type\">int</span> day)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">month_day</span><span class=\"params\">(<span class=\"type\">int</span> year,<span class=\"type\">int</span> yearday,<span class=\"type\">int</span> *pmonth,<span class=\"type\">int</span> *pday)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> choice;</span><br><span class=\"line\">    <span class=\"type\">int</span> year,month,day;</span><br><span class=\"line\">    <span class=\"type\">int</span> dayofyear;</span><br><span class=\"line\">    <span class=\"type\">int</span> dayofmonth;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入选项\\n1.将某年某月某日的日期表示形式转换成某年第几天的形式\\n2.将某年中第几天的日期表示形式转换为某月某日\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;choice);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(choice)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入年月日,空格隔开\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>,&amp;year,&amp;month,&amp;day);</span><br><span class=\"line\">            dayofyear = day_of_year(year,month,day);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d年%d月%d日是%d年第%d天\\n&quot;</span>,year,month,day,year,dayofyear);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入年份和天数,空格隔开\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;year,&amp;day);</span><br><span class=\"line\">            month_day(year,day,&amp;month,&amp;dayofmonth);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d年第%d天是%d年%d月%d号&quot;</span>,year,day,year,month,dayofmonth);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">char</span> daytab[<span class=\"number\">2</span>][<span class=\"number\">13</span>]=&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>,<span class=\"number\">31</span>,<span class=\"number\">28</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>,<span class=\"number\">31</span>,<span class=\"number\">29</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将某年某月某日的日期表示形式转换成某年第几天的形式</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">day_of_year</span><span class=\"params\">(<span class=\"type\">int</span> year, <span class=\"type\">int</span> month,<span class=\"type\">int</span> day)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,leap;</span><br><span class=\"line\">    </span><br><span class=\"line\">    leap = year%<span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year%<span class=\"number\">100</span> !=<span class=\"number\">0</span> || year % <span class=\"number\">400</span> ==<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt; month;i++)</span><br><span class=\"line\">        day+= daytab[leap][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> day;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将某年中第几天的日期表示形式转换为某月某日</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">month_day</span><span class=\"params\">(<span class=\"type\">int</span> year,<span class=\"type\">int</span> yearday,<span class=\"type\">int</span> *pmonth,<span class=\"type\">int</span> *pday)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,leap;</span><br><span class=\"line\">    </span><br><span class=\"line\">    leap = year%<span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year%<span class=\"number\">100</span> !=<span class=\"number\">0</span> || year % <span class=\"number\">400</span> ==<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">1</span>;yearday &gt; daytab[leap][i];i++)</span><br><span class=\"line\">        yearday -= daytab[leap][i];</span><br><span class=\"line\">    *pmonth = i;</span><br><span class=\"line\">    *pday = yearday;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"命令行参数-echo\"><a href=\"#命令行参数-echo\" class=\"headerlink\" title=\"命令行参数 echo\"></a>命令行参数 echo</h2><p>第一个版本将argv看成一个字符指针数组</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;argc; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%s&quot;</span>,argv[i],(i &lt; argc<span class=\"number\">-1</span>) ? <span class=\"string\">&quot; &quot;</span>: <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>因为argv是一个指向指针数组的指针,所以,可以通过指针而非数组下标的方式处理命令行参数.</p>\n<p>第二个版本是在对argv进行自增运算、对argc进行自减运算的基础上实现的(argv是一个指向char类型的指针的指针)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( --argc &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%s&quot;</span>,*++argv,(argc &gt; <span class=\"number\">1</span>)? <span class=\"string\">&quot; &quot;</span>:<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模式查找程序\"><a href=\"#模式查找程序\" class=\"headerlink\" title=\"模式查找程序\"></a>模式查找程序</h3><p>4.1节  内置了查找模式</p>\n<p>​\t\t将输入中包含特定“模式”或字符串的各行打印出来(grep的特例相当于)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLINE 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getline1</span><span class=\"params\">(<span class=\"type\">char</span> line[],<span class=\"type\">int</span> max)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">strindex</span><span class=\"params\">(<span class=\"type\">char</span> source[],<span class=\"type\">char</span> searchfor[])</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"type\">char</span> pattern[] = <span class=\"string\">&quot;tang&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> line[MAXLINE];</span><br><span class=\"line\">    <span class=\"type\">int</span> found = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (getline1(line,MAXLINE) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strindex(line,pattern) &gt;= <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,line);</span><br><span class=\"line\">            found++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> found;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//将行保存到s中,并返回该行的长度</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getline1</span><span class=\"params\">(<span class=\"type\">char</span> s[],<span class=\"type\">int</span> lim)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c,i;</span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--lim &gt;<span class=\"number\">0</span> &amp;&amp; (c=getchar()) != EOF &amp;&amp; c != <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        s[i++] = c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        s[i++] = c;</span><br><span class=\"line\">    s[i] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回t在s中的位置,如果没找到返回-1</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">strindex</span><span class=\"params\">(<span class=\"type\">char</span> s[],<span class=\"type\">char</span> t[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,j,k;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; s[i] !=<span class=\"string\">&#x27;\\0&#x27;</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = i,k=<span class=\"number\">0</span>; t[k]!=<span class=\"string\">&#x27;\\0&#x27;</span> &amp;&amp; s[j]==t[k];j++,k++)</span><br><span class=\"line\">            ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt; <span class=\"number\">0</span> &amp;&amp; t[k] == <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>5.10 增强版 实现find功能,打印与第一个参数指定的模式匹配的行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLINE 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getline1</span><span class=\"params\">(<span class=\"type\">char</span> *line, <span class=\"type\">int</span> max)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> line[MAXLINE];</span><br><span class=\"line\">    <span class=\"type\">int</span> found = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc !=<span class=\"number\">2</span> )</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: find pattern\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(getline1(line,MAXLINE) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">strstr</span>(line,argv[<span class=\"number\">1</span>]) != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,line);</span><br><span class=\"line\">                found++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> found;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getline1</span><span class=\"params\">(<span class=\"type\">char</span> s[],<span class=\"type\">int</span> lim)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c,i;</span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--lim &gt;<span class=\"number\">0</span> &amp;&amp; (c=getchar()) != EOF &amp;&amp; c != <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        s[i++] = c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        s[i++] = c;</span><br><span class=\"line\">    s[i] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>再次改进</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLINE 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getline1</span><span class=\"params\">(<span class=\"type\">char</span> *line, <span class=\"type\">int</span> max)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> line[MAXLINE];</span><br><span class=\"line\">    <span class=\"type\">long</span> lineno = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> c,except = <span class=\"number\">0</span>, number = <span class=\"number\">0</span>, found =<span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--argc &gt; <span class=\"number\">0</span> &amp;&amp; (*++argv)[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c = *++argv[<span class=\"number\">0</span>])   <span class=\"comment\">//这里的++...........是那个意思?</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(c)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;x&#x27;</span>:</span><br><span class=\"line\">                    except = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;n&#x27;</span>:</span><br><span class=\"line\">                    number = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;find: illegal option %c\\n&quot;</span>,c);</span><br><span class=\"line\">                    argc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    found = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;       </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc !=<span class=\"number\">1</span> )</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: find -x -n pattern\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(getline1(line,MAXLINE) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         \tlineno++;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((<span class=\"built_in\">strstr</span>(line,*argv) != <span class=\"literal\">NULL</span>)!= except)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(number)</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%ld:&quot;</span>,lineno);</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,line);</span><br><span class=\"line\">                found++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> found;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getline1</span><span class=\"params\">(<span class=\"type\">char</span> s[],<span class=\"type\">int</span> lim)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c,i;</span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--lim &gt;<span class=\"number\">0</span> &amp;&amp; (c=getchar()) != EOF &amp;&amp; c != <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        s[i++] = c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        s[i++] = c;</span><br><span class=\"line\">    s[i] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ALLOCSIZE 10000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLINES 5000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLEN 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *lineptr[MAXLINES];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">readlines</span><span class=\"params\">(<span class=\"type\">char</span> *lineptr[],<span class=\"type\">int</span> maxlines)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writelines</span><span class=\"params\">(<span class=\"type\">char</span> *lineptr[],<span class=\"type\">int</span> nlines)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort1</span><span class=\"params\">(<span class=\"type\">void</span> *v[], <span class=\"type\">int</span> left,<span class=\"type\">int</span> right,<span class=\"type\">int</span> (*comp)(<span class=\"type\">void</span> *,<span class=\"type\">void</span> *))</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">numcmp</span><span class=\"params\">(<span class=\"type\">char</span> *,<span class=\"type\">char</span> *)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getline1</span><span class=\"params\">(<span class=\"type\">char</span> *line, <span class=\"type\">int</span> max)</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">alloc</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对输入的文本进行排序</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nlines; <span class=\"comment\">//读入的输入行数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> numeric = <span class=\"number\">0</span>; <span class=\"comment\">//若进行数值排序,则 numberic的值为1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argc &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(argv[<span class=\"number\">1</span>],<span class=\"string\">&quot;-n&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        numeric = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((nlines = readlines(lineptr,MAXLINES)) &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        qsort1((<span class=\"type\">void</span> **)lineptr, <span class=\"number\">0</span>, nlines <span class=\"number\">-1</span>, (<span class=\"type\">int</span> (*)(<span class=\"type\">void</span>*,<span class=\"type\">void</span>*))(numeric ? numcmp:<span class=\"built_in\">strcmp</span>));</span><br><span class=\"line\">        writelines(lineptr, nlines);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input too big to sort\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">readlines</span><span class=\"params\">(<span class=\"type\">char</span> *lineptr[],<span class=\"type\">int</span> maxlines)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> len, nlines;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p,line[MAXLEN];</span><br><span class=\"line\">    nlines = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((len = getline1(line,MAXLEN)) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nlines &gt; maxlines || (p = alloc(len)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            line[len<span class=\"number\">-1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;<span class=\"comment\">//删除换行符</span></span><br><span class=\"line\">            <span class=\"built_in\">strcpy</span>(p,line);</span><br><span class=\"line\">            lineptr[nlines++] = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nlines;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writelines</span><span class=\"params\">(<span class=\"type\">char</span> *lineptr[],<span class=\"type\">int</span> nlines)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i&lt;nlines;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,lineptr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort1</span><span class=\"params\">(<span class=\"type\">void</span> *v[], <span class=\"type\">int</span> left,<span class=\"type\">int</span> right,<span class=\"type\">int</span> (*comp)(<span class=\"type\">void</span> *,<span class=\"type\">void</span> *))</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,last;</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">void</span> *v[],<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    swap(v,left,(left+right)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    last = left;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = left+<span class=\"number\">1</span>; i&lt;= right; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((*comp)(v[i],v[left]) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">            swap(v,++last,i);</span><br><span class=\"line\">    swap(v,left,last);</span><br><span class=\"line\">    qsort1(v,left,last<span class=\"number\">-1</span>,comp);</span><br><span class=\"line\">    qsort1(v,last+<span class=\"number\">1</span>,right,comp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">numcmp</span><span class=\"params\">(<span class=\"type\">char</span> *s1, <span class=\"type\">char</span> *s2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> v1,v2;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v1 = atof(s1);</span><br><span class=\"line\">    v2 = atof(s2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v1&lt;v2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v1 &gt; v2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">void</span> *v[],<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *temp;</span><br><span class=\"line\">    temp = v[i];</span><br><span class=\"line\">    v[i] = v[j];</span><br><span class=\"line\">    v[j] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getline1</span><span class=\"params\">(<span class=\"type\">char</span> s[],<span class=\"type\">int</span> lim)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c,i;</span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--lim &gt;<span class=\"number\">0</span> &amp;&amp; (c=getchar()) != EOF &amp;&amp; c != <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        s[i++] = c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        s[i++] = c;</span><br><span class=\"line\">    s[i] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">char</span> allocbuf[ALLOCSIZE];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">char</span> *allocp = allocbuf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">alloc</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allocbuf + ALLOCSIZE - allocp &gt;= n)&#123; <span class=\"comment\">//有足够的空闲空间</span></span><br><span class=\"line\">        allocp += n;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> allocp - n; <span class=\"comment\">//分配前的指针p</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>(void **)是啥, 将指针数组转换成 指向指针数组的指针类型</p>\n<h2 id=\"复杂声明\"><a href=\"#复杂声明\" class=\"headerlink\" title=\"复杂声明\"></a>复杂声明</h2><p>程序dcl是啥</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> **argv</span><br><span class=\"line\">    argv: pointer to pointer to <span class=\"type\">char</span></span><br><span class=\"line\"><span class=\"title function_\">int</span> <span class=\"params\">(*daytab)</span>[13]</span><br><span class=\"line\">    daytab: pointer to <span class=\"built_in\">array</span>[13] of <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"q\"><a href=\"#q\" class=\"headerlink\" title=\"q\"></a>q</h1><p>能不能用gdb显示变量信息呢,结构信息等,比如char和int的区别</p>\n<p>EOF的话,包括哪些</p>\n",
            "tags": [
                "C语言"
            ]
        }
    ]
}