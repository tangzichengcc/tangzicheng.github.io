{
    "version": "https://jsonfeed.org/version/1",
    "title": "唐仔橙 • All posts by \"docker\" tag",
    "description": "喜欢探索世界,在读研究生,计算机爱好者的成长记录",
    "home_page_url": "https://tangzichengcc.github.io",
    "items": [
        {
            "id": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-39-docker%E5%85%A5%E9%97%A8%E5%8F%8Apwn%E5%87%BA%E9%A2%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "url": "https://tangzichengcc.github.io/pwn%E5%85%A5%E9%97%A8-39-docker%E5%85%A5%E9%97%A8%E5%8F%8Apwn%E5%87%BA%E9%A2%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "title": "pwn入门-39-docker入门及pwn出题环境搭建",
            "date_published": "2023-09-16T05:30:16.000Z",
            "content_html": "<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><p>入门参考资料:<a href=\"https://www.runoob.com/docker\">https://www.runoob.com/docker</a></p>\n<p><a href=\"https://yeasy.gitbook.io/docker_practice/\">https://yeasy.gitbook.io/docker_practice/</a></p>\n<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><p>使用官方脚本安装docker</p>\n<p>curl -fsSL <a href=\"https://get.docker.com/\">https://get.docker.com</a> | bash -s docker –mirror Aliyun</p>\n<p>手动安装(不如脚本稳定少出错)</p>\n<p>开启docker </p>\n<p>systemctl enable docker </p>\n<p>systemctl start docker</p>\n<p>测试是否安装成功: docker run –rm hello-world</p>\n<p>hello-world是测试容器, –rm表示退出容器后,自动删除容器</p>\n<h2 id=\"二、使用入门\"><a href=\"#二、使用入门\" class=\"headerlink\" title=\"二、使用入门\"></a>二、使用入门</h2><h3 id=\"1-镜像\"><a href=\"#1-镜像\" class=\"headerlink\" title=\"1.镜像\"></a>1.镜像</h3><ul>\n<li><p>docker images 查看本地镜像</p>\n</li>\n<li><p>docker pull xxxx 拉去镜像, 例如docker pull ubuntu:18.04</p>\n</li>\n</ul>\n<p>​\t\t不给镜像仓库地址的话, 会从 Docker Hub （<code>docker.io</code>）获取镜像, 而镜像名称是 <code>ubuntu:18.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>18.04</code> 的镜像。<code>docker pull</code>命令的输出结果最后一行给出了镜像的完整名称，例如： <code>docker.io/library/ubuntu:18.04</code>。</p>\n<ul>\n<li><p>docker rmi xxxx  删除镜像</p>\n</li>\n<li><p>docker build -t xxxx .  用dockerfile构建镜像</p>\n</li>\n</ul>\n<h3 id=\"2-容器\"><a href=\"#2-容器\" class=\"headerlink\" title=\"2.容器\"></a>2.容器</h3><ul>\n<li><p>docker ps 查看容器 -a查看所有(包括停止的)</p>\n</li>\n<li><p>docker run -it ubuntu:18.04 bash</p>\n</li>\n</ul>\n<p>​\t-it: -i 交互式操作 -t 终端 </p>\n<p>​\tbash 命令,希望有交互式shell,所以用这个,或者&#x2F;bin&#x2F;sh之类的</p>\n<ul>\n<li>docker stop xxx  停止容器</li>\n</ul>\n<h1 id=\"CTF-pwn出题环境搭建\"><a href=\"#CTF-pwn出题环境搭建\" class=\"headerlink\" title=\"CTF-pwn出题环境搭建\"></a>CTF-pwn出题环境搭建</h1><p>​\t\tpwn出题主要用到了 <a href=\"https://github.com/Eadom/ctf_xinetd\">https://github.com/Eadom/ctf_xinetd</a></p>\n<p>环境搭建</p>\n<p><a href=\"https://blog.csdn.net/weixin_53757397/article/details/128489015\">https://blog.csdn.net/weixin_53757397/article/details/128489015</a></p>\n<p><a href=\"https://blog.csdn.net/mylyylmy/article/details/79917776\">https://blog.csdn.net/mylyylmy/article/details/79917776</a></p>\n<p><a href=\"https://nocbtm.github.io/2019/09/25/pwn%E9%A2%98%E7%9A%84%E6%90%AD%E5%BB%BA/\">https://nocbtm.github.io/2019/09/25/pwn题的搭建/</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_53757397/article/details/128489015\">https://blog.csdn.net/weixin_53757397/article/details/128489015</a> 感觉有点啰嗦,不一定需要上传docker仓库</p>\n<p><a href=\"https://blog.csdn.net/weixin_46521144/article/details/120572274\">https://blog.csdn.net/weixin_46521144/article/details/120572274</a> 排错</p>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><p>git clone <a href=\"https://github.com/Eadom/ctf_xinetd.git\">https://github.com/Eadom/ctf_xinetd.git</a></p>\n<ol>\n<li>将编译好的libc、flag、题目文件拷贝到bin目录下</li>\n</ol>\n<p>​\t\t如果需要特定的libc</p>\n<p>​\t\t提前patchelf好,把libc文件页拷贝到ctf_xinetd的bin目录下</p>\n<p>​\t\tpatchelf –set-interpreter .&#x2F;2.31-0ubuntu9_amd64&#x2F;ld-linux-x86-64.so.2 .&#x2F;timu<br>​\t\tpatchelf –set-rpath .&#x2F;2.31-0ubuntu9_amd64&#x2F; .&#x2F;timu</p>\n<p>​\t\t用绝对路径不知道为什么不行????</p>\n<ol start=\"2\">\n<li>创建docker-compose.yml文件,这里的3389改成题目要映射的端口(物理机的),9999是docker里面的端口,image名字要和后面创建的docker images名字一样</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">    pwn:</span><br><span class=\"line\">        build: ./</span><br><span class=\"line\">        image: pwn1 #这里修改的是images名,将和 docker build -t &quot;pwn1&quot; . 该命令有关</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">            - &quot;3389:9999&quot;</span><br><span class=\"line\">        pids_limit: 1024</span><br><span class=\"line\">        # cpus: 0.5</span><br><span class=\"line\">        restart: unless-stopped</span><br><span class=\"line\">        # privileged: true</span><br></pre></td></tr></table></figure>\n\n<p>Dockerfile</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:<span class=\"number\">22.04</span> 根据情况修改版本</span><br><span class=\"line\">  </span><br><span class=\"line\">RUN cp -R /lib* /home/ctf &amp;&amp;\\  版本高于<span class=\"number\">18.04</span>要删除这一句??为啥呢??</span><br><span class=\"line\">  \tcp -R /usr/lib* /home/ctf </span><br></pre></td></tr></table></figure>\n\n\n\n<p>ctf.xinetd</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service ctf</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    disable = no</span><br><span class=\"line\">    socket_type = stream</span><br><span class=\"line\">    protocol    = tcp</span><br><span class=\"line\">    wait        = no</span><br><span class=\"line\">    user        = root</span><br><span class=\"line\">    type        = UNLISTED</span><br><span class=\"line\">    port        = <span class=\"number\">9999</span></span><br><span class=\"line\">    bind        = <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">    server      = /usr/sbin/chroot</span><br><span class=\"line\">    <span class=\"meta\"># replace helloworld to your program</span></span><br><span class=\"line\">    server_args = --userspec=<span class=\"number\">1000</span>:<span class=\"number\">1000</span> /home/ctf ./timu   这里timu是题目bin文件名</span><br><span class=\"line\">    banner_fail = /etc/banner_fail</span><br><span class=\"line\">    <span class=\"meta\"># safety options</span></span><br><span class=\"line\">    per_source\t= <span class=\"number\">10</span> <span class=\"meta\"># the maximum instances of this service per source IP address</span></span><br><span class=\"line\">    rlimit_cpu\t= <span class=\"number\">20</span> <span class=\"meta\"># the maximum number of CPU seconds that the service may use</span></span><br><span class=\"line\">    #rlimit_as  = <span class=\"number\">1024</span>M <span class=\"meta\"># the Address Space resource limit for the service</span></span><br><span class=\"line\">    #access_times = <span class=\"number\">2</span>:<span class=\"number\">00</span><span class=\"number\">-9</span>:<span class=\"number\">00</span> <span class=\"number\">12</span>:<span class=\"number\">00</span><span class=\"number\">-24</span>:<span class=\"number\">00</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>制作镜像</li>\n</ol>\n<p>​\t\t建立容器,pwn1名字就是镜像的名字</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t <span class=\"string\">&quot;pwn1&quot;</span> .</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4.创建运行容器</p>\n<p>​\t\tdocker run -d -p 0.0.0.0:3389:9999 pwn1 运行容器,这里就部署好了,可以进行打了,3389是暴露出来的端口</p>\n<p>​\t\tdocker exec -it 16a224caf905 &#x2F;bin&#x2F;bash  和容器进行交互,(这个是退出后再次进入,和run时候-it不一样)</p>\n<p>文件拷贝 <a href=\"https://blog.csdn.net/sunhuaqiang1/article/details/88354410\">https://blog.csdn.net/sunhuaqiang1/article/details/88354410</a></p>\n<p>docker cp &#x2F;root&#x2F;chuti&#x2F;uaf&#x2F;timu pwncp:&#x2F;home&#x2F;ctf&#x2F;timu</p>\n<p><a href=\"https://blog.csdn.net/yue7603835/article/details/122456650\">https://blog.csdn.net/yue7603835/article/details/122456650</a></p>\n",
            "tags": [
                "PWN入门",
                "docker"
            ]
        }
    ]
}