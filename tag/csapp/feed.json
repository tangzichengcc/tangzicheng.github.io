{
    "version": "https://jsonfeed.org/version/1",
    "title": "唐仔橙 • All posts by \"csapp\" tag",
    "description": "喜欢探索世界,在读研究生,计算机爱好者的成长记录",
    "home_page_url": "https://tangzichengcc.github.io",
    "items": [
        {
            "id": "https://tangzichengcc.github.io/csapp-bomb-lab/",
            "url": "https://tangzichengcc.github.io/csapp-bomb-lab/",
            "title": "csapp-bomb_lab",
            "date_published": "2023-05-06T14:02:35.000Z",
            "content_html": "<p><a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">http://csapp.cs.cmu.edu/3e/labs.html</a></p>\n<p>​\t\t这个实验是一个逆向实验,主要是逆向代码,理解程序逻辑.主要是静态分析,有一些东西不好理解可以借助动态分析来调试.</p>\n<p>​\t\t题目主要分了六步,以及一个隐藏关卡</p>\n<h1 id=\"阶段一\"><a href=\"#阶段一\" class=\"headerlink\" title=\"阶段一\"></a>阶段一</h1><p>​\t\t直接对比字符串即可,</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">phase_1</span><span class=\"params\">(__int64 a1)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  result = strings_not_equal(a1, <span class=\"string\">&quot;Border relations with Canada have never been better.&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (_DWORD)result )</span><br><span class=\"line\">    explode_bomb();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"阶段二\"><a href=\"#阶段二\" class=\"headerlink\" title=\"阶段二\"></a>阶段二</h1><p>​\t\t读取六个值,第一个值必须为1. 然后循环处理剩下五个值,这里有一条关键语句,对它的理解非常重要</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(<span class=\"number\">2</span> * *((_DWORD *)v2 - <span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t(_DWORD *)v2这个的意思是把v2这个指针强制转换成 _DWORD类型的指针,然后对v2这个指针-1,其实是-4字节(减去指针指向的数据类型的大小),也就是指向这个指针的前一个数值的指针,然后再加一个 * 得到  这个位置的值,然后再乘2</p>\n<p><img src=\"/csapp-bomb-lab/image-20230506222448681.png\" alt=\"image-20230506222448681\"></p>\n<p>​\t\t综上所述,第一个位置为1,下一个位置是上一个位置的两倍,于是答案:1 2 4 8 16 32</p>\n<h1 id=\"阶段三\"><a href=\"#阶段三\" class=\"headerlink\" title=\"阶段三\"></a>阶段三</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (<span class=\"type\">int</span>)__isoc99_sscanf(a1, <span class=\"string\">&quot;%d %d&quot;</span>, &amp;v2, &amp;v3) &lt;= <span class=\"number\">1</span> )</span><br><span class=\"line\">   explode_bomb();</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t把a1按照空格分开两个数,分别给v2,v3, v2对应的值和v3一样即可,有多个解, 如:0 207</p>\n<h1 id=\"阶段四\"><a href=\"#阶段四\" class=\"headerlink\" title=\"阶段四\"></a>阶段四</h1><p>​\t\tscanf的返回值是 匹配上的个数,所以阶段三可以只输入v2,那能有解吗??????</p>\n<p>​\t\t这里有个递归调用,result和v3都要为0,v3直接输入0即可,result呢,进func4能发现func4里的v3和我们输出的v2只要相等,就会返回0,v3的值是固定的7,所以v2输入7即可.</p>\n<p>​\t\t有个注意的点就是看清楚条件,这个条件是都需要为0才能过关,刚开始以为都不能为0(思维惯性?)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (_DWORD)result || v3 )</span><br><span class=\"line\">  explode_bomb();</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t7 0 </p>\n<h1 id=\"阶段五\"><a href=\"#阶段五\" class=\"headerlink\" title=\"阶段五\"></a>阶段五</h1><p>​\t\t输入一个长度为6的字符串,每个值与0xf进行与操作,然后取array_3449数组中相应的值,看是否与flyers字符串里对应的字符匹配</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)string_length(a1) != <span class=\"number\">6</span> )</span><br><span class=\"line\">  explode_bomb();</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0LL</span>; i != <span class=\"number\">6</span>; ++i )</span><br><span class=\"line\">  v3[i] = array_3449[*(_BYTE *)(a1 + i) &amp; <span class=\"number\">0xF</span>];</span><br><span class=\"line\">v3[<span class=\"number\">6</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)strings_not_equal(v3, <span class=\"string\">&quot;flyers&quot;</span>) )</span><br><span class=\"line\">  explode_bomb();</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t逆向过来想的话,先找到array_3449数组中对应的值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_3449: ?aduiersnfotvbyl</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">9</span> f</span><br><span class=\"line\"><span class=\"number\">15</span> l</span><br><span class=\"line\"><span class=\"number\">14</span> y</span><br><span class=\"line\"><span class=\"number\">5</span>  e</span><br><span class=\"line\"><span class=\"number\">6</span>  r</span><br><span class=\"line\"><span class=\"number\">7</span>  s</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t然后就是 x &amp; 0xf等于这个值即可,&amp;0xf的话,就是取后四位</p>\n<p>​\t\t1001 末四位为9,其余任意 以此类推<br>​\t\t1111<br>​\t\t1110<br>​\t\t0101<br>​\t\t0110<br>​\t\t0111</p>\n<p>​\t\t一种解:ionefg 解不唯一,只要末位符合即可</p>\n<h1 id=\"阶段六\"><a href=\"#阶段六\" class=\"headerlink\" title=\"阶段六\"></a>阶段六</h1><p>​\t\t读入6个整数,都小于7,且每个都不相等,不会是0和负数,因为这样话无符号数会很大,所以就是1 2 3 4 5 6</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  v1 = v15;</span><br><span class=\"line\">  read_six_numbers(a1, (__int64)v15);</span><br><span class=\"line\">  v2 = <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(*v1 - <span class=\"number\">1</span>) &gt; <span class=\"number\">5</span> )</span><br><span class=\"line\">      explode_bomb();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ++v2 == <span class=\"number\">6</span> )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    v3 = v2;</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( *v1 == v15[v3] )</span><br><span class=\"line\">        explode_bomb();</span><br><span class=\"line\">      ++v3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( v3 &lt;= <span class=\"number\">5</span> );</span><br><span class=\"line\">    ++v1;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t注意结合顺序,这里不是读的v1-1,而是v1地址取值后-1</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(*v1 - <span class=\"number\">1</span>) &gt; <span class=\"number\">5</span> )</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t调整顺序</p>\n<p>​\t\t1 2 3 4 5 6 &#x3D;&gt;  6 5 4 3 2 1</p>\n<p>​\t\t1 3 2 4 6 5 &#x3D;&gt; 6 4 5 3 1 2</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v4 = (<span class=\"type\">char</span> *)v15;</span><br><span class=\"line\"> <span class=\"keyword\">do</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   *(_DWORD *)v4 = <span class=\"number\">7</span> - *(_DWORD *)v4;</span><br><span class=\"line\">   v4 += <span class=\"number\">4</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">while</span> ( v4 != &amp;v16 );</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t下一步把这些数放到一个链表中,就按照数的顺序,匹配给对应的链表的结点,比如node2就匹配2,<font color=\"red\">v17数组中的顺序,就按照给定的这个顺序来</font></p>\n<p>​\t\t注意这个node是一个16位的数据,前8位代表了自己的值,后8位(v6[1])连接下一个node(指针,指向下一个node)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0LL</span>; i != <span class=\"number\">24</span>; i += <span class=\"number\">4LL</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  v8 = v15[i / <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v8 &lt;= <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v6 = &amp;node1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v7 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    v6 = &amp;node1;</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v6 = (_QWORD *)v6[<span class=\"number\">1</span>];</span><br><span class=\"line\">      ++v7;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( v7 != v8 );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *(__int64 *)((<span class=\"type\">char</span> *)&amp;v17 + <span class=\"number\">2</span> * i) = (__int64)v6;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t举例来说,加入给定的顺序是 1 2 3 6 5 4 ,经过前面变换后得到6 5 4 1 2 3,会按照对应的顺序,找到它在链表中的结点的位置,也就是6 5 4 1 2 3,赋值给v17</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v9 = v17;</span><br><span class=\"line\">v10 = &amp;v18;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( j = v17; ; j = v12 )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  v12 = *(_QWORD *)v10;</span><br><span class=\"line\">  *(_QWORD *)(j + <span class=\"number\">8</span>) = *(_QWORD *)v10;</span><br><span class=\"line\">  v10 += <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v10 == &amp;v19 )</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*(_QWORD *)(v12 + <span class=\"number\">8</span>) = <span class=\"number\">0LL</span>;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t翻译一下,会发现,这里其实什么也没干….就是单纯为了增加思考量.</p>\n<p>​\t\t在第一次循环中,*(_QWORD *)(j + 8) &#x3D; *(_QWORD *)v10;,因为j+8就是v18,v10也是v18,相当于v18&#x3D;v18</p>\n<p>​\t\t后面的迭代这条语句也没用,因为在后面的迭代中,j &#x3D; v12 &#x3D; v10, 第一轮中v10&#x3D;v10+8, 所以在第二次迭代中,这里的语句就成了v10+8 &#x3D; v10+8, 后面也一样,每一轮的*(_QWORD *)(j + 8) &#x3D; *(_QWORD *)v10; 两边都是相等的.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v13 = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  result = **(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> **)(v9 + <span class=\"number\">8</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *(_DWORD *)v9 &lt; (<span class=\"type\">int</span>)result )</span><br><span class=\"line\">    explode_bomb();</span><br><span class=\"line\">  v9 = *(_QWORD *)(v9 + <span class=\"number\">8</span>);</span><br><span class=\"line\">  --v13;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( v13 );</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t然后来到最后一步,v9也就是v17,存储着node链表的顺序,</p>\n<p>​\t\t注意这条语句,先将v9加8,也就是获取存储的第二个node的地址,unsigned int **代表指向指针的指针类型,二级指针,因为在v9也就是v17中,存储的是一个数的指针的指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = **(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> **)(v9 + <span class=\"number\">8</span>);     </span><br></pre></td></tr></table></figure>\n\n<p>​\t\t看下面的例子,对这个二级指针解引用,刚开始指针指向0x6032f8,第一次解引用取得0x603300,也就是node结点的的下一个结点的地址,再解引用,得到下一个结点存储的值0x4000002b3</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; teles $rbx</span><br><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ rbx <span class=\"number\">0x6032f0</span> (node3) ◂— <span class=\"number\">0x30000039c</span></span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0008</span>│     <span class=\"number\">0x6032f8</span> (node3+<span class=\"number\">8</span>) —▸ <span class=\"number\">0x603300</span> (node4) ◂— <span class=\"number\">0x4000002b3</span></span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( *(_DWORD *)v9 &lt; (<span class=\"type\">int</span>)result )</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t这里的比较大小,<font color=\"red\">比较的是结点的大小</font>,需要前面的大于后面的,例如</p>\n<p>​\t\t如果是在v9中是1 2 3 4 5 6的顺序的话</p>\n<p>​\t\t取node2 , 需要node2&lt;node1</p>\n<p>​\t\t取node3 , 需要node3&lt;node2</p>\n<p>​\t\t所以要按照node的数值的大小排布一下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0020</span>│         <span class=\"number\">0x7fffffffe3f0</span> —▸ <span class=\"number\">0x6032d0</span> (node1) ◂— <span class=\"number\">0x10000014c</span></span><br><span class=\"line\"><span class=\"number\">05</span>:<span class=\"number\">0028</span>│         <span class=\"number\">0x7fffffffe3f8</span> —▸ <span class=\"number\">0x6032e0</span> (node2) ◂— <span class=\"number\">0x2000000a8</span></span><br><span class=\"line\"><span class=\"number\">06</span>:<span class=\"number\">0030</span>│         <span class=\"number\">0x7fffffffe400</span> —▸ <span class=\"number\">0x6032f0</span> (node3) ◂— <span class=\"number\">0x30000039c</span></span><br><span class=\"line\"><span class=\"number\">07</span>:<span class=\"number\">0038</span>│         <span class=\"number\">0x7fffffffe408</span> —▸ <span class=\"number\">0x603300</span> (node4) ◂— <span class=\"number\">0x4000002b3</span></span><br><span class=\"line\">pwndbg&gt;</span><br><span class=\"line\"><span class=\"number\">08</span>:<span class=\"number\">0040</span>│     <span class=\"number\">0x7fffffffe410</span> —▸ <span class=\"number\">0x603310</span> (node5) ◂— <span class=\"number\">0x5000001dd</span></span><br><span class=\"line\"><span class=\"number\">09</span>:<span class=\"number\">0048</span>│     <span class=\"number\">0x7fffffffe418</span> —▸ <span class=\"number\">0x603320</span> (node6) ◂— <span class=\"number\">0x6000001bb</span></span><br></pre></td></tr></table></figure>\n\n<p>​\t\t所以顺序应该是 (从大到小) Node 3  4 5 6 1 2 </p>\n<p>​\t\t所以经过转换后的值应该是这个,所以转换前的值是 4 3 2 1 6 5 </p>\n<p>​\t<font color=\"red\">\t可以进行爆破,排列组合就720种</font></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/csapp/boom/bomb# ./bomb file</span><br><span class=\"line\">Welcome to my fiendish little bomb. You have <span class=\"number\">6</span> phases with</span><br><span class=\"line\">which to blow yourself up. Have a nice day!</span><br><span class=\"line\">Phase <span class=\"number\">1</span> defused. How about the next one?</span><br><span class=\"line\">That<span class=\"number\">&#x27;</span>s number <span class=\"number\">2.</span>  Keep going!</span><br><span class=\"line\">Halfway there!</span><br><span class=\"line\">So you got that one.  Try this one.</span><br><span class=\"line\">Good work!  On to the next...</span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">3</span> <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">6</span> <span class=\"number\">5</span></span><br><span class=\"line\">Congratulations! Yo<span class=\"string\">u&#x27;ve defused the bomb!</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"隐藏关卡\"><a href=\"#隐藏关卡\" class=\"headerlink\" title=\"隐藏关卡\"></a>隐藏关卡</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( num_input_strings == <span class=\"number\">6</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)__isoc99_sscanf(&amp;unk_603870, <span class=\"string\">&quot;%d %d %s&quot;</span>, &amp;v1, &amp;v2, v3) == <span class=\"number\">3</span></span><br><span class=\"line\">    &amp;&amp; !(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)strings_not_equal(v3, <span class=\"string\">&quot;DrEvil&quot;</span>) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Curses, you&#x27;ve found the secret phase!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;But finding it and solving it are quite different...&quot;</span>);</span><br><span class=\"line\">    secret_phase();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Congratulations! You&#x27;ve defused the bomb!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t可以看到,进入隐藏关卡需要num_input_strings &#x3D;&#x3D; 6,从read_line函数可以知道,这个值是每过一关+1的,所以也就是过了第六关后开启.</p>\n<p>​\t\t需要获取unk_603870处的值,并且v3需要等于DrEvil,那么我们怎么修改unk_603870的值呢?</p>\n<p>​\t\t在read_line函数中的skip函数中能够看到,我们每次输入的值,其实都是输入到了80*num_input_strings + 0x603780这个位置,</p>\n<p>​\t\t而num_input_strings是每过一关+1的,0x603870 - 0x603780 &#x3D; 240,也就是过了3关后,第四关写入的值,就写入到这里了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">skip</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> *v0; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *v1; <span class=\"comment\">// rbx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v0 = fgets((<span class=\"type\">char</span> *)(<span class=\"number\">80LL</span> * num_input_strings + <span class=\"number\">6305664</span>), <span class=\"number\">80</span>, infile);</span><br><span class=\"line\">    v1 = v0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( v0 &amp;&amp; (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)blank_line(v0) );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6305664</span> = <span class=\"number\">0x603780</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​\t\t所以在第四步后面加上DrEvil就可以了7 0 DrEvil  因为在第四步求解的时候是取前两个值,所以不影响正常的解答</p>\n<p>​\t\t然后就进入下一步了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> __int64 <span class=\"title function_\">secret_phase</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *line; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> v1; <span class=\"comment\">// ebx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  line = read_line();</span><br><span class=\"line\">  v1 = strtol(line, <span class=\"number\">0LL</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v1 - <span class=\"number\">1</span> &gt; <span class=\"number\">0x3E8</span> )</span><br><span class=\"line\">    explode_bomb();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fun7(&amp;n1, v1) != <span class=\"number\">2</span> )</span><br><span class=\"line\">    explode_bomb();</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Wow! You&#x27;ve defused the secret stage!&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> phase_defused();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>strtol 把参数 line 所指向的字符串根据给定的 <strong>base</strong> 转换为一个长整数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">fun7</span><span class=\"params\">(__int64 a1, __int64 a2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !a1 )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0xFFFFFFFF</span>LL;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *(_DWORD *)a1 &gt; (<span class=\"type\">int</span>)a2 )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fun7(*(_QWORD *)(a1 + <span class=\"number\">8</span>), a2);</span><br><span class=\"line\">  result = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *(_DWORD *)a1 != (_DWORD)a2 )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fun7(*(_QWORD *)(a1 + <span class=\"number\">16</span>), a2) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​\t\t最终要拿到2, 可以是2*1 所以先进入上面那个if,然后下面的if, 第三次调用fun7要得0</p>\n<p>​\t\t所以</p>\n<p>​\t\t1.a2先&lt; 0x24 然后 a1+8的值是8, </p>\n<p>​\t\t2.a2要&gt;8进入第二个分支</p>\n<p>​\t\t3.然后通过相等得到0, a1+0x16的话,就得到了0x16, 所以是0x16!</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM<span class=\"number\">-24</span><span class=\"number\">-10</span>-ubuntu:/home/ubuntu/csapp/boom/bomb# ./bomb file</span><br><span class=\"line\">Welcome to my fiendish little bomb. You have <span class=\"number\">6</span> phases with</span><br><span class=\"line\">which to blow yourself up. Have a nice day!</span><br><span class=\"line\">Phase <span class=\"number\">1</span> defused. How about the next one?</span><br><span class=\"line\">That<span class=\"number\">&#x27;</span>s number <span class=\"number\">2.</span>  Keep going!</span><br><span class=\"line\">Halfway there!</span><br><span class=\"line\">So you got that one.  Try this one.</span><br><span class=\"line\">Good work!  On to the next...</span><br><span class=\"line\">Curses, yo<span class=\"string\">u&#x27;ve found the secret phase!</span></span><br><span class=\"line\"><span class=\"string\">But finding it and solving it are quite different...</span></span><br><span class=\"line\"><span class=\"string\">22</span></span><br><span class=\"line\"><span class=\"string\">Wow! You&#x27;</span>ve defused the secret stage!</span><br><span class=\"line\">Congratulations! Yo<span class=\"string\">u&#x27;ve defused the bomb!</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>调试文件,如果没有这个文件呢&#x2F;?</p>\n",
            "tags": [
                "csapp"
            ]
        }
    ]
}